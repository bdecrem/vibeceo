{
  "project": "VibeCEO Platform",
  "lastUpdated": "2025-06-20",
  "keyPatterns": {
    "architecture": {
      "interfaceIndependence": "Multiple interfaces (SMS, Web) share core processing without tight coupling",
      "zeroRiskApproach": "New interfaces reuse existing infrastructure rather than duplicating logic", 
      "databasePolling": "Web interface polls database for real-time results from async processes",
      "typescriptMicroservices": "WTAF processing uses TypeScript engine (sms-bot/engine/) instead of Python monitor.py",
      "productionSeparation": "SMS bot (port 3030) and TypeScript engine run as separate coordinated services",
      "fileQueueSystem": "Engine monitors data/wtaf/ directory for processing requests"
    },
    "implementation": {
      "httpToSmsbridge": "Web chat sends HTTP POST to SMS webhook endpoint for processing",
      "separateMessages": "Chat responses broken into individual bubbles rather than single streaming message",
      "clickableLinks": "Markdown links rendered as blue clickable URLs in web interface"
    },
    "userExperience": {
      "smsFirst": "SMS remains primary interface - web is alternative, not replacement", 
      "ghostConversations": "Web requests appear as SMS on real phone numbers for consistency",
      "realTimeProgress": "Users see step-by-step progress rather than waiting for final result"
    },
    "fileStructure": {
      "webSubdirectory": "All web platform files in /web/ subdirectory",
      "sharedResources": "Database and core logic shared between SMS and web",
      "componentSeparation": "WTAF chat components separate from main dashboard chat"
    }
  },
  "successfulApproaches": {
    "databaseIntegration": "Supabase client in web API for polling wtaf_content table",
    "streamingResponses": "Server-Sent Events for real-time chat experience", 
    "errorHandling": "Graceful degradation when database polling times out",
    "markdownRendering": "Custom function to convert markdown links to clickable elements",
    "typescriptRefactoring": "Migrated Python monitor.py to TypeScript microservices for better maintainability",
    "editCommandArchitecture": "Fixed edit commands by filtering database queries with both user_slug AND app_slug",
    "productionDeployment": "Separate Railway build and start phases for optimal TypeScript compilation"
  },
  "avoidedPitfalls": {
    "infrastructureChanges": "Did not modify working SMS bot during TypeScript migration",
    "codeduplication": "Reused existing processing pipeline rather than rebuilding", 
    "complexIntegration": "Simple HTTP calls rather than complex service-to-service communication",
    "productionMismatch": "Avoided running different engines in dev vs production environments",
    "databaseAmbiguity": "Fixed edit commands by using precise user+app filtering instead of app-only queries",
    "processManagement": "Ensured only TypeScript engine runs in production, not both Python and TypeScript"
  },
  "userPreferences": {
    "communication": "Non-technical explanations preferred",
    "decisions": "Direct, definitive explanations without hedging",
    "implementation": "Zero-risk approaches that don't break existing functionality"
  }
} 