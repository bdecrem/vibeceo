```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>Tic Tac Toe</title>
    <style>
        body, html {
            margin: 0;
            padding: 0;
            width: 100vw;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
            overflow: hidden;
        }
        #gameBoard {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            grid-template-rows: repeat(3, 1fr);
            gap: 10px;
            width: 90vmin;
            height: 90vmin;
            max-width: 100%;
            max-height: 100%;
        }
        .cell {
            width: 100%;
            height: 100%;
            background-color: #fff;
            border: 2px solid #000;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 10vmin;
            cursor: pointer;
            touch-action: manipulation;
        }
        .cell:active {
            background-color: #ddd;
        }
    </style>
</head>
<body>

<div id="gameBoard">
    <div class="cell" data-index="0"></div>
    <div class="cell" data-index="1"></div>
    <div class="cell" data-index="2"></div>
    <div class="cell" data-index="3"></div>
    <div class="cell" data-index="4"></div>
    <div class="cell" data-index="5"></div>
    <div class="cell" data-index="6"></div>
    <div class="cell" data-index="7"></div>
    <div class="cell" data-index="8"></div>
</div>

<script>
    const boardElement = document.getElementById('gameBoard');
    const cells = Array.from(document.querySelectorAll('.cell'));
    let currentPlayer = 'X';
    let boardState = Array(9).fill('');

    const winningCombinations = [
        [0, 1, 2],
        [3, 4, 5],
        [6, 7, 8],
        [0, 3, 6],
        [1, 4, 7],
        [2, 5, 8],
        [0, 4, 8],
        [2, 4, 6]
    ];

    function handleClick(event) {
        const cell = event.target;
        const index = cell.getAttribute('data-index');

        if (boardState[index] !== '' || checkWinner()) {
            return;
        }

        boardState[index] = currentPlayer;
        cell.textContent = currentPlayer;

        if (checkWinner()) {
            setTimeout(() => alert(`${currentPlayer} wins!`), 100);
        } else if (boardState.every(cell => cell !== '')) {
            setTimeout(() => alert('Draw!'), 100);
        } else {
            currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
        }
    }

    function checkWinner() {
        return winningCombinations.some(combination => {
            return combination.every(index => {
                return boardState[index] === currentPlayer;
            });
        });
    }

    function resetGame() {
        boardState = Array(9).fill('');
        cells.forEach(cell => cell.textContent = '');
        currentPlayer = 'X';
    }

    boardElement.addEventListener('click', handleClick);
    window.addEventListener('resize', () => boardElement.style.height = boardElement.style.width);
    window.addEventListener('orientationchange', () => boardElement.style.height = boardElement.style.width);
    window.addEventListener('keydown', (event) => {
        if (event.key === 'r') resetGame();
    });
</script>

</body>
</html>
```