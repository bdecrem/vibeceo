Here's a nostalgic MacPaint-style public drawing app with shared gallery and mystery effects:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>WTAF Paint</title>
    <style>
        * {
            box-sizing: border-box;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
        }

        body {
            margin: 0;
            padding: 20px;
            background: #fefef5;
            min-height: 100vh;
        }

        .app-container {
            max-width: 800px;
            margin: 0 auto;
            text-align: center;
        }

        h1 {
            color: #FF4B4B;
            font-size: 24px;
            text-transform: uppercase;
            margin-bottom: 20px;
        }

        #user-status {
            font-size: 16px;
            margin-bottom: 20px;
            color: #666;
        }

        .tools {
            background: white;
            border: 2px solid #FFD63D;
            border-radius: 12px;
            padding: 15px;
            margin-bottom: 20px;
            box-shadow: 4px 4px 0 #C9C2F9;
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            justify-content: center;
        }

        button {
            background: #6ECBFF;
            border: none;
            border-radius: 20px;
            color: white;
            padding: 12px 20px;
            font-size: 16px;
            cursor: pointer;
            min-height: 44px;
            min-width: 44px;
        }

        button:hover {
            opacity: 0.9;
        }

        #mystery {
            background: #FF4B4B;
            font-weight: bold;
        }

        #canvas {
            background: white;
            border: 2px solid #FFD63D;
            border-radius: 12px;
            box-shadow: 4px 4px 0 #C9C2F9;
            touch-action: none;
            margin-bottom: 20px;
        }

        .color-picker {
            width: 44px;
            height: 44px;
            padding: 0;
            border: 2px solid #6ECBFF;
            border-radius: 8px;
        }

        .thickness {
            width: 80px;
        }

        .gallery {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 20px;
            margin-top: 40px;
        }

        .gallery-item {
            background: white;
            border: 2px solid #FFD63D;
            border-radius: 12px;
            padding: 10px;
            box-shadow: 4px 4px 0 #C9C2F9;
        }

        .gallery-item img {
            width: 100%;
            border-radius: 8px;
            margin-bottom: 10px;
        }

        .gallery-item p {
            margin: 5px 0;
            font-size: 16px;
            color: #666;
        }

        @media (max-width: 768px) {
            .tools {
                flex-direction: column;
            }
            
            button {
                width: 100%;
            }

            .color-picker {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <h1>üé® WTAF Paint</h1>
        <div id="user-status">Anonymous User: <span id="current-user-label"></span></div>

        <div class="tools">
            <button id="pencil">‚úèÔ∏è Pencil</button>
            <button id="brush">üñåÔ∏è Brush</button>
            <input type="color" class="color-picker" value="#000000">
            <input type="range" class="thickness" min="1" max="50" value="5">
            <button id="clear">üóëÔ∏è Clear</button>
            <button id="save">üíæ Share</button>
            <button id="mystery">üé≤ MYSTERY</button>
        </div>

        <canvas id="canvas" width="400" height="400"></canvas>

        <h2>üñºÔ∏è Gallery Wall</h2>
        <div class="gallery" id="gallery"></div>
    </div>

    <script>
        let currentUser = null;
        let isDrawing = false;
        let tool = 'pencil';
        
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');
        const gallery = document.getElementById('gallery');

        // Initialize canvas
        ctx.lineCap = 'round';
        ctx.lineJoin = 'round';
        ctx.strokeStyle = '#000000';
        ctx.lineWidth = 5;

        // Mystery effects
        const mysteryEffects = [
            () => { // Rainbow mode
                let hue = 0;
                setInterval(() => {
                    ctx.strokeStyle = `hsl(${hue}, 100%, 50%)`;
                    hue = (hue + 1) % 360;
                }, 50);
            },
            () => { // Mirror mode
                ctx.translate(canvas.width, 0);
                ctx.scale(-1, 1);
            },
            () => { // Glow effect
                ctx.shadowBlur = 15;
                ctx.shadowColor = 'rgba(0, 0, 255, 0.5)';
            },
            () => { // Sketchy effect
                ctx.lineWidth = 1;
                const originalStroke = ctx.stroke.bind(ctx);
                ctx.stroke = () => {
                    for(let i = 0; i < 5; i++) {
                        ctx.translate(Math.random()*4-2, Math.random()*4-2);
                        originalStroke();
                        ctx.setTransform(1,0,0,1,0,0);
                    }
                };
            },
            () => { // Neon effect
                ctx.strokeStyle = '#00ff00';
                ctx.shadowBlur = 20;
                ctx.shadowColor = '#00ff00';
            }
        ];

        // Drawing functions
        function startDrawing(e) {
            isDrawing = true;
            draw(e);
        }

        function stopDrawing() {
            isDrawing = false;
            ctx.beginPath();
        }

        function draw(e) {
            if (!isDrawing) return;

            const rect = canvas.getBoundingClientRect();
            const x = (e.clientX || e.touches[0].clientX) - rect.left;
            const y = (e.clientY || e.touches[0].clientY) - rect.top;

            if (tool === 'brush') {
                ctx.lineWidth = parseInt(document.querySelector('.thickness').value) * 2;
                ctx.globalAlpha = 0.5;
            } else {
                ctx.lineWidth = parseInt(document.querySelector('.thickness').value);
                ctx.globalAlpha = 1;
            }

            ctx.lineTo(x, y);
            ctx.stroke();
            ctx.beginPath();
            ctx.moveTo(x, y);
        }

        // Event listeners
        canvas.addEventListener('mousedown', startDrawing);
        canvas.addEventListener('mousemove', draw);
        canvas.addEventListener('mouseup', stopDrawing);
        canvas.addEventListener('mouseleave', stopDrawing);
        canvas.addEventListener('touchstart', startDrawing);
        canvas.addEventListener('touchmove', draw);
        canvas.addEventListener('touchend', stopDrawing);

        document.getElementById('pencil').addEventListener('click', () => tool = 'pencil');
        document.getElementById('brush').addEventListener('click', () => tool = 'brush');
        document.querySelector('.color-picker').addEventListener('input', (e) => {
            ctx.strokeStyle = e.target.value;
        });

        document.getElementById('clear').addEventListener('click', () => {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
        });

        document.getElementById('mystery').addEventListener('click', () => {
            const effect = mysteryEffects[Math.floor(Math.random() * mysteryEffects.length)];
            effect();
        });

        document.getElementById('save').addEventListener('click', async () => {
            const imageData = canvas.toDataURL('image/png');
            await save('painting', {
                image: imageData,
                timestamp: new Date().toISOString()
            });
            loadLatestData();
        });

        // Load paintings
        async function loadLatestData() {
            const paintings = await load('painting');
            gallery.innerHTML = '';
            
            paintings.sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
                .slice(0, 12)
                .forEach(painting => {
                    const item = document.createElement('div');
                    item.className = 'gallery-item';
                    item.innerHTML = `
                        <img src="${painting.image}" alt="Painting">
                        <p>by ${painting.author}</p>
                        <p>${new Date(painting.created_at).toLocaleString()}</p>
                    `;
                    gallery.appendChild(item);
                });
        }

        // Initialize public mode and polling
        let pollingInterval;

        function startPolling() {
            pollingInterval = setInterval(() => loadLatestData(), 2000);
        }

        async function initPublicMode() {
            currentUser = await generateAnonymousUser();
            if (currentUser?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                document.getElementById('current-user-label').textContent = currentUser.userLabel;
                startPolling();
                loadLatestData();
            }
        }

        initPublicMode();
    </script>
</body>
</html>