```html
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Tetris</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            background: linear-gradient(135deg, #1a1a2e, #16213e);
            font-family: Arial, sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            overflow: hidden;
            touch-action: none;
        }
        #gameCanvas {
            display: block;
            background: #0f3460;
        }
        #controls {
            position: fixed;
            bottom: 0;
            width: 100%;
            height: 120px;
            background: rgba(0, 0, 0, 0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        .control-btn {
            width: 60px;
            height: 60px;
            margin: 10px;
            background: rgba(255, 255, 255, 0.2);
            border: 2px solid white;
            border-radius: 10px;
            display: flex;
            justify-content: center;
            align-items: center;
            color: white;
            font-size: 24px;
            user-select: none;
            cursor: pointer;
        }
        .screen {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: calc(100% - 120px);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            color: white;
            text-align: center;
            z-index: 500;
            background: rgba(15, 52, 96, 0.9);
        }
        #gameScreen { display: none; }
        #endScreen { display: none; }
        button {
            background: #e94560;
            color: white;
            border: none;
            padding: 15px 30px;
            font-size: 18px;
            border-radius: 30px;
            margin-top: 20px;
            cursor: pointer;
        }
        h1 { font-size: 48px; margin: 0; }
        h2 { font-size: 36px; margin: 0; }
        p { font-size: 20px; margin: 10px 0; }
        #scoreDisplay {
            position: absolute;
            top: 20px;
            left: 20px;
            color: white;
            font-size: 24px;
            z-index: 100;
        }
    </style>
</head>
<body>
    <div id="scoreDisplay">Score: 0</div>
    
    <div id="startScreen" class="screen">
        <h1>üß± TETRIS</h1>
        <p>Stack the blocks! Clear lines to score points.</p>
        <button id="startBtn">PLAY</button>
    </div>
    
    <div id="gameScreen">
        <canvas id="gameCanvas"></canvas>
    </div>
    
    <div id="endScreen" class="screen">
        <h2>GAME OVER</h2>
        <p>Final Score: <span id="finalScore">0</span></p>
        <button id="restartBtn">PLAY AGAIN</button>
    </div>
    
    <div id="controls">
        <div class="control-btn" id="leftBtn">‚¨ÖÔ∏è</div>
        <div class="control-btn" id="downBtn">‚¨áÔ∏è</div>
        <div class="control-btn" id="rightBtn">‚û°Ô∏è</div>
        <div class="control-btn" id="rotateBtn">üîÑ</div>
    </div>

    <script>
        var canvas = document.getElementById('gameCanvas');
        var ctx = canvas.getContext('2d');
        var scoreDisplay = document.getElementById('scoreDisplay');
        var finalScoreDisplay = document.getElementById('finalScore');
        
        var startScreen = document.getElementById('startScreen');
        var gameScreen = document.getElementById('gameScreen');
        var endScreen = document.getElementById('endScreen');
        var startBtn = document.getElementById('startBtn');
        var restartBtn = document.getElementById('restartBtn');
        
        var leftBtn = document.getElementById('leftBtn');
        var rightBtn = document.getElementById('rightBtn');
        var downBtn = document.getElementById('downBtn');
        var rotateBtn = document.getElementById('rotateBtn');
        
        var controlsHeight = 120;
        var gridWidth = 10;
        var gridHeight = 20;
        var blockSize;
        var grid = [];
        var score = 0;
        var gameInterval;
        var dropInterval = 1000;
        var lastDropTime = 0;
        
        var currentPiece;
        var nextPiece;
        
        var gameRunning = false;
        
        var pieces = [
            { shape: [[1,1,1,1]], color: '#00f0f0' }, // I
            { shape: [[1,1],[1,1]], color: '#f0f000' }, // O
            { shape: [[0,1,0],[1,1,1]], color: '#a000f0' }, // T
            { shape: [[0,1,1],[1,1,0]], color: '#00f000' }, // S
            { shape: [[1,1,0],[0,1,1]], color: '#f00000' }, // Z
            { shape: [[1,0,0],[1,1,1]], color: '#0000f0' }, // J
            { shape: [[0,0,1],[1,1,1]], color: '#f0a000' }  // L
        ];
        
        function init() {
            resizeCanvas();
            createGrid();
            resetGame();
            window.addEventListener('resize', resizeCanvas);
            setupControls();
            requestAnimationFrame(gameLoop);
        }
        
        function resizeCanvas() {
            var width = window.innerWidth;
            var height = window.innerHeight - controlsHeight;
            
            var dpr = window.devicePixelRatio || 1;
            canvas.width = width * dpr;
            canvas.height = height * dpr;
            canvas.style.width = width + 'px';
            canvas.style.height = height + 'px';
            ctx.scale(dpr, dpr);
            
            blockSize = Math.min(width / gridWidth, height / gridHeight);
        }
        
        function createGrid() {
            grid = [];
            for (var y = 0; y < gridHeight; y++) {
                grid[y] = [];
                for (var x = 0; x < gridWidth; x++) {
                    grid[y][x] = 0;
                }
            }
        }
        
        function resetGame() {
            createGrid();
            score = 0;
            updateScore();
            dropInterval = 1000;
            spawnPiece();
            gameRunning = true;
        }
        
        function spawnPiece() {
            currentPiece = nextPiece || createRandomPiece();
            nextPiece = createRandomPiece();
            
            currentPiece.x = Math.floor(gridWidth / 2) - Math.floor(currentPiece.shape[0].length / 2);
            currentPiece.y = 0;
            
            if (checkCollision()) {
                gameOver();
            }
        }
        
        function createRandomPiece() {
            var piece = JSON.parse(JSON.stringify(pieces[Math.floor(Math.random() * pieces.length)]));
            return piece;
        }
        
        function rotatePiece() {
            if (!currentPiece) return;
            
            var originalShape = currentPiece.shape;
            var rows = originalShape.length;
            var cols = originalShape[0].length;
            
            var rotated = [];
            for (var i = 0; i < cols; i++) {
                rotated[i] = [];
                for (var j = 0; j < rows; j++) {
                    rotated[i][j] = originalShape[rows - 1 - j][i];
                }
            }
            
            var original = currentPiece.shape;
            currentPiece.shape = rotated;
            
            if (checkCollision()) {
                currentPiece.shape = original;
            }
        }
        
        function movePiece(dx, dy) {
            if (!currentPiece || !gameRunning) return;
            
            currentPiece.x += dx;
            currentPiece.y += dy;
            
            if (checkCollision()) {
                currentPiece.x -= dx;
                currentPiece.y -= dy;
                
                if (dy > 0) {
                    lockPiece();
                    clearLines();
                    spawnPiece();
                }
                
                return true;
            }
            
            return false;
        }
        
        function checkCollision() {
            if (!currentPiece) return false;
            
            var shape = currentPiece.shape;
            for (var y = 0; y < shape.length; y++) {
                for (var x = 0; x < shape[y].length; x++) {
                    if (shape[y][x]) {
                        var newX = currentPiece.x + x;
                        var newY = currentPiece.y + y;
                        
                        if (
                            newX < 0 || 
                            newX >= gridWidth || 
                            newY >= gridHeight ||
                            (newY >= 0 && grid[newY][newX])
                        ) {
                            return true;
                        }
                    }
                }
            }
            
            return false;
        }
        
        function lockPiece() {
            var shape = currentPiece.shape;
            for (var y = 0; y < shape.length; y++) {
                for (var x = 0; x < shape[y].length; x++) {
                    if (shape[y][x]) {
                        var gridY = currentPiece.y + y;
                        if (gridY >= 0) {
                            grid[gridY][currentPiece.x + x] = currentPiece.color;
                        }
                    }
                }
            }
        }
        
        function clearLines() {
            var linesCleared = 0;
            
            for (var y = gridHeight - 1; y >= 0; y--) {
                var isLineFull = true;
                for (var x = 0; x < gridWidth; x++) {
                    if (!grid[y][x]) {
                        isLineFull = false;
                        break;
                    }
                }
                
                if (isLineFull) {
                    linesCleared++;
                    for (var row = y; row > 0; row--) {
                        for (var col = 0; col < gridWidth; col++) {
                            grid[row][col] = grid[row-1][col];
                        }
                    }
                    for (var col = 0; col < gridWidth; col++) {
                        grid[0][col] = 0;
                    }
                    y++; // Recheck same row index
                }
            }
            
            if (linesCleared > 0) {
                score += linesCleared * 100;
                if (linesCleared === 4) {
                    score += 400; // Bonus for Tetris
                }
                updateScore();
                
                // Increase speed
                dropInterval = Math.max(100, 1000 - Math.floor(score / 500) * 100);
            }
        }
        
        function updateScore() {
            scoreDisplay.textContent = 'Score: ' + score;
        }
        
        function gameOver() {
            gameRunning = false;
            finalScoreDisplay.textContent = score;
            endScreen.style.display = 'flex';
        }
        
        function update(timestamp) {
            if (!gameRunning) return;
            
            if (timestamp - lastDropTime > dropInterval) {
                movePiece(0, 1);
                lastDropTime = timestamp;
            }
        }
        
        function draw() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Draw grid
            for (var y = 0; y < gridHeight; y++) {
                for (var x = 0; x < gridWidth; x++) {
                    if (grid[y][x]) {
                        ctx.fillStyle = grid[y][x];
                        ctx.fillRect(x * blockSize, y * blockSize, blockSize - 1, blockSize - 1);
                    }
                }
            }
            
            // Draw current piece
            if (currentPiece && gameRunning) {
                ctx.fillStyle = currentPiece.color;
                var shape = currentPiece.shape;
                for (var y = 0; y < shape.length; y++) {
                    for (var x = 0; x < shape[y].length; x++) {
                        if (shape[y][x]) {
                            ctx.fillRect(
                                (currentPiece.x + x) * blockSize, 
                                (currentPiece.y + y) * blockSize, 
                                blockSize - 1, 
                                blockSize - 1
                            );
                        }
                    }
                }
            }
        }
        
        function gameLoop(timestamp) {
            update(timestamp);
            draw();
            requestAnimationFrame(gameLoop);
        }
        
        function setupControls() {
            // Keyboard controls
            document.addEventListener('keydown', function(e) {
                if (!gameRunning) return;
                
                switch(e.keyCode) {
                    case 37: movePiece(-1, 0); break; // Left
                    case 39: movePiece(1, 0); break;  // Right
                    case 40: movePiece(0, 1); break;  // Down
                    case 38: rotatePiece(); break;    // Up (rotate)
                }
            });
            
            // Touch controls
            leftBtn.addEventListener('touchstart', function(e) {
                e.preventDefault();
                movePiece(-1, 0);
            });
            
            rightBtn.addEventListener('touchstart', function(e) {
                e.preventDefault();
                movePiece(1, 0);
            });
            
            downBtn.addEventListener('touchstart', function(e) {
                e.preventDefault();
                movePiece(0, 1);
            });
            
            rotateBtn.addEventListener('touchstart', function(e) {
                e.preventDefault();
                rotatePiece();
            });
            
            // Mouse controls for desktop testing
            leftBtn.addEventListener('mousedown', function() { movePiece(-1, 0); });
            rightBtn.addEventListener('mousedown', function() { movePiece(1, 0); });
            downBtn.addEventListener('mousedown', function() { movePiece(0, 1); });
            rotateBtn.addEventListener('mousedown', rotatePiece);
            
            // Game screens
            startBtn.addEventListener('click', function() {
                startScreen.style.display = 'none';
                gameScreen.style.display = 'block';
                resetGame();
            });
            
            restartBtn.addEventListener('click', function() {
                endScreen.style.display = 'none';
                resetGame();
            });
        }
        
        init();
    </script>
</body>
</html>
```