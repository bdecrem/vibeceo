```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            overflow: hidden;
            touch-action: none;
            background-color: #ff69b4; /* Hot pink background */
            font-family: Arial, sans-serif;
        }
        
        #gameCanvas {
            display: block;
            width: 100vw;
            height: 100vh;
            background: #ff69b4; /* Hot pink canvas background */
        }

        .score-overlay {
            position: absolute;
            top: 20px;
            left: 0;
            right: 0;
            color: white;
            font-size: 24px;
            text-align: center;
            pointer-events: none;
        }

        .start-screen {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-size: 24px;
            text-align: center;
            background: rgba(255,105,180,0.8); /* Semi-transparent hot pink */
            padding: 20px;
            border-radius: 10px;
            display: none;
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas"></canvas>
    <div class="score-overlay">
        <span id="playerScore">0</span> - <span id="aiScore">0</span>
    </div>
    <div id="startScreen" class="start-screen">
        Tap or Press ENTER to Start
    </div>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const startScreen = document.getElementById('startScreen');
        const playerScoreElement = document.getElementById('playerScore');
        const aiScoreElement = document.getElementById('aiScore');

        // Game state
        const game = {
            isPlaying: false,
            playerScore: 0,
            aiScore: 0,
            paddleWidth: 15,
            paddleHeight: 80,
            ballSize: 10,
            ballSpeed: 7,
            paddleSpeed: 8
        };

        // Game objects
        const player = {
            x: 0,
            y: 0,
            dy: 0
        };

        const ai = {
            x: 0,
            y: 0,
            dy: 0
        };

        const ball = {
            x: 0,
            y: 0,
            dx: 0,
            dy: 0,
            speed: game.ballSpeed
        };

        function resizeCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            
            player.x = 50;
            player.y = canvas.height / 2 - game.paddleHeight / 2;
            
            ai.x = canvas.width - 50 - game.paddleWidth;
            ai.y = canvas.height / 2 - game.paddleHeight / 2;

            resetBall();
        }

        function resetBall() {
            ball.x = canvas.width / 2;
            ball.y = canvas.height / 2;
            ball.dx = (Math.random() > 0.5 ? 1 : -1) * game.ballSpeed;
            ball.dy = (Math.random() * 2 - 1) * game.ballSpeed;
        }

        function startGame() {
            game.isPlaying = true;
            game.playerScore = 0;
            game.aiScore = 0;
            startScreen.style.display = 'none';
            resetBall();
            updateScore();
        }

        function updateScore() {
            playerScoreElement.textContent = game.playerScore;
            aiScoreElement.textContent = game.aiScore;
        }

        let touchY = null;

        canvas.addEventListener('touchstart', (e) => {
            e.preventDefault();
            touchY = e.touches[0].clientY;
        }, { passive: false });

        canvas.addEventListener('touchmove', (e) => {
            e.preventDefault();
            if (touchY !== null) {
                const newY = e.touches[0].clientY;
                player.dy = (newY - touchY) * 0.5;
                touchY = newY;
            }
        }, { passive: false });

        canvas.addEventListener('touchend', () => {
            touchY = null;
            player.dy = 0;
        });

        const keys = {};
        window.addEventListener('keydown', (e) => {
            keys[e.key] = true;
            if (e.key === 'Enter' && !game.isPlaying) {
                startGame();
            }
        });
        window.addEventListener('keyup', (e) => {
            keys[e.key] = false;
        });

        canvas.addEventListener('click', () => {
            if (!game.isPlaying) {
                startGame();
            }
        });

        function update() {
            if (!game.isPlaying) return;

            if (keys['ArrowUp']) {
                player.dy = -game.paddleSpeed;
            } else if (keys['ArrowDown']) {
                player.dy = game.paddleSpeed;
            } else if (!touchY) {
                player.dy *= 0.9;
            }

            player.y += player.dy;
            player.y = Math.max(0, Math.min(canvas.height - game.paddleHeight, player.y));

            const aiCenter = ai.y + game.paddleHeight / 2;
            const ballFutureY = ball.y + ball.dy * 10;
            
            if (Math.abs(aiCenter - ballFutureY) > 10) {
                ai.dy = Math.sign(ballFutureY - aiCenter) * game.paddleSpeed * 0.7;
            } else {
                ai.dy = 0;
            }

            ai.y += ai.dy;
            ai.y = Math.max(0, Math.min(canvas.height - game.paddleHeight, ai.y));

            ball.x += ball.dx;
            ball.y += ball.dy;

            if (ball.y <= 0 || ball.y >= canvas.height - game.ballSize) {
                ball.dy *= -1;
            }

            if (ball.dx < 0 && 
                ball.x <= player.x + game.paddleWidth &&
                ball.y >= player.y &&
                ball.y <= player.y + game.paddleHeight) {
                ball.dx *= -1.1;
                ball.dy += player.dy * 0.2;
            }

            if (ball.dx > 0 &&
                ball.x >= ai.x - game.ballSize &&
                ball.y >= ai.y &&
                ball.y <= ai.y + game.paddleHeight) {
                ball.dx *= -1.1;
                ball.dy += ai.dy * 0.2;
            }

            if (ball.x < 0) {
                game.aiScore++;
                updateScore();
                resetBall();
            } else if (ball.x > canvas.width) {
                game.playerScore++;
                updateScore();
                resetBall();
            }
        }

        function render() {
            ctx.fillStyle = '#ff69b4'; // Hot pink clear color
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            ctx.setLineDash([5, 15]);
            ctx.beginPath();
            ctx.moveTo(canvas.width / 2, 0);
            ctx.lineTo(canvas.width / 2, canvas.height);
            ctx.strokeStyle = '#fff';
            ctx.stroke();
            ctx.setLineDash([]);

            ctx.fillStyle = '#fff';
            ctx.fillRect(player.x, player.y, game.paddleWidth, game.paddleHeight);
            ctx.fillRect(ai.x, ai.y, game.paddleWidth, game.paddleHeight);

            ctx.fillRect(ball.x, ball.y, game.ballSize, game.ballSize);

            if (!game.isPlaying) {
                startScreen.style.display = 'block';
            }
        }

        function gameLoop() {
            update();
            render();
            requestAnimationFrame(gameLoop);
        }

        window.addEventListener('resize', resizeCanvas);
        resizeCanvas();
        gameLoop();
    </script>
</body>
</html>
```