```html
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, user-scalable=no">
    <title>Tetris</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            background: linear-gradient(to bottom, #1a1a2e, #16213e);
            font-family: sans-serif;
            touch-action: none;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            overflow: hidden;
            color: white;
        }
        #gameCanvas {
            background: #0f3460;
            display: block;
        }
        #controls {
            position: fixed;
            bottom: 0;
            width: 100%;
            height: 120px;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        .btn {
            width: 60px;
            height: 60px;
            background: rgba(255, 255, 255, 0.2);
            border: 2px solid white;
            border-radius: 10px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 24px;
            margin: 5px;
            user-select: none;
            cursor: pointer;
        }
        .btn:active {
            background: rgba(255, 255, 255, 0.4);
        }
        #screen {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: calc(100% - 120px);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background: rgba(15, 52, 96, 0.9);
            z-index: 500;
        }
        #screen h1 {
            font-size: 40px;
            margin: 0 0 20px 0;
            text-align: center;
        }
        #screen p {
            font-size: 18px;
            max-width: 80%;
            text-align: center;
            margin: 10px 0;
        }
        #startBtn, #restartBtn {
            background: #e94560;
            color: white;
            border: none;
            padding: 15px 30px;
            font-size: 20px;
            border-radius: 10px;
            margin-top: 20px;
            cursor: pointer;
        }
        #scoreDisplay {
            position: absolute;
            top: 20px;
            left: 20px;
            font-size: 24px;
            z-index: 100;
        }
    </style>
</head>
<body>
    <div id="scoreDisplay">Score: 0</div>
    <canvas id="gameCanvas"></canvas>
    <div id="screen">
        <h1>üß± TETRIS</h1>
        <p>Stack the blocks! Clear lines to score points.</p>
        <p>‚Üë to rotate, ‚Üì to drop faster</p>
        <button id="startBtn">START GAME</button>
    </div>
    <div id="controls">
        <div class="btn" id="leftBtn">‚Üê</div>
        <div class="btn" id="downBtn">‚Üì</div>
        <div class="btn" id="rightBtn">‚Üí</div>
        <div class="btn" id="rotateBtn">‚Üª</div>
    </div>

    <script>
        var canvas = document.getElementById('gameCanvas');
        var ctx = canvas.getContext('2d');
        var scoreDisplay = document.getElementById('scoreDisplay');
        var screen = document.getElementById('screen');
        var startBtn = document.getElementById('startBtn');
        var restartBtn = document.createElement('button');
        restartBtn.id = 'restartBtn';
        restartBtn.textContent = 'PLAY AGAIN';
        
        var dpr = window.devicePixelRatio || 1;
        var controlsHeight = 120;
        var canvasWidth = window.innerWidth;
        var canvasHeight = window.innerHeight - controlsHeight;
        
        canvas.width = canvasWidth * dpr;
        canvas.height = canvasHeight * dpr;
        canvas.style.width = canvasWidth + 'px';
        canvas.style.height = canvasHeight + 'px';
        ctx.scale(dpr, dpr);
        
        var gridWidth = 10;
        var gridHeight = 20;
        var blockSize = Math.min(canvasWidth / gridWidth, canvasHeight / gridHeight);
        var grid = [];
        var score = 0;
        var gameInterval = 500;
        var lastTime = 0;
        var dropCounter = 0;
        
        var colors = [
            null,
            '#FF0D72', // I
            '#0DC2FF', // J
            '#0DFF72', // L
            '#F538FF', // O
            '#FF8E0D', // S
            '#FFE138', // T
            '#3877FF'  // Z
        ];
        
        var tetrominos = {
            'I': [
                [0, 0, 0, 0],
                [1, 1, 1, 1],
                [0, 0, 0, 0],
                [0, 0, 0, 0]
            ],
            'J': [
                [2, 0, 0],
                [2, 2, 2],
                [0, 0, 0]
            ],
            'L': [
                [0, 0, 3],
                [3, 3, 3],
                [0, 0, 0]
            ],
            'O': [
                [4, 4],
                [4, 4]
            ],
            'S': [
                [0, 5, 5],
                [5, 5, 0],
                [0, 0, 0]
            ],
            'T': [
                [0, 6, 0],
                [6, 6, 6],
                [0, 0, 0]
            ],
            'Z': [
                [7, 7, 0],
                [0, 7, 7],
                [0, 0, 0]
            ]
        };
        
        var player = {
            pos: {x: 0, y: 0},
            matrix: null,
            score: 0
        };
        
        function createMatrix(w, h) {
            var matrix = [];
            while (h--) {
                matrix.push(new Array(w).fill(0));
            }
            return matrix;
        }
        
        function createPiece(type) {
            return tetrominos[type];
        }
        
        function drawMatrix(matrix, offset) {
            matrix.forEach(function(row, y) {
                row.forEach(function(value, x) {
                    if (value !== 0) {
                        ctx.fillStyle = colors[value];
                        ctx.fillRect(x + offset.x, y + offset.y, 1, 1);
                        ctx.strokeStyle = '#000';
                        ctx.strokeRect(x + offset.x, y + offset.y, 1, 1);
                    }
                });
            });
        }
        
        function draw() {
            ctx.fillStyle = '#0f3460';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            drawMatrix(grid, {x: 0, y: 0});
            drawMatrix(player.matrix, player.pos);
        }
        
        function merge(grid, player) {
            player.matrix.forEach(function(row, y) {
                row.forEach(function(value, x) {
                    if (value !== 0) {
                        grid[y + player.pos.y][x + player.pos.x] = value;
                    }
                });
            });
        }
        
        function rotate(matrix, dir) {
            for (var y = 0; y < matrix.length; ++y) {
                for (var x = 0; x < y; ++x) {
                    var temp = matrix[x][y];
                    matrix[x][y] = matrix[y][x];
                    matrix[y][x] = temp;
                }
            }
            
            if (dir > 0) {
                matrix.forEach(function(row) { row.reverse(); });
            } else {
                matrix.reverse();
            }
        }
        
        function playerDrop() {
            player.pos.y++;
            if (collide(grid, player)) {
                player.pos.y--;
                merge(grid, player);
                playerReset();
                sweepRows();
                updateScore();
            }
            dropCounter = 0;
        }
        
        function playerMove(dir) {
            player.pos.x += dir;
            if (collide(grid, player)) {
                player.pos.x -= dir;
            }
        }
        
        function playerReset() {
            var pieces = 'IJLOSTZ';
            player.matrix = createPiece(pieces[pieces.length * Math.random() | 0]);
            player.pos.y = 0;
            player.pos.x = (grid[0].length / 2 | 0) - (player.matrix[0].length / 2 | 0);
            
            if (collide(grid, player)) {
                grid.forEach(function(row) { row.fill(0); });
                player.score = 0;
                updateScore();
                showScreen('Game Over! üéÆ');
            }
        }
        
        function playerRotate(dir) {
            var pos = player.pos.x;
            var offset = 1;
            rotate(player.matrix, dir);
            while (collide(grid, player)) {
                player.pos.x += offset;
                offset = -(offset + (offset > 0 ? 1 : -1));
                if (offset > player.matrix[0].length) {
                    rotate(player.matrix, -dir);
                    player.pos.x = pos;
                    return;
                }
            }
        }
        
        function collide(grid, player) {
            var m = player.matrix;
            var o = player.pos;
            for (var y = 0; y < m.length; ++y) {
                for (var x = 0; x < m[y].length; ++x) {
                    if (m[y][x] !== 0 && 
                       (grid[y + o.y] && 
                       grid[y + o.y][x + o.x]) !== 0) {
                        return true;
                    }
                }
            }
            return false;
        }
        
        function sweepRows() {
            var rowCount = 0;
            outer: for (var y = grid.length - 1; y >= 0; --y) {
                for (var x = 0; x < grid[y].length; ++x) {
                    if (grid[y][x] === 0) {
                        continue outer;
                    }
                }
                
                var row = grid.splice(y, 1)[0].fill(0);
                grid.unshift(row);
                ++y;
                
                rowCount++;
            }
            
            if (rowCount > 0) {
                player.score += rowCount * 10;
                gameInterval = Math.max(100, 500 - (player.score / 100 | 0) * 50);
            }
        }
        
        function updateScore() {
            scoreDisplay.textContent = 'Score: ' + player.score;
        }
        
        function update(time) {
            var deltaTime = time - lastTime;
            lastTime = time;
            
            dropCounter += deltaTime;
            if (dropCounter > gameInterval) {
                playerDrop();
            }
            
            draw();
            requestAnimationFrame(update);
        }
        
        function showScreen(text) {
            screen.innerHTML = '<h1>'+text+'</h1><p>Score: '+player.score+'</p>';
            screen.appendChild(restartBtn);
            screen.style.display = 'flex';
        }
        
        startBtn.addEventListener('click', function() {
            screen.style.display = 'none';
            resetGame();
            requestAnimationFrame(update);
        });
        
        restartBtn.addEventListener('click', function() {
            screen.style.display = 'none';
            resetGame();
            requestAnimationFrame(update);
        });
        
        function resetGame() {
            grid = createMatrix(gridWidth, gridHeight);
            player.score = 0;
            updateScore();
            playerReset();
            gameInterval = 500;
        }
        
        document.getElementById('leftBtn').addEventListener('click', function() {
            playerMove(-1);
        });
        
        document.getElementById('rightBtn').addEventListener('click', function() {
            playerMove(1);
        });
        
        document.getElementById('downBtn').addEventListener('click', function() {
            playerDrop();
        });
        
        document.getElementById('rotateBtn').addEventListener('click', function() {
            playerRotate(1);
        });
        
        document.addEventListener('keydown', function(event) {
            if (screen.style.display !== 'none') return;
            
            if (event.keyCode === 37) { // left
                playerMove(-1);
            } else if (event.keyCode === 39) { // right
                playerMove(1);
            } else if (event.keyCode === 40) { // down
                playerDrop();
            } else if (event.keyCode === 38) { // up
                playerRotate(1);
            } else if (event.keyCode === 32) { // space
                playerRotate(1);
            }
        });
        
        // Scale ctx to blockSize
        ctx.scale(blockSize, blockSize);
        resetGame();
    </script>
</body>
</html>
```