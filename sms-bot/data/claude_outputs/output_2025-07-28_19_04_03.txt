```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WTAF Tetris</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
            color: #fff;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
        }

        header {
            text-align: center;
            margin-bottom: 20px;
            width: 100%;
            max-width: 800px;
        }

        h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            background: linear-gradient(90deg, #ff6b6b, #4ecdc4);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            text-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }

        .game-container {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 20px;
            max-width: 800px;
            width: 100%;
        }

        .game-board {
            position: relative;
            width: 300px;
            height: 600px;
            background-color: #0f3460;
            border: 3px solid #4ecdc4;
            box-shadow: 0 0 20px rgba(78, 205, 196, 0.3);
            display: grid;
            grid-template-rows: repeat(20, 1fr);
            grid-template-columns: repeat(10, 1fr);
        }

        .side-panel {
            display: flex;
            flex-direction: column;
            gap: 20px;
            width: 200px;
        }

        .next-piece, .score-panel {
            background-color: #0f3460;
            border: 3px solid #ff6b6b;
            border-radius: 10px;
            padding: 15px;
            box-shadow: 0 0 15px rgba(255, 107, 107, 0.3);
        }

        .next-piece h2, .score-panel h2 {
            text-align: center;
            margin-bottom: 10px;
            color: #ff6b6b;
            font-size: 1.3rem;
        }

        .next-piece-display {
            width: 120px;
            height: 120px;
            margin: 0 auto;
            display: grid;
            grid-template-rows: repeat(4, 1fr);
            grid-template-columns: repeat(4, 1fr);
        }

        .score-value {
            font-size: 2rem;
            text-align: center;
            font-weight: bold;
            color: #4ecdc4;
            margin: 10px 0;
        }

        .controls {
            background-color: #0f3460;
            border: 3px solid #f7dc6f;
            border-radius: 10px;
            padding: 15px;
            box-shadow: 0 0 15px rgba(247, 220, 111, 0.3);
        }

        .controls h2 {
            text-align: center;
            margin-bottom: 10px;
            color: #f7dc6f;
            font-size: 1.3rem;
        }

        .controls ul {
            list-style-type: none;
            padding: 0 10px;
        }

        .controls li {
            margin: 8px 0;
            display: flex;
            align-items: center;
        }

        .key {
            display: inline-block;
            background: #1a1a2e;
            border: 1px solid #4ecdc4;
            border-radius: 4px;
            padding: 2px 6px;
            margin-right: 8px;
            min-width: 20px;
            text-align: center;
        }

        .game-info {
            margin-top: 20px;
            text-align: center;
            max-width: 800px;
            background: rgba(15, 52, 96, 0.7);
            padding: 15px;
            border-radius: 10px;
            border: 1px solid #4ecdc4;
        }

        .cell {
            border: 1px solid rgba(255, 255, 255, 0.05);
        }

        .cell.filled {
            border: 1px solid rgba(0, 0, 0, 0.3);
        }

        .cell.I { background-color: #00f0f0; }
        .cell.J { background-color: #0000f0; }
        .cell.L { background-color: #f0a000; }
        .cell.O { background-color: #f0f000; }
        .cell.S { background-color: #00f000; }
        .cell.T { background-color: #a000f0; }
        .cell.Z { background-color: #f00000; }

        .game-over {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 10;
        }

        .game-over h2 {
            font-size: 2.5rem;
            color: #ff6b6b;
            margin-bottom: 20px;
        }

        .btn {
            background: linear-gradient(90deg, #ff6b6b, #4ecdc4);
            border: none;
            color: white;
            padding: 12px 25px;
            font-size: 1.1rem;
            border-radius: 30px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: bold;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }

        .btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
        }

        .btn:active {
            transform: translateY(1px);
        }

        footer {
            margin-top: 30px;
            text-align: center;
            color: #aaa;
            font-size: 0.9rem;
        }

        @media (max-width: 768px) {
            .game-container {
                flex-direction: column;
                align-items: center;
            }
            
            .side-panel {
                width: 300px;
                flex-direction: row;
                flex-wrap: wrap;
            }
            
            .next-piece, .score-panel, .controls {
                flex: 1;
                min-width: 140px;
            }
        }
    </style>
</head>
<body>
    <header>
        <h1>WTAF TETRIS</h1>
        <p>Classic puzzle game reimagined</p>
    </header>

    <div class="game-container">
        <div class="game-board" id="board"></div>
        
        <div class="side-panel">
            <div class="next-piece">
                <h2>NEXT PIECE</h2>
                <div class="next-piece-display" id="next-piece"></div>
            </div>
            
            <div class="score-panel">
                <h2>SCORE</h2>
                <div class="score-value" id="score">0</div>
                <h2>LEVEL</h2>
                <div class="score-value" id="level">1</div>
            </div>
            
            <div class="controls">
                <h2>CONTROLS</h2>
                <ul>
                    <li><span class="key">←</span> Move Left</li>
                    <li><span class="key">→</span> Move Right</li>
                    <li><span class="key">↓</span> Move Down</li>
                    <li><span class="key">↑</span> Rotate</li>
                    <li><span class="key">Space</span> Hard Drop</li>
                    <li><span class="key">P</span> Pause</li>
                </ul>
            </div>
        </div>
    </div>

    <div class="game-info">
        <p>Clear lines to score points. Complete multiple lines at once for bonus points!</p>
    </div>

    <footer>
        <p>WTAF Tetris Game | Use arrow keys to play</p>
    </footer>

    <script>
        // Game constants
        const COLS = 10;
        const ROWS = 20;
        const BLOCK_SIZE = 30;
        const COLORS = [
            null,
            '#00f0f0', // I
            '#0000f0', // J
            '#f0a000', // L
            '#f0f000', // O
            '#00f000', // S
            '#a000f0', // T
            '#f00000'  // Z
        ];

        // Tetromino shapes
        const SHAPES = [
            null,
            [[0,0,0,0], [1,1,1,1], [0,0,0,0], [0,0,0,0]], // I
            [[2,0,0], [2,2,2], [0,0,0]],                   // J
            [[0,0,3], [3,3,3], [0,0,0]],                   // L
            [[4,4], [4,4]],                                // O
            [[0,5,5], [5,5,0], [0,0,0]],                   // S
            [[0,6,0], [6,6,6], [0,0,0]],                   // T
            [[7,7,0], [0,7,7], [0,0,0]]                    // Z
        ];

        // Game variables
        let canvas, ctx;
        let board = [];
        let score = 0;
        let level = 1;
        let gameOver = false;
        let paused = false;
        let dropCounter = 0;
        let dropInterval = 1000;
        let lastTime = 0;
        let player = {
            pos: {x: 0, y: 0},
            matrix: null,
            score: 0
        };

        // DOM elements
        const boardElement = document.getElementById('board');
        const nextPieceElement = document.getElementById('next-piece');
        const scoreElement = document.getElementById('score');
        const levelElement = document.getElementById('level');

        // Create board grid
        function createBoard() {
            boardElement.innerHTML = '';
            for (let y = 0; y < ROWS; y++) {
                for (let x = 0; x < COLS; x++) {
                    const cell = document.createElement('div');
                    cell.classList.add('cell');
                    cell.dataset.x = x;
                    cell.dataset.y = y;
                    boardElement.appendChild(cell);
                }
            }
        }

        // Create next piece display
        function createNextPieceDisplay() {
            nextPieceElement.innerHTML = '';
            for (let y = 0; y < 4; y++) {
                for (let x = 0; x < 4; x++) {
                    const cell = document.createElement('div');
                    cell.classList.add('cell');
                    nextPieceElement.appendChild(cell);
                }
            }
        }

        // Initialize game
        function init() {
            createBoard();
            createNextPieceDisplay();
            resetGame();
            updateScore();
            
            // Event listeners
            document.addEventListener('keydown', event => {
                if (gameOver) return;
                
                if (event.keyCode === 80) { // P key
                    paused = !paused;
                }
                
                if (paused) return;
                
                if (event.keyCode === 37) { // Left arrow
                    playerMove(-1);
                } else if (event.keyCode === 39) { // Right arrow
                    playerMove(1);
                } else if (event.keyCode === 40) { // Down arrow
                    playerDrop();
                } else if (event.keyCode === 38) { // Up arrow
                    playerRotate();
                } else if (event.keyCode === 32) { // Space
                    playerHardDrop();
                }
            });
        }

        // Reset game state
        function resetGame() {
            // Create empty board
            board = Array.from({length: ROWS}, () => Array(COLS).fill(0));
            
            // Reset player
            player.score = 0;
            score = 0;
            level = 1;
            dropInterval = 1000;
            gameOver = false;
            paused = false;
            
            // Create new piece
            playerReset();
            updateScore();
        }

        // Update score display
        function updateScore() {
            scoreElement.textContent = player.score;
            levelElement.textContent = level;
        }

        // Create a new piece
        function createPiece(type) {
            return SHAPES[type].map(row => [...row]);
        }

        // Reset player position and get new piece
        function playerReset() {
            const pieces = 'IJLOSTZ';
            player.matrix = createPiece(pieces.charCodeAt(Math.floor(Math.random() * pieces.length)) - 64);
            player.pos.y = 0;
            player.pos.x = Math.floor(COLS / 2) - Math.floor(player.matrix[0].length / 2);
            
            // Game over check
            if (collide()) {
                gameOver = true;
                showGameOver();
            }
        }

        // Show game over screen
        function showGameOver() {
            const gameOverElement = document.createElement('div');
            gameOverElement.className = 'game-over';
            gameOverElement.innerHTML = `
                <h2>GAME OVER</h2>
                <p>Final Score: ${player.score}</p>
                <button class="btn" id="restart-btn">PLAY AGAIN</button>
            `;
            boardElement.appendChild(gameOverElement);
            
            document.getElementById('restart-btn').addEventListener('click', () => {
                boardElement.removeChild(gameOverElement);
                resetGame();
            });
        }

        // Move player
        function playerMove(dir) {
            player.pos.x += dir;
            if (collide()) {
                player.pos.x -= dir;
            }
        }

        // Rotate player piece
        function playerRotate() {
            const pos = player.pos.x;
            let offset = 1;
            rotate(player.matrix);
            while (collide()) {
                player.pos.x += offset;
                offset = -(offset + (offset > 0 ? 1 : -1));
                if (offset > player.matrix[0].length) {
                    rotate(player.matrix);
                    player.pos.x = pos;
                    return;
                }
            }
        }

        // Rotate matrix
        function rotate(matrix) {
            for (let y = 0; y < matrix.length; ++y) {
                for (let x = 0; x < y; ++x) {
                    [matrix[x][y], matrix[y][x]] = [matrix[y][x], matrix[x][y]];
                }
            }
            matrix.forEach(row => row.reverse());
        }

        // Drop player piece
        function playerDrop() {
            player.pos.y++;
            if (collide()) {
                player.pos.y--;
                merge();
                clearLines();
                playerReset();
                updateScore();
            }
            dropCounter = 0;
        }

        // Hard drop
        function playerHardDrop() {
            while (!collide()) {
                player.pos.y++;
            }
            player.pos.y--;
            playerDrop();
        }

        // Check for collision
        function collide() {
            const [m, o] = [player.matrix, player.pos];
            for (let y = 0; y < m.length; ++y) {
                for (let x = 0; x < m[y].length; ++x) {
                    if (m[y][x] !== 0 &&
                        (board[y + o.y] &&
                        board[y + o.y][x + o.x]) !== 0) {
                        return true;
                    }
                }
            }
            return false;
        }

        // Merge piece with board
        function merge() {
            player.matrix.forEach((row, y) => {
                row.forEach((value, x) => {
                    if (value !== 0) {
                        board[y + player.pos.y][x + player.pos.x] = value;
                    }
                });
            });
        }

        // Clear completed lines
        function clearLines() {
            let linesCleared = 0;
            outer: for (let y = board.length - 1; y >= 0; --y) {
                for (let x = 0; x < board[y].length; ++x) {
                    if (board[y][x] === 0) {
                        continue outer;
                    }
                }
                
                // Remove the line
                const row = board.splice(y, 1)[0].fill(0);
                board.unshift(row);
                linesCleared++;
                y++; // Recheck same row index
            }
            
            if (linesCleared > 0) {
                // Update score
                const linePoints = [40, 100, 300, 1200]; // Points for 1, 2, 3, 4 lines
                player.score += linePoints[linesCleared - 1] * level;
                
                // Update level every 10 lines
                level = Math.floor(player.score / 1000) + 1;
                dropInterval = Math.max(100, 1000 - (level - 1) * 100);
            }
        }

        // Draw the board
        function draw() {
            // Clear board
            const cells = boardElement.querySelectorAll('.cell');
            cells.forEach(cell => {
                cell.className = 'cell';
            });
            
            // Draw board
            board.forEach((row, y) => {
                row.forEach((value, x) => {
                    if (value !== 0) {
                        const cell = boardElement.querySelector(`.cell[data-x="${x}"][data-y="${y}"]`);
                        if (cell) {
                            cell.classList.add('filled');
                            cell.classList.add('IJKLOSTZ'[value - 1]);
                        }
                    }
                });
            });
            
            // Draw player piece
            player.matrix.forEach((row, y) => {
                row.forEach((value, x) => {
                    if (value !== 0) {
                        const cell = boardElement.querySelector(`.cell[data-x="${x + player.pos.x}"][data-y="${y + player.pos.y}"]`);
                        if (cell) {
                            cell.classList.add('filled');
                            cell.classList.add('IJKLOSTZ'[value - 1]);
                        }
                    }
                });
            });
            
            // Draw next piece
            const nextCells = nextPieceElement.querySelectorAll('.cell');
            nextCells.forEach(cell => cell.className = 'cell');
            
            if (player.matrix) {
                const pieces = 'IJLOSTZ';
                const nextType = pieces.charCodeAt(Math.floor(Math.random() * pieces.length));
                // For simplicity, we'll just show a random piece
                // In a real implementation, you'd store the next piece
            }
        }

        // Game loop
        function update(time = 0) {
            const deltaTime = time - lastTime;
            lastTime = time;
            
            if (!paused && !gameOver) {
                dropCounter += deltaTime;
                if (dropCounter > dropInterval) {
                    playerDrop();
                }
            }
            
            draw();
            requestAnimationFrame(update);
        }

        // Start the game
        init();
        update();
    </script>
</body>
</html>
```