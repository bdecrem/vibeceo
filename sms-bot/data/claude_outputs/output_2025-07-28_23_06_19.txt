```html
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, user-scalable=no">
    <title>Emoji Tetris</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            background: linear-gradient(135deg, #1a1a2e, #16213e);
            font-family: Arial, sans-serif;
            touch-action: none;
            user-select: none;
            -webkit-user-select: none;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            overflow: hidden;
        }
        canvas {
            display: block;
            border: 2px solid #4cc9f0;
            border-radius: 8px;
            box-shadow: 0 0 20px rgba(76, 201, 240, 0.3);
        }
        .controls {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 20px;
            margin-top: 15px;
            width: 100%;
        }
        .d-pad {
            display: grid;
            grid-template-columns: repeat(3, 60px);
            grid-template-rows: repeat(3, 60px);
            gap: 5px;
        }
        .btn {
            width: 60px;
            height: 60px;
            background: rgba(76, 201, 240, 0.7);
            border: none;
            border-radius: 10px;
            color: white;
            font-size: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            user-select: none;
            -webkit-tap-highlight-color: transparent;
        }
        .btn:active {
            background: rgba(76, 201, 240, 1);
        }
        #upBtn { grid-column: 2; grid-row: 1; }
        #leftBtn { grid-column: 1; grid-row: 2; }
        #downBtn { grid-column: 2; grid-row: 2; }
        #rightBtn { grid-column: 3; grid-row: 2; }
        .action-buttons {
            display: flex;
            gap: 20px;
        }
        .action-btn {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            background: rgba(255, 105, 180, 0.7);
            border: none;
            color: white;
            font-size: 14px;
            font-weight: bold;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            user-select: none;
            -webkit-tap-highlight-color: transparent;
        }
        .action-btn:active {
            background: rgba(255, 105, 180, 1);
        }
        .score-display {
            position: absolute;
            top: 20px;
            left: 20px;
            color: white;
            font-size: 24px;
            font-weight: bold;
            text-shadow: 0 0 5px rgba(0,0,0,0.5);
        }
    </style>
</head>
<body>
    <div class="score-display">Score: <span id="score">0</span></div>
    <canvas id="gameCanvas"></canvas>
    <div class="controls">
        <div class="d-pad">
            <button id="upBtn" class="btn">‚Üª</button>
            <button id="leftBtn" class="btn">‚Üê</button>
            <button id="downBtn" class="btn">‚Üì</button>
            <button id="rightBtn" class="btn">‚Üí</button>
        </div>
        <div class="action-buttons">
            <button id="rotateBtn" class="action-btn">ROTATE</button>
            <button id="dropBtn" class="action-btn">DROP</button>
        </div>
    </div>

    <script>
        var canvas = document.getElementById('gameCanvas');
        var ctx = canvas.getContext('2d');
        var scoreElement = document.getElementById('score');
        
        var controlsHeight = 120;
        canvas.width = window.innerWidth * devicePixelRatio;
        canvas.height = (window.innerHeight - controlsHeight) * devicePixelRatio;
        canvas.style.width = window.innerWidth + 'px';
        canvas.style.height = (window.innerHeight - controlsHeight) + 'px';
        
        var cellSize = Math.floor(Math.min(canvas.width/10, canvas.height/20));
        var gridWidth = 10;
        var gridHeight = 20;
        
        // Center the grid
        var offsetX = (canvas.width - cellSize * gridWidth) / 2;
        var offsetY = (canvas.height - cellSize * gridHeight) / 2;
        
        // Tetromino shapes with emojis
        var shapes = [
            { // I
                rotations: [
                    [[0,0,0,0], [1,1,1,1], [0,0,0,0], [0,0,0,0]],
                    [[0,0,1,0], [0,0,1,0], [0,0,1,0], [0,0,1,0]],
                    [[0,0,0,0], [0,0,0,0], [1,1,1,1], [0,0,0,0]],
                    [[0,1,0,0], [0,1,0,0], [0,1,0,0], [0,1,0,0]]
                ],
                color: '#00f0f0',
                emoji: 'üü¶'
            },
            { // O
                rotations: [
                    [[1,1], [1,1]]
                ],
                color: '#f0f000',
                emoji: 'üü®'
            },
            { // T
                rotations: [
                    [[0,1,0], [1,1,1], [0,0,0]],
                    [[0,1,0], [0,1,1], [0,1,0]],
                    [[0,0,0], [1,1,1], [0,1,0]],
                    [[0,1,0], [1,1,0], [0,1,0]]
                ],
                color: '#a000f0',
                emoji: 'üü™'
            },
            { // S
                rotations: [
                    [[0,1,1], [1,1,0], [0,0,0]],
                    [[0,1,0], [0,1,1], [0,0,1]],
                    [[0,0,0], [0,1,1], [1,1,0]],
                    [[1,0,0], [1,1,0], [0,1,0]]
                ],
                color: '#00f000',
                emoji: 'üü©'
            },
            { // Z
                rotations: [
                    [[1,1,0], [0,1,1], [0,0,0]],
                    [[0,0,1], [0,1,1], [0,1,0]],
                    [[0,0,0], [1,1,0], [0,1,1]],
                    [[0,1,0], [1,1,0], [1,0,0]]
                ],
                color: '#f00000',
                emoji: 'üü•'
            },
            { // J
                rotations: [
                    [[1,0,0], [1,1,1], [0,0,0]],
                    [[0,1,1], [0,1,0], [0,1,0]],
                    [[0,0,0], [1,1,1], [0,0,1]],
                    [[0,1,0], [0,1,0], [1,1,0]]
                ],
                color: '#0000f0',
                emoji: 'üü¶'
            },
            { // L
                rotations: [
                    [[0,0,1], [1,1,1], [0,0,0]],
                    [[0,1,0], [0,1,0], [0,1,1]],
                    [[0,0,0], [1,1,1], [1,0,0]],
                    [[1,1,0], [0,1,0], [0,1,0]]
                ],
                color: '#f0a000',
                emoji: 'üüß'
            }
        ];
        
        var grid = [];
        var currentPiece = null;
        var score = 0;
        var level = 1;
        var lines = 0;
        var gameSpeed = 500; // ms
        var lastTime = 0;
        var gameOver = false;
        
        // Initialize grid
        function initGrid() {
            grid = [];
            for (var y = 0; y < gridHeight; y++) {
                grid[y] = [];
                for (var x = 0; x < gridWidth; x++) {
                    grid[y][x] = 0;
                }
            }
        }
        
        // Create a new piece
        function newPiece() {
            var shapeIndex = Math.floor(Math.random() * shapes.length);
            currentPiece = {
                shape: shapes[shapeIndex],
                rotation: 0,
                x: Math.floor(gridWidth / 2) - 1,
                y: 0
            };
            
            // Check if game over
            if (checkCollision()) {
                gameOver = true;
            }
        }
        
        // Check for collision
        function checkCollision(piece, dx, dy, rotation) {
            piece = piece || currentPiece;
            dx = dx || 0;
            dy = dy || 0;
            rotation = rotation !== undefined ? rotation : piece.rotation;
            
            var matrix = piece.shape.rotations[rotation % piece.shape.rotations.length];
            
            for (var y = 0; y < matrix.length; y++) {
                for (var x = 0; x < matrix[y].length; x++) {
                    if (matrix[y][x]) {
                        var newX = piece.x + x + dx;
                        var newY = piece.y + y + dy;
                        
                        if (
                            newX < 0 || 
                            newX >= gridWidth || 
                            newY >= gridHeight ||
                            (newY >= 0 && grid[newY][newX])
                        ) {
                            return true;
                        }
                    }
                }
            }
            
            return false;
        }
        
        // Rotate piece with wall kick
        function rotatePiece() {
            if (!currentPiece) return;
            
            var newRotation = (currentPiece.rotation + 1) % currentPiece.shape.rotations.length;
            
            // Try normal rotation
            if (!checkCollision(currentPiece, 0, 0, newRotation)) {
                currentPiece.rotation = newRotation;
                return;
            }
            
            // Try wall kick to the left
            if (!checkCollision(currentPiece, -1, 0, newRotation)) {
                currentPiece.rotation = newRotation;
                currentPiece.x -= 1;
                return;
            }
            
            // Try wall kick to the right
            if (!checkCollision(currentPiece, 1, 0, newRotation)) {
                currentPiece.rotation = newRotation;
                currentPiece.x += 1;
                return;
            }
        }
        
        // Move piece
        function movePiece(dx, dy) {
            if (!currentPiece || gameOver) return false;
            
            if (!checkCollision(currentPiece, dx, dy)) {
                currentPiece.x += dx;
                currentPiece.y += dy;
                return true;
            }
            
            // If moving down and collision, lock the piece
            if (dy > 0) {
                lockPiece();
                clearLines();
                newPiece();
            }
            
            return false;
        }
        
        // Hard drop
        function hardDrop() {
            if (!currentPiece || gameOver) return;
            
            while (movePiece(0, 1)) {
                // Keep moving down until collision
            }
        }
        
        // Lock piece in place
        function lockPiece() {
            if (!currentPiece) return;
            
            var matrix = currentPiece.shape.rotations[currentPiece.rotation % currentPiece.shape.rotations.length];
            
            for (var y = 0; y < matrix.length; y++) {
                for (var x = 0; x < matrix[y].length; x++) {
                    if (matrix[y][x]) {
                        var gridY = currentPiece.y + y;
                        if (gridY >= 0) { // Only lock if within grid
                            grid[gridY][currentPiece.x + x] = {
                                color: currentPiece.shape.color,
                                emoji: currentPiece.shape.emoji
                            };
                        }
                    }
                }
            }
        }
        
        // Clear completed lines
        function clearLines() {
            var linesCleared = 0;
            
            for (var y = gridHeight - 1; y >= 0; y--) {
                var isLineComplete = true;
                
                for (var x = 0; x < gridWidth; x++) {
                    if (!grid[y][x]) {
                        isLineComplete = false;
                        break;
                    }
                }
                
                if (isLineComplete) {
                    // Remove the line
                    for (var yy = y; yy > 0; yy--) {
                        grid[yy] = grid[yy-1].slice();
                    }
                    grid[0] = Array(gridWidth).fill(0);
                    
                    linesCleared++;
                    y++; // Check the same line again
                }
            }
            
            if (linesCleared > 0) {
                // Update score
                var linePoints = [0, 40, 100, 300, 1200]; // Points for 0, 1, 2, 3, 4 lines
                score += linePoints[linesCleared] * level;
                lines += linesCleared;
                
                // Update level every 10 lines
                level = Math.floor(lines / 10) + 1;
                gameSpeed = Math.max(100, 500 - (level - 1) * 50); // Increase speed with level
                
                scoreElement.textContent = score;
            }
        }
        
        // Draw the game
        function draw() {
            // Clear canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Draw grid background
            ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';
            ctx.fillRect(offsetX, offsetY, cellSize * gridWidth, cellSize * gridHeight);
            
            // Draw grid lines
            ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';
            ctx.lineWidth = 1;
            
            for (var x = 0; x <= gridWidth; x++) {
                ctx.beginPath();
                ctx.moveTo(offsetX + x * cellSize, offsetY);
                ctx.lineTo(offsetX + x * cellSize, offsetY + gridHeight * cellSize);
                ctx.stroke();
            }
            
            for (var y = 0; y <= gridHeight; y++) {
                ctx.beginPath();
                ctx.moveTo(offsetX, offsetY + y * cellSize);
                ctx.lineTo(offsetX + gridWidth * cellSize, offsetY + y * cellSize);
                ctx.stroke();
            }
            
            // Draw placed blocks
            for (var y = 0; y < gridHeight; y++) {
                for (var x = 0; x < gridWidth; x++) {
                    if (grid[y][x]) {
                        ctx.fillStyle = grid[y][x].color;
                        ctx.fillRect(
                            offsetX + x * cellSize, 
                            offsetY + y * cellSize, 
                            cellSize, 
                            cellSize
                        );
                        
                        // Draw emoji
                        ctx.font = (cellSize * 0.8) + 'px Arial';
                        ctx.textAlign = 'center';
                        ctx.textBaseline = 'middle';
                        ctx.fillText(
                            grid[y][x].emoji,
                            offsetX + x * cellSize + cellSize/2,
                            offsetY + y * cellSize + cellSize/2
                        );
                    }
                }
            }
            
            // Draw current piece
            if (currentPiece && !gameOver) {
                var matrix = currentPiece.shape.rotations[currentPiece.rotation % currentPiece.shape.rotations.length];
                
                for (var y = 0; y < matrix.length; y++) {
                    for (var x = 0; x < matrix[y].length; x++) {
                        if (matrix[y][x]) {
                            var drawX = currentPiece.x + x;
                            var drawY = currentPiece.y + y;
                            
                            if (drawY >= 0) { // Only draw if within grid
                                ctx.fillStyle = currentPiece.shape.color;
                                ctx.fillRect(
                                    offsetX + drawX * cellSize, 
                                    offsetY + drawY * cellSize, 
                                    cellSize, 
                                    cellSize
                                );
                                
                                // Draw emoji
                                ctx.font = (cellSize * 0.8) + 'px Arial';
                                ctx.textAlign = 'center';
                                ctx.textBaseline = 'middle';
                                ctx.fillText(
                                    currentPiece.shape.emoji,
                                    offsetX + drawX * cellSize + cellSize/2,
                                    offsetY + drawY * cellSize + cellSize/2
                                );
                            }
                        }
                    }
                }
            }
            
            // Draw game over
            if (gameOver) {
                ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                
                ctx.font = (48 * devicePixelRatio) + 'px Arial';
                ctx.fillStyle = 'white';
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                ctx.fillText('GAME OVER', canvas.width/2, canvas.height/2 - 30 * devicePixelRatio);
                
                ctx.font = (24 * devicePixelRatio) + 'px Arial';
                ctx.fillText('Score: ' + score, canvas.width/2, canvas.height/2 + 20 * devicePixelRatio);
                ctx.fillText('Tap to Restart', canvas.width/2, canvas.height/2 + 60 * devicePixelRatio);
            }
        }
        
        // Game loop
        function gameLoop(currentTime) {
            if (currentTime - lastTime >= gameSpeed && !gameOver) {
                movePiece(0, 1);
                lastTime = currentTime;
            }
            
            draw();
            requestAnimationFrame(gameLoop);
        }
        
        // Initialize game
        function init() {
            initGrid();
            score = 0;
            level = 1;
            lines = 0;
            gameSpeed = 500;
            gameOver = false;
            scoreElement.textContent = score;
            newPiece();
        }
        
        // Handle canvas interaction
        function handleCanvasInteraction() {
            if (gameOver) {
                init();
            }
        }
        
        canvas.addEventListener('click', function() {
            handleCanvasInteraction();
        });
        
        canvas.addEventListener('touchend', function(e) {
            e.preventDefault();
            handleCanvasInteraction();
        });
        
        // Touch controls
        var keys = {left: false, right: false, down: false};
        
        document.getElementById('leftBtn').addEventListener('touchstart', function(e) {
            e.preventDefault();
            movePiece(-1, 0);
        });
        
        document.getElementById('rightBtn').addEventListener('touchstart', function(e) {
            e.preventDefault();
            movePiece(1, 0);
        });
        
        document.getElementById('downBtn').addEventListener('touchstart', function(e) {
            e.preventDefault();
            movePiece(0, 1);
        });
        
        document.getElementById('upBtn').addEventListener('touchstart', function(e) {
            e.preventDefault();
            rotatePiece();
        });
        
        document.getElementById('rotateBtn').addEventListener('touchstart', function(e) {
            e.preventDefault();
            rotatePiece();
        });
        
        document.getElementById('dropBtn').addEventListener('touchstart', function(e) {
            e.preventDefault();
            hardDrop();
        });
        
        // Keyboard controls for desktop
        document.addEventListener('keydown', function(e) {
            if (gameOver) return;
            
            switch(e.keyCode) {
                case 37: // left
                    movePiece(-1, 0);
                    break;
                case 39: // right
                    movePiece(1, 0);
                    break;
                case 40: // down
                    movePiece(0, 1);
                    break;
                case 38: // up
                    rotatePiece();
                    break;
                case 32: // space
                    hardDrop();
                    break;
            }
        });
        
        // Start the game
        init();
        requestAnimationFrame(gameLoop);
    </script>
</body>
</html>
```