Here's a complete chat app using WTAF's zero-admin system with the VAPOR theme and real-time updates:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>WTAF Chat</title>
    <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=JetBrains+Mono&display=swap" rel="stylesheet">
    <style>
        :root {
            --bg: #FFE0F7;
            --border: #FF006E;
            --shadow: #3700B3;
            --text: #1a1a1a;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Space Grotesk', system-ui, sans-serif;
            background: var(--bg);
            color: var(--text);
            line-height: 1.6;
            font-size: 16px;
        }

        .screen {
            display: none;
            padding: 20px;
            min-height: 100vh;
        }

        .screen.active {
            display: block;
        }

        h1 {
            font-size: 40px;
            text-transform: uppercase;
            margin-bottom: 20px;
            transform: rotate(-2deg);
            color: var(--border);
        }

        button {
            background: var(--border);
            color: white;
            border: 3px solid var(--border);
            padding: 12px 24px;
            font-size: 16px;
            font-family: 'Space Grotesk', system-ui, sans-serif;
            font-weight: bold;
            cursor: pointer;
            min-height: 44px;
            text-transform: uppercase;
            margin: 10px 0;
            width: 100%;
            transform: rotate(-1deg);
            transition: all 0.2s;
            box-shadow: 4px 4px 0 var(--shadow);
        }

        button:hover {
            transform: rotate(1deg) scale(1.02);
        }

        button:active {
            transform: translateY(4px);
            box-shadow: 0 0 0 var(--shadow);
        }

        input, select {
            width: 100%;
            padding: 12px;
            margin: 8px 0;
            font-size: 16px;
            border: 3px solid var(--border);
            font-family: 'JetBrains Mono', monospace;
            min-height: 44px;
        }

        .chat-container {
            max-width: 666px;
            margin: 0 auto;
            padding: 20px;
            background: white;
            border: 3px solid var(--border);
            box-shadow: 8px 8px 0 var(--shadow);
            margin-bottom: 100px;
        }

        .message {
            margin: 10px 0;
            padding: 10px;
            border-radius: 4px;
            max-width: 80%;
        }

        .message.mine {
            background: var(--border);
            color: white;
            margin-left: auto;
            transform: rotate(1deg);
        }

        .message.others {
            background: var(--shadow);
            color: white;
            transform: rotate(-1deg);
        }

        .message .author {
            font-size: 12px;
            opacity: 0.8;
        }

        .input-container {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            padding: 20px;
            background: var(--bg);
            border-top: 3px solid var(--border);
        }

        .input-container form {
            max-width: 666px;
            margin: 0 auto;
            display: flex;
            gap: 10px;
        }

        .input-container input {
            flex-grow: 1;
            margin: 0;
        }

        .input-container button {
            width: auto;
            margin: 0;
        }

        #messages {
            margin-bottom: 100px;
        }

        .emoji-picker {
            display: flex;
            gap: 10px;
            margin-bottom: 10px;
            flex-wrap: wrap;
        }

        .emoji-btn {
            font-size: 20px;
            padding: 5px 10px;
            cursor: pointer;
            background: none;
            border: 2px solid var(--border);
            width: auto;
            min-height: 44px;
        }

        @media (min-width: 768px) {
            button {
                width: auto;
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <div id="welcome-screen" class="screen active">
            <h1>WTAF Chat ðŸ’¬</h1>
            <p>A chaotic chat app for you and your friends!</p>
            <button onclick="showNewUserScreen()">New User</button>
            <button onclick="showReturningUserScreen()">Returning User</button>
        </div>

        <div id="new-user-screen" class="screen">
            <h1>New User</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Register & Enter</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <div id="returning-user-screen" class="screen">
            <h1>Welcome Back!</h1>
            <select id="user-label-select"></select>
            <input type="text" id="returning-passcode" placeholder="4-digit code" maxlength="4">
            <button onclick="loginReturningUser()">Login</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <div id="main-screen" class="screen">
            <div class="chat-container">
                <h1>WTAF Chat</h1>
                <div id="user-status">Chatting as <span id="current-user-label"></span></div>
                
                <div class="emoji-picker">
                    <button class="emoji-btn" onclick="addEmoji('ðŸ”¥')">ðŸ”¥</button>
                    <button class="emoji-btn" onclick="addEmoji('ðŸ’œ')">ðŸ’œ</button>
                    <button class="emoji-btn" onclick="addEmoji('âœ¨')">âœ¨</button>
                    <button class="emoji-btn" onclick="addEmoji('ðŸš€')">ðŸš€</button>
                    <button class="emoji-btn" onclick="addEmoji('ðŸ‘»')">ðŸ‘»</button>
                </div>

                <div id="messages"></div>
            </div>

            <div class="input-container">
                <form onsubmit="sendMessage(event)">
                    <input type="text" id="message-input" placeholder="Type something rebellious..." autocomplete="off">
                    <button type="submit">Send</button>
                </form>
            </div>
        </div>
    </div>

    <script>
        let currentUser = null;
        let pollingInterval;

        async function generateNewUser() {
            const slots = await checkAvailableSlots();
            if (slots.isFull) {
                alert('Chat is full! Only 5 users allowed!');
                return false;
            }
            
            const user = await generateUser();
            if (user?.success) {
                currentUser = user;
                document.getElementById('new-user-info').innerHTML = 
                    `Your ID: ${user.userLabel}<br>Code: ${user.passcode}<br>Save these!`;
                return true;
            }
            return false;
        }

        async function registerNewUser() {
            if (!currentUser) return;
            
            const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
            if (result?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                enterMainScreen();
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            await generateNewUser();
        }

        async function loginReturningUser() {
            const label = document.getElementById('user-label-select').value;
            const passcode = document.getElementById('returning-passcode').value;
            
            const result = await authenticateUser(label, passcode);
            if (result?.success) {
                currentUser = { userLabel: label, passcode, participantId: result.user.participantId };
                updateZadAuth(label, result.user.participantId);
                enterMainScreen();
            } else {
                alert('Wrong code!');
            }
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            if (screenId !== 'main-screen') stopPolling();
        }

        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const slots = await checkAvailableSlots();
            const select = document.getElementById('user-label-select');
            select.innerHTML = '<option>Select User</option>';
            slots.usedLabels.forEach(label => {
                select.innerHTML += `<option>${label}</option>`;
            });
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            document.getElementById('message-input').focus();
            startPolling();
            loadLatestData();
        }

        function startPolling() {
            loadLatestData();
            pollingInterval = setInterval(loadLatestData, 2000);
        }

        function stopPolling() {
            if (pollingInterval) clearInterval(pollingInterval);
        }

        async function sendMessage(event) {
            event.preventDefault();
            const input = document.getElementById('message-input');
            const message = input.value.trim();
            
            if (message) {
                await save('message', { text: message });
                input.value = '';
                loadLatestData();
            }
        }

        function addEmoji(emoji) {
            const input = document.getElementById('message-input');
            input.value += emoji;
            input.focus();
        }

        async function loadLatestData() {
            const messages = await load('message');
            
            // Deduplicate messages (critical!)
            const uniqueMessages = messages.reduce((acc, msg) => {
                const existing = acc.find(m => 
                    m.text === msg.text && 
                    m.author === msg.author && 
                    m.created_at === msg.created_at
                );
                if (!existing) acc.push(msg);
                return acc;
            }, []);

            // Sort by creation time
            uniqueMessages.sort((a, b) => 
                new Date(a.created_at) - new Date(b.created_at)
            );

            // Update UI
            const container = document.getElementById('messages');
            container.innerHTML = uniqueMessages.map(msg => `
                <div class="message ${msg.author === getUsername() ? 'mine' : 'others'}">
                    <div class="author">${msg.author}</div>
                    <div class="text">${msg.text}</div>
                </div>
            `).join('');

            // Auto-scroll to bottom
            container.scrollTop = container.scrollHeight;
        }

        // Easter egg: Konami code triggers party mode
        let konamiCode = ['ArrowUp', 'ArrowUp', 'ArrowDown', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'ArrowLeft', 'ArrowRight', 'b', 'a'];
        let konamiIndex = 0;

        document.addEventListener('keydown', (e) => {
            if (e.key === konamiCode[konamiIndex]) {
                konamiIndex++;
                if (konamiIndex === konamiCode.length) {
                    document.body.style.animation = 'rainbow 2s linear infinite';
                    konamiIndex = 0;
                }
            } else {
                konamiIndex = 0;
            }
        });

        // Initialize
        initAuth();
    </script>
</body>
</html>