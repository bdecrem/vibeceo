<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BERLIN TECHNO HIVEMIND üñ§</title>
    <script src="https://unpkg.com/@supabase/supabase-js@2"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=Inter:wght@400;600&display=swap');

        body { 
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #0a0a0a 0%, #1a1a1a 50%, #2a2a2a 100%);
            background-size: 400% 400%;
            animation: gradientShift 15s ease-in-out infinite;
            color: #e0e0e0;
            overflow-x: hidden;
            margin: 0;
            min-height: 100vh;
        }

        h1, h2, h3 {
            font-family: 'Space Grotesk', sans-serif;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: -0.02em;
            color: #00ff8c;
        }

        .app-container {
            max-width: 800px;
            margin: 0 auto;
            background: rgba(0,0,0,0.7);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            padding: 2rem;
            border: 1px solid rgba(255,255,255,0.1);
            min-height: 90vh;
            margin-top: 2vh;
        }

        .screen { display: none; }
        .screen.active { display: block; animation: fadeIn 0.3s ease; }

        button {
            background: linear-gradient(135deg, #00ff8c, #00c3ff);
            color: #000;
            border: none;
            padding: 15px 30px;
            border-radius: 50px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-size: 14px;
            margin: 10px 5px;
        }

        button:hover {
            transform: scale(1.05);
            box-shadow: 0 0 30px rgba(0, 255, 140, 0.3);
        }

        input, select {
            background: rgba(255,255,255,0.05);
            border: 2px solid rgba(255,255,255,0.1);
            color: white;
            padding: 12px 20px;
            border-radius: 30px;
            font-size: 16px;
            width: calc(100% - 44px);
            margin: 10px 0;
            transition: all 0.3s ease;
        }

        .chat-container {
            height: 60vh;
            overflow-y: auto;
            padding: 20px;
            margin: 20px 0;
            border: 1px solid rgba(255,255,255,0.1);
            border-radius: 15px;
            background: rgba(0,0,0,0.3);
        }

        .message {
            background: rgba(255,255,255,0.05);
            border-radius: 20px;
            padding: 15px 20px;
            margin: 10px 0;
            animation: slideIn 0.3s ease;
            max-width: 80%;
            position: relative;
        }

        .message.own {
            margin-left: auto;
            background: rgba(0,255,140,0.1);
            border: 1px solid rgba(0,255,140,0.2);
        }

        .message-input {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }

        .message-input input {
            flex: 1;
        }

        .user-label {
            font-size: 0.8em;
            color: #00ff8c;
            margin-bottom: 5px;
        }

        .timestamp {
            font-size: 0.7em;
            color: rgba(255,255,255,0.5);
            margin-top: 5px;
        }

        .floating-emoji {
            position: fixed;
            font-size: 2rem;
            animation: float 6s ease-in-out infinite;
            pointer-events: none;
            z-index: 5;
            opacity: 0.5;
            filter: grayscale(0.5);
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            50% { transform: translateY(-20px) rotate(10deg); }
        }

        @keyframes slideIn {
            from { opacity: 0; transform: translateX(-50px); }
            to { opacity: 1; transform: translateX(0); }
        }

        @keyframes gradientShift {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }

        ::-webkit-scrollbar {
            width: 8px;
        }

        ::-webkit-scrollbar-track {
            background: rgba(0,0,0,0.3);
        }

        ::-webkit-scrollbar-thumb {
            background: rgba(0,255,140,0.3);
            border-radius: 4px;
        }

        .reactions {
            display: flex;
            gap: 5px;
            margin-top: 5px;
        }

        .reaction-btn {
            background: rgba(255,255,255,0.1);
            border: none;
            border-radius: 15px;
            padding: 5px 10px;
            font-size: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .reaction-btn:hover {
            background: rgba(0,255,140,0.2);
        }
    </style>
</head>
<body>
    <div class="floating-emoji" style="top: 5%; left: 2%;" data-value="2">üéß</div>
    <div class="floating-emoji" style="top: 5%; right: 2%;" data-value="3">üñ§</div>
    <div class="floating-emoji" style="bottom: 5%; left: 2%;" data-value="1">‚ö°</div>
    <div class="floating-emoji" style="bottom: 5%; right: 2%;" data-value="4">üîä</div>

    <div class="app-container">
        <div id="welcome-screen" class="screen active">
            <h1>BERLIN TECHNO HIVEMIND</h1>
            <p>4AM PLANNING FOR THE REAL ONES üñ§</p>
            <button onclick="showNewUserScreen()">New Raver</button>
            <button onclick="showReturningUserScreen()">Back in Black</button>
        </div>
        
        <div id="new-user-screen" class="screen">
            <h1>JOIN THE UNDERGROUND</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Enter The Void</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="returning-user-screen" class="screen">
            <h1>WELCOME BACK TO THE DARK</h1>
            <select id="user-label-select">
                <option>Select Your Alter Ego</option>
            </select>
            <input type="text" id="returning-passcode" placeholder="Enter your secret code" maxlength="4">
            <button onclick="loginReturningUser()">Return to Void</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="main-screen" class="screen">
            <h1>BERLIN TECHNO HIVEMIND</h1>
            <div id="user-status">IN THE MIX: <span id="current-user-label"></span></div>
            
            <div class="chat-container" id="chat-messages"></div>
            
            <div class="message-input">
                <input type="text" id="message-input" placeholder="DROP YOUR THOUGHTS INTO THE VOID" onkeypress="if(event.key === 'Enter') sendMessage()">
                <button onclick="sendMessage()">TRANSMIT</button>
            </div>
            
            <button onclick="showScreen('welcome-screen')">EXIT VOID</button>
        </div>
    </div>

    <script>
        const APP_ID = 'test1';
        const USER_LABELS = ['raver1üéß', 'techno2‚ö°', 'dark3üñ§', 'bass4üîä', 'void5üíÄ'];
        
        const supabase = window.supabase.createClient(
            'https://tqniseocczttrfwtpbdr.supabase.co',
            'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRxbmlzZW9jY3p0dHJmd3RwYmRyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg4ODI5MjIsImV4cCI6MjA2NDQ1ODkyMn0.mwb33p0xIEXy5F7ZoLc1j9-4ZNk3FuT4zrR0aTdm350'
        );

        let currentUser = null;
        let pollingInterval;

        // Include all the provided authentication functions here
        // [Previous authentication functions remain exactly the same]

        async function sendMessage() {
            const input = document.getElementById('message-input');
            const message = input.value.trim();
            
            if (!message) return;
            
            try {
                await supabase.from('wtaf_zero_admin_collaborative').insert({
                    app_id: APP_ID,
                    participant_id: currentUser.participantId,
                    action_type: 'message',
                    participant_data: {
                        userLabel: currentUser.userLabel,
                        passcode: currentUser.passcode
                    },
                    content_data: {
                        message: message,
                        timestamp: Date.now(),
                        reactions: {}
                    }
                });
                
                input.value = '';
                await loadLatestData();
            } catch (error) {
                console.error('Error sending message:', error);
                alert('TRANSMISSION FAILED IN THE VOID üì°‚ùå');
            }
        }

        async function addReaction(messageId, emoji) {
            try {
                const { data: message } = await supabase
                    .from('wtaf_zero_admin_collaborative')
                    .select('*')
                    .eq('id', messageId)
                    .single();

                const reactions = message.content_data.reactions || {};
                reactions[emoji] = (reactions[emoji] || 0) + 1;

                await supabase
                    .from('wtaf_zero_admin_collaborative')
                    .update({
                        content_data: {
                            ...message.content_data,
                            reactions
                        }
                    })
                    .eq('id', messageId);

                await loadLatestData();
            } catch (error) {
                console.error('Error adding reaction:', error);
            }
        }

        async function loadLatestData() {
            try {
                const { data: messages } = await supabase
                    .from('wtaf_zero_admin_collaborative')
                    .select('*')
                    .eq('app_id', APP_ID)
                    .eq('action_type', 'message')
                    .order('created_at', { ascending: true });

                const chatContainer = document.getElementById('chat-messages');
                chatContainer.innerHTML = '';

                messages?.forEach(msg => {
                    const messageDiv = document.createElement('div');
                    messageDiv.className = `message ${msg.participant_id === currentUser?.participantId ? 'own' : ''}`;
                    
                    const userLabel = document.createElement('div');
                    userLabel.className = 'user-label';
                    userLabel.textContent = msg.participant_data.userLabel;
                    
                    const content = document.createElement('div');
                    content.textContent = msg.content_data.message;
                    
                    const timestamp = document.createElement('div');
                    timestamp.className = 'timestamp';
                    timestamp.textContent = new Date(msg.content_data.timestamp).toLocaleTimeString();

                    const reactions = document.createElement('div');
                    reactions.className = 'reactions';
                    
                    // Add reaction buttons
                    const reactionEmojis = ['üñ§', 'üî•', '‚ö°'];
                    reactionEmojis.forEach(emoji => {
                        const button = document.createElement('button');
                        button.className = 'reaction-btn';
                        button.textContent = `${emoji} ${msg.content_data.reactions?.[emoji] || 0}`;
                        button.onclick = () => addReaction(msg.id, emoji);
                        reactions.appendChild(button);
                    });

                    messageDiv.appendChild(userLabel);
                    messageDiv.appendChild(content);
                    messageDiv.appendChild(timestamp);
                    messageDiv.appendChild(reactions);
                    chatContainer.appendChild(messageDiv);
                });

                chatContainer.scrollTop = chatContainer.scrollHeight;
            } catch (error) {
                console.error('Error loading messages:', error);
            }
        }

        // Mouse parallax effect
        document.addEventListener('mousemove', (e) => {
            document.querySelectorAll('.floating-emoji').forEach((elem) => {
                const speed = elem.getAttribute('data-value') || 2;
                const x = (e.clientX * speed) / 100;
                const y = (e.clientY * speed) / 100;
                elem.style.transform = `translateX(${x}px) translateY(${y}px)`;
            });
        });

        // Easter egg
        console.log('üñ§ Welcome to the underground. Type void() to unlock the darkness...');
        window.void = function() {
            document.body.style.animation = 'glitch 0.3s infinite';
            setTimeout(() => {
                document.body.style.animation = '';
                alert('üñ§ DARK MODE UNLOCKED! Welcome to the void.');
            }, 3000);
        };
    </script>
</body>
</html>