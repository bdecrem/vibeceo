```html
<!DOCTYPE html>
<html>
<head>
    <title>WTAF Pong üèì</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            background: linear-gradient(135deg, #1a1a2e, #16213e); 
            touch-action: none; 
            user-select: none; 
            -webkit-user-select: none; 
            overflow: hidden;
            font-family: Arial, sans-serif;
        }
        canvas { 
            display: block; 
            background: #0f3460;
        }
        .controls {
            position: fixed;
            bottom: 0;
            width: 100%;
            height: 120px;
            background: rgba(0,0,0,0.5);
            display: flex;
            justify-content: space-between;
            padding: 20px;
        }
        .btn {
            width: 80px;
            height: 80px;
            background: rgba(255,255,255,0.2);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 30px;
            color: white;
            user-select: none;
        }
        .screen {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: calc(100% - 120px);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background: rgba(15, 52, 96, 0.9);
            color: white;
            text-align: center;
            z-index: 10;
        }
        h1 { font-size: 40px; margin-bottom: 20px; }
        p { font-size: 20px; margin-bottom: 30px; max-width: 80%; }
        .hidden { display: none; }
    </style>
</head>
<body>
    <canvas id="gameCanvas"></canvas>
    
    <div id="startScreen" class="screen">
        <h1>üèì WTAF Pong</h1>
        <p>Bounce the ball, beat your opponent!</p>
        <p>Desktop: Arrow keys | Mobile: D-pad</p>
        <p>First to 5 points wins!</p>
        <div class="btn" onclick="startGame()" style="width:150px;height:60px;border-radius:10px;">START</div>
    </div>
    
    <div id="gameOverScreen" class="screen hidden">
        <h1>Game Over!</h1>
        <p id="finalScore">Player 1 wins!</p>
        <div class="btn" onclick="restartGame()" style="width:150px;height:60px;border-radius:10px;">PLAY AGAIN</div>
    </div>
    
    <div class="controls">
        <div class="btn" id="upBtn">‚¨ÜÔ∏è</div>
        <div class="btn" id="downBtn">‚¨áÔ∏è</div>
    </div>

    <script>
        var canvas = document.getElementById('gameCanvas');
        var ctx = canvas.getContext('2d');
        var controlsHeight = 120;
        
        function resizeCanvas() {
            canvas.width = window.innerWidth * devicePixelRatio;
            canvas.height = (window.innerHeight - controlsHeight) * devicePixelRatio;
            canvas.style.width = window.innerWidth + 'px';
            canvas.style.height = (window.innerHeight - controlsHeight) + 'px';
        }
        
        window.addEventListener('resize', resizeCanvas);
        resizeCanvas();
        
        // Game objects
        var playerPaddle, computerPaddle, ball;
        var playerScore = 0;
        var computerScore = 0;
        var gameRunning = false;
        var lastTime = 0;
        var particleEffects = [];
        
        // Paddle class
        function Paddle(x, y) {
            this.x = x;
            this.y = y;
            this.width = canvas.width * 0.015;
            this.height = canvas.height * 0.15;
            this.speed = canvas.height * 0.005;
        }
        
        Paddle.prototype.draw = function() {
            ctx.fillStyle = '#e94560';
            ctx.fillRect(this.x, this.y, this.width, this.height);
            
            // Add 3D effect
            ctx.fillStyle = 'rgba(255,255,255,0.2)';
            ctx.fillRect(this.x, this.y, this.width * 0.3, this.height);
        };
        
        Paddle.prototype.move = function(direction) {
            if (direction === 'up') {
                this.y = Math.max(0, this.y - this.speed);
            } else if (direction === 'down') {
                this.y = Math.min(canvas.height - this.height, this.y + this.speed);
            }
        };
        
        // Ball class
        function Ball() {
            this.reset();
        }
        
        Ball.prototype.reset = function() {
            this.x = canvas.width / 2;
            this.y = canvas.height / 2;
            this.radius = canvas.width * 0.01;
            this.speed = canvas.width * 0.003;
            this.dx = (Math.random() > 0.5 ? 1 : -1) * this.speed;
            this.dy = (Math.random() * 2 - 1) * this.speed;
        };
        
        Ball.prototype.draw = function() {
            ctx.beginPath();
            ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
            ctx.fillStyle = '#4cc9f0';
            ctx.fill();
            ctx.closePath();
            
            // Add shine effect
            ctx.beginPath();
            ctx.arc(this.x - this.radius/3, this.y - this.radius/3, this.radius/3, 0, Math.PI * 2);
            ctx.fillStyle = 'rgba(255,255,255,0.7)';
            ctx.fill();
            ctx.closePath();
        };
        
        Ball.prototype.update = function() {
            this.x += this.dx;
            this.y += this.dy;
            
            // Wall collision (top/bottom)
            if (this.y - this.radius < 0 || this.y + this.radius > canvas.height) {
                this.dy = -this.dy;
                createParticles(this.x, this.y, '#4cc9f0', 5);
            }
            
            // Paddle collision
            if (
                this.x - this.radius < playerPaddle.x + playerPaddle.width &&
                this.y > playerPaddle.y &&
                this.y < playerPaddle.y + playerPaddle.height &&
                this.dx < 0
            ) {
                var hitPosition = (this.y - (playerPaddle.y + playerPaddle.height/2)) / (playerPaddle.height/2);
                this.dx = Math.abs(this.dx) * 1.05; // Speed up
                this.dy = hitPosition * this.speed;
                createParticles(this.x, this.y, '#e94560', 10);
            }
            
            if (
                this.x + this.radius > computerPaddle.x &&
                this.y > computerPaddle.y &&
                this.y < computerPaddle.y + computerPaddle.height &&
                this.dx > 0
            ) {
                var hitPosition = (this.y - (computerPaddle.y + computerPaddle.height/2)) / (computerPaddle.height/2);
                this.dx = -Math.abs(this.dx) * 1.05; // Speed up
                this.dy = hitPosition * this.speed;
                createParticles(this.x, this.y, '#f72585', 10);
            }
            
            // Score points
            if (this.x < 0) {
                computerScore++;
                this.reset();
                createParticles(canvas.width/2, canvas.height/2, '#f72585', 20);
            }
            
            if (this.x > canvas.width) {
                playerScore++;
                this.reset();
                createParticles(canvas.width/2, canvas.height/2, '#4cc9f0', 20);
            }
        };
        
        // Particle system
        function Particle(x, y, color) {
            this.x = x;
            this.y = y;
            this.size = Math.random() * 5 + 2;
            this.speedX = Math.random() * 6 - 3;
            this.speedY = Math.random() * 6 - 3;
            this.color = color;
            this.life = 30;
        }
        
        Particle.prototype.update = function() {
            this.x += this.speedX;
            this.y += this.speedY;
            this.life--;
        };
        
        Particle.prototype.draw = function() {
            ctx.fillStyle = this.color;
            ctx.globalAlpha = this.life/30;
            ctx.beginPath();
            ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
            ctx.fill();
            ctx.globalAlpha = 1;
        };
        
        function createParticles(x, y, color, count) {
            for (var i = 0; i < count; i++) {
                particleEffects.push(new Particle(x, y, color));
            }
        }
        
        function updateParticles() {
            for (var i = 0; i < particleEffects.length; i++) {
                particleEffects[i].update();
                if (particleEffects[i].life <= 0) {
                    particleEffects.splice(i, 1);
                    i--;
                }
            }
        }
        
        // Initialize game objects
        function initGame() {
            playerPaddle = new Paddle(canvas.width * 0.05, canvas.height / 2 - canvas.height * 0.075);
            computerPaddle = new Paddle(canvas.width * 0.935, canvas.height / 2 - canvas.height * 0.075);
            ball = new Ball();
            playerScore = 0;
            computerScore = 0;
            particleEffects = [];
        }
        
        // Draw center line
        function drawCenterLine() {
            ctx.setLineDash([canvas.height * 0.02, canvas.height * 0.015]);
            ctx.beginPath();
            ctx.moveTo(canvas.width / 2, 0);
            ctx.lineTo(canvas.width / 2, canvas.height);
            ctx.strokeStyle = 'rgba(255, 255, 255, 0.2)';
            ctx.lineWidth = canvas.width * 0.005;
            ctx.stroke();
            ctx.setLineDash([]);
        }
        
        // Draw scores
        function drawScores() {
            ctx.font = canvas.height * 0.1 + 'px Arial';
            ctx.textAlign = 'center';
            ctx.fillStyle = '#4cc9f0';
            ctx.fillText(playerScore, canvas.width * 0.25, canvas.height * 0.15);
            
            ctx.fillStyle = '#f72585';
            ctx.fillText(computerScore, canvas.width * 0.75, canvas.height * 0.15);
        }
        
        // Computer AI
        function computerAI() {
            var paddleCenter = computerPaddle.y + computerPaddle.height / 2;
            var ballCenter = ball.y;
            
            if (paddleCenter < ballCenter - computerPaddle.height * 0.1) {
                computerPaddle.move('down');
            } else if (paddleCenter > ballCenter + computerPaddle.height * 0.1) {
                computerPaddle.move('up');
            }
        }
        
        // Game loop
        function gameLoop(currentTime) {
            if (!gameRunning) return;
            
            // Clear canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Draw background
            drawCenterLine();
            
            // Update and draw game objects
            if (currentTime - lastTime > 16) { // ~60fps
                ball.update();
                computerAI();
                updateParticles();
                lastTime = currentTime;
            }
            
            playerPaddle.draw();
            computerPaddle.draw();
            ball.draw();
            
            // Draw particles
            for (var i = 0; i < particleEffects.length; i++) {
                particleEffects[i].draw();
            }
            
            // Draw scores
            drawScores();
            
            // Check for winner
            if (playerScore >= 5 || computerScore >= 5) {
                endGame();
                return;
            }
            
            requestAnimationFrame(gameLoop);
        }
        
        // Control handling
        var keys = {up: false, down: false};
        
        // Keyboard controls
        window.addEventListener('keydown', function(e) {
            if (e.key === 'ArrowUp') keys.up = true;
            if (e.key === 'ArrowDown') keys.down = true;
        });
        
        window.addEventListener('keyup', function(e) {
            if (e.key === 'ArrowUp') keys.up = false;
            if (e.key === 'ArrowDown') keys.down = false;
        });
        
        // Touch controls
        document.getElementById('upBtn').addEventListener('touchstart', function(e) {
            e.preventDefault();
            keys.up = true;
        });
        
        document.getElementById('upBtn').addEventListener('touchend', function(e) {
            e.preventDefault();
            keys.up = false;
        });
        
        document.getElementById('downBtn').addEventListener('touchstart', function(e) {
            e.preventDefault();
            keys.down = true;
        });
        
        document.getElementById('downBtn').addEventListener('touchend', function(e) {
            e.preventDefault();
            keys.down = false;
        });
        
        // Game state functions
        function startGame() {
            document.getElementById('startScreen').classList.add('hidden');
            initGame();
            gameRunning = true;
            requestAnimationFrame(gameLoop);
        }
        
        function endGame() {
            gameRunning = false;
            var winner = playerScore >= 5 ? "You Win! üéâ" : "Computer Wins! ü§ñ";
            document.getElementById('finalScore').textContent = winner;
            document.getElementById('gameOverScreen').classList.remove('hidden');
        }
        
        function restartGame() {
            document.getElementById('gameOverScreen').classList.add('hidden');
            startGame();
        }
        
        // Continuous paddle movement
        setInterval(function() {
            if (keys.up) playerPaddle.move('up');
            if (keys.down) playerPaddle.move('down');
        }, 16);
    </script>
</body>
</html>
```