<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WTAF Billboard Manager</title>
    <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=Inter:wght@400;600&display=swap" rel="stylesheet">
    <style>
        :root {
            --gradient-1: linear-gradient(45deg, #FF2E93, #FF61C7, #FFA5E5);
            --gradient-2: linear-gradient(145deg, #3F88FF, #6E7FFF, #ABF7FF);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: #111;
            color: #fff;
            min-height: 100vh;
            padding: 2rem;
        }

        h1, h2 {
            font-family: 'Space Grotesk', sans-serif;
            background: var(--gradient-1);
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            margin-bottom: 2rem;
        }

        .billboard-container {
            max-width: 800px;
            margin: 0 auto;
        }

        .loading {
            text-align: center;
            font-size: 1.5rem;
            padding: 2rem;
            animation: pulse 1.5s ease-in-out infinite;
        }

        .billboard-item {
            background: rgba(255,255,255,0.1);
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 1rem;
            position: relative;
            transition: all 0.3s ease;
        }

        .billboard-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.2);
        }

        .message {
            font-size: 1.2rem;
            margin-bottom: 1rem;
            line-height: 1.4;
        }

        .meta {
            font-size: 0.9rem;
            opacity: 0.7;
        }

        .actions {
            position: absolute;
            top: 1rem;
            right: 1rem;
            display: flex;
            gap: 0.5rem;
        }

        button {
            background: var(--gradient-2);
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            color: #fff;
            cursor: pointer;
            font-family: 'Inter', sans-serif;
            transition: all 0.3s ease;
        }

        button:hover {
            transform: scale(1.05);
            filter: brightness(1.2);
        }

        .delete-btn {
            background: linear-gradient(45deg, #ff3366, #ff5c5c);
        }

        .edit-modal {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: #222;
            padding: 2rem;
            border-radius: 12px;
            width: 90%;
            max-width: 500px;
            display: none;
            z-index: 100;
        }

        .modal-backdrop {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.8);
            display: none;
            z-index: 99;
        }

        textarea {
            width: 100%;
            min-height: 150px;
            background: #333;
            border: 1px solid #444;
            border-radius: 6px;
            padding: 1rem;
            color: #fff;
            font-family: 'Inter', sans-serif;
            margin-bottom: 1rem;
        }

        .floating-emoji {
            position: fixed;
            pointer-events: none;
            font-size: 2rem;
            transition: all 0.2s ease;
        }

        @keyframes pulse {
            0% { opacity: 0.5; }
            50% { opacity: 1; }
            100% { opacity: 0.5; }
        }

        .error-message {
            background: linear-gradient(45deg, #ff3366, #ff5c5c);
            padding: 1rem;
            border-radius: 6px;
            margin-bottom: 1rem;
            display: none;
        }
    </style>
</head>
<body>
    <div class="billboard-container">
        <h1>ðŸŒŸ BILLBOARD CHAOS CONTROL CENTER</h1>
        <div id="error-message" class="error-message"></div>
        <div id="loading" class="loading">Loading the chaos manifesto...</div>
        <div id="billboard-items"></div>
    </div>

    <div class="modal-backdrop" id="modal-backdrop"></div>
    <div class="edit-modal" id="edit-modal">
        <h2>Edit Message</h2>
        <textarea id="edit-message"></textarea>
        <button onclick="saveEdit()">Save Changes</button>
        <button onclick="closeModal()">Cancel</button>
    </div>

    <div class="floating-emoji" style="top: 10%; left: 10%;" data-value="2">âœ¨</div>
    <div class="floating-emoji" style="top: 20%; right: 15%;" data-value="3">ðŸ’«</div>
    <div class="floating-emoji" style="bottom: 15%; left: 20%;" data-value="4">ðŸŒŸ</div>
    <div class="floating-emoji" style="bottom: 25%; right: 10%;" data-value="2">âš¡</div>

    <script>
        let currentEditId = null;

        async function loadSubmissions() {
            const loading = document.getElementById('loading');
            const container = document.getElementById('billboard-items');
            
            try {
                const response = await fetch('/api/admin/load?origin_app_slug=ORIGIN_APP_SLUG');
                if (!response.ok) throw new Error('Failed to load submissions');
                const submissions = await response.json();
                
                loading.style.display = 'none';
                container.innerHTML = '';

                if (submissions.length === 0) {
                    container.innerHTML = '<div class="billboard-item">No messages yet! Be the first to write something wild.</div>';
                    return;
                }

                submissions.forEach(sub => {
                    const data = sub.submission_data;
                    const message = data.message || data.content || 'Empty message';
                    const date = new Date(sub.created_at).toLocaleString();

                    container.innerHTML += `
                        <div class="billboard-item">
                            <div class="message">${message}</div>
                            <div class="meta">Posted: ${date}</div>
                            <div class="actions">
                                <button onclick="openEdit('${sub.id}', '${message.replace(/'/g, "\\'")}')">Edit</button>
                                <button class="delete-btn" onclick="deleteRecord('${sub.id}')">Delete</button>
                            </div>
                        </div>
                    `;
                });
            } catch (error) {
                console.error('Error:', error);
                document.getElementById('error-message').style.display = 'block';
                document.getElementById('error-message').textContent = 'Failed to load messages';
            }
        }

        function openEdit(id, message) {
            currentEditId = id;
            document.getElementById('edit-message').value = message;
            document.getElementById('modal-backdrop').style.display = 'block';
            document.getElementById('edit-modal').style.display = 'block';
        }

        function closeModal() {
            document.getElementById('modal-backdrop').style.display = 'none';
            document.getElementById('edit-modal').style.display = 'none';
        }

        async function saveEdit() {
            const newMessage = document.getElementById('edit-message').value;
            
            try {
                await updateRecord(currentEditId, { message: newMessage });
                closeModal();
            } catch (error) {
                console.error('Error:', error);
            }
        }

        async function updateRecord(recordId, newData) {
            try {
                const response = await fetch('/api/admin/save', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        action_type: 'update',
                        record_id: recordId,
                        submission_data: newData
                    })
                });
                if (!response.ok) throw new Error('Failed to update record');
                await loadSubmissions();
            } catch (error) {
                console.error('Error:', error);
                document.getElementById('error-message').textContent = 'Failed to update message';
                document.getElementById('error-message').style.display = 'block';
            }
        }

        async function deleteRecord(recordId) {
            if (!confirm('Are you sure you want to delete this message?')) return;
            
            try {
                const response = await fetch('/api/admin/save', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        action_type: 'delete',
                        record_id: recordId
                    })
                });
                if (!response.ok) throw new Error('Failed to delete record');
                await loadSubmissions();
            } catch (error) {
                console.error('Error:', error);
                document.getElementById('error-message').textContent = 'Failed to delete message';
                document.getElementById('error-message').style.display = 'block';
            }
        }

        // Parallax effect for floating emojis
        document.addEventListener('mousemove', (e) => {
            document.querySelectorAll('.floating-emoji').forEach((emoji) => {
                const speed = emoji.getAttribute('data-value') || 2;
                const x = (e.clientX * speed) / 250;
                const y = (e.clientY * speed) / 250;
                emoji.style.transform = `translate(${x}px, ${y}px)`;
            });
        });

        // Initial load
        loadSubmissions();
    </script>
</body>
</html>