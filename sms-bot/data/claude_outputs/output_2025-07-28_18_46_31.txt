```html
<!DOCTYPE html>
<html>
<head>
    <title>Tetris</title>
    <meta name="viewport" content="width=device-width, user-scalable=no">
    <style>
        body { margin: 0; padding: 0; background: #111; color: #fff; font-family: sans-serif; touch-action: none; }
        canvas { display: block; }
        #controls { position: fixed; bottom: 0; width: 100%; height: 120px; background: #333; display: flex; justify-content: center; align-items: center; }
        .btn { width: 60px; height: 60px; margin: 5px; background: #555; border: none; border-radius: 10px; font-size: 24px; color: #fff; }
        .screen { position: absolute; top: 0; left: 0; width: 100%; height: calc(100% - 120px); display: flex; flex-direction: column; justify-content: center; align-items: center; background: rgba(0,0,0,0.8); }
        #game-canvas { background: #000; }
    </style>
</head>
<body>
    <canvas id="game-canvas"></canvas>
    
    <div id="intro-screen" class="screen">
        <h1>üß± TETRIS</h1>
        <p>Stack the blocks! üéØ</p>
        <button class="btn" onclick="startGame()">‚ñ∂Ô∏è</button>
    </div>
    
    <div id="end-screen" class="screen" style="display:none;">
        <h2>Game Over!</h2>
        <p>Score: <span id="final-score">0</span></p>
        <button class="btn" onclick="startGame()">üîÑ</button>
    </div>
    
    <div id="controls">
        <button class="btn" ontouchstart="move(-1,0)" onmousedown="move(-1,0)">‚¨ÖÔ∏è</button>
        <button class="btn" ontouchstart="move(0,1)" onmousedown="move(0,1)">‚¨áÔ∏è</button>
        <button class="btn" ontouchstart="move(1,0)" onmousedown="move(1,0)">‚û°Ô∏è</button>
        <button class="btn" ontouchstart="rotate()" onmousedown="rotate()">üîÑ</button>
    </div>

    <script>
        var canvas = document.getElementById('game-canvas');
        var ctx = canvas.getContext('2d');
        var introScreen = document.getElementById('intro-screen');
        var endScreen = document.getElementById('end-screen');
        var finalScoreEl = document.getElementById('final-score');
        
        var controlsHeight = 120;
        var gridWidth = 10;
        var gridHeight = 20;
        var blockSize;
        var grid = [];
        var score = 0;
        var gameOver = false;
        var lastTime = 0;
        var dropInterval = 1000;
        var dropCounter = 0;
        
        var pieces = [
            { shape: [[1,1,1,1]], color: '#00f0f0' }, // I
            { shape: [[1,1],[1,1]], color: '#f0f000' }, // O
            { shape: [[0,1,0],[1,1,1]], color: '#a000f0' }, // T
            { shape: [[0,1,1],[1,1,0]], color: '#00f000' }, // S
            { shape: [[1,1,0],[0,1,1]], color: '#f00000' }, // Z
            { shape: [[1,0,0],[1,1,1]], color: '#0000f0' }, // J
            { shape: [[0,0,1],[1,1,1]], color: '#f0a000' }  // L
        ];
        
        var currentPiece = null;
        var currentPosition = {x: 0, y: 0};
        
        function resizeCanvas() {
            var dpr = window.devicePixelRatio || 1;
            var width = window.innerWidth;
            var height = window.innerHeight - controlsHeight;
            
            canvas.width = width * dpr;
            canvas.height = height * dpr;
            canvas.style.width = width + 'px';
            canvas.style.height = height + 'px';
            ctx.scale(dpr, dpr);
            
            blockSize = Math.min(width / gridWidth, height / gridHeight);
        }
        
        function initGrid() {
            grid = [];
            for (var y = 0; y < gridHeight; y++) {
                grid[y] = [];
                for (var x = 0; x < gridWidth; x++) {
                    grid[y][x] = 0;
                }
            }
        }
        
        function getRandomPiece() {
            var piece = pieces[Math.floor(Math.random() * pieces.length)];
            return {
                shape: piece.shape.map(function(row) { return row.slice(); }),
                color: piece.color
            };
        }
        
        function spawnPiece() {
            currentPiece = getRandomPiece();
            currentPosition = {
                x: Math.floor(gridWidth / 2) - Math.floor(currentPiece.shape[0].length / 2),
                y: 0
            };
            
            if (checkCollision()) {
                gameOver = true;
            }
        }
        
        function checkCollision(offsetX, offsetY, piece) {
            var p = piece || currentPiece;
            var pos = {x: currentPosition.x + (offsetX||0), y: currentPosition.y + (offsetY||0)};
            
            for (var y = 0; y < p.shape.length; y++) {
                for (var x = 0; x < p.shape[y].length; x++) {
                    if (p.shape[y][x] !== 0) {
                        var newX = pos.x + x;
                        var newY = pos.y + y;
                        
                        if (newX < 0 || newX >= gridWidth || newY >= gridHeight) {
                            return true;
                        }
                        
                        if (newY >= 0 && grid[newY][newX] !== 0) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        function mergePiece() {
            for (var y = 0; y < currentPiece.shape.length; y++) {
                for (var x = 0; x < currentPiece.shape[y].length; x++) {
                    if (currentPiece.shape[y][x] !== 0) {
                        var gridY = currentPosition.y + y;
                        if (gridY >= 0) {
                            grid[gridY][currentPosition.x + x] = currentPiece.color;
                        }
                    }
                }
            }
        }
        
        function rotate() {
            if (!currentPiece || gameOver) return;
            
            var newShape = [];
            var shape = currentPiece.shape;
            
            for (var x = 0; x < shape[0].length; x++) {
                newShape[x] = [];
                for (var y = shape.length - 1; y >= 0; y--) {
                    newShape[x][shape.length - 1 - y] = shape[y][x];
                }
            }
            
            var originalShape = currentPiece.shape;
            currentPiece.shape = newShape;
            
            if (checkCollision()) {
                currentPiece.shape = originalShape;
            }
        }
        
        function move(dx, dy) {
            if (!currentPiece || gameOver) return;
            
            if (dx !== 0) {
                if (!checkCollision(dx, 0)) {
                    currentPosition.x += dx;
                }
            }
            
            if (dy !== 0) {
                if (!checkCollision(0, dy)) {
                    currentPosition.y += dy;
                } else if (dy === 1) {
                    mergePiece();
                    clearLines();
                    spawnPiece();
                }
            }
        }
        
        function clearLines() {
            var linesCleared = 0;
            for (var y = gridHeight - 1; y >= 0; y--) {
                var isLineComplete = true;
                for (var x = 0; x < gridWidth; x++) {
                    if (grid[y][x] === 0) {
                        isLineComplete = false;
                        break;
                    }
                }
                
                if (isLineComplete) {
                    linesCleared++;
                    for (var yy = y; yy > 0; yy--) {
                        for (var x = 0; x < gridWidth; x++) {
                            grid[yy][x] = grid[yy-1][x];
                        }
                    }
                    y++; // Recheck same row index after shift
                }
            }
            
            if (linesCleared > 0) {
                score += linesCleared * 100;
                dropInterval = Math.max(100, 1000 - Math.floor(score / 500) * 100);
            }
        }
        
        function drawGrid() {
            for (var y = 0; y < gridHeight; y++) {
                for (var x = 0; x < gridWidth; x++) {
                    if (grid[y][x] !== 0) {
                        ctx.fillStyle = grid[y][x];
                        ctx.fillRect(x * blockSize, y * blockSize, blockSize, blockSize);
                        ctx.strokeStyle = '#000';
                        ctx.strokeRect(x * blockSize, y * blockSize, blockSize, blockSize);
                    }
                }
            }
        }
        
        function drawPiece() {
            if (!currentPiece) return;
            
            ctx.fillStyle = currentPiece.color;
            for (var y = 0; y < currentPiece.shape.length; y++) {
                for (var x = 0; x < currentPiece.shape[y].length; x++) {
                    if (currentPiece.shape[y][x] !== 0) {
                        ctx.fillRect(
                            (currentPosition.x + x) * blockSize,
                            (currentPosition.y + y) * blockSize,
                            blockSize, blockSize
                        );
                        ctx.strokeStyle = '#000';
                        ctx.strokeRect(
                            (currentPosition.x + x) * blockSize,
                            (currentPosition.y + y) * blockSize,
                            blockSize, blockSize
                        );
                    }
                }
            }
        }
        
        function drawScore() {
            ctx.fillStyle = '#fff';
            ctx.font = '20px sans-serif';
            ctx.fillText('Score: ' + score, 10, 30);
        }
        
        function update(time) {
            if (gameOver) return;
            
            var deltaTime = time - lastTime;
            lastTime = time;
            
            dropCounter += deltaTime;
            if (dropCounter > dropInterval) {
                move(0, 1);
                dropCounter = 0;
            }
            
            draw();
            requestAnimationFrame(update);
        }
        
        function draw() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            drawGrid();
            drawPiece();
            drawScore();
        }
        
        function startGame() {
            introScreen.style.display = 'none';
            endScreen.style.display = 'none';
            
            resizeCanvas();
            initGrid();
            score = 0;
            gameOver = false;
            dropInterval = 1000;
            spawnPiece();
            
            lastTime = 0;
            dropCounter = 0;
            requestAnimationFrame(update);
        }
        
        window.addEventListener('resize', function() {
            if (introScreen.style.display === 'none' && endScreen.style.display === 'none') {
                resizeCanvas();
            }
        });
        
        document.addEventListener('keydown', function(e) {
            if (introScreen.style.display === 'none' && endScreen.style.display === 'none') {
                if (e.keyCode === 37) move(-1, 0); // left
                if (e.keyCode === 39) move(1, 0);  // right
                if (e.keyCode === 40) move(0, 1);  // down
                if (e.keyCode === 38) rotate();    // up (rotate)
            }
        });
        
        // Check for game over periodically
        setInterval(function() {
            if (gameOver && endScreen.style.display === 'none') {
                finalScoreEl.textContent = score;
                endScreen.style.display = 'flex';
            }
        }, 100);
    </script>
</body>
</html>
```