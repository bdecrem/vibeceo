```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Snake Game</title>
    <style>
        body, html {
            margin: 0;
            padding: 0;
            overflow: hidden;
            background: linear-gradient(135deg, #ff9a9e 0%, #fad0c4 100%);
            font-family: system-ui, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }
        canvas {
            background: #fff;
            border: 2px solid #333;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
        }
        .controls {
            position: fixed;
            bottom: 20px;
            right: 20px;
            display: grid;
            grid-template-columns: repeat(3, 60px);
            grid-template-rows: repeat(3, 60px);
            gap: 10px;
        }
        .controls button {
            width: 60px;
            height: 60px;
            background: rgba(255, 255, 255, 0.2);
            border: 2px solid rgba(255, 255, 255, 0.4);
            border-radius: 12px;
            outline: none;
        }
        .controls button:active {
            background: rgba(255, 255, 255, 0.4);
        }
        .btn-up { grid-column: 2; grid-row: 1; }
        .btn-left { grid-column: 1; grid-row: 2; }
        .btn-right { grid-column: 3; grid-row: 2; }
        .btn-down { grid-column: 2; grid-row: 3; }
    </style>
</head>
<body>
    <canvas id="gameCanvas"></canvas>
    <div class="controls">
        <button class="btn-up" id="up">↑</button>
        <button class="btn-left" id="left">←</button>
        <button class="btn-right" id="right">→</button>
        <button class="btn-down" id="down">↓</button>
    </div>
    <script>
        var canvas = document.getElementById('gameCanvas');
        var ctx = canvas.getContext('2d', { alpha: false });
        var devicePixelRatio = window.devicePixelRatio || 1;
        canvas.width = window.innerWidth * devicePixelRatio;
        canvas.height = window.innerHeight * devicePixelRatio;
        canvas.style.width = window.innerWidth + 'px';
        canvas.style.height = window.innerHeight + 'px';
        ctx.scale(devicePixelRatio, devicePixelRatio);

        var gridSize = 20;
        var snake = [{ x: 5, y: 5 }];
        var direction = { x: 1, y: 0 };
        var food = { x: 10, y: 10 };
        var gameOver = false;
        var score = 0;

        function update() {
            var head = { x: snake[0].x + direction.x, y: snake[0].y + direction.y };
            if (head.x === food.x && head.y === food.y) {
                score++;
                placeFood();
            } else {
                snake.pop();
            }
            if (head.x < 0 || head.y < 0 || head.x >= canvas.width / gridSize || head.y >= canvas.height / gridSize || snake.some(segment => segment.x === head.x && segment.y === head.y)) {
                gameOver = true;
            }
            snake.unshift(head);
        }

        function draw() {
            ctx.clearRect(0, 0, window.innerWidth, window.innerHeight);
            ctx.fillStyle = '#333';
            snake.forEach(segment => ctx.fillRect(segment.x * gridSize, segment.y * gridSize, gridSize, gridSize));
            ctx.fillStyle = '#e74c3c';
            ctx.fillRect(food.x * gridSize, food.y * gridSize, gridSize, gridSize);
        }

        function placeFood() {
            food.x = Math.floor(Math.random() * canvas.width / gridSize);
            food.y = Math.floor(Math.random() * canvas.height / gridSize);
        }

        function gameLoop(currentTime) {
            if (currentTime - lastTime > frameDelay) {
                lastTime = currentTime;
                update();
                draw();
            }
            if (!gameOver) {
                requestAnimationFrame(gameLoop);
            } else {
                alert('Game Over! Score: ' + score);
                location.reload();
            }
        }

        var lastTime = 0;
        var frameDelay = 100;
        requestAnimationFrame(gameLoop);

        function changeDirection(newDirection) {
            if ((newDirection.x !== -direction.x || snake.length === 1) && (newDirection.y !== -direction.y || snake.length === 1)) {
                direction = newDirection;
            }
        }

        document.addEventListener('keydown', function (e) {
            if (e.key === 'ArrowUp') changeDirection({ x: 0, y: -1 });
            if (e.key === 'ArrowDown') changeDirection({ x: 0, y: 1 });
            if (e.key === 'ArrowLeft') changeDirection({ x: -1, y: 0 });
            if (e.key === 'ArrowRight') changeDirection({ x: 1, y: 0 });
        });

        document.getElementById('up').addEventListener('click', function () { changeDirection({ x: 0, y: -1 }); });
        document.getElementById('down').addEventListener('click', function () { changeDirection({ x: 0, y: 1 }); });
        document.getElementById('left').addEventListener('click', function () { changeDirection({ x: -1, y: 0 }); });
        document.getElementById('right').addEventListener('click', function () { changeDirection({ x: 1, y: 0 }); });
    </script>
</body>
</html>
```