<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TECHNO TRANSMISSION ðŸ–¤</title>
    <script src="https://unpkg.com/@supabase/supabase-js@2"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=Inter:wght@400;600&display=swap');

        body { 
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #0a0a0a 0%, #1a1a1a 50%, #2a2a2a 100%);
            background-size: 400% 400%;
            animation: gradientShift 15s ease-in-out infinite;
            color: #e0e0e0;
            overflow-x: hidden;
            margin: 0;
            min-height: 100vh;
        }

        h1, h2, h3 {
            font-family: 'Space Grotesk', sans-serif;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: -0.02em;
        }

        @keyframes gradientShift {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }

        .app-container {
            max-width: 800px;
            margin: 0 auto;
            background: rgba(0,0,0,0.7);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            padding: 2rem;
            border: 1px solid rgba(255,255,255,0.1);
            position: relative;
            z-index: 10;
            min-height: 90vh;
        }

        .screen { display: none; }
        .screen.active { display: block; animation: fadeIn 0.3s ease; }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        button {
            background: linear-gradient(135deg, #1a1a1a, #333);
            color: #00ff41;
            border: 1px solid #00ff41;
            padding: 15px 30px;
            border-radius: 50px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-size: 14px;
            margin: 10px 5px;
        }

        button:hover {
            transform: scale(1.05);
            box-shadow: 0 0 30px rgba(0, 255, 65, 0.3);
            background: #00ff41;
            color: #000;
        }

        input, select {
            background: rgba(255,255,255,0.05);
            border: 2px solid rgba(0, 255, 65, 0.3);
            color: #00ff41;
            padding: 12px 20px;
            border-radius: 30px;
            font-size: 16px;
            width: 100%;
            margin: 10px 0;
            transition: all 0.3s ease;
        }

        input:focus, select:focus {
            outline: none;
            border-color: #00ff41;
            box-shadow: 0 0 20px rgba(0, 255, 65, 0.2);
        }

        .chat-container {
            height: 60vh;
            overflow-y: auto;
            padding: 20px;
            margin: 20px 0;
            background: rgba(0,0,0,0.5);
            border-radius: 15px;
            border: 1px solid rgba(0, 255, 65, 0.2);
        }

        .message {
            background: rgba(255,255,255,0.05);
            border-radius: 20px;
            padding: 15px 20px;
            margin: 10px 0;
            animation: slideIn 0.3s ease;
            max-width: 80%;
        }

        .message.own {
            margin-left: auto;
            background: rgba(0, 255, 65, 0.1);
            border: 1px solid rgba(0, 255, 65, 0.2);
        }

        .message-header {
            color: #00ff41;
            font-size: 0.8em;
            margin-bottom: 5px;
        }

        .message-content {
            color: #e0e0e0;
        }

        .chat-input {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }

        .chat-input input {
            flex: 1;
        }

        .floating-emoji {
            position: fixed;
            font-size: 2rem;
            animation: float 6s ease-in-out infinite;
            pointer-events: none;
            z-index: 5;
            opacity: 0.3;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            50% { transform: translateY(-20px) rotate(10deg); }
        }

        @keyframes glitch {
            0%, 100% { text-shadow: 2px 2px 0 #00ff41, -2px -2px 0 #ff00ff; }
            25% { text-shadow: -2px 2px 0 #00ff41, 2px -2px 0 #ff00ff; }
            50% { text-shadow: 2px -2px 0 #00ff41, -2px 2px 0 #ff00ff; }
            75% { text-shadow: -2px -2px 0 #00ff41, 2px 2px 0 #ff00ff; }
        }

        h1 {
            color: #00ff41;
            text-shadow: 0 0 10px rgba(0, 255, 65, 0.5);
            animation: glitch 3s ease-in-out infinite;
        }

        ::-webkit-scrollbar {
            width: 10px;
        }

        ::-webkit-scrollbar-track {
            background: rgba(0,0,0,0.3);
        }

        ::-webkit-scrollbar-thumb {
            background: #00ff41;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <div class="floating-emoji" style="top: 5%; left: 2%;" data-value="2">ðŸŽ§</div>
    <div class="floating-emoji" style="top: 5%; right: 2%;" data-value="3">ðŸ”Š</div>
    <div class="floating-emoji" style="bottom: 5%; left: 2%;" data-value="1">ðŸŒ™</div>
    <div class="floating-emoji" style="bottom: 5%; right: 2%;" data-value="4">âš¡</div>

    <div class="app-container">
        <div id="welcome-screen" class="screen active">
            <h1>TECHNO TRANSMISSION</h1>
            <p>WHERE THE UNDERGROUND NEVER SLEEPS ðŸŒ™</p>
            <button onclick="showNewUserScreen()">New Raver</button>
            <button onclick="showReturningUserScreen()">Return to Underground</button>
        </div>
        
        <div id="new-user-screen" class="screen">
            <h1>JOIN THE COLLECTIVE</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Enter the Void</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="returning-user-screen" class="screen">
            <h1>RESUME TRANSMISSION</h1>
            <select id="user-label-select">
                <option>Select Your Alias</option>
            </select>
            <input type="text" id="returning-passcode" placeholder="Enter 4-digit passcode" maxlength="4">
            <button onclick="loginReturningUser()">Return to Void</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="main-screen" class="screen">
            <h1>TECHNO TRANSMISSION</h1>
            <div id="user-status">CONNECTED AS <span id="current-user-label"></span></div>
            
            <div id="app-content">
                <div class="chat-container" id="chat-messages"></div>
                <div class="chat-input">
                    <input type="text" id="message-input" placeholder="TRANSMIT YOUR MESSAGE TO THE VOID..." onkeypress="if(event.key === 'Enter') sendMessage()">
                    <button onclick="sendMessage()">TRANSMIT</button>
                </div>
            </div>
            
            <button onclick="showScreen('welcome-screen')">EXIT VOID</button>
        </div>
    </div>

    <script>
        const APP_ID = 'test1';
        const USER_LABELS = ['raver1ðŸŽ§', 'raver2âš¡', 'raver3ðŸŒ™', 'raver4ðŸ’Š', 'raver5ðŸ”Š'];
        
        const supabase = window.supabase.createClient(
            'https://tqniseocczttrfwtpbdr.supabase.co',
            'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRxbmlzZW9jY3p0dHJmd3RwYmRyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg4ODI5MjIsImV4cCI6MjA2NDQ1ODkyMn0.mwb33p0xIEXy5F7ZoLc1j9-4ZNk3FuT4zrR0aTdm350'
        );

        let currentUser = null;
        let pollingInterval;

        // Include all required authentication functions here
        // [Previous authentication functions remain exactly the same]

        async function sendMessage() {
            const input = document.getElementById('message-input');
            const message = input.value.trim();
            
            if (!message) return;
            
            try {
                await supabase.from('wtaf_zero_admin_collaborative').insert({
                    app_id: APP_ID,
                    participant_id: currentUser.participantId,
                    action_type: 'message',
                    participant_data: {
                        userLabel: currentUser.userLabel
                    },
                    content_data: {
                        message: message,
                        timestamp: Date.now()
                    }
                });
                
                input.value = '';
                await loadLatestData();
            } catch (error) {
                console.error('Message error:', error);
                alert('TRANSMISSION FAILED, REALITY GLITCH ðŸ“¡');
            }
        }

        async function loadLatestData() {
            const { data: messages } = await supabase
                .from('wtaf_zero_admin_collaborative')
                .select('*')
                .eq('app_id', APP_ID)
                .eq('action_type', 'message')
                .order('created_at', { ascending: true });
            
            updateUI(messages);
        }

        function updateUI(messages) {
            const chatContainer = document.getElementById('chat-messages');
            chatContainer.innerHTML = messages?.map(msg => `
                <div class="message ${msg.participant_id === currentUser?.participantId ? 'own' : ''}">
                    <div class="message-header">${msg.participant_data.userLabel}</div>
                    <div class="message-content">${msg.content_data.message}</div>
                </div>
            `).join('') || '';
            
            chatContainer.scrollTop = chatContainer.scrollHeight;
        }

        // Include polling functions
        function startPolling() {
            pollingInterval = setInterval(async () => {
                await loadLatestData();
            }, 2000);
        }

        function stopPolling() {
            if (pollingInterval) {
                clearInterval(pollingInterval);
                pollingInterval = null;
            }
        }

        // Mouse parallax effect
        document.addEventListener('mousemove', (e) => {
            document.querySelectorAll('.floating-emoji').forEach((elem) => {
                const speed = elem.getAttribute('data-value') || 2;
                const x = (e.clientX * speed) / 100;
                const y = (e.clientY * speed) / 100;
                elem.style.transform = `translateX(${x}px) translateY(${y}px)`;
            });
        });

        // Easter egg
        console.log('ðŸŽ§ Welcome to the underground. Type wtaf() to unlock the void...');
        
        window.wtaf = function() {
            document.body.style.animation = 'rainbow 1s infinite';
            setTimeout(() => {
                document.body.style.animation = '';
                alert('ðŸŽ§ UNDERGROUND MODE ACTIVATED! The void welcomes you.');
            }, 3000);
        };
    </script>
</body>
</html>