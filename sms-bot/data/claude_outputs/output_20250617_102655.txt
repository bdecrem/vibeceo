```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Paddle Clash</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;600;700&family=Inter:wght@400;500&display=swap');
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(45deg, #ff006e, #8338ec, #3a86ff, #06ffa5);
            background-size: 400% 400%;
            animation: gradientShift 15s ease infinite;
            min-height: 100vh;
            overflow: hidden;
            position: relative;
        }
        
        @keyframes gradientShift {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }
        
        .floating-emoji {
            position: absolute;
            font-size: 2rem;
            pointer-events: none;
            z-index: 1;
            animation: float 6s ease-in-out infinite;
        }
        
        .floating-emoji:nth-child(1) {
            top: 10%;
            left: 10%;
            animation-delay: 0s;
        }
        
        .floating-emoji:nth-child(2) {
            top: 20%;
            right: 15%;
            animation-delay: 2s;
        }
        
        .floating-emoji:nth-child(3) {
            bottom: 15%;
            left: 20%;
            animation-delay: 4s;
        }
        
        @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            50% { transform: translateY(-20px) rotate(5deg); }
        }
        
        .game-container {
            position: relative;
            width: 100vw;
            height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            z-index: 10;
        }
        
        .screen {
            display: none;
            text-align: center;
            backdrop-filter: blur(20px);
            background: rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            padding: 2rem;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            animation: slideIn 0.5s ease-out;
        }
        
        .screen.active {
            display: block;
        }
        
        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        h1 {
            font-family: 'Space Grotesk', sans-serif;
            font-size: clamp(2rem, 8vw, 4rem);
            font-weight: 700;
            color: #fff;
            text-shadow: 0 0 20px rgba(255, 0, 110, 0.8);
            margin-bottom: 1rem;
            letter-spacing: -0.02em;
        }
        
        .subtitle {
            font-size: 1.2rem;
            color: rgba(255, 255, 255, 0.8);
            margin-bottom: 2rem;
            font-weight: 500;
        }
        
        .btn {
            background: linear-gradient(45deg, #ff006e, #8338ec);
            border: none;
            border-radius: 50px;
            color: white;
            font-size: 1.1rem;
            font-weight: 600;
            padding: 1rem 2rem;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(255, 0, 110, 0.4);
            min-width: 44px;
            min-height: 44px;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(255, 0, 110, 0.6);
        }
        
        .btn:active {
            transform: translateY(0);
        }
        
        #gameCanvas {
            border-radius: 15px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);
            background: rgba(0, 0, 0, 0.2);
            display: none;
        }
        
        #gameCanvas.active {
            display: block;
        }
        
        .score-display {
            position: absolute;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            color: white;
            font-size: 1.5rem;
            font-weight: 600;
            text-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
            z-index: 20;
        }
        
        .final-score {
            font-size: 3rem;
            color: #06ffa5;
            text-shadow: 0 0 20px rgba(6, 255, 165, 0.8);
            margin: 1rem 0;
        }
        
        @media (max-width: 768px) {
            .screen {
                margin: 1rem;
                padding: 1.5rem;
            }
            
            .floating-emoji {
                font-size: 1.5rem;
            }
        }
    </style>
</head>
<body>
    <div class="floating-emoji">ðŸŽ®</div>
    <div class="floating-emoji">âš¡</div>
    <div class="floating-emoji">ðŸ”¥</div>
    
    <div class="game-container">
        <div class="score-display" id="scoreDisplay" style="display: none;">Score: 0</div>
        
        <div class="screen active" id="startScreen">
            <h1>PADDLE CLASH</h1>
            <p class="subtitle">Neon reflexes meet retro chaos ðŸŽ®</p>
            <button class="btn" id="startBtn">TAP TO CLASH</button>
        </div>
        
        <canvas id="gameCanvas" width="800" height="400"></canvas>
        
        <div class="screen" id="endScreen">
            <h1>GAME OVER</h1>
            <div class="final-score" id="finalScore">0</div>
            <p class="subtitle">Your neon legacy burns bright âš¡</p>
            <button class="btn" id="restartBtn">CLASH AGAIN</button>
        </div>
    </div>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const startScreen = document.getElementById('startScreen');
        const endScreen = document.getElementById('endScreen');
        const scoreDisplay = document.getElementById('scoreDisplay');
        const finalScore = document.getElementById('finalScore');
        const startBtn = document.getElementById('startBtn');
        const restartBtn = document.getElementById('restartBtn');
        
        let gameState = 'start';
        let score = 0;
        let animationId;
        
        // Responsive canvas setup
        function resizeCanvas() {
            const rect = canvas.getBoundingClientRect();
            const dpr = window.devicePixelRatio || 1;
            
            canvas.width = Math.min(800, window.innerWidth - 40) * dpr;
            canvas.height = Math.min(400, window.innerHeight * 0.6) * dpr;
            
            canvas.style.width = (canvas.width / dpr) + 'px';
            canvas.style.height = (canvas.height / dpr) + 'px';
            
            ctx.scale(dpr, dpr);
        }
        
        // Game objects
        const game = {
            width: 800,
            height: 400,
            paddle: {
                x: 0,
                y: 0,
                width: 15,
                height: 80,
                speed: 8
            },
            ball: {
                x: 400,
                y: 200,
                radius: 8,
                dx: 5,
                dy: 3,
                speed: 5
            },
            ai: {
                x: 0,
                y: 0,
                width: 15,
                height: 80,
                speed: 4
            }
        };
        
        function initGame() {
            resizeCanvas();
            
            const actualWidth = canvas.width / (window.devicePixelRatio || 1);
            const actualHeight = canvas.height / (window.devicePixelRatio || 1);
            
            game.width = actualWidth;
            game.height = actualHeight;
            
            // Reset positions
            game.paddle.x = 20;
            game.paddle.y = actualHeight / 2 - game.paddle.height / 2;
            
            game.ai.x = actualWidth - 35;
            game.ai.y = actualHeight / 2 - game.ai.height / 2;
            
            game.ball.x = actualWidth / 2;
            game.ball.y = actualHeight / 2;
            game.ball.dx = Math.random() > 0.5 ? 5 : -5;
            game.ball.dy = (Math.random() - 0.5) * 6;
            
            score = 0;
            updateScore();
        }
        
        function updateScore() {
            scoreDisplay.textContent = `Score: ${score}`;
        }
        
        function drawRect(x, y, width, height, color) {
            ctx.fillStyle = color;
            ctx.fillRect(x, y, width, height);
            
            // Neon glow effect
            ctx.shadowColor = color;
            ctx.shadowBlur = 20;
            ctx.fillRect(x, y, width, height);
            ctx.shadowBlur = 0;
        }
        
        function drawBall(x, y, radius, color) {
            ctx.beginPath();
            ctx.arc(x, y, radius, 0, Math.PI * 2);
            ctx.fillStyle = color;
            ctx.fill();
            
            // Neon glow effect
            ctx.shadowColor = color;
            ctx.shadowBlur = 15;
            ctx.fill();
            ctx.shadowBlur = 0;
        }
        
        function update() {
            // Move ball
            game.ball.x += game.ball.dx;
            game.ball.y += game.ball.dy;
            
            // Ball collision with top/bottom walls
            if (game.ball.y <= game.ball.radius || game.ball.y >= game.height - game.ball.radius) {
                game.ball.dy = -game.ball.dy;
            }
            
            // Ball collision with player paddle
            if (game.ball.x <= game.paddle.x + game.paddle.width &&
                game.ball.x >= game.paddle.x &&
                game.ball.y >= game.paddle.y &&
                game.ball.y <= game.paddle.y + game.paddle.height) {
                
                game.ball.dx = Math.abs(game.ball.dx);
                game.ball.dy += (Math.random() - 0.5) * 2;
                score += 10;
                updateScore();
            }
            
            // Ball collision with AI paddle
            if (game.ball.x >= game.ai.x &&
                game.ball.x <= game.ai.x + game.ai.width &&
                game.ball.y >= game.ai.y &&
                game.ball.y <= game.ai.y + game.ai.height) {
                
                game.ball.dx = -Math.abs(game.ball.dx);
                game.ball.dy += (Math.random() - 0.5) * 2;
            }
            
            // AI movement
            const aiCenter = game.ai.y + game.ai.height / 2;
            if (aiCenter < game.ball.y - 35) {
                game.ai.y += game.ai.speed;
            } else if (aiCenter > game.ball.y + 35) {
                game.ai.y -= game.ai.speed;
            }
            
            // Keep AI paddle in bounds
            game.ai.y = Math.max(0, Math.min(game.height - game.ai.height, game.ai.y));
            
            // Ball out of bounds (game over)
            if (game.ball.x < 0 || game.ball.x > game.width) {
                endGame();
                return;
            }
            
            // Keep ball speed reasonable
            game.ball.dy = Math.max(-8, Math.min(8, game.ball.dy));
        }
        
        function render() {
            // Clear canvas with dark background
            ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';
            ctx.fillRect(0, 0, game.width, game.height);
            
            // Draw center line
            ctx.setLineDash([5, 15]);
            ctx.beginPath();
            ctx.moveTo(game.width / 2, 0);
            ctx.lineTo(game.width / 2, game.height);
            ctx.strokeStyle = 'rgba(255, 255, 255, 0.3)';
            ctx.lineWidth = 2;
            ctx.stroke();
            ctx.setLineDash([]);
            
            // Draw paddles
            drawRect(game.paddle.x, game.paddle.y, game.paddle.width, game.paddle.height, '#ff006e');
            drawRect(game.ai.x, game.ai.y, game.ai.width, game.ai.height, '#06ffa5');
            
            // Draw ball
            drawBall(game.ball.x, game.ball.y, game.ball.radius, '#8338ec');
        }
        
        function gameLoop() {
            if (gameState === 'playing') {
                update();
                render();
                animationId = requestAnimationFrame(gameLoop);
            }
        }
        
        function startGame() {
            gameState = 'playing';
            startScreen.classList.remove('active');
            canvas.classList.add('active');
            scoreDisplay.style.display = 'block';
            initGame();
            gameLoop();
        }
        
        function endGame() {
            gameState = 'end';
            canvas.classList.remove('active');
            scoreDisplay.style.display = 'none';
            endScreen.classList.add('active');
            finalScore.textContent = score;
            
            if (animationId) {
                cancelAnimationFrame(animationId);
            }
        }
        
        function restartGame() {
            endScreen.classList.remove('active');
            startGame();
        }
        
        // Touch controls
        let touchStartY = 0;
        let isMoving = false;
        
        canvas.addEventListener('touchstart', (e) => {
            e.preventDefault();
            touchStartY = e.touches[0].clientY;
            isMoving = true;
        });
        
        canvas.addEventListener('touchmove', (e) => {
            e.preventDefault();
            if (!isMoving) return;
            
            const touchY = e.touches[0].clientY;
            const rect = canvas.getBoundingClientRect();
            const canvasY = touchY - rect.top;
            const scaledY = (canvasY / rect.height) * game.height;
            
            game.paddle.y = scaledY - game.paddle.height / 2;
            game.paddle.y = Math.max(0, Math.min(game.height - game.paddle.height, game.paddle.y));
        });
        
        canvas.addEventListener('touchend', (e) => {
            e.preventDefault();
            isMoving = false;
        });
        
        // Mouse controls for desktop
        canvas.addEventListener('mousemove', (e) => {
            const rect = canvas.getBoundingClientRect();
            const mouseY = e.clientY - rect.top;
            const scaledY = (mouseY / rect.height) * game.height;
            
            game.paddle.y = scaledY - game.paddle.height / 2;
            game.paddle.y = Math.max(0, Math.min(game.height - game.paddle.height, game.paddle.y));
        });
        
        // Keyboard controls
        const keys = {};
        
        document.addEventListener('keydown', (e) => {
            keys[e.key] = true;
        });
        
        document.addEventListener('keyup', (e) => {
            keys[e.key] = false;
        });
        
        function handleKeyboard() {
            if (keys['ArrowUp'] && game.paddle.y > 0) {
                game.paddle.y -= game.paddle.speed;
            }
            if (keys['ArrowDown'] && game.paddle.y < game.height - game.paddle.height) {
                game.paddle.y += game.paddle.speed;
            }
        }
        
        // Add keyboard handling to game loop
        const originalUpdate = update;
        update = function() {
            handleKeyboard();
            originalUpdate();
        };
        
        // Floating emoji parallax effect
        document.addEventListener('mousemove', (e) => {
            const emojis = document.querySelectorAll('.floating-emoji');
            const x = e.clientX / window.innerWidth;
            const y = e.clientY / window.innerHeight;
            
            emojis.forEach((emoji, index) => {
                const speed = (index + 1) * 0.5;
                const xOffset = (x - 0.5) * speed * 20;
                const yOffset = (y - 0.5) * speed * 20;
                emoji.style.transform = `translate(${xOffset}px, ${yOffset}px)`;
            });
        });
        
        // Event listeners
        startBtn.addEventListener('click', startGame);
        restartBtn.addEventListener('click', restartGame);
        
        // Prevent zoom on double tap
        let lastTouchEnd = 0;
        document.addEventListener('touchend', function (event) {
            const now = (new Date()).getTime();
            if (now - lastTouchEnd <= 300) {
                event.preventDefault();
            }
            lastTouchEnd = now;
        }, false);
        
        // Initialize
        window.addEventListener('resize', () => {
            if (gameState === 'playing') {
                resizeCanvas();
            }
        });
        
        resizeCanvas();
    </script>
</body>
</html>
```