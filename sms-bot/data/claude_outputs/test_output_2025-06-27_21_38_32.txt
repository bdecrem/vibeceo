```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <title>WTAF Snake - Chaos Serpent</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=Orbitron:wght@400;700&display=swap');

        * {
            -webkit-tap-highlight-color: transparent;
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            user-select: none;
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Orbitron', monospace;
            background: linear-gradient(135deg, #FF2E93 0%, #7C3AED 50%, #3F88FF 100%);
            background-size: 400% 400%;
            animation: gradientShift 15s ease-in-out infinite;
            margin: 0;
            padding: 0;
            overflow: hidden;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }

        @keyframes gradientShift {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }

        .game-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 20px;
            max-width: 90vw;
        }

        #gameCanvas {
            display: block;
            background: rgba(0,0,0,0.3);
            border: 2px solid rgba(0,255,198,0.5);
            border-radius: 15px;
            box-shadow: 0 0 30px rgba(123,58,237,0.4);
            touch-action: none;
        }

        .game-ui {
            display: flex;
            justify-content: space-between;
            align-items: center;
            width: 100%;
            max-width: 600px;
            color: #00FFC6;
            font-weight: 700;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.8);
            text-transform: uppercase;
            letter-spacing: 1px;
            padding: 0 20px;
        }

        .control-legend {
            background: rgba(0,0,0,0.6);
            border: 1px solid rgba(0,255,198,0.3);
            border-radius: 10px;
            padding: 15px;
            margin: 10px 0;
            color: #00FFC6;
            font-size: 12px;
            text-transform: uppercase;
            letter-spacing: 1px;
            text-align: center;
        }

        .control-legend h4 {
            margin: 0 0 10px 0;
            color: #FF2E93;
        }

        .mobile-controls {
            display: flex;
            justify-content: center;
            gap: 15px;
            flex-wrap: wrap;
            margin: 20px 0;
        }

        .control-button {
            background: linear-gradient(135deg, #00FFC6, #57E2E5);
            border: none;
            border-radius: 50%;
            width: 60px;
            height: 60px;
            font-size: 18px;
            color: #000;
            font-weight: bold;
            box-shadow: 0 4px 15px rgba(0,255,198,0.4);
            touch-action: manipulation;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            text-transform: uppercase;
            font-size: 12px;
        }

        .control-button:active {
            transform: scale(0.95);
            box-shadow: 0 2px 8px rgba(0,255,198,0.6);
        }

        .restart-button {
            background: linear-gradient(135deg, #FF2E93, #FF61C7);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 50px;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 1px;
            cursor: pointer;
            margin: 20px 0;
            font-size: 14px;
            display: none;
        }

        .restart-button:hover {
            transform: scale(1.05);
            box-shadow: 0 0 20px rgba(255,46,147,0.5);
        }

        .game-over-text {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: #FF2E93;
            font-size: 24px;
            font-weight: 700;
            text-transform: uppercase;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.8);
            animation: glitch 0.5s ease-in-out infinite alternate;
            pointer-events: none;
        }

        @keyframes glitch {
            0% { text-shadow: 2px 2px 4px rgba(0,0,0,0.8); }
            100% { text-shadow: -2px -2px 4px rgba(255,46,147,0.8), 2px 2px 4px rgba(0,255,198,0.8); }
        }
    </style>
</head>
<body>
    <div class="game-container">
        <div class="game-ui">
            <div class="score">CHAOS POINTS: <span id="score">0</span></div>
            <div class="high-score">BEST: <span id="highScore">0</span></div>
        </div>

        <canvas id="gameCanvas"></canvas>

        <div class="control-legend">
            <h4>üêç SERPENT CONTROLS</h4>
            <div>ARROWS/SWIPE: Move ‚Ä¢ SPACE/TAP: Boost ‚Ä¢ P: Pause ‚Ä¢ R: Restart</div>
        </div>

        <div class="mobile-controls">
            <button class="control-button" id="upBtn">‚ñ≤</button>
            <button class="control-button" id="leftBtn">‚óÄ</button>
            <button class="control-button" id="downBtn">‚ñº</button>
            <button class="control-button" id="rightBtn">‚ñ∂</button>
            <button class="control-button" id="boostBtn">‚ö°</button>
            <button class="control-button" id="pauseBtn">‚è∏</button>
        </div>

        <button class="restart-button" onclick="restartGame()" id="restartBtn">
            üîÑ RESTART CHAOS
        </button>
    </div>

    <script>
        // Game variables
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const scoreElement = document.getElementById('score');
        const highScoreElement = document.getElementById('highScore');
        const restartBtn = document.getElementById('restartBtn');

        // Set canvas size
        canvas.width = Math.min(600, window.innerWidth - 40);
        canvas.height = Math.min(600, window.innerHeight - 200);

        // Game state
        let gameState = 'playing';
        let score = 0;
        let highScore = localStorage.getItem('snakeHighScore') || 0;
        highScoreElement.textContent = highScore;

        // Snake properties
        const gridSize = 20;
        let snake = [{ x: 200, y: 200 }];
        let direction = { x: gridSize, y: 0 };
        let nextDirection = { x: gridSize, y: 0 };
        let food = { x: 0, y: 0 };
        let boost = false;
        let gameSpeed = 150;

        // Particle system
        class ParticleSystem {
            constructor() {
                this.particles = [];
            }

            createExplosion(x, y, color = '#00FFC6') {
                for(let i = 0; i < 12; i++) {
                    this.particles.push({
                        x: x + gridSize/2,
                        y: y + gridSize/2,
                        vx: (Math.random() - 0.5) * 8,
                        vy: (Math.random() - 0.5) * 8,
                        life: 30,
                        color: color
                    });
                }
            }

            update() {
                this.particles = this.particles.filter(p => {
                    p.x += p.vx;
                    p.y += p.vy;
                    p.life--;
                    return p.life > 0;
                });
            }

            render() {
                this.particles.forEach(p => {
                    ctx.globalAlpha = p.life / 30;
                    ctx.fillStyle = p.color;
                    ctx.fillRect(p.x, p.y, 3, 3);
                });
                ctx.globalAlpha = 1;
            }
        }

        const particles = new ParticleSystem();

        // Screen shake
        let screenShake = { intensity: 0, duration: 0 };

        function addScreenShake(intensity, duration) {
            screenShake.intensity = Math.max(screenShake.intensity, intensity);
            screenShake.duration = Math.max(screenShake.duration, duration);
        }

        function updateScreenShake() {
            if (screenShake.duration > 0) {
                const shakeX = (Math.random() - 0.5) * screenShake.intensity;
                const shakeY = (Math.random() - 0.5) * screenShake.intensity;
                canvas.style.transform = `translate(${shakeX}px, ${shakeY}px)`;
                screenShake.duration--;
                screenShake.intensity *= 0.95;
            } else {
                canvas.style.transform = 'translate(0, 0)';
            }
        }

        // Generate food
        function generateFood() {
            const maxX = Math.floor(canvas.width / gridSize) - 1;
            const maxY = Math.floor(canvas.height / gridSize) - 1;
            
            do {
                food.x = Math.floor(Math.random() * maxX) * gridSize;
                food.y = Math.floor(Math.random() * maxY) * gridSize;
            } while (snake.some(segment => segment.x === food.x && segment.y === food.y));
        }

        // Initialize game
        function initializeGame() {
            snake = [{ x: 200, y: 200 }];
            direction = { x: gridSize, y: 0 };
            nextDirection = { x: gridSize, y: 0 };
            score = 0;
            gameState = 'playing';
            boost = false;
            gameSpeed = 150;
            generateFood();
            scoreElement.textContent = score;
            restartBtn.style.display = 'none';
        }

        // Update game
        function update() {
            if (gameState !== 'playing') return;

            // Update direction
            direction = { ...nextDirection };

            // Move snake
            const head = { ...snake[0] };
            head.x += direction.x;
            head.y += direction.y;

            // Check wall collision
            if (head.x < 0 || head.x >= canvas.width || head.y < 0 || head.y >= canvas.height) {
                gameOver();
                return;
            }

            // Check self collision
            if (snake.some(segment => segment.x === head.x && segment.y === head.y)) {
                gameOver();
                return;
            }

            snake.unshift(head);

            // Check food collision
            if (head.x === food.x && head.y === food.y) {
                score += 10;
                scoreElement.textContent = score;
                particles.createExplosion(food.x, food.y, '#00FFC6');
                addScreenShake(5, 10);
                generateFood();
                
                // Increase speed slightly
                gameSpeed = Math.max(80, gameSpeed - 2);
            } else {
                snake.pop();
            }

            particles.update();
        }

        // Render game
        function render() {
            // Clear canvas
            ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            // Draw snake
            snake.forEach((segment, index) => {
                if (index === 0) {
                    // Head with glow
                    ctx.shadowColor = '#00FFC6';
                    ctx.shadowBlur = 10;
                    ctx.fillStyle = '#00FFC6';
                } else {
                    ctx.shadowBlur = 0;
                    const alpha = 1 - (index / snake.length) * 0.5;
                    ctx.fillStyle = `rgba(0, 255, 198, ${alpha})`;
                }
                ctx.fillRect(segment.x, segment.y, gridSize - 2, gridSize - 2);
            });

            // Draw food with pulsing effect
            const pulse = Math.sin(Date.now() * 0.01) * 0.3 + 0.7;
            ctx.shadowColor = '#FF2E93';
            ctx.shadowBlur = 15;
            ctx.fillStyle = `rgba(255, 46, 147, ${pulse})`;
            ctx.fillRect(food.x, food.y, gridSize - 2, gridSize - 2);

            ctx.shadowBlur = 0;

            // Draw particles
            particles.render();

            // Draw game over text
            if (gameState === 'gameOver') {
                ctx.fillStyle = '#FF2E93';
                ctx.font = 'bold 24px Orbitron';
                ctx.textAlign = 'center';
                ctx.fillText('REALITY GLITCHED üí•', canvas.width / 2, canvas.height / 2);
                ctx.font = 'bold 16px Orbitron';
                ctx.fillText('SERPENT CONSUMED BY CHAOS', canvas.width / 2, canvas.height / 2 + 30);
            }

            if (gameState === 'paused') {
                ctx.fillStyle = '#3F88FF';
                ctx.font = 'bold 20px Orbitron';
                ctx.textAlign = 'center';
                ctx.fillText('MATRIX FROZEN ‚è∏', canvas.width / 2, canvas.height / 2);
            }
        }

        // Game over
        function gameOver() {
            gameState = 'gameOver';
            particles.createExplosion(snake[0].x, snake[0].y, '#FF2E93');
            addScreenShake(15, 30);
            
            if (score > highScore) {
                highScore = score;
                localStorage.setItem('snakeHighScore', highScore);
                highScoreElement.textContent = highScore;
            }
            
            restartBtn.style.display = 'block';
            
            setTimeout(() => {
                if (gameState === 'gameOver') {
                    restartGame();
                }
            }, 3000);
        }

        // Restart game
        function restartGame() {
            initializeGame();
        }

        // Game loop
        let lastTime = 0;
        function gameLoop(currentTime) {
            if (currentTime - lastTime >= (boost ? gameSpeed / 2 : gameSpeed)) {
                update();
                lastTime = currentTime;
            }
            
            render();
            updateScreenShake();
            requestAnimationFrame(gameLoop);
        }

        // Input handling
        document.addEventListener('keydown', (e) => {
            if (gameState === 'gameOver') return;
            
            switch(e.key) {
                case 'ArrowUp':
                    if (direction.y === 0) nextDirection = { x: 0, y: -gridSize };
                    break;
                case 'ArrowDown':
                    if (direction.y === 0) nextDirection = { x: 0, y: gridSize };
                    break;
                case 'ArrowLeft':
                    if (direction.x === 0) nextDirection = { x: -gridSize, y: 0 };
                    break;
                case 'ArrowRight':
                    if (direction.x === 0) nextDirection = { x: gridSize, y: 0 };
                    break;
                case ' ':
                    boost = true;
                    setTimeout(() => boost = false, 200);
                    break;
                case 'p':
                case 'P':
                    gameState = gameState === 'playing' ? 'paused' : 'playing';
                    break;
                case 'r':
                case 'R':
                    restartGame();
                    break;
            }
        });

        // Touch controls
        let touchStartX = 0;
        let touchStartY = 0;

        canvas.addEventListener('touchstart', (e) => {
            e.preventDefault();
            touchStartX = e.touches[0].clientX;
            touchStartY = e.touches[0].clientY;
        }, { passive: false });

        canvas.addEventListener('touchend', (e) => {
            e.preventDefault();
            if (gameState === 'gameOver') return;
            
            const touchEndX = e.changedTouches[0].clientX;
            const touchEndY = e.changedTouches[0].clientY;
            
            const deltaX = touchEndX - touchStartX;
            const deltaY = touchEndY - touchStartY;
            
            if (Math.abs(deltaX) > Math.abs(deltaY)) {
                if (deltaX > 30 && direction.x === 0) {
                    nextDirection = { x: gridSize, y: 0 };
                } else if (deltaX < -30 && direction.x === 0) {
                    nextDirection = { x: -gridSize, y: 0 };
                }
            } else {
                if (deltaY > 30 && direction.y === 0) {
                    nextDirection = { x: 0, y: gridSize };
                } else if (deltaY < -30 && direction.y === 0) {
                    nextDirection = { x: 0, y: -gridSize };
                }
            }
        }, { passive: false });

        // Mobile button controls
        document.getElementById('upBtn').addEventListener('click', () => {
            if (direction.y === 0) nextDirection = { x: 0, y: -gridSize };
        });

        document.getElementById('downBtn').addEventListener('click', () => {
            if (direction.y === 0) nextDirection = { x: 0, y: gridSize };
        });

        document.getElementById('leftBtn').addEventListener('click', () => {
            if (direction.x === 0) nextDirection = { x: -gridSize, y: 0 };
        });

        document.getElementById('rightBtn').addEventListener('click', () => {
            if (direction.x === 0) nextDirection = { x: gridSize, y: 0 };
        });

        document.getElementById('boostBtn').addEventListener('click', () => {
            boost = true;
            setTimeout(() => boost = false, 200);
        });

        document.getElementById('pauseBtn').addEventListener('click', () => {
            gameState = gameState === 'playing' ? 'paused' : 'playing';
        });

        // Initialize and start game
        initializeGame();
        requestAnimationFrame(gameLoop);
    </script>
</body>
</html>
```