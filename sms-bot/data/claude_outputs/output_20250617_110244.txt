```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Block Cascade</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=Inter:wght@400;500&display=swap');
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            -webkit-tap-highlight-color: transparent;
        }
        
        body {
            font-family: 'Inter', sans-serif;
            overflow: hidden;
            touch-action: none;
            background: linear-gradient(135deg, #FF6B6B, #4ECDC4, #45B7D1, #FFA07A);
            background-size: 400% 400%;
            animation: gradientShift 15s ease infinite;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            position: relative;
        }
        
        @keyframes gradientShift {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }
        
        .floating-emoji {
            position: absolute;
            font-size: 2rem;
            opacity: 0.3;
            animation: float 20s infinite ease-in-out;
            pointer-events: none;
            z-index: 1;
        }
        
        .emoji-1 { top: 10%; left: 10%; animation-delay: 0s; }
        .emoji-2 { top: 70%; right: 15%; animation-delay: 7s; }
        .emoji-3 { bottom: 20%; left: 20%; animation-delay: 14s; }
        
        @keyframes float {
            0%, 100% { transform: translateY(0) rotate(0deg); }
            50% { transform: translateY(-20px) rotate(10deg); }
        }
        
        .game-container {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            padding: 20px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            animation: slideIn 0.6s ease-out;
            position: relative;
            z-index: 10;
            max-width: 400px;
            width: 90vw;
        }
        
        @keyframes slideIn {
            from { opacity: 0; transform: translateY(30px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        h1 {
            font-family: 'Space Grotesk', sans-serif;
            font-size: 2.5rem;
            font-weight: 700;
            color: white;
            text-align: center;
            margin-bottom: 20px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
        }
        
        .screen {
            display: none;
            animation: fadeIn 0.3s ease-out;
        }
        
        .screen.active {
            display: block;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        .intro-screen {
            text-align: center;
            color: white;
        }
        
        .intro-screen p {
            font-size: 1.1rem;
            margin-bottom: 30px;
            opacity: 0.9;
        }
        
        .play-button {
            background: rgba(255, 255, 255, 0.2);
            backdrop-filter: blur(10px);
            border: 2px solid rgba(255, 255, 255, 0.3);
            color: white;
            font-family: 'Space Grotesk', sans-serif;
            font-size: 1.2rem;
            font-weight: 700;
            padding: 15px 40px;
            border-radius: 50px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-block;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        
        .play-button:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.2);
        }
        
        .game-screen {
            position: relative;
        }
        
        #gameCanvas {
            display: block;
            margin: 0 auto;
            border-radius: 10px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
        }
        
        .score-display {
            position: absolute;
            top: -40px;
            left: 50%;
            transform: translateX(-50%);
            color: white;
            font-family: 'Space Grotesk', sans-serif;
            font-size: 1.2rem;
            font-weight: 700;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
        }
        
        .touch-controls {
            display: flex;
            justify-content: space-between;
            margin-top: 20px;
            gap: 10px;
        }
        
        .touch-button {
            flex: 1;
            background: rgba(255, 255, 255, 0.2);
            backdrop-filter: blur(10px);
            border: 2px solid rgba(255, 255, 255, 0.3);
            color: white;
            font-size: 1.5rem;
            padding: 15px;
            border-radius: 15px;
            cursor: pointer;
            transition: all 0.1s ease;
            user-select: none;
            -webkit-user-select: none;
            text-align: center;
        }
        
        .touch-button:active {
            background: rgba(255, 255, 255, 0.4);
            transform: scale(0.95);
        }
        
        .end-screen {
            text-align: center;
            color: white;
        }
        
        .end-screen h2 {
            font-family: 'Space Grotesk', sans-serif;
            font-size: 2rem;
            margin-bottom: 20px;
        }
        
        .final-score {
            font-size: 3rem;
            font-weight: 700;
            margin-bottom: 10px;
            color: #FFE66D;
            text-shadow: 3px 3px 6px rgba(0, 0, 0, 0.3);
        }
        
        .end-message {
            font-size: 1.1rem;
            margin-bottom: 30px;
            opacity: 0.9;
        }
        
        @media (max-width: 480px) {
            h1 { font-size: 2rem; }
            .game-container { padding: 15px; }
        }
    </style>
</head>
<body>
    <div class="floating-emoji emoji-1">üü¶</div>
    <div class="floating-emoji emoji-2">üü®</div>
    <div class="floating-emoji emoji-3">üü©</div>
    
    <div class="game-container">
        <div class="screen intro-screen active">
            <h1>Block Cascade</h1>
            <p>Stack the falling blocks üéÆ</p>
            <button class="play-button" onclick="startGame()">TAP TO DROP</button>
        </div>
        
        <div class="screen game-screen">
            <div class="score-display">Score: <span id="score">0</span></div>
            <canvas id="gameCanvas"></canvas>
            <div class="touch-controls">
                <button class="touch-button" ontouchstart="moveLeft()" onmousedown="moveLeft()">‚Üê</button>
                <button class="touch-button" ontouchstart="moveRight()" onmousedown="moveRight()">‚Üí</button>
                <button class="touch-button" ontouchstart="rotate()" onmousedown="rotate()">‚Üª</button>
                <button class="touch-button" ontouchstart="drop()" onmousedown="drop()">‚Üì</button>
            </div>
        </div>
        
        <div class="screen end-screen">
            <h2>Game Over!</h2>
            <div class="final-score" id="finalScore">0</div>
            <p class="end-message">Nice stacking! üéØ</p>
            <button class="play-button" onclick="restartGame()">STACK AGAIN</button>
        </div>
    </div>
    
    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const dpr = window.devicePixelRatio || 1;
        
        const COLS = 10;
        const ROWS = 20;
        const BLOCK_SIZE = Math.min(30, (window.innerWidth * 0.8) / COLS);
        
        canvas.width = COLS * BLOCK_SIZE * dpr;
        canvas.height = ROWS * BLOCK_SIZE * dpr;
        canvas.style.width = COLS * BLOCK_SIZE + 'px';
        canvas.style.height = ROWS * BLOCK_SIZE + 'px';
        ctx.scale(dpr, dpr);
        
        const COLORS = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#FFA07A', '#FFE66D', '#C7CEEA', '#FF8CC8'];
        
        const SHAPES = [
            [[1,1,1,1]], // I
            [[1,1],[1,1]], // O
            [[0,1,0],[1,1,1]], // T
            [[0,1,1],[1,1,0]], // S
            [[1,1,0],[0,1,1]], // Z
            [[1,0,0],[1,1,1]], // L
            [[0,0,1],[1,1,1]] // J
        ];
        
        let board = Array(ROWS).fill().map(() => Array(COLS).fill(0));
        let currentPiece = null;
        let currentX = 0;
        let currentY = 0;
        let currentColor = '';
        let score = 0;
        let dropCounter = 0;
        let lastTime = 0;
        let gameRunning = false;
        let dropSpeed = 1000;
        
        function createPiece() {
            const shapeIndex = Math.floor(Math.random() * SHAPES.length);
            currentPiece = SHAPES[shapeIndex].map(row => [...row]);
            currentColor = COLORS[shapeIndex];
            currentX = Math.floor(COLS / 2) - Math.floor(currentPiece[0].length / 2);
            currentY = 0;
            
            if (collision()) {
                gameOver();
            }
        }
        
        function collision() {
            for (let y = 0; y < currentPiece.length; y++) {
                for (let x = 0; x < currentPiece[y].length; x++) {
                    if (currentPiece[y][x]) {
                        const newX = currentX + x;
                        const newY = currentY + y;
                        
                        if (newX < 0 || newX >= COLS || newY >= ROWS) {
                            return true;
                        }
                        
                        if (newY >= 0 && board[newY][newX]) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        function merge() {
            for (let y = 0; y < currentPiece.length; y++) {
                for (let x = 0; x < currentPiece[y].length; x++) {
                    if (currentPiece[y][x]) {
                        board[currentY + y][currentX + x] = currentColor;
                    }
                }
            }
        }
        
        function moveLeft() {
            if (!gameRunning) return;
            currentX--;
            if (collision()) {
                currentX++;
            }
        }
        
        function moveRight() {
            if (!gameRunning) return;
            currentX++;
            if (collision()) {
                currentX--;
            }
        }
        
        function rotate() {
            if (!gameRunning) return;
            const rotated = currentPiece[0].map((_, i) => 
                currentPiece.map(row => row[i]).reverse()
            );
            const prevPiece = currentPiece;
            currentPiece = rotated;
            if (collision()) {
                currentPiece = prevPiece;
            }
        }
        
        function drop() {
            if (!gameRunning) return;
            while (!collision()) {
                currentY++;
            }
            currentY--;
            lockPiece();
        }
        
        function moveDown() {
            currentY++;
            if (collision()) {
                currentY--;
                lockPiece();
            }
        }
        
        function lockPiece() {
            merge();
            clearLines();
            createPiece();
        }
        
        function clearLines() {
            let linesCleared = 0;
            
            for (let y = ROWS - 1; y >= 0; y--) {
                if (board[y].every(cell => cell !== 0)) {
                    board.splice(y, 1);
                    board.unshift(Array(COLS).fill(0));
                    linesCleared++;
                    y++;
                }
            }
            
            if (linesCleared > 0) {
                score += linesCleared * 100;
                document.getElementById('score').textContent = score;
                dropSpeed = Math.max(100, 1000 - Math.floor(score / 500) * 100);
            }
        }
        
        function draw() {
            ctx.fillStyle = 'rgba(255, 255, 255, 0.05)';
            ctx.fillRect(0, 0, COLS * BLOCK_SIZE, ROWS * BLOCK_SIZE);
            
            // Draw board
            for (let y = 0; y < ROWS; y++) {
                for (let x = 0; x < COLS; x++) {
                    if (board[y][x]) {
                        ctx.fillStyle = board[y][x];
                        ctx.fillRect(x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE - 1, BLOCK_SIZE - 1);
                        
                        ctx.fillStyle = 'rgba(255, 255, 255, 0.3)';
                        ctx.fillRect(x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE - 1, 2);
                        ctx.fillRect(x * BLOCK_SIZE, y * BLOCK_SIZE, 2, BLOCK_SIZE - 1);
                    }
                }
            }
            
            // Draw current piece
            if (currentPiece) {
                ctx.fillStyle = currentColor;
                for (let y = 0; y < currentPiece.length; y++) {
                    for (let x = 0; x < currentPiece[y].length; x++) {
                        if (currentPiece[y][x]) {
                            ctx.fillRect((currentX + x) * BLOCK_SIZE, (currentY + y) * BLOCK_SIZE, BLOCK_SIZE - 1, BLOCK_SIZE - 1);
                            
                            ctx.fillStyle = 'rgba(255, 255, 255, 0.3)';
                            ctx.fillRect((currentX + x) * BLOCK_SIZE, (currentY + y) * BLOCK_SIZE, BLOCK_SIZE - 1, 2);
                            ctx.fillRect((currentX + x) * BLOCK_SIZE, (currentY + y) * BLOCK_SIZE, 2, BLOCK_SIZE - 1);
                            ctx.fillStyle = currentColor;
                        }
                    }
                }
            }
        }
        
        function gameLoop(time = 0) {
            if (!gameRunning) return;
            
            const deltaTime = time - lastTime;
            lastTime = time;
            
            dropCounter += deltaTime;
            if (dropCounter > dropSpeed) {
                moveDown();
                dropCounter = 0;
            }
            
            draw();
            requestAnimationFrame(gameLoop);
        }
        
        function startGame() {
            document.querySelector('.intro-screen').classList.remove('active');
            document.querySelector('.game-screen').classList.add('active');
            
            board = Array(ROWS).fill().map(() => Array(COLS).fill(0));
            score = 0;
            dropSpeed = 1000;
            document.getElementById('score').textContent = score;
            
            createPiece();
            gameRunning = true;
            requestAnimationFrame(gameLoop);
        }
        
        function gameOver() {
            gameRunning = false;
            document.querySelector('.game-screen').classList.remove('active');
            document.querySelector('.end-screen').classList.add('active');
            document.getElementById('finalScore').textContent = score;
        }
        
        function restartGame() {
            document.querySelector('.end-screen').classList.remove('active');
            startGame();
        }
        
        document.addEventListener('keydown', (e) => {
            if (!gameRunning) return;
            
            switch(e.key) {
                case 'ArrowLeft':
                    moveLeft();
                    break;
                case 'ArrowRight':
                    moveRight();
                    break;
                case 'ArrowUp':
                    rotate();
                    break;
                case 'ArrowDown':
                    drop();
                    break;
            }
        });
        
        // Parallax effect for floating emojis
        document.addEventListener('mousemove', (e) => {
            const x = e.clientX / window.innerWidth;
            const y = e.clientY / window.innerHeight;
            
            document.querySelectorAll('.floating-emoji').forEach((emoji, i) => {
                const speed = (i + 1) * 10;
                emoji.style.transform = `translate(${x * speed}px, ${y * speed}px)`;
            });
        });
        
        // Prevent scrolling on touch
        document.addEventListener('touchmove', (e) => {
            e.preventDefault();
        }, { passive: false });
    </script>
</body>
</html>
```