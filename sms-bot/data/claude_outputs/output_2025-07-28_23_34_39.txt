```html
<!DOCTYPE html>
<html>
<head>
    <title>WTAF Tetris</title>
    <meta name="viewport" content="width=device-width, user-scalable=no">
    <style>
        body { margin: 0; padding: 0; background: linear-gradient(to right, #111, #333); display: flex; flex-direction: column; height: 100vh; touch-action: none; }
        canvas { display: block; }
        #controls { position: fixed; bottom: 0; width: 100%; height: 120px; background: #222; display: flex; justify-content: center; align-items: center; z-index: 1000; }
        .btn { width: 60px; height: 60px; margin: 5px; background: #444; border: none; border-radius: 10px; color: white; font-size: 24px; display: flex; align-items: center; justify-content: center; }
        .screen { position: absolute; top: 0; left: 0; width: 100%; height: calc(100% - 120px); display: flex; flex-direction: column; justify-content: center; align-items: center; color: white; text-align: center; z-index: 500; background: rgba(0,0,0,0.7); }
        .hidden { display: none; }
        h1 { font-size: 40px; margin: 0; }
        p { font-size: 20px; max-width: 80%; }
        button { margin-top: 20px; padding: 15px 30px; font-size: 20px; background: #f00; color: white; border: none; border-radius: 10px; cursor: pointer; }
    </style>
</head>
<body>
    <canvas id="game"></canvas>
    
    <div id="intro" class="screen">
        <h1>üß± WTAF Tetris</h1>
        <p>Stack blocks. Clear lines. Don't üß†üí•</p>
        <button id="startBtn">PLAY</button>
    </div>
    
    <div id="gameover" class="screen hidden">
        <h1>üíÄ GAME OVER</h1>
        <p>Score: <span id="finalScore">0</span></p>
        <button id="restartBtn">AGAIN</button>
    </div>
    
    <div id="controls">
        <button class="btn" id="leftBtn">‚¨ÖÔ∏è</button>
        <div style="display:flex; flex-direction: column;">
            <button class="btn" id="upBtn">‚¨ÜÔ∏è</button>
            <button class="btn" id="downBtn">‚¨áÔ∏è</button>
        </div>
        <button class="btn" id="rightBtn">‚û°Ô∏è</button>
    </div>

    <script>
        var canvas = document.getElementById('game');
        var ctx = canvas.getContext('2d');
        var introScreen = document.getElementById('intro');
        var gameOverScreen = document.getElementById('gameover');
        var startBtn = document.getElementById('startBtn');
        var restartBtn = document.getElementById('restartBtn');
        var finalScoreEl = document.getElementById('finalScore');
        var leftBtn = document.getElementById('leftBtn');
        var rightBtn = document.getElementById('rightBtn');
        var upBtn = document.getElementById('upBtn');
        var downBtn = document.getElementById('downBtn');

        var controlsHeight = 120;
        var dpr = window.devicePixelRatio || 1;
        var cw, ch, gridWidth = 10, gridHeight = 20;
        var blockSize, gridOffsetX, gridOffsetY;
        var grid = [];
        var score = 0;
        var dropInterval = 1000;
        var dropTime = 0;
        var lastTime = 0;
        var gameOver = false;
        var currentPiece = null;

        var pieces = [
            { shape: [[1,1,1,1]], color: '#00f0f0' }, // I
            { shape: [[1,1],[1,1]], color: '#f0f000' }, // O
            { shape: [[0,1,0],[1,1,1]], color: '#a000f0' }, // T
            { shape: [[0,1,1],[1,1,0]], color: '#00f000' }, // S
            { shape: [[1,1,0],[0,1,1]], color: '#f00000' }, // Z
            { shape: [[1,0,0],[1,1,1]], color: '#0000f0' }, // J
            { shape: [[0,0,1],[1,1,1]], color: '#f0a000' }  // L
        ];

        function resizeCanvas() {
            cw = window.innerWidth * dpr;
            ch = (window.innerHeight - controlsHeight) * dpr;
            canvas.width = cw;
            canvas.height = ch;
            canvas.style.width = window.innerWidth + 'px';
            canvas.style.height = (window.innerHeight - controlsHeight) + 'px';
            
            blockSize = Math.min(cw / gridWidth, ch / gridHeight);
            var gridPixelWidth = blockSize * gridWidth;
            var gridPixelHeight = blockSize * gridHeight;
            gridOffsetX = (cw - gridPixelWidth) / 2;
            gridOffsetY = (ch - gridPixelHeight) / 2;
        }

        function createGrid() {
            grid = [];
            for (var y = 0; y < gridHeight; y++) {
                grid[y] = [];
                for (var x = 0; x < gridWidth; x++) {
                    grid[y][x] = 0;
                }
            }
        }

        function getRandomPiece() {
            var piece = pieces[Math.floor(Math.random() * pieces.length)];
            return {
                shape: piece.shape,
                color: piece.color,
                x: Math.floor(gridWidth / 2) - Math.floor(piece.shape[0].length / 2),
                y: 0
            };
        }

        function rotatePiece(piece) {
            var newShape = [];
            var rows = piece.shape.length;
            var cols = piece.shape[0].length;
            for (var c = 0; c < cols; c++) {
                newShape[c] = [];
                for (var r = 0; r < rows; r++) {
                    newShape[c][r] = piece.shape[rows - 1 - r][c];
                }
            }
            return newShape;
        }

        function isValidPosition(piece, shape, x, y) {
            shape = shape || piece.shape;
            x = x === undefined ? piece.x : x;
            y = y === undefined ? piece.y : y;
            
            for (var r = 0; r < shape.length; r++) {
                for (var c = 0; c < shape[r].length; c++) {
                    if (shape[r][c]) {
                        var newX = x + c;
                        var newY = y + r;
                        if (newX < 0 || newX >= gridWidth || newY >= gridHeight) {
                            return false;
                        }
                        if (newY >= 0 && grid[newY][newX]) {
                            return false;
                        }
                    }
                }
            }
            return true;
        }

        function placePiece() {
            for (var r = 0; r < currentPiece.shape.length; r++) {
                for (var c = 0; c < currentPiece.shape[r].length; c++) {
                    if (currentPiece.shape[r][c]) {
                        var y = currentPiece.y + r;
                        var x = currentPiece.x + c;
                        if (y >= 0) {
                            grid[y][x] = currentPiece.color;
                        }
                    }
                }
            }
        }

        function clearLines() {
            var lines = 0;
            for (var y = gridHeight - 1; y >= 0; y--) {
                var full = true;
                for (var x = 0; x < gridWidth; x++) {
                    if (!grid[y][x]) {
                        full = false;
                        break;
                    }
                }
                if (full) {
                    lines++;
                    for (var yy = y; yy > 0; yy--) {
                        for (var x = 0; x < gridWidth; x++) {
                            grid[yy][x] = grid[yy-1][x];
                        }
                    }
                    for (var x = 0; x < gridWidth; x++) {
                        grid[0][x] = 0;
                    }
                    y++;
                }
            }
            if (lines > 0) {
                score += lines * 100;
                dropInterval = Math.max(100, 1000 - Math.floor(score / 500) * 100);
            }
        }

        function update(dt) {
            if (gameOver) return;
            
            dropTime += dt;
            if (dropTime > dropInterval) {
                dropTime = 0;
                if (isValidPosition(currentPiece, null, currentPiece.x, currentPiece.y + 1)) {
                    currentPiece.y++;
                } else {
                    placePiece();
                    clearLines();
                    currentPiece = getRandomPiece();
                    if (!isValidPosition(currentPiece)) {
                        gameOver = true;
                        gameOverScreen.classList.remove('hidden');
                        finalScoreEl.textContent = score;
                    }
                }
            }
        }

        function draw() {
            ctx.clearRect(0, 0, cw, ch);
            
            // Draw grid
            for (var y = 0; y < gridHeight; y++) {
                for (var x = 0; x < gridWidth; x++) {
                    if (grid[y][x]) {
                        ctx.fillStyle = grid[y][x];
                        ctx.fillRect(
                            gridOffsetX + x * blockSize,
                            gridOffsetY + y * blockSize,
                            blockSize - 1,
                            blockSize - 1
                        );
                    }
                }
            }
            
            // Draw current piece
            if (currentPiece) {
                ctx.fillStyle = currentPiece.color;
                for (var r = 0; r < currentPiece.shape.length; r++) {
                    for (var c = 0; c < currentPiece.shape[r].length; c++) {
                        if (currentPiece.shape[r][c]) {
                            ctx.fillRect(
                                gridOffsetX + (currentPiece.x + c) * blockSize,
                                gridOffsetY + (currentPiece.y + r) * blockSize,
                                blockSize - 1,
                                blockSize - 1
                            );
                        }
                    }
                }
            }
            
            // Draw score
            ctx.fillStyle = 'white';
            ctx.font = '24px sans-serif';
            ctx.textAlign = 'left';
            ctx.fillText('Score: ' + score, 20, 40);
        }

        function gameLoop(timestamp) {
            if (!lastTime) lastTime = timestamp;
            var dt = timestamp - lastTime;
            lastTime = timestamp;
            
            update(dt);
            draw();
            requestAnimationFrame(gameLoop);
        }

        function initGame() {
            resizeCanvas();
            createGrid();
            score = 0;
            dropInterval = 1000;
            gameOver = false;
            currentPiece = getRandomPiece();
            gameOverScreen.classList.add('hidden');
        }

        startBtn.addEventListener('click', function() {
            introScreen.classList.add('hidden');
            initGame();
        });

        restartBtn.addEventListener('click', function() {
            initGame();
        });

        leftBtn.addEventListener('click', function() {
            if (currentPiece && isValidPosition(currentPiece, null, currentPiece.x - 1, currentPiece.y)) {
                currentPiece.x--;
            }
        });

        rightBtn.addEventListener('click', function() {
            if (currentPiece && isValidPosition(currentPiece, null, currentPiece.x + 1, currentPiece.y)) {
                currentPiece.x++;
            }
        });

        upBtn.addEventListener('click', function() {
            if (currentPiece) {
                var rotated = rotatePiece(currentPiece);
                if (isValidPosition(currentPiece, rotated)) {
                    currentPiece.shape = rotated;
                }
            }
        });

        downBtn.addEventListener('click', function() {
            dropTime = dropInterval;
        });

        document.addEventListener('keydown', function(e) {
            if (introScreen.classList.contains('hidden') && !gameOver) {
                if (e.keyCode === 37) { // left
                    if (currentPiece && isValidPosition(currentPiece, null, currentPiece.x - 1, currentPiece.y)) {
                        currentPiece.x--;
                    }
                } else if (e.keyCode === 39) { // right
                    if (currentPiece && isValidPosition(currentPiece, null, currentPiece.x + 1, currentPiece.y)) {
                        currentPiece.x++;
                    }
                } else if (e.keyCode === 38) { // up
                    if (currentPiece) {
                        var rotated = rotatePiece(currentPiece);
                        if (isValidPosition(currentPiece, rotated)) {
                            currentPiece.shape = rotated;
                        }
                    }
                } else if (e.keyCode === 40) { // down
                    dropTime = dropInterval;
                }
            }
        });

        window.addEventListener('resize', resizeCanvas);
        resizeCanvas();
        requestAnimationFrame(gameLoop);
    </script>
</body>
</html>
```