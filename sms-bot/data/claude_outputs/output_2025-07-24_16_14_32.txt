<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>WTAF Chat</title>
    <style>
        :root {
            --bg: #000000;
            --surface: #0a0a0a;
            --surface-light: #141414;
            --accent: #00ff95;
            --accent-hover: #33ffa9;
            --text: #ffffff;
            --text-dim: #666666;
            --border: #1a1a1a;
            --space-xs: 8px;
            --space-sm: 12px;
            --space-md: 16px;
            --space-lg: 24px;
            --space-xl: 32px;
        }

        * { 
            box-sizing: border-box; 
            margin: 0;
            padding: 0;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
            background: var(--bg);
            color: var(--text);
            margin: 0;
            padding: 10px;
            font-size: 16px;
            line-height: 1.6;
            -webkit-font-smoothing: antialiased;
        }

        .app-container {
            max-width: 800px;
            margin: 0 auto;
            background: var(--surface);
            border-radius: 16px;
            padding: var(--space-lg);
            position: relative;
            overflow: hidden;
            min-height: 95vh;
        }

        .app-container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 2px;
            background: var(--accent);
        }

        h1 {
            font-weight: 900;
            letter-spacing: -0.5px;
            color: var(--text);
            margin: 0 0 var(--space-md) 0;
            text-transform: uppercase;
            font-size: 24px;
        }

        button {
            background: var(--accent);
            color: black;
            border: none;
            padding: 14px 28px;
            border-radius: 8px;
            font-weight: 700;
            cursor: pointer;
            font-size: 16px;
            font-family: inherit;
            transition: all 0.2s ease;
            margin: 8px 0;
            min-height: 44px;
            width: 100%;
            display: block;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        button:hover {
            background: var(--accent-hover);
            transform: translateY(-2px);
        }

        input, select {
            background: var(--surface-light);
            border: 2px solid var(--border);
            color: var(--text);
            padding: 12px 16px;
            border-radius: 8px;
            width: 100%;
            margin: 10px 0;
            font-size: 16px;
            font-family: inherit;
            min-height: 44px;
        }

        input:focus, select:focus {
            outline: none;
            border-color: var(--accent);
        }

        .screen { 
            display: none; 
            animation: fadeIn 0.3s ease;
        }

        .screen.active { 
            display: block; 
        }

        #chat-messages {
            height: calc(100vh - 300px);
            overflow-y: auto;
            margin: 20px 0;
            padding: 10px;
        }

        .message {
            background: var(--surface-light);
            padding: var(--space-sm) var(--space-md);
            margin: var(--space-xs) 0;
            border-radius: 8px;
            border-left: 3px solid var(--accent);
            word-wrap: break-word;
        }

        .message-author {
            font-weight: 700;
            color: var(--accent);
            font-size: 14px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 4px;
        }

        .message-time {
            font-size: 12px;
            color: var(--text-dim);
        }

        #message-form {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            width: calc(100% - 40px);
            max-width: 760px;
            display: flex;
            gap: 10px;
            background: var(--surface);
            padding: 10px;
            border-radius: 8px;
        }

        #message-input {
            flex-grow: 1;
            margin: 0;
        }

        #send-button {
            width: auto;
            margin: 0;
            white-space: nowrap;
        }

        #user-status {
            padding: 6px 12px;
            background: var(--surface-light);
            border: 1px solid var(--accent);
            border-radius: 20px;
            display: inline-block;
            font-size: 14px;
            margin-bottom: var(--space-md);
            font-weight: 600;
        }

        #user-status span {
            color: var(--accent);
            text-transform: uppercase;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @media (min-width: 600px) {
            body { padding: 20px; }
            .app-container { padding: var(--space-xl); }
            button:not(#send-button) { 
                width: auto; 
                display: inline-block;
                margin: 5px;
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <div id="welcome-screen" class="screen active">
            <h1>WTAF Chat</h1>
            <p>Simple chat for you and your friends!</p>
            <button onclick="showNewUserScreen()">New User</button>
            <button onclick="showReturningUserScreen()">Returning User</button>
        </div>

        <div id="new-user-screen" class="screen">
            <h1>New User</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Register & Enter</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <div id="returning-user-screen" class="screen">
            <h1>Returning User</h1>
            <select id="user-label-select"></select>
            <input type="text" id="returning-passcode" placeholder="4-digit code" maxlength="4">
            <button onclick="loginReturningUser()">Login</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <div id="main-screen" class="screen">
            <div id="user-status">Chatting as <span id="current-user-label"></span></div>
            <div id="chat-messages"></div>
            <form id="message-form" onsubmit="sendMessage(event)">
                <input type="text" id="message-input" placeholder="Type your message..." required>
                <button id="send-button">Send</button>
            </form>
        </div>
    </div>

    <script>
        let currentUser = null;
        let pollingInterval;

        function startPolling() {
            loadLatestData();
            pollingInterval = setInterval(loadLatestData, 2000);
        }

        function stopPolling() {
            if (pollingInterval) clearInterval(pollingInterval);
        }

        async function loadLatestData() {
            const messages = await load('chat_message');
            updateChatUI(messages);
        }

        function updateChatUI(messages) {
            const chatDiv = document.getElementById('chat-messages');
            const sortedMessages = messages.sort((a, b) => 
                new Date(a.created_at) - new Date(b.created_at)
            );

            chatDiv.innerHTML = sortedMessages.map(msg => `
                <div class="message">
                    <div class="message-author">${msg.author}</div>
                    <div class="message-text">${msg.text}</div>
                    <div class="message-time">${new Date(msg.created_at).toLocaleTimeString()}</div>
                </div>
            `).join('');

            chatDiv.scrollTop = chatDiv.scrollHeight;
        }

        async function sendMessage(event) {
            event.preventDefault();
            const input = document.getElementById('message-input');
            const text = input.value.trim();

            if (text) {
                await save('chat_message', {
                    text,
                    created_at: new Date().toISOString()
                });
                input.value = '';
                await loadLatestData();
            }
        }

        async function generateNewUser() {
            const slots = await checkAvailableSlots();
            if (slots.isFull) {
                alert('Chat is full! Maximum 5 users.');
                return false;
            }
            
            const user = await generateUser();
            if (user?.success) {
                currentUser = user;
                document.getElementById('new-user-info').innerHTML = 
                    `Your ID: ${user.userLabel}<br>Code: ${user.passcode}<br>Save these!`;
                return true;
            }
            return false;
        }

        async function registerNewUser() {
            if (!currentUser) return;
            
            const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
            if (result?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                enterMainScreen();
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            await generateNewUser();
        }

        async function loginReturningUser() {
            const label = document.getElementById('user-label-select').value;
            const passcode = document.getElementById('returning-passcode').value;
            
            const result = await authenticateUser(label, passcode);
            if (result?.success) {
                currentUser = { userLabel: label, passcode, participantId: result.user.participantId };
                updateZadAuth(label, result.user.participantId);
                enterMainScreen();
            } else {
                alert('Wrong code!');
            }
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            if (screenId !== 'main-screen') stopPolling();
        }

        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const slots = await checkAvailableSlots();
            const select = document.getElementById('user-label-select');
            select.innerHTML = '<option value="">Select User</option>';
            slots.usedLabels.forEach(label => {
                select.innerHTML += `<option value="${label}">${label}</option>`;
            });
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            startPolling();
            loadLatestData();
        }

        initAuth();
    </script>
</body>
</html>