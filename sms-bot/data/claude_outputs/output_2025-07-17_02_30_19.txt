<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ALPHA VICTIM HITLIST üíÄ</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=Inter:wght@400;600&display=swap');

        body { 
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #FF0099 0%, #FF2E93 50%, #FF1493 100%);
            background-size: 400% 400%;
            animation: gradientShift 15s ease-in-out infinite;
            color: white;
            overflow-x: hidden;
            margin: 0;
            min-height: 100vh;
        }

        h1, h2, h3 {
            font-family: 'Space Grotesk', sans-serif;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: -0.02em;
        }

        @keyframes gradientShift {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }

        .app-container {
            max-width: 800px;
            margin: 0 auto;
            background: rgba(0,0,0,0.4);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            padding: 2rem;
            border: 1px solid rgba(255,255,255,0.1);
            position: relative;
            z-index: 10;
            min-height: 90vh;
        }

        .screen { display: none; }
        .screen.active { display: block; animation: fadeIn 0.3s ease; }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        button {
            background: linear-gradient(135deg, #FF00CC, #FF69B4);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 50px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-size: 14px;
            margin: 10px 5px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        button:hover {
            transform: scale(1.05);
            box-shadow: 0 0 30px rgba(255, 0, 153, 0.5);
        }

        input, select, textarea {
            background: rgba(255,255,255,0.1);
            border: 2px solid rgba(255,255,255,0.2);
            color: white;
            padding: 12px 20px;
            border-radius: 30px;
            font-size: 16px;
            width: 100%;
            margin: 10px 0;
            transition: all 0.3s ease;
            box-sizing: border-box;
        }

        input:focus, select:focus, textarea:focus {
            outline: none;
            border-color: #FF69B4;
            box-shadow: 0 0 20px rgba(255, 105, 180, 0.3);
        }

        .task-list {
            margin-top: 20px;
        }

        .task-item {
            background: rgba(255,255,255,0.1);
            border-radius: 15px;
            padding: 15px;
            margin: 10px 0;
            display: flex;
            align-items: center;
            justify-content: space-between;
            transition: all 0.3s ease;
            border: 1px solid rgba(255,255,255,0.1);
        }

        .task-item:hover {
            transform: translateX(5px);
            background: rgba(255,255,255,0.15);
        }

        .task-item.completed {
            background: rgba(0,0,0,0.3);
            text-decoration: line-through;
        }

        .task-comment {
            font-size: 0.9em;
            margin-top: 5px;
            color: #FF69B4;
            font-style: italic;
        }

        .comment-form {
            display: none;
            margin-top: 10px;
        }

        .comment-form.active {
            display: block;
            animation: slideDown 0.3s ease;
        }

        @keyframes slideDown {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .floating-emoji {
            position: fixed;
            font-size: 2rem;
            animation: float 6s ease-in-out infinite;
            pointer-events: none;
            z-index: 5;
            opacity: 0.8;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            50% { transform: translateY(-20px) rotate(10deg); }
        }

        #add-task-form {
            display: flex;
            gap: 10px;
            margin: 20px 0;
        }

        #add-task-form input {
            flex: 1;
        }

        @media (max-width: 600px) {
            .app-container {
                margin: 10px;
                padding: 1rem;
            }

            button {
                width: 100%;
                margin: 5px 0;
            }

            #add-task-form {
                flex-direction: column;
            }
        }

        h1 {
            color: #FF69B4;
            text-shadow: 3px 3px 0px rgba(0,0,0,0.2);
            animation: glitch 3s ease-in-out infinite;
        }

        @keyframes glitch {
            0%, 100% { text-shadow: 2px 2px 0 #FF1493, -2px -2px 0 #FF69B4; }
            25% { text-shadow: -2px 2px 0 #FF69B4, 2px -2px 0 #FF1493; }
            50% { text-shadow: 2px -2px 0 #FF1493, -2px 2px 0 #FF69B4; }
            75% { text-shadow: -2px -2px 0 #FF69B4, 2px 2px 0 #FF1493; }
        }
    </style>
</head>
<body>
    <div class="floating-emoji" style="top: 5%; left: 2%;" data-value="2">üíÄ</div>
    <div class="floating-emoji" style="top: 5%; right: 2%;" data-value="3">üî™</div>
    <div class="floating-emoji" style="bottom: 5%; left: 2%;" data-value="1">‚öîÔ∏è</div>
    <div class="floating-emoji" style="bottom: 5%; right: 2%;" data-value="4">‚ò†Ô∏è</div>

    <div class="app-container">
        <div id="welcome-screen" class="screen active">
            <h1>ALPHA VICTIM HITLIST üíÄ</h1>
            <p>TRACK YOUR CONQUESTS IN THE DIGITAL WASTELAND üåã</p>
            <button onclick="showNewUserScreen()">New Assassin</button>
            <button onclick="showReturningUserScreen()">Return to Carnage</button>
        </div>
        
        <div id="new-user-screen" class="screen">
            <h1>NEW ASSASSIN</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">ENTER THE ARENA</button>
            <button onclick="showScreen('welcome-screen')">RETREAT</button>
        </div>
        
        <div id="returning-user-screen" class="screen">
            <h1>RETURN TO BATTLE</h1>
            <select id="user-label-select">
                <option>Select Your Codename</option>
            </select>
            <input type="text" id="returning-passcode" placeholder="Enter your death code (4 digits)" maxlength="4">
            <button onclick="loginReturningUser()">UNLEASH CHAOS</button>
            <button onclick="showScreen('welcome-screen')">RETREAT</button>
        </div>
        
        <div id="main-screen" class="screen">
            <h1>ALPHA VICTIM HITLIST</h1>
            <div id="user-status">AGENT: <span id="current-user-label"></span></div>
            
            <div id="app-content">
                <form id="add-task-form" onsubmit="addTask(event)">
                    <input type="text" id="new-task" placeholder="ADD NEW VICTIM TO THE LIST üéØ" required>
                    <button type="submit">MARK FOR DELETION</button>
                </form>

                <div id="task-list" class="task-list">
                    <!-- Tasks will be loaded here -->
                </div>
            </div>
            
            <button onclick="leaveApp()">VANISH INTO SHADOWS</button>
        </div>
    </div>

    <script>
        let currentUser = null;
        let pollingInterval;

        // Authentication System
        function initAuth() {
            // Authentication is initialized
        }

        async function generateNewUser() {
            try {
                const slots = await checkAvailableSlots();
                
                if (slots.isFull) {
                    alert('TOO MANY ASSASSINS IN THE FIELD üö´');
                    return false;
                }
                
                const user = await generateUser();
                if (user && user.success) {
                    currentUser = {
                        userLabel: user.userLabel,
                        passcode: user.passcode,
                        participantId: user.participantId
                    };
                    
                    document.getElementById('new-user-info').innerHTML = 
                        `<strong>CODENAME:</strong> ${currentUser.userLabel}<br><strong>DEATH CODE:</strong> ${currentUser.passcode}<br><em>SCREENSHOT OR DIE TRYING üì∏</em>`;
                    
                    return true;
                } else {
                    alert('ASSASSINATION FAILED, TRY AGAIN üíÄ');
                    return false;
                }
            } catch (error) {
                console.error('User generation error:', error);
                alert('SYSTEM MALFUNCTION, RETRY üí•');
                return false;
            }
        }

        async function registerNewUser() {
            if (!currentUser) {
                alert('GENERATE YOUR DEATH MARK FIRST üé≠');
                return;
            }
            
            try {
                const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
                if (result && result.success) {
                    updateZadAuth(currentUser.userLabel, currentUser.participantId);
                    enterMainScreen();
                } else {
                    alert('REGISTRATION FAILED, TRY AGAIN üí•');
                }
            } catch (error) {
                console.error('Registration error:', error);
                alert('REGISTRATION FAILED, TRY AGAIN üí•');
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            const success = await generateNewUser();
            if (!success) {
                showScreen('welcome-screen');
            }
        }

        async function loginReturningUser() {
            const selectedLabel = document.getElementById('user-label-select').value;
            const enteredPasscode = document.getElementById('returning-passcode').value.trim();
            
            if (!selectedLabel || selectedLabel === 'Select User') {
                alert('CHOOSE YOUR DEATH MARK üëª');
                return;
            }
            
            if (!enteredPasscode || enteredPasscode.length !== 4) {
                alert('ENTER YOUR 4-DIGIT DEATH CODE üî¢');
                return;
            }
            
            try {
                const result = await authenticateUser(selectedLabel, enteredPasscode);
                if (result && result.success) {
                    currentUser = {
                        userLabel: selectedLabel,
                        passcode: enteredPasscode,
                        participantId: result.user.participantId
                    };
                    updateZadAuth(currentUser.userLabel, currentUser.participantId);
                    enterMainScreen();
                } else {
                    alert('WRONG DEATH CODE, TRY AGAIN ‚ùå');
                }
            } catch (error) {
                console.error('Login error:', error);
                alert('LOGIN FAILED, SYSTEM UNSTABLE üåÄ');
            }
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(screen => screen.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            
            if (screenId !== 'main-screen') {
                stopPolling();
            }
        }

        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            
            try {
                const slots = await checkAvailableSlots();
                const userSelect = document.getElementById('user-label-select');
                userSelect.innerHTML = '<option>Select Codename</option>';
                
                slots.usedLabels.forEach(label => {
                    const option = document.createElement('option');
                    option.value = label;
                    option.textContent = label;
                    userSelect.appendChild(option);
                });
                
                if (slots.usedLabels.length === 0) {
                    userSelect.innerHTML = '<option>No assassins registered</option>';
                }
            } catch (error) {
                console.error('Error loading users:', error);
                const userSelect = document.getElementById('user-label-select');
                userSelect.innerHTML = '<option>Error loading assassins</option>';
            }
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            startPolling();
            loadLatestData();
        }

        function leaveApp() {
            showScreen('welcome-screen');
        }

        // Task Management
        async function addTask(event) {
            event.preventDefault();
            const input = document.getElementById('new-task');
            const taskContent = input.value.trim();
            
            if (taskContent) {
                await save('task', {
                    content: taskContent,
                    completed: false,
                    created_at: Date.now(),
                    created_by: currentUser.userLabel
                });
                
                input.value = '';
                await loadLatestData();
            }
        }

        async function toggleTask(taskId) {
            const tasks = await load('task');
            const task = tasks.find(t => t.id === taskId);
            
            if (task) {
                const completed = !task.content_data.completed;
                
                if (completed) {
                    showCommentForm(taskId);
                } else {
                    await save('update_task', {
                        taskId: taskId,
                        updates: {
                            completed: completed,
                            comment: null
                        }
                    });
                    await loadLatestData();
                }
            }
        }

        function showCommentForm(taskId) {
            const form = document.getElementById(`comment-form-${taskId}`);
            form.classList.add('active');
        }

        async function addComment(event, taskId) {
            event.preventDefault();
            const input = document.getElementById(`comment-${taskId}`);
            const comment = input.value.trim();
            
            await save('update_task', {
                taskId: taskId,
                updates: {
                    completed: true,
                    comment: comment
                }
            });
            
            await loadLatestData();
        }

        async function loadLatestData() {
            try {
                const tasks = await load('task');
                const taskList = document.getElementById('task-list');
                
                taskList.innerHTML = tasks
                    .sort((a, b) => b.content_data.created_at - a.content_data.created_at)
                    .map(task => `
                        <div class="task-item ${task.content_data.completed ? 'completed' : ''}">
                            <div>
                                <label>
                                    <input type="checkbox" 
                                           ${task.content_data.completed ? 'checked' : ''} 
                                           onchange="toggleTask('${task.id}')">
                                    ${task.content_data.content}
                                </label>
                                ${task.content_data.comment ? 
                                    `<div class="task-comment">üíÄ ${task.content_data.comment}</div>` : ''}
                            </div>
                            <form id="comment-form-${task.id}" 
                                  class="comment-form ${task.content_data.completed && !task.content_data.comment ? 'active' : ''}"
                                  onsubmit="addComment(event, '${task.id}')">
                                <input type="text" 
                                       id="comment-${task.id}" 
                                       placeholder="HOW DID YOU DESTROY THEM? üî™" 
                                       required>
                                <button type="submit">MARK KILL</button>
                            </form>
                        </div>
                    `).join('');
            } catch (error) {
                console.error('Error loading tasks:', error);
            }
        }

        function startPolling() {
            pollingInterval = setInterval(loadLatestData, 2000);
        }

        function stopPolling() {
            if (pollingInterval) {
                clearInterval(pollingInterval);
                pollingInterval = null;
            }
        }

        // Mouse parallax effect
        document.addEventListener('mousemove', (e) => {
            document.querySelectorAll('.floating-emoji').forEach((elem) => {
                const speed = elem.getAttribute('data-value') || 2;
                const x = (e.clientX * speed) / 100;
                const y = (e.clientY * speed) / 100;
                elem.style.transform = `translateX(${x}px) translateY(${y}px)`;
            });
        });

        // Easter egg
        console.log('üî™ Welcome to the Alpha Victim Hitlist! Type wtaf() for chaos...');
        window.wtaf = function() {
            document.body.style.animation = 'rainbow 1s infinite';
            setTimeout(() => {
                document.body.style.animation = '';
                alert('üéØ ALPHA KILLER MODE ACTIVATED! Time to slay!');
            }, 3000);
        };

        // Initialize app
        initAuth();
    </script>
</body>
</html>