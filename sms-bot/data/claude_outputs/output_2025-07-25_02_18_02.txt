<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>WTAF Paint</title>
    <style>
        * { box-sizing: border-box; margin: 0; padding: 0; }
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
            background: #fefef5;
            font-size: 16px;
            line-height: 1.5;
        }

        .screen {
            display: none;
            padding: 20px;
            max-width: 800px;
            margin: 0 auto;
        }

        .screen.active {
            display: block;
        }

        h1 {
            color: #FF4B4B;
            text-transform: uppercase;
            text-align: center;
            margin-bottom: 20px;
            font-size: 24px;
        }

        button {
            background: #6ECBFF;
            border: none;
            border-radius: 25px;
            color: white;
            padding: 12px 24px;
            font-size: 16px;
            cursor: pointer;
            display: block;
            width: 100%;
            margin: 10px 0;
            min-height: 44px;
        }

        select, input {
            width: 100%;
            padding: 12px;
            margin: 10px 0;
            border: 2px solid #6ECBFF;
            border-radius: 8px;
            font-size: 16px;
            min-height: 44px;
        }

        .paint-container {
            background: white;
            border: 2px solid #FFD63D;
            border-radius: 12px;
            padding: 20px;
            margin: 20px 0;
            box-shadow: 4px 4px 0 #C9C2F9;
        }

        #canvas {
            width: 100%;
            height: 300px;
            border: 2px solid #FFD63D;
            border-radius: 8px;
            touch-action: none;
        }

        .controls {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 10px;
            margin: 10px 0;
        }

        .tool-btn {
            background: #6ECBFF;
            border: none;
            border-radius: 8px;
            color: white;
            padding: 10px;
            font-size: 16px;
            cursor: pointer;
            min-height: 44px;
        }

        .tool-btn.active {
            background: #FF4B4B;
        }

        .gallery {
            display: grid;
            grid-template-columns: 1fr;
            gap: 20px;
            margin-top: 20px;
        }

        .gallery-item {
            background: white;
            border: 2px solid #FFD63D;
            border-radius: 12px;
            padding: 10px;
            box-shadow: 4px 4px 0 #C9C2F9;
        }

        .gallery-item img {
            width: 100%;
            border-radius: 8px;
            margin-bottom: 10px;
        }

        .gallery-meta {
            font-size: 14px;
            color: #666;
        }

        @media (min-width: 768px) {
            button {
                width: auto;
                display: inline-block;
                margin-right: 10px;
            }

            .gallery {
                grid-template-columns: repeat(2, 1fr);
            }

            #canvas {
                height: 400px;
            }

            .controls {
                grid-template-columns: repeat(4, 1fr);
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Auth screens -->
        <div id="welcome-screen" class="screen active">
            <h1>WTAF Paint üé®</h1>
            <p>Make pixel art like it's 1984!</p>
            <button onclick="showNewUserScreen()">New Artist</button>
            <button onclick="showReturningUserScreen()">Returning Artist</button>
        </div>
        
        <div id="new-user-screen" class="screen">
            <h1>New Artist</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Start Painting</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="returning-user-screen" class="screen">
            <h1>Welcome Back</h1>
            <select id="user-label-select"></select>
            <input type="text" id="returning-passcode" placeholder="4-digit code" maxlength="4">
            <button onclick="loginReturningUser()">Enter Studio</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <!-- Main app screen -->
        <div id="main-screen" class="screen">
            <h1>WTAF Paint Studio</h1>
            <div id="user-status">Artist: <span id="current-user-label"></span></div>

            <div class="paint-container">
                <canvas id="canvas"></canvas>
                
                <div class="controls">
                    <button class="tool-btn active" onclick="setTool('pencil')">‚úèÔ∏è Pencil</button>
                    <button class="tool-btn" onclick="setTool('brush')">üñåÔ∏è Brush</button>
                    <input type="color" id="colorPicker" onchange="setColor(this.value)">
                    <input type="range" id="sizeSlider" min="1" max="20" value="2" onchange="setSize(this.value)">
                </div>
                
                <button onclick="saveArtwork()">üíæ Save to Gallery</button>
                <button onclick="clearCanvas()">üóëÔ∏è Clear</button>
            </div>

            <h2>Gallery Wall</h2>
            <div id="gallery" class="gallery">
                <!-- Artwork will load here -->
            </div>

            <button onclick="showScreen('welcome-screen')">Leave Studio</button>
        </div>
    </div>

    <script>
        // Auth code
        let currentUser = null;
        let pollingInterval;

        async function generateNewUser() {
            const slots = await checkAvailableSlots();
            if (slots.isFull) {
                alert('Studio is full!');
                return false;
            }
            
            const user = await generateUser();
            if (user?.success) {
                currentUser = user;
                document.getElementById('new-user-info').innerHTML = 
                    `Your Artist ID: ${user.userLabel}<br>Code: ${user.passcode}<br>Save these!`;
                return true;
            }
            return false;
        }

        async function registerNewUser() {
            if (!currentUser) return;
            const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
            if (result?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                enterMainScreen();
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            await generateNewUser();
        }

        async function loginReturningUser() {
            const label = document.getElementById('user-label-select').value;
            const passcode = document.getElementById('returning-passcode').value;
            
            const result = await authenticateUser(label, passcode);
            if (result?.success) {
                currentUser = { userLabel: label, passcode, participantId: result.user.participantId };
                updateZadAuth(label, result.user.participantId);
                enterMainScreen();
            } else {
                alert('Wrong code!');
            }
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            if (screenId !== 'main-screen') stopPolling();
        }

        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const slots = await checkAvailableSlots();
            const select = document.getElementById('user-label-select');
            select.innerHTML = '<option>Select Artist</option>';
            slots.usedLabels.forEach(label => {
                select.innerHTML += `<option>${label}</option>`;
            });
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            initCanvas();
            startPolling();
            loadLatestData();
        }

        // Canvas functionality
        let canvas, ctx;
        let isDrawing = false;
        let tool = 'pencil';
        let color = '#000000';
        let size = 2;

        function initCanvas() {
            canvas = document.getElementById('canvas');
            ctx = canvas.getContext('2d');
            
            // Set canvas size
            function resizeCanvas() {
                canvas.width = canvas.offsetWidth;
                canvas.height = canvas.offsetHeight;
                ctx.fillStyle = 'white';
                ctx.fillRect(0, 0, canvas.width, canvas.height);
            }
            resizeCanvas();
            window.addEventListener('resize', resizeCanvas);

            // Drawing events
            canvas.addEventListener('mousedown', startDrawing);
            canvas.addEventListener('mousemove', draw);
            canvas.addEventListener('mouseup', stopDrawing);
            canvas.addEventListener('mouseleave', stopDrawing);
            
            // Touch events
            canvas.addEventListener('touchstart', e => {
                e.preventDefault();
                const touch = e.touches[0];
                const mouseEvent = new MouseEvent('mousedown', {
                    clientX: touch.clientX,
                    clientY: touch.clientY
                });
                canvas.dispatchEvent(mouseEvent);
            });

            canvas.addEventListener('touchmove', e => {
                e.preventDefault();
                const touch = e.touches[0];
                const mouseEvent = new MouseEvent('mousemove', {
                    clientX: touch.clientX,
                    clientY: touch.clientY
                });
                canvas.dispatchEvent(mouseEvent);
            });

            canvas.addEventListener('touchend', e => {
                const mouseEvent = new MouseEvent('mouseup', {});
                canvas.dispatchEvent(mouseEvent);
            });
        }

        function startDrawing(e) {
            isDrawing = true;
            draw(e);
        }

        function draw(e) {
            if (!isDrawing) return;
            
            const rect = canvas.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;

            ctx.fillStyle = color;
            ctx.strokeStyle = color;

            if (tool === 'pencil') {
                ctx.lineWidth = size;
                ctx.lineCap = 'round';
                ctx.lineTo(x, y);
                ctx.stroke();
                ctx.beginPath();
                ctx.moveTo(x, y);
            } else if (tool === 'brush') {
                ctx.beginPath();
                ctx.arc(x, y, size * 2, 0, Math.PI * 2);
                ctx.fill();
            }
        }

        function stopDrawing() {
            isDrawing = false;
            ctx.beginPath();
        }

        function setTool(newTool) {
            tool = newTool;
            document.querySelectorAll('.tool-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            event.target.classList.add('active');
        }

        function setColor(newColor) {
            color = newColor;
        }

        function setSize(newSize) {
            size = newSize;
        }

        function clearCanvas() {
            ctx.fillStyle = 'white';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
        }

        async function saveArtwork() {
            const imageData = canvas.toDataURL('image/png');
            await save('artwork', {
                image: imageData,
                timestamp: new Date().toISOString()
            });
            loadLatestData();
        }

        // Gallery functionality
        async function loadLatestData() {
            const artworks = await load('artwork');
            const gallery = document.getElementById('gallery');
            
            // Sort by newest first
            const sortedArtworks = artworks.sort((a, b) => 
                new Date(b.created_at) - new Date(a.created_at)
            );

            gallery.innerHTML = sortedArtworks.map(artwork => `
                <div class="gallery-item">
                    <img src="${artwork.image}" alt="Artwork">
                    <div class="gallery-meta">
                        Artist: ${artwork.author}
                        <br>
                        Created: ${new Date(artwork.created_at).toLocaleString()}
                    </div>
                </div>
            `).join('');
        }

        function startPolling() {
            pollingInterval = setInterval(() => loadLatestData(), 2000);
        }

        function stopPolling() {
            if (pollingInterval) clearInterval(pollingInterval);
        }

        initAuth();
    </script>
</body>
</html>