```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SPEEDY PONG ‚Äî Accelerate Your Anxiety</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@700&family=Inter:wght@400;600&display=swap');
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #000000 0%, #1a1a1a 50%, #000000 100%);
            background-size: 400% 400%;
            animation: gradientShift 15s ease infinite;
            color: #ffffff;
            overflow: hidden;
            height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
        }
        
        @keyframes gradientShift {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }
        
        .floating-emoji {
            position: absolute;
            font-size: 2rem;
            opacity: 0.15;
            pointer-events: none;
            transition: transform 0.3s ease;
        }
        
        .emoji-1 { top: 10%; left: 10%; }
        .emoji-2 { top: 80%; right: 15%; }
        .emoji-3 { top: 50%; left: 90%; }
        
        .game-container {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            padding: 2rem;
            max-width: 800px;
            width: 90%;
            animation: fadeIn 0.6s ease;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        h1 {
            font-family: 'Space Grotesk', sans-serif;
            font-size: clamp(2rem, 5vw, 3rem);
            text-align: center;
            margin-bottom: 1rem;
            letter-spacing: -0.02em;
        }
        
        .tagline {
            text-align: center;
            opacity: 0.7;
            margin-bottom: 2rem;
            font-size: 1.1rem;
        }
        
        canvas {
            display: block;
            margin: 0 auto;
            border: 2px solid rgba(255, 255, 255, 0.2);
            border-radius: 10px;
            image-rendering: pixelated;
            image-rendering: -moz-crisp-edges;
            image-rendering: crisp-edges;
        }
        
        .screen {
            display: none;
            text-align: center;
            animation: screenFade 0.4s ease;
        }
        
        .screen.active {
            display: block;
        }
        
        @keyframes screenFade {
            from { opacity: 0; transform: scale(0.95); }
            to { opacity: 1; transform: scale(1); }
        }
        
        .button {
            background: rgba(255, 255, 255, 0.1);
            border: 2px solid rgba(255, 255, 255, 0.3);
            color: white;
            padding: 1rem 2rem;
            font-size: 1.1rem;
            font-weight: 600;
            border-radius: 50px;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-top: 2rem;
            display: inline-block;
        }
        
        .button:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(255, 255, 255, 0.1);
        }
        
        .controls {
            margin-top: 2rem;
            padding: 1rem;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 10px;
            line-height: 1.8;
        }
        
        .score-display {
            font-family: 'Space Grotesk', sans-serif;
            font-size: 2rem;
            margin: 1rem 0;
        }
        
        @media (max-width: 600px) {
            .game-container {
                padding: 1rem;
            }
            
            canvas {
                max-width: 100%;
                height: auto;
            }
        }
    </style>
</head>
<body>
    <div class="floating-emoji emoji-1">üéÆ</div>
    <div class="floating-emoji emoji-2">‚ö°</div>
    <div class="floating-emoji emoji-3">üèì</div>
    
    <div class="game-container">
        <div id="intro" class="screen active">
            <h1>SPEEDY PONG</h1>
            <p class="tagline">Each bounce accelerates your inevitable defeat</p>
            <button class="button" onclick="startGame()">Begin the Chaos</button>
            <div class="controls">
                <strong>Player 1:</strong> W/S keys<br>
                <strong>Player 2:</strong> ‚Üë/‚Üì arrows<br>
                <em>First to 5 points wins</em>
            </div>
        </div>
        
        <div id="game" class="screen">
            <canvas id="gameCanvas"></canvas>
        </div>
        
        <div id="end" class="screen">
            <h1>GAME OVER</h1>
            <div class="score-display" id="finalScore"></div>
            <p class="tagline" id="endMessage"></p>
            <button class="button" onclick="restartGame()">Restart Your Suffering</button>
        </div>
    </div>
    
    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        
        let gameState = 'intro';
        let animationId;
        
        const game = {
            player1Score: 0,
            player2Score: 0,
            ballSpeed: 4,
            ballSpeedIncrease: 0.5,
            maxBallSpeed: 20,
            paddleSpeed: 8,
            winScore: 5
        };
        
        const paddle1 = {
            x: 20,
            y: 250,
            width: 10,
            height: 80,
            dy: 0
        };
        
        const paddle2 = {
            x: 570,
            y: 250,
            width: 10,
            height: 80,
            dy: 0
        };
        
        const ball = {
            x: 300,
            y: 200,
            radius: 6,
            dx: 4,
            dy: 3
        };
        
        const keys = {};
        
        function resizeCanvas() {
            const maxWidth = Math.min(600, window.innerWidth - 40);
            canvas.width = maxWidth;
            canvas.height = maxWidth * 0.67;
            
            // Adjust game objects to canvas size
            paddle2.x = canvas.width - 30;
            ball.x = canvas.width / 2;
            ball.y = canvas.height / 2;
        }
        
        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
        }
        
        function startGame() {
            resizeCanvas();
            gameState = 'playing';
            game.player1Score = 0;
            game.player2Score = 0;
            resetBall();
            showScreen('game');
            gameLoop();
        }
        
        function resetBall() {
            ball.x = canvas.width / 2;
            ball.y = canvas.height / 2;
            ball.dx = (Math.random() > 0.5 ? 1 : -1) * game.ballSpeed;
            ball.dy = (Math.random() - 0.5) * game.ballSpeed;
            game.ballSpeed = 4;
        }
        
        function updatePaddles() {
            // Player 1 controls
            if (keys['w'] || keys['W']) paddle1.dy = -game.paddleSpeed;
            else if (keys['s'] || keys['S']) paddle1.dy = game.paddleSpeed;
            else paddle1.dy = 0;
            
            // Player 2 controls
            if (keys['ArrowUp']) paddle2.dy = -game.paddleSpeed;
            else if (keys['ArrowDown']) paddle2.dy = game.paddleSpeed;
            else paddle2.dy = 0;
            
            // Update positions
            paddle1.y += paddle1.dy;
            paddle2.y += paddle2.dy;
            
            // Keep paddles on screen
            paddle1.y = Math.max(0, Math.min(canvas.height - paddle1.height, paddle1.y));
            paddle2.y = Math.max(0, Math.min(canvas.height - paddle2.height, paddle2.y));
        }
        
        function updateBall() {
            ball.x += ball.dx;
            ball.y += ball.dy;
            
            // Top/bottom collision
            if (ball.y - ball.radius <= 0 || ball.y + ball.radius >= canvas.height) {
                ball.dy = -ball.dy;
            }
            
            // Paddle collisions
            if (ball.x - ball.radius <= paddle1.x + paddle1.width &&
                ball.x - ball.radius >= paddle1.x &&
                ball.y >= paddle1.y &&
                ball.y <= paddle1.y + paddle1.height &&
                ball.dx < 0) {
                ball.dx = -ball.dx;
                game.ballSpeed = Math.min(game.ballSpeed + game.ballSpeedIncrease, game.maxBallSpeed);
                ball.dx = Math.abs(ball.dx) * (game.ballSpeed / Math.abs(ball.dx));
            }
            
            if (ball.x + ball.radius >= paddle2.x &&
                ball.x + ball.radius <= paddle2.x + paddle2.width &&
                ball.y >= paddle2.y &&
                ball.y <= paddle2.y + paddle2.height &&
                ball.dx > 0) {
                ball.dx = -ball.dx;
                game.ballSpeed = Math.min(game.ballSpeed + game.ballSpeedIncrease, game.maxBallSpeed);
                ball.dx = -Math.abs(ball.dx) * (game.ballSpeed / Math.abs(ball.dx));
            }
            
            // Score
            if (ball.x < 0) {
                game.player2Score++;
                checkWin();
                resetBall();
            } else if (ball.x > canvas.width) {
                game.player1Score++;
                checkWin();
                resetBall();
            }
        }
        
        function checkWin() {
            if (game.player1Score >= game.winScore || game.player2Score >= game.winScore) {
                endGame();
            }
        }
        
        function draw() {
            // Clear canvas
            ctx.fillStyle = 'rgba(0, 0, 0, 0.9)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // Draw center line
            ctx.setLineDash([5, 15]);
            ctx.strokeStyle = 'rgba(255, 255, 255, 0.3)';
            ctx.lineWidth = 2;
            ctx.beginPath();
            ctx.moveTo(canvas.width / 2, 0);
            ctx.lineTo(canvas.width / 2, canvas.height);
            ctx.stroke();
            ctx.setLineDash([]);
            
            // Draw paddles
            ctx.fillStyle = '#ffffff';
            ctx.fillRect(paddle1.x, paddle1.y, paddle1.width, paddle1.height);
            ctx.fillRect(paddle2.x, paddle2.y, paddle2.width, paddle2.height);
            
            // Draw ball
            ctx.beginPath();
            ctx.arc(ball.x, ball.y, ball.radius, 0, Math.PI * 2);
            ctx.fill();
            
            // Draw scores
            ctx.font = '48px Space Grotesk';
            ctx.textAlign = 'center';
            ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
            ctx.fillText(game.player1Score, canvas.width / 4, 60);
            ctx.fillText(game.player2Score, (canvas.width * 3) / 4, 60);
            
            // Speed indicator
            ctx.font = '12px Inter';
            ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';
            ctx.fillText(`SPEED: ${Math.round(game.ballSpeed)}`, canvas.width / 2, canvas.height - 20);
        }
        
        function gameLoop() {
            if (gameState !== 'playing') return;
            
            updatePaddles();
            updateBall();
            draw();
            
            animationId = requestAnimationFrame(gameLoop);
        }
        
        function endGame() {
            gameState = 'ended';
            cancelAnimationFrame(animationId);
            
            const winner = game.player1Score > game.player2Score ? 'Player 1' : 'Player 2';
            document.getElementById('finalScore').textContent = `${game.player1Score} - ${game.player2Score}`;
            
            const messages = [
                'The velocity of defeat is exponential',
                'Speed kills, especially in Pong',
                'Accelerated beyond human reflexes',
                'The ball moved faster than your hopes'
            ];
            document.getElementById('endMessage').textContent = messages[Math.floor(Math.random() * messages.length)];
            
            showScreen('end');
        }
        
        function restartGame() {
            startGame();
        }
        
        // Event listeners
        window.addEventListener('keydown', (e) => {
            keys[e.key] = true;
        });
        
        window.addEventListener('keyup', (e) => {
            keys[e.key] = false;
        });
        
        window.addEventListener('resize', () => {
            if (gameState === 'playing') {
                resizeCanvas();
            }
        });
        
        // Parallax effect for emojis
        document.addEventListener('mousemove', (e) => {
            const x = (e.clientX / window.innerWidth - 0.5) * 20;
            const y = (e.clientY / window.innerHeight - 0.5) * 20;
            
            document.querySelectorAll('.floating-emoji').forEach((emoji, i) => {
                const factor = (i + 1) * 0.5;
                emoji.style.transform = `translate(${x * factor}px, ${y * factor}px)`;
            });
        });
        
        // Initialize
        window.addEventListener('load', () => {
            resizeCanvas();
        });
    </script>
</body>
</html>
```