<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>REBEL CHAT</title>
    <style>
        /* WEBTOYS CHAOS THEME */
        :root {
            --bg: #FCFCF7;
            --border: #FFD63D;
            --shadow: #C9C2F9;
            --text: #0A0A0A;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Space Grotesk', system-ui, sans-serif;
            background: var(--bg);
            color: var(--text);
            line-height: 1.6;
            font-size: 16px;
        }

        .screen {
            display: none;
            padding: 20px;
            max-width: 666px;
            margin: 0 auto;
            min-height: 100vh;
        }

        .screen.active {
            display: block;
        }

        h1 {
            font-size: 40px;
            text-transform: uppercase;
            transform: rotate(-2deg);
            margin-bottom: 20px;
            text-shadow: 2px 2px var(--shadow);
        }

        button {
            background: var(--border);
            border: 3px solid var(--text);
            font-family: inherit;
            font-size: 18px;
            padding: 12px 24px;
            margin: 10px 0;
            min-height: 44px;
            width: 100%;
            cursor: pointer;
            text-transform: uppercase;
            letter-spacing: 1px;
            box-shadow: 4px 4px var(--shadow);
            transform: rotate(-1deg);
            transition: all 0.2s;
        }

        button:active {
            transform: translateY(4px) rotate(-1deg);
            box-shadow: 0px 0px var(--shadow);
        }

        input, select {
            width: 100%;
            padding: 12px;
            margin: 10px 0;
            min-height: 44px;
            border: 3px solid var(--text);
            font-family: 'JetBrains Mono', monospace;
            font-size: 16px;
            background: white;
        }

        #chat-container {
            margin: 20px 0;
            border: 3px solid var(--text);
            min-height: 300px;
            max-height: 70vh;
            overflow-y: auto;
            padding: 10px;
            background: white;
            box-shadow: 4px 4px var(--shadow);
        }

        .message {
            margin: 10px 0;
            padding: 10px;
            border: 2px solid var(--text);
            border-radius: 4px;
            transform: rotate(-1deg);
            animation: pop-in 0.3s ease-out;
        }

        .message.my-message {
            background: var(--border);
            margin-left: 20px;
            transform: rotate(1deg);
        }

        .message.other-message {
            background: var(--shadow);
            margin-right: 20px;
        }

        .message-author {
            font-weight: bold;
            margin-bottom: 4px;
        }

        #message-input {
            width: calc(100% - 20px);
            margin: 10px;
        }

        @keyframes pop-in {
            0% { transform: scale(0.8) rotate(-1deg); opacity: 0; }
            100% { transform: scale(1) rotate(-1deg); opacity: 1; }
        }

        /* Easter Egg */
        #easter-egg {
            position: fixed;
            bottom: 20px;
            right: 20px;
            font-size: 24px;
            cursor: pointer;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.2); }
            100% { transform: scale(1); }
        }

        /* Emoji Rain */
        .emoji-rain {
            position: fixed;
            top: -20px;
            animation: fall 1s linear forwards;
            user-select: none;
            pointer-events: none;
        }

        @keyframes fall {
            to {
                transform: translateY(100vh) rotate(360deg);
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Welcome Screen -->
        <div id="welcome-screen" class="screen active">
            <h1>REBEL CHAT 💬</h1>
            <p>Break the silence with style.</p>
            <button onclick="showNewUserScreen()">New Rebel</button>
            <button onclick="showReturningUserScreen()">Return to Chaos</button>
        </div>

        <!-- New User Screen -->
        <div id="new-user-screen" class="screen">
            <h1>JOIN THE REBELLION</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">CRASH THE PARTY</button>
            <button onclick="showScreen('welcome-screen')">RETREAT</button>
        </div>

        <!-- Returning User Screen -->
        <div id="returning-user-screen" class="screen">
            <h1>WELCOME BACK</h1>
            <select id="user-label-select"></select>
            <input type="text" id="returning-passcode" placeholder="4-digit code" maxlength="4">
            <button onclick="loginReturningUser()">RETURN TO CHAOS</button>
            <button onclick="showScreen('welcome-screen')">ESCAPE</button>
        </div>

        <!-- Main Chat Screen -->
        <div id="main-screen" class="screen">
            <h1>REBEL CHAT</h1>
            <div id="user-status">REBEL: <span id="current-user-label"></span></div>
            
            <div id="chat-container"></div>
            
            <input type="text" 
                   id="message-input" 
                   placeholder="Type something rebellious..." 
                   onkeypress="if(event.key === 'Enter') sendMessage()">
            <button onclick="sendMessage()">SEND IT 🚀</button>
            <button onclick="showScreen('welcome-screen')">ESCAPE</button>
        </div>
    </div>

    <!-- Easter Egg -->
    <div id="easter-egg" onclick="triggerEmojiRain()">💬</div>

    <script>
        let currentUser = null;
        let messageCache = { messages: [], hash: null };

        // Authentication Flow
        async function generateNewUser() {
            const slots = await checkAvailableSlots();
            if (slots.isFull) {
                alert('Rebellion is at capacity!');
                return false;
            }
            
            const user = await generateUser();
            if (user?.success) {
                currentUser = user;
                document.getElementById('new-user-info').innerHTML = 
                    `Your Rebel ID: ${user.userLabel}<br>Secret Code: ${user.passcode}<br>SAVE THESE OR BE FORGOTTEN!`;
                return true;
            }
            return false;
        }

        async function registerNewUser() {
            if (!currentUser) return;
            
            const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
            if (result?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                enterMainScreen();
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            await generateNewUser();
        }

        async function loginReturningUser() {
            const label = document.getElementById('user-label-select').value;
            const passcode = document.getElementById('returning-passcode').value;
            
            const result = await authenticateUser(label, passcode);
            if (result?.success) {
                currentUser = { userLabel: label, passcode, participantId: result.user.participantId };
                updateZadAuth(label, result.user.participantId);
                enterMainScreen();
            } else {
                alert('Wrong code, rebel!');
            }
        }

        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const slots = await checkAvailableSlots();
            const select = document.getElementById('user-label-select');
            select.innerHTML = '<option>Select Your Rebel ID</option>';
            slots.usedLabels.forEach(label => {
                select.innerHTML += `<option>${label}</option>`;
            });
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            if (screenId !== 'main-screen') stopPolling();
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            loadLatestData();
            startPolling();
        }

        // Chat Functions
        async function sendMessage() {
            const input = document.getElementById('message-input');
            const message = input.value.trim();
            
            if (message) {
                await save('message', { text: message });
                input.value = '';
                await loadLatestData();
            }
        }

        function deduplicate(messages) {
            return messages.reduce((acc, msg) => {
                const existing = acc.find(m => 
                    m.text === msg.text && 
                    m.author === msg.author &&
                    Math.abs(new Date(m.created_at) - new Date(msg.created_at)) < 1000
                );
                if (!existing) acc.push(msg);
                return acc;
            }, []);
        }

        async function loadLatestData() {
            const messages = await load('message');
            const dataHash = JSON.stringify(messages);
            
            if (dataHash === messageCache.hash) return;
            
            messageCache.hash = dataHash;
            messageCache.messages = deduplicate(messages);
            
            const container = document.getElementById('chat-container');
            container.innerHTML = messageCache.messages
                .sort((a, b) => new Date(a.created_at) - new Date(b.created_at))
                .map(msg => `
                    <div class="message ${msg.author === getUsername() ? 'my-message' : 'other-message'}">
                        <div class="message-author">${msg.author}</div>
                        <div class="message-text">${msg.text}</div>
                    </div>
                `).join('');
            
            container.scrollTop = container.scrollHeight;
        }

        // Polling
        let pollingInterval;

        function startPolling() {
            loadLatestData();
            pollingInterval = setInterval(loadLatestData, 2000);
        }

        function stopPolling() {
            if (pollingInterval) clearInterval(pollingInterval);
        }

        // Easter Egg
        function triggerEmojiRain() {
            const emojis = ['💬', '🗨️', '💭', '🤘', '⚡'];
            for (let i = 0; i < 20; i++) {
                setTimeout(() => {
                    const emoji = document.createElement('div');
                    emoji.className = 'emoji-rain';
                    emoji.textContent = emojis[Math.floor(Math.random() * emojis.length)];
                    emoji.style.left = Math.random() * 100 + 'vw';
                    document.body.appendChild(emoji);
                    setTimeout(() => emoji.remove(), 1000);
                }, i * 100);
            }
        }

        // Initialize
        initAuth();
    </script>
</body>
</html>