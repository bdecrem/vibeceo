I'll create a mobile-friendly Space Invaders game with touch controls and keyboard support. The game will feature rows of aliens moving side to side, player ship movement, and shooting mechanics.

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Space Invaders</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            overflow: hidden;
            touch-action: none;
            font-family: Arial, sans-serif;
            background-color: #000;
        }
        
        #gameCanvas {
            display: block;
            width: 100%;
            background-color: #000;
        }
        
        .ui-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            padding: 10px;
            color: white;
            font-size: 18px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
            pointer-events: none;
        }
        
        .control-bar {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            height: 80px;
            background: #222;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 20px;
            border-top: 2px solid #444;
        }
        
        .control-btn {
            width: 70px;
            height: 50px;
            background: #444;
            border: 2px solid #666;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 24px;
            font-weight: bold;
            user-select: none;
            -webkit-user-select: none;
            touch-action: none;
        }
        
        .control-btn:active {
            background: #666;
            transform: scale(0.95);
        }

        .game-over {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-size: 36px;
            text-align: center;
            display: none;
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas"></canvas>
    <div class="ui-overlay">
        <div>Score: <span id="score">0</span></div>
        <div>Lives: <span id="lives">3</span></div>
    </div>
    <div class="control-bar">
        <div class="control-btn" id="leftBtn">‚Üê</div>
        <div class="control-btn" id="fireBtn">üî•</div>
        <div class="control-btn" id="rightBtn">‚Üí</div>
    </div>
    <div class="game-over" id="gameOver">
        Game Over<br>
        <span id="finalScore"></span><br>
        Tap to Restart
    </div>
    
    <script>
        const CONTROL_BAR_HEIGHT = 80;
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const gameOverEl = document.getElementById('gameOver');
        
        // Game constants
        const PLAYER_WIDTH = 40;
        const PLAYER_HEIGHT = 30;
        const ALIEN_ROWS = 5;
        const ALIEN_COLS = 8;
        const ALIEN_WIDTH = 30;
        const ALIEN_HEIGHT = 30;
        const ALIEN_SPACING = 15;
        const BULLET_WIDTH = 4;
        const BULLET_HEIGHT = 10;
        const BULLET_SPEED = 7;
        const ALIEN_SPEED = 1;
        const PLAYER_SPEED = 5;

        // Game state
        const game = {
            score: 0,
            lives: 3,
            isPlaying: true,
            player: {
                x: 0,
                y: 0,
                width: PLAYER_WIDTH,
                height: PLAYER_HEIGHT,
                speed: PLAYER_SPEED,
                isMovingLeft: false,
                isMovingRight: false
            },
            bullets: [],
            aliens: [],
            alienDirection: 1,
            alienStepDown: false,
            lastAlienMove: 0,
            moveInterval: 30
        };

        function resizeCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight - CONTROL_BAR_HEIGHT;
            game.player.y = canvas.height - PLAYER_HEIGHT - 20;
            game.player.x = (canvas.width - PLAYER_WIDTH) / 2;
        }

        window.addEventListener('resize', resizeCanvas);
        resizeCanvas();

        // Initialize aliens
        function initAliens() {
            game.aliens = [];
            const startX = (canvas.width - (ALIEN_COLS * (ALIEN_WIDTH + ALIEN_SPACING))) / 2;
            const startY = 50;

            for (let row = 0; row < ALIEN_ROWS; row++) {
                for (let col = 0; col < ALIEN_COLS; col++) {
                    game.aliens.push({
                        x: startX + col * (ALIEN_WIDTH + ALIEN_SPACING),
                        y: startY + row * (ALIEN_HEIGHT + ALIEN_SPACING),
                        width: ALIEN_WIDTH,
                        height: ALIEN_HEIGHT,
                        isAlive: true
                    });
                }
            }
        }

        // Input handling
        document.getElementById('leftBtn').addEventListener('touchstart', () => game.player.isMovingLeft = true);
        document.getElementById('leftBtn').addEventListener('touchend', () => game.player.isMovingLeft = false);
        document.getElementById('rightBtn').addEventListener('touchstart', () => game.player.isMovingRight = true);
        document.getElementById('rightBtn').addEventListener('touchend', () => game.player.isMovingRight = false);
        document.getElementById('fireBtn').addEventListener('touchstart', fireBullet);

        window.addEventListener('keydown', (e) => {
            if (e.key === 'ArrowLeft') game.player.isMovingLeft = true;
            if (e.key === 'ArrowRight') game.player.isMovingRight = true;
            if (e.key === ' ') fireBullet();
        });

        window.addEventListener('keyup', (e) => {
            if (e.key === 'ArrowLeft') game.player.isMovingLeft = false;
            if (e.key === 'ArrowRight') game.player.isMovingRight = false;
        });

        function fireBullet() {
            if (!game.isPlaying) {
                resetGame();
                return;
            }
            
            game.bullets.push({
                x: game.player.x + (PLAYER_WIDTH / 2) - (BULLET_WIDTH / 2),
                y: game.player.y,
                width: BULLET_WIDTH,
                height: BULLET_HEIGHT
            });
        }

        function updatePlayer() {
            if (game.player.isMovingLeft) {
                game.player.x = Math.max(0, game.player.x - game.player.speed);
            }
            if (game.player.isMovingRight) {
                game.player.x = Math.min(canvas.width - PLAYER_WIDTH, game.player.x + game.player.speed);
            }
        }

        function updateBullets() {
            for (let i = game.bullets.length - 1; i >= 0; i--) {
                game.bullets[i].y -= BULLET_SPEED;
                
                // Remove bullets that are off screen
                if (game.bullets[i].y < 0) {
                    game.bullets.splice(i, 1);
                    continue;
                }

                // Check for collisions with aliens
                for (let alien of game.aliens) {
                    if (alien.isAlive && checkCollision(game.bullets[i], alien)) {
                        alien.isAlive = false;
                        game.bullets.splice(i, 1);
                        game.score += 10;
                        document.getElementById('score').textContent = game.score;
                        break;
                    }
                }
            }
        }

        function updateAliens() {
            let moveDown = false;
            let currentTime = Date.now();
            
            if (currentTime - game.lastAlienMove < game.moveInterval) return;
            
            game.lastAlienMove = currentTime;

            // Check if aliens should change direction
            for (let alien of game.aliens) {
                if (!alien.isAlive) continue;
                
                if (game.alienDirection > 0 && alien.x + ALIEN_WIDTH >= canvas.width) {
                    game.alienDirection = -1;
                    moveDown = true;
                    break;
                }
                if (game.alienDirection < 0 && alien.x <= 0) {
                    game.alienDirection = 1;
                    moveDown = true;
                    break;
                }
            }

            // Move aliens
            for (let alien of game.aliens) {
                if (!alien.isAlive) continue;
                
                alien.x += ALIEN_SPEED * game.alienDirection;
                if (moveDown) alien.y += ALIEN_HEIGHT;

                // Check if aliens reached the player
                if (alien.y + ALIEN_HEIGHT >= game.player.y) {
                    gameOver();
                }
            }
        }

        function checkCollision(rect1, rect2) {
            return rect1.x < rect2.x + rect2.width &&
                   rect1.x + rect1.width > rect2.x &&
                   rect1.y < rect2.y + rect2.height &&
                   rect1.y + rect1.height > rect2.y;
        }

        function gameOver() {
            game.isPlaying = false;
            gameOverEl.style.display = 'block';
            document.getElementById('finalScore').textContent = `Final Score: ${game.score}`;
        }

        function resetGame() {
            game.score = 0;
            game.lives = 3;
            game.isPlaying = true;
            game.bullets = [];
            game.alienDirection = 1;
            game.player.x = (canvas.width - PLAYER_WIDTH) / 2;
            initAliens();
            gameOverEl.style.display = 'none';
            document.getElementById('score').textContent = '0';
            document.getElementById('lives').textContent = '3';
        }

        function render() {
            // Clear canvas
            ctx.fillStyle = '#000';
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            // Draw player
            ctx.fillStyle = '#0F0';
            ctx.fillRect(game.player.x, game.player.y, PLAYER_WIDTH, PLAYER_HEIGHT);

            // Draw bullets
            ctx.fillStyle = '#FFF';
            for (let bullet of game.bullets) {
                ctx.fillRect(bullet.x, bullet.y, BULLET_WIDTH, BULLET_HEIGHT);
            }

            // Draw aliens
            ctx.fillStyle = '#F00';
            for (let alien of game.aliens) {
                if (alien.isAlive) {
                    ctx.fillRect(alien.x, alien.y, ALIEN_WIDTH, ALIEN_HEIGHT);
                }
            }
        }

        function gameLoop() {
            if (game.isPlaying) {
                updatePlayer();
                updateBullets();
                updateAliens();
            }
            render();
            requestAnimationFrame(gameLoop);
        }

        // Start game
        initAliens();
        gameLoop();
    </script>
</body>
</html>
```

This implementation includes:

1. Mobile-friendly controls with touch buttons
2. Keyboard support (arrow keys and spacebar)
3. Proper collision detection
4. Score tracking
5. Game over state with restart functionality
6. Responsive canvas sizing
7. Clean visual style
8. Proper control bar implementation that doesn't overlap gameplay

Key features:
- Move left/right with arrow buttons or keyboard
- Fire bullets with the fire button or spacebar
- Aliens move side-to-side and down
- Score increases for each alien hit
- Game over when aliens reach the bottom
- Tap/click to restart after game over

The game follows mobile-first principles with:
- Touch-friendly controls
- Clear visual feedback
- Responsive sizing
- Performance optimization
- No overlap between controls and gameplay area

The controls are positioned in an opaque bar at the bottom of the screen, ensuring they don't interfere with the game view. The game canvas is properly sized to account for this control bar.