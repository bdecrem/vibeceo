```html
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Snake Game</title>
<style>
  body, html {
    margin: 0;
    padding: 0;
    overflow: hidden;
    font-family: 'Inter', sans-serif;
    background: linear-gradient(45deg, #ff9a9e, #fad0c4, #fad0c4, #ff9a9e);
    background-size: 400% 400%;
    animation: gradient 15s ease infinite;
  }
  @keyframes gradient {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
  }
  canvas {
    display: block;
    position: absolute;
    top: 0;
    left: 0;
  }
  .controls {
    position: fixed;
    bottom: 20px;
    right: 20px;
    display: grid;
    grid-template-columns: repeat(3, 60px);
    grid-template-rows: repeat(3, 60px);
    gap: 10px;
  }
  .control-btn {
    width: 60px;
    height: 60px;
    background: rgba(255, 255, 255, 0.2);
    border: 2px solid rgba(255, 255, 255, 0.4);
    border-radius: 12px;
    touch-action: manipulation;
  }
  .control-btn:active {
    background: rgba(255, 255, 255, 0.4);
  }
  .btn-up { grid-column: 2; grid-row: 1; }
  .btn-left { grid-column: 1; grid-row: 2; }
  .btn-right { grid-column: 3; grid-row: 2; }
  .btn-down { grid-column: 2; grid-row: 3; }
  .glass {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    padding: 20px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 16px;
    -webkit-backdrop-filter: blur(10px);
    backdrop-filter: blur(10px);
    text-align: center;
    font-family: 'Space Grotesk', sans-serif;
    color: #fff;
    animation: fadeIn 1s ease;
  }
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
  .emoji {
    position: absolute;
    font-size: 2rem;
    animation: float 5s ease-in-out infinite;
  }
  @keyframes float {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-20px); }
  }
</style>
</head>
<body>
<canvas id="gameCanvas"></canvas>
<div class="glass" id="introScreen">
  <h1>üêç Snake Game</h1>
  <p>Tap to start</p>
</div>
<div class="controls">
  <button class="control-btn btn-up" id="up"></button>
  <button class="control-btn btn-left" id="left"></button>
  <button class="control-btn btn-right" id="right"></button>
  <button class="control-btn btn-down" id="down"></button>
</div>
<div class="emoji" style="top: 10%; left: 20%;">üçé</div>
<div class="emoji" style="top: 50%; left: 80%;">üçè</div>
<div class="emoji" style="top: 80%; left: 40%;">üçå</div>
<script>
  var canvas = document.getElementById('gameCanvas');
  var ctx = canvas.getContext('2d', { alpha: false });
  var devicePixelRatio = window.devicePixelRatio || 1;
  canvas.width = window.innerWidth * devicePixelRatio;
  canvas.height = window.innerHeight * devicePixelRatio;
  canvas.style.width = window.innerWidth + 'px';
  canvas.style.height = window.innerHeight + 'px';
  ctx.scale(devicePixelRatio, devicePixelRatio);

  var gridSize = 20;
  var snake = [{ x: 5, y: 5 }];
  var direction = { x: 0, y: 0 };
  var food = { x: 10, y: 10 };
  var gameOver = false;
  var score = 0;

  function draw() {
    ctx.clearRect(0, 0, window.innerWidth, window.innerHeight);
    ctx.fillStyle = '#fff';
    snake.forEach(function(segment) {
      ctx.fillRect(segment.x * gridSize, segment.y * gridSize, gridSize, gridSize);
    });
    ctx.fillStyle = '#f00';
    ctx.fillRect(food.x * gridSize, food.y * gridSize, gridSize, gridSize);
  }

  function update() {
    var head = { x: snake[0].x + direction.x, y: snake[0].y + direction.y };
    if (head.x === food.x && head.y === food.y) {
      score++;
      food = { x: Math.floor(Math.random() * canvas.width / gridSize), y: Math.floor(Math.random() * canvas.height / gridSize) };
    } else {
      snake.pop();
    }
    snake.unshift(head);
    if (head.x < 0 || head.x >= canvas.width / gridSize || head.y < 0 || head.y >= canvas.height / gridSize || snake.slice(1).some(segment => segment.x === head.x && segment.y === head.y)) {
      gameOver = true;
    }
  }

  var lastTime = 0;
  var frameDelay = 100;
  function gameLoop(currentTime) {
    if (currentTime - lastTime > frameDelay) {
      lastTime = currentTime;
      update();
      draw();
    }
    if (!gameOver) requestAnimationFrame(gameLoop);
    else endGame();
  }

  function endGame() {
    var endScreen = document.createElement('div');
    endScreen.className = 'glass';
    endScreen.innerHTML = '<h1>Game Over</h1><p>Score: ' + score + '</p><button onclick="restartGame()">Restart</button>';
    document.body.appendChild(endScreen);
  }

  function restartGame() {
    document.querySelector('.glass').remove();
    snake = [{ x: 5, y: 5 }];
    direction = { x: 0, y: 0 };
    food = { x: 10, y: 10 };
    gameOver = false;
    score = 0;
    requestAnimationFrame(gameLoop);
  }

  document.getElementById('introScreen').addEventListener('click', function() {
    this.style.display = 'none';
    direction = { x: 1, y: 0 };
    requestAnimationFrame(gameLoop);
  });

  window.addEventListener('keydown', function(e) {
    if (e.key === 'ArrowUp' && direction.y === 0) direction = { x: 0, y: -1 };
    if (e.key === 'ArrowDown' && direction.y === 0) direction = { x: 0, y: 1 };
    if (e.key === 'ArrowLeft' && direction.x === 0) direction = { x: -1, y: 0 };
    if (e.key === 'ArrowRight' && direction.x === 0) direction = { x: 1, y: 0 };
  });

  document.getElementById('up').addEventListener('touchstart', function(e) {
    e.preventDefault();
    if (direction.y === 0) direction = { x: 0, y: -1 };
  });
  document.getElementById('down').addEventListener('touchstart', function(e) {
    e.preventDefault();
    if (direction.y === 0) direction = { x: 0, y: 1 };
  });
  document.getElementById('left').addEventListener('touchstart', function(e) {
    e.preventDefault();
    if (direction.x === 0) direction = { x: -1, y: 0 };
  });
  document.getElementById('right').addEventListener('touchstart', function(e) {
    e.preventDefault();
    if (direction.x === 0) direction = { x: 1, y: 0 };
  });
</script>
</body>
</html>
```