Here's a complete mobile-friendly Snake game where you die if you hit the walls. The snake starts in the middle and uses swipe controls:

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Snake Game</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            overflow: hidden;
            touch-action: none;
            background-color: #000;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }
        
        #gameCanvas {
            background: #001100;
            max-width: 100%;
            max-height: 100vh;
        }
        
        #score {
            position: absolute;
            top: 20px;
            color: white;
            font-family: Arial, sans-serif;
            font-size: 24px;
        }
    </style>
</head>
<body>
    <div id="score">Score: 0</div>
    <canvas id="gameCanvas"></canvas>
    
    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const scoreElement = document.getElementById('score');
        
        // Game constants
        const GRID_SIZE = 20;
        const CELL_SIZE = 20;
        canvas.width = GRID_SIZE * CELL_SIZE;
        canvas.height = GRID_SIZE * CELL_SIZE;
        
        // Game state
        let snake = [];
        let food = {};
        let direction = 'right';
        let nextDirection = 'right';
        let score = 0;
        let gameOver = false;
        let touchStartX = 0;
        let touchStartY = 0;
        
        // Initialize snake in the middle
        function initGame() {
            const middleX = Math.floor(GRID_SIZE / 2);
            const middleY = Math.floor(GRID_SIZE / 2);
            snake = [
                {x: middleX, y: middleY},
                {x: middleX - 1, y: middleY},
                {x: middleX - 2, y: middleY}
            ];
            score = 0;
            gameOver = false;
            direction = 'right';
            nextDirection = 'right';
            spawnFood();
            updateScore();
        }
        
        function spawnFood() {
            while (true) {
                food = {
                    x: Math.floor(Math.random() * GRID_SIZE),
                    y: Math.floor(Math.random() * GRID_SIZE)
                };
                // Check if food spawned on snake
                let foodOnSnake = false;
                for (let segment of snake) {
                    if (segment.x === food.x && segment.y === food.y) {
                        foodOnSnake = true;
                        break;
                    }
                }
                if (!foodOnSnake) break;
            }
        }
        
        function updateScore() {
            scoreElement.textContent = `Score: ${score}`;
        }
        
        function gameLoop() {
            if (!gameOver) {
                update();
                draw();
                setTimeout(gameLoop, 150); // Snake speed
            }
        }
        
        function update() {
            direction = nextDirection;
            
            // Calculate new head position
            const head = {x: snake[0].x, y: snake[0].y};
            switch(direction) {
                case 'up': head.y--; break;
                case 'down': head.y++; break;
                case 'left': head.x--; break;
                case 'right': head.x++; break;
            }
            
            // Check wall collision
            if (head.x < 0 || head.x >= GRID_SIZE || head.y < 0 || head.y >= GRID_SIZE) {
                gameOver = true;
                setTimeout(() => {
                    if (confirm('Game Over! Play again?')) {
                        initGame();
                        gameLoop();
                    }
                }, 100);
                return;
            }
            
            // Check self collision
            for (let segment of snake) {
                if (head.x === segment.x && head.y === segment.y) {
                    gameOver = true;
                    setTimeout(() => {
                        if (confirm('Game Over! Play again?')) {
                            initGame();
                            gameLoop();
                        }
                    }, 100);
                    return;
                }
            }
            
            // Add new head
            snake.unshift(head);
            
            // Check food collision
            if (head.x === food.x && head.y === food.y) {
                score += 10;
                updateScore();
                spawnFood();
            } else {
                snake.pop(); // Remove tail if no food eaten
            }
        }
        
        function draw() {
            // Clear canvas
            ctx.fillStyle = '#001100';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // Draw snake
            ctx.fillStyle = '#00ff00';
            snake.forEach((segment, index) => {
                ctx.fillRect(
                    segment.x * CELL_SIZE,
                    segment.y * CELL_SIZE,
                    CELL_SIZE - 1,
                    CELL_SIZE - 1
                );
            });
            
            // Draw food
            ctx.fillStyle = '#ff0000';
            ctx.fillRect(
                food.x * CELL_SIZE,
                food.y * CELL_SIZE,
                CELL_SIZE - 1,
                CELL_SIZE - 1
            );
        }
        
        // Touch controls
        canvas.addEventListener('touchstart', (e) => {
            e.preventDefault();
            touchStartX = e.touches[0].clientX;
            touchStartY = e.touches[0].clientY;
        }, false);
        
        canvas.addEventListener('touchmove', (e) => {
            e.preventDefault();
        }, false);
        
        canvas.addEventListener('touchend', (e) => {
            e.preventDefault();
            const touchEndX = e.changedTouches[0].clientX;
            const touchEndY = e.changedTouches[0].clientY;
            
            const dx = touchEndX - touchStartX;
            const dy = touchEndY - touchStartY;
            
            // Determine swipe direction
            if (Math.abs(dx) > Math.abs(dy)) {
                // Horizontal swipe
                if (dx > 0 && direction !== 'left') nextDirection = 'right';
                else if (dx < 0 && direction !== 'right') nextDirection = 'left';
            } else {
                // Vertical swipe
                if (dy > 0 && direction !== 'up') nextDirection = 'down';
                else if (dy < 0 && direction !== 'down') nextDirection = 'up';
            }
        }, false);
        
        // Keyboard controls
        document.addEventListener('keydown', (e) => {
            switch(e.key) {
                case 'ArrowUp':
                    if (direction !== 'down') nextDirection = 'up';
                    break;
                case 'ArrowDown':
                    if (direction !== 'up') nextDirection = 'down';
                    break;
                case 'ArrowLeft':
                    if (direction !== 'right') nextDirection = 'left';
                    break;
                case 'ArrowRight':
                    if (direction !== 'left') nextDirection = 'right';
                    break;
            }
        });
        
        // Start game
        initGame();
        gameLoop();
    </script>
</body>
</html>
```

This Snake game implementation includes:

1. Mobile-friendly touch controls using swipe gestures
2. Snake starts in the middle of the screen
3. Wall collision detection that ends the game
4. Self-collision detection
5. Score tracking
6. Responsive canvas that maintains aspect ratio
7. Both touch and keyboard controls
8. Clear visual feedback

To play:
- Swipe in any direction to control the snake
- Collect red food squares to grow and increase score
- Avoid hitting walls and yourself
- Game ends if you hit a wall or yourself
- Score increases by 10 for each food collected

The game features:
- Green snake on dark background for visibility
- Red food squares
- Score display at the top
- Smooth controls with both touch and keyboard support
- Game over dialog with restart option

The snake moves at a moderate speed that works well on mobile devices, and the controls are responsive to both swipe gestures and keyboard arrows.