```html
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Snake Game</title>
<style>
  body, html {
    margin: 0;
    padding: 0;
    overflow: hidden;
    font-family: 'Inter', sans-serif;
    background: linear-gradient(45deg, #ff9a9e, #fad0c4, #fad0c4, #ff9a9e);
    background-size: 300% 300%;
    animation: gradient 15s ease infinite;
  }
  @keyframes gradient {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
  }
  canvas {
    display: block;
    margin: 0 auto;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    backdrop-filter: blur(10px);
  }
  .controls {
    position: fixed;
    bottom: 20px;
    right: 20px;
    display: grid;
    grid-template-columns: repeat(3, 60px);
    grid-template-rows: repeat(3, 60px);
    gap: 10px;
  }
  .control-btn {
    width: 60px;
    height: 60px;
    background: rgba(255, 255, 255, 0.2);
    border: 2px solid rgba(255, 255, 255, 0.4);
    border-radius: 12px;
    touch-action: none;
  }
  .control-btn:active {
    background: rgba(255, 255, 255, 0.4);
  }
  .btn-up { grid-column: 2; grid-row: 1; }
  .btn-left { grid-column: 1; grid-row: 2; }
  .btn-right { grid-column: 3; grid-row: 2; }
  .btn-down { grid-column: 2; grid-row: 3; }
  .emoji {
    position: absolute;
    font-size: 2rem;
    transition: transform 0.2s ease;
  }
</style>
</head>
<body>
<canvas id="gameCanvas"></canvas>
<div class="controls">
  <div class="control-btn btn-up"></div>
  <div class="control-btn btn-left"></div>
  <div class="control-btn btn-right"></div>
  <div class="control-btn btn-down"></div>
</div>
<div class="emoji" style="top: 10%; left: 20%;">üêç</div>
<div class="emoji" style="top: 50%; left: 70%;">üçé</div>
<div class="emoji" style="top: 80%; left: 30%;">üåü</div>
<script>
  const canvas = document.getElementById('gameCanvas');
  const ctx = canvas.getContext('2d');
  const scale = window.devicePixelRatio;
  canvas.width = window.innerWidth * scale;
  canvas.height = window.innerHeight * scale;
  ctx.scale(scale, scale);

  const snake = [{x: 10, y: 10}];
  let apple = {x: 5, y: 5};
  let direction = {x: 0, y: 0};
  let gridSize = 20;
  let score = 0;
  let gameOver = false;

  function draw() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
    snake.forEach(segment => {
      ctx.fillRect(segment.x * gridSize, segment.y * gridSize, gridSize, gridSize);
    });
    ctx.fillStyle = 'red';
    ctx.fillRect(apple.x * gridSize, apple.y * gridSize, gridSize, gridSize);
  }

  function update() {
    if (gameOver) return;
    const head = {x: snake[0].x + direction.x, y: snake[0].y + direction.y};
    snake.unshift(head);
    if (head.x === apple.x && head.y === apple.y) {
      score++;
      apple = {x: Math.floor(Math.random() * canvas.width / gridSize), y: Math.floor(Math.random() * canvas.height / gridSize)};
    } else {
      snake.pop();
    }
    if (head.x < 0 || head.x >= canvas.width / gridSize || head.y < 0 || head.y >= canvas.height / gridSize || snake.slice(1).some(segment => segment.x === head.x && segment.y === head.y)) {
      gameOver = true;
    }
  }

  function gameLoop() {
    update();
    draw();
    if (!gameOver) requestAnimationFrame(gameLoop);
    else alert(`Game Over! Score: ${score}`);
  }

  function changeDirection(event) {
    const key = event.key || event.target.className;
    if (key.includes('up') && direction.y === 0) direction = {x: 0, y: -1};
    if (key.includes('down') && direction.y === 0) direction = {x: 0, y: 1};
    if (key.includes('left') && direction.x === 0) direction = {x: -1, y: 0};
    if (key.includes('right') && direction.x === 0) direction = {x: 1, y: 0};
  }

  document.addEventListener('keydown', changeDirection);
  document.querySelectorAll('.control-btn').forEach(btn => btn.addEventListener('touchstart', changeDirection));

  requestAnimationFrame(gameLoop);
</script>
</body>
</html>
```