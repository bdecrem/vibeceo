Below is the complete HTML code for a simple Pong game. This game includes the core mechanics such as paddle controls, ball physics, score tracking, and game reset functionality. The design is clean and minimal, and the game is responsive with touch controls.

```html
<!DOCTYPE html>
<html>
<head>
    <title>Pong Game</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        body {
            margin: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #f0f0f0;
            font-family: Arial, sans-serif;
        }
        .game-container {
            text-align: center;
        }
        canvas {
            background-color: #333;
            border: 2px solid #fff;
            display: block;
        }
        .controls {
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <div class="game-container">
        <h1>Pong Game</h1>
        <canvas id="gameCanvas" width="800" height="400"></canvas>
        <div class="controls">
            <span id="player1Score">0</span> - <span id="player2Score">0</span>
            <button onclick="togglePause()">Pause/Resume</button>
            <button onclick="resetGame()">Reset</button>
        </div>
        <div class="instructions">
            <p>Use W/S or Up/Down keys to control paddles, or use mouse/touch</p>
        </div>
    </div>
    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');

        const paddleWidth = 10, paddleHeight = 100;
        const ballSize = 10;
        let player1Score = 0, player2Score = 0;
        let ballSpeed = 4, ballSpeedIncrease = 0.1;
        let isPaused = false;

        let ball = {
            x: canvas.width / 2,
            y: canvas.height / 2,
            vx: ballSpeed,
            vy: ballSpeed
        };

        let player1 = { x: 0, y: canvas.height / 2 - paddleHeight / 2 };
        let player2 = { x: canvas.width - paddleWidth, y: canvas.height / 2 - paddleHeight / 2 };

        function draw() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.fillStyle = '#fff';

            // Draw ball
            ctx.fillRect(ball.x, ball.y, ballSize, ballSize);

            // Draw paddles
            ctx.fillRect(player1.x, player1.y, paddleWidth, paddleHeight);
            ctx.fillRect(player2.x, player2.y, paddleWidth, paddleHeight);
        }

        function update() {
            if (isPaused) return;

            ball.x += ball.vx;
            ball.y += ball.vy;

            // Ball collision with top and bottom walls
            if (ball.y + ballSize > canvas.height || ball.y < 0) {
                ball.vy = -ball.vy;
            }

            // Ball collision with paddles
            if (ball.x < player1.x + paddleWidth && ball.y > player1.y && ball.y < player1.y + paddleHeight) {
                ball.vx = -ball.vx;
                ballSpeed += ballSpeedIncrease;
            }

            if (ball.x + ballSize > player2.x && ball.y > player2.y && ball.y < player2.y + paddleHeight) {
                ball.vx = -ball.vx;
                ballSpeed += ballSpeedIncrease;
            }

            // Ball reset and score update
            if (ball.x < 0) {
                player2Score++;
                resetBall();
            } else if (ball.x + ballSize > canvas.width) {
                player1Score++;
                resetBall();
            }

            document.getElementById('player1Score').innerText = player1Score;
            document.getElementById('player2Score').innerText = player2Score;

            draw();
        }

        function resetBall() {
            ball.x = canvas.width / 2;
            ball.y = canvas.height / 2;
            ball.vx = ballSpeed * (Math.random() > 0.5 ? 1 : -1);
            ball.vy = ballSpeed * (Math.random() > 0.5 ? 1 : -1);
        }

        function resetGame() {
            player1Score = 0;
            player2Score = 0;
            ballSpeed = 4;
            resetBall();
        }

        function togglePause() {
            isPaused = !isPaused;
        }

        // Paddle movement
        document.addEventListener('keydown', function(event) {
            if (event.key === 'w' && player1.y > 0) player1.y -= 20;
            if (event.key === 's' && player1.y < canvas.height - paddleHeight) player1.y += 20;
            if (event.key === 'ArrowUp' && player2.y > 0) player2.y -= 20;
            if (event.key === 'ArrowDown' && player2.y < canvas.height - paddleHeight) player2.y += 20;
        });

        // Mouse and touch controls
        canvas.addEventListener('mousemove', function(event) {
            const rect = canvas.getBoundingClientRect();
            player1.y = event.clientY - rect.top - paddleHeight / 2;
            player2.y = event.clientY - rect.top - paddleHeight / 2;
        });

        canvas.addEventListener('touchmove', function(event) {
            const touch = event.touches[0];
            const rect = canvas.getBoundingClientRect();
            player1.y = touch.clientY - rect.top - paddleHeight / 2;
            player2.y = touch.clientY - rect.top - paddleHeight / 2;
        });

        setInterval(update, 1000 / 60);
    </script>
</body>
</html>
```

This code provides a simple yet functional Pong game with all necessary features and controls for a modern web game experience. Adjustments can be made for additional polish or features as desired.