```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <title>Speedy Pong</title>
    <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@700&family=Inter:wght@400;600&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            user-select: none;
            touch-action: none;
        }

        body {
            font-family: 'Inter', sans-serif;
            overflow: hidden;
            position: relative;
            height: 100vh;
            background: linear-gradient(135deg, #0a0a0a 0%, #1a0033 50%, #0a0a0a 100%);
            background-size: 400% 400%;
            animation: gradientShift 15s ease infinite;
        }

        @keyframes gradientShift {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        .floating-emoji {
            position: absolute;
            font-size: 2rem;
            pointer-events: none;
            z-index: 1;
            opacity: 0.3;
            animation: float 20s infinite ease-in-out;
        }

        .floating-emoji:nth-child(1) {
            top: 10%;
            left: 10%;
            animation-delay: 0s;
        }

        .floating-emoji:nth-child(2) {
            top: 60%;
            right: 15%;
            animation-delay: 7s;
        }

        .floating-emoji:nth-child(3) {
            bottom: 20%;
            left: 50%;
            animation-delay: 14s;
        }

        @keyframes float {
            0%, 100% { transform: translate(0, 0) rotate(0deg); }
            33% { transform: translate(30px, -30px) rotate(120deg); }
            66% { transform: translate(-20px, 20px) rotate(240deg); }
        }

        .screen {
            position: absolute;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            opacity: 0;
            transition: opacity 0.5s ease;
            z-index: 10;
        }

        .screen.active {
            opacity: 1;
        }

        .glass-container {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            padding: 3rem 2rem;
            text-align: center;
            max-width: 90%;
            animation: slideIn 0.6s ease-out;
        }

        @keyframes slideIn {
            from {
                transform: translateY(30px);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        h1 {
            font-family: 'Space Grotesk', sans-serif;
            font-size: clamp(2.5rem, 8vw, 4rem);
            color: #ff00ff;
            text-shadow: 0 0 20px #ff00ff, 0 0 40px #ff00ff;
            margin-bottom: 1rem;
            letter-spacing: -0.02em;
        }

        .subtitle {
            color: #00ffff;
            font-size: clamp(0.9rem, 3vw, 1.2rem);
            margin-bottom: 2rem;
            text-shadow: 0 0 10px #00ffff;
        }

        .button {
            background: linear-gradient(135deg, #ff00ff, #00ffff);
            border: none;
            color: #000;
            padding: 1rem 2rem;
            font-size: 1.1rem;
            font-weight: 600;
            border-radius: 50px;
            cursor: pointer;
            margin: 0.5rem;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            min-width: 200px;
            min-height: 60px;
        }

        .button:active {
            transform: scale(0.95);
            box-shadow: 0 0 30px rgba(255, 0, 255, 0.8);
        }

        #gameCanvas {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            border: 2px solid #ff00ff;
            box-shadow: 0 0 40px #ff00ff, inset 0 0 40px rgba(255, 0, 255, 0.2);
            z-index: 5;
        }

        .score-display {
            position: absolute;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            color: #00ffff;
            font-family: 'Space Grotesk', sans-serif;
            font-size: 2rem;
            text-shadow: 0 0 20px #00ffff;
            z-index: 15;
        }

        .touch-zone {
            position: absolute;
            width: 50%;
            height: 100%;
            z-index: 20;
            opacity: 0;
        }

        .touch-zone.left {
            left: 0;
        }

        .touch-zone.right {
            right: 0;
        }

        .end-stats {
            color: #00ffff;
            font-size: 1.2rem;
            margin: 1rem 0;
        }

        @media (max-width: 768px) {
            .glass-container {
                padding: 2rem 1.5rem;
            }
            
            .button {
                min-width: 160px;
                min-height: 50px;
                font-size: 1rem;
            }
        }
    </style>
</head>
<body>
    <div class="floating-emoji">üéÆ</div>
    <div class="floating-emoji">‚ö°</div>
    <div class="floating-emoji">üèì</div>

    <div class="score-display" id="scoreDisplay" style="display: none;">0 - 0</div>

    <div class="screen active" id="introScreen">
        <div class="glass-container">
            <h1>SPEEDY PONG</h1>
            <p class="subtitle">Tap to delay your inevitable defeat</p>
            <button class="button" onclick="startGame(1)">SINGLE PLAYER</button>
            <button class="button" onclick="startGame(2)">TWO PLAYER</button>
        </div>
    </div>

    <div class="screen" id="gameScreen">
        <canvas id="gameCanvas"></canvas>
        <div class="touch-zone left" id="leftTouch"></div>
        <div class="touch-zone right" id="rightTouch"></div>
    </div>

    <div class="screen" id="endScreen">
        <div class="glass-container">
            <h1>GAME OVER</h1>
            <div class="end-stats" id="endStats"></div>
            <p class="subtitle" id="endMessage"></p>
            <button class="button" onclick="restartGame()">PLAY AGAIN</button>
            <button class="button" onclick="showIntro()">MAIN MENU</button>
        </div>
    </div>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const scoreDisplay = document.getElementById('scoreDisplay');
        
        let gameState = 'intro';
        let players = 1;
        let animationId = null;
        let highScore = localStorage.getItem('speedyPongHighScore') || 0;
        
        // Game objects
        let ball, leftPaddle, rightPaddle;
        let leftScore = 0, rightScore = 0;
        let maxSpeed = 0;
        let rallies = 0;
        
        // Touch tracking
        let leftTouch = null;
        let rightTouch = null;
        
        // Constants
        const INITIAL_BALL_SPEED = 4;
        const ACCELERATION = 1.05;
        const PADDLE_SPEED = 8;
        const AI_SPEED = 6;
        const WINNING_SCORE = 5;
        
        // Sound effects (Web Audio API)
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        
        function playSound(frequency, duration) {
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();
            
            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);
            
            oscillator.frequency.value = frequency;
            oscillator.type = 'square';
            
            gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
            gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration);
            
            oscillator.start(audioContext.currentTime);
            oscillator.stop(audioContext.currentTime + duration);
        }
        
        function setupCanvas() {
            const maxWidth = 800;
            const maxHeight = 500;
            const ratio = maxWidth / maxHeight;
            
            let width = window.innerWidth * 0.9;
            let height = window.innerHeight * 0.7;
            
            if (width / height > ratio) {
                width = height * ratio;
            } else {
                height = width / ratio;
            }
            
            canvas.width = Math.min(width, maxWidth);
            canvas.height = Math.min(height, maxHeight);
            
            // Initialize game objects
            const paddleHeight = canvas.height * 0.15;
            const paddleWidth = 15;
            
            ball = {
                x: canvas.width / 2,
                y: canvas.height / 2,
                radius: 10,
                speedX: INITIAL_BALL_SPEED,
                speedY: INITIAL_BALL_SPEED * 0.5,
                trail: []
            };
            
            leftPaddle = {
                x: 30,
                y: canvas.height / 2 - paddleHeight / 2,
                width: paddleWidth,
                height: paddleHeight,
                speed: 0
            };
            
            rightPaddle = {
                x: canvas.width - 30 - paddleWidth,
                y: canvas.height / 2 - paddleHeight / 2,
                width: paddleWidth,
                height: paddleHeight,
                speed: 0
            };
        }
        
        function startGame(numPlayers) {
            players = numPlayers;
            leftScore = 0;
            rightScore = 0;
            maxSpeed = INITIAL_BALL_SPEED;
            rallies = 0;
            
            setupCanvas();
            
            document.getElementById('introScreen').classList.remove('active');
            document.getElementById('gameScreen').classList.add('active');
            scoreDisplay.style.display = 'block';
            updateScore();
            
            gameState = 'playing';
            
            // Touch controls
            const leftZone = document.getElementById('leftTouch');
            const rightZone = document.getElementById('rightTouch');
            
            leftZone.addEventListener('touchstart', handleLeftTouchStart, { passive: false });
            leftZone.addEventListener('touchmove', handleLeftTouchMove, { passive: false });
            leftZone.addEventListener('touchend', handleLeftTouchEnd, { passive: false });
            
            if (players === 2) {
                rightZone.addEventListener('touchstart', handleRightTouchStart, { passive: false });
                rightZone.addEventListener('touchmove', handleRightTouchMove, { passive: false });
                rightZone.addEventListener('touchend', handleRightTouchEnd, { passive: false });
            }
            
            // Keyboard controls
            window.addEventListener('keydown', handleKeyDown);
            window.addEventListener('keyup', handleKeyUp);
            
            gameLoop();
        }
        
        function handleLeftTouchStart(e) {
            e.preventDefault();
            leftTouch = e.touches[0];
        }
        
        function handleLeftTouchMove(e) {
            e.preventDefault();
            if (leftTouch) {
                const deltaY = e.touches[0].clientY - leftTouch.clientY;
                leftPaddle.y = Math.max(0, Math.min(canvas.height - leftPaddle.height, leftPaddle.y + deltaY));
                leftTouch = e.touches[0];
            }
        }
        
        function handleLeftTouchEnd(e) {
            e.preventDefault();
            leftTouch = null;
        }
        
        function handleRightTouchStart(e) {
            e.preventDefault();
            rightTouch = e.touches[0];
        }
        
        function handleRightTouchMove(e) {
            e.preventDefault();
            if (rightTouch) {
                const deltaY = e.touches[0].clientY - rightTouch.clientY;
                rightPaddle.y = Math.max(0, Math.min(canvas.height - rightPaddle.height, rightPaddle.y + deltaY));
                rightTouch = e.touches[0];
            }
        }
        
        function handleRightTouchEnd(e) {
            e.preventDefault();
            rightTouch = null;
        }
        
        function handleKeyDown(e) {
            switch(e.key) {
                case 'w':
                case 'W':
                    leftPaddle.speed = -PADDLE_SPEED;
                    break;
                case 's':
                case 'S':
                    leftPaddle.speed = PADDLE_SPEED;
                    break;
                case 'ArrowUp':
                    if (players === 2) rightPaddle.speed = -PADDLE_SPEED;
                    break;
                case 'ArrowDown':
                    if (players === 2) rightPaddle.speed = PADDLE_SPEED;
                    break;
            }
        }
        
        function handleKeyUp(e) {
            switch(e.key) {
                case 'w':
                case 'W':
                case 's':
                case 'S':
                    leftPaddle.speed = 0;
                    break;
                case 'ArrowUp':
                case 'ArrowDown':
                    if (players === 2) rightPaddle.speed = 0;
                    break;
            }
        }
        
        function updatePaddles() {
            // Update left paddle
            leftPaddle.y += leftPaddle.speed;
            leftPaddle.y = Math.max(0, Math.min(canvas.height - leftPaddle.height, leftPaddle.y));
            
            // Update right paddle
            if (players === 1) {
                // AI movement
                const paddleCenter = rightPaddle.y + rightPaddle.height / 2;
                const targetY = ball.y;
                const diff = targetY - paddleCenter;
                
                if (Math.abs(diff) > 5) {
                    rightPaddle.y += Math.sign(diff) * Math.min(AI_SPEED, Math.abs(diff));
                }
            } else {
                rightPaddle.y += rightPaddle.speed;
            }
            rightPaddle.y = Math.max(0, Math.min(canvas.height - rightPaddle.height, rightPaddle.y));
        }
        
        function updateBall() {
            // Update trail
            ball.trail.push({ x: ball.x, y: ball.y });
            if (ball.trail.length > 10) ball.trail.shift();
            
            ball.x += ball.speedX;
            ball.y += ball.speedY;
            
            // Top/bottom collision
            if (ball.y - ball.radius <= 0 || ball.y + ball.radius >= canvas.height) {
                ball.speedY = -ball.speedY;
                playSound(200, 0.1);
            }
            
            // Paddle collision
            if (ball.speedX < 0 && ball.x - ball.radius <= leftPaddle.x + leftPaddle.width &&
                ball.y >= leftPaddle.y && ball.y <= leftPaddle.y + leftPaddle.height) {
                ball.speedX = Math.abs(ball.speedX) * ACCELERATION;
                ball.speedY *= ACCELERATION;
                rallies++;
                maxSpeed = Math.max(maxSpeed, Math.abs(ball.speedX));
                playSound(400, 0.1);
            }
            
            if (ball.speedX > 0 && ball.x + ball.radius >= rightPaddle.x &&
                ball.y >= rightPaddle.y && ball.y <= rightPaddle.y + rightPaddle.height) {
                ball.speedX = -Math.abs(ball.speedX) * ACCELERATION;
                ball.speedY *= ACCELERATION;
                rallies++;
                maxSpeed = Math.max(maxSpeed, Math.abs(ball.speedX));
                playSound(400, 0.1);
            }
            
            // Score
            if (ball.x < 0) {
                rightScore++;
                playSound(100, 0.3);
                resetBall();
            } else if (ball.x > canvas.width) {
                leftScore++;
                playSound(100, 0.3);
                resetBall();
            }
            
            updateScore();
            
            // Check win condition
            if (leftScore >= WINNING_SCORE || rightScore >= WINNING_SCORE) {
                endGame();
            }
        }
        
        function resetBall() {
            ball.x = canvas.width / 2;
            ball.y = canvas.height / 2;
            ball.speedX = INITIAL_BALL_SPEED * (Math.random() > 0.5 ? 1 : -1);
            ball.speedY = INITIAL_BALL_SPEED * (Math.random() - 0.5);
            ball.trail = [];
        }
        
        function updateScore() {
            scoreDisplay.textContent = `${leftScore} - ${rightScore}`;
        }
        
        function draw() {
            // Clear canvas
            ctx.fillStyle = 'rgba(10, 10, 10, 0.2)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // Draw center line
            ctx.strokeStyle = '#ff00ff';
            ctx.lineWidth = 2;
            ctx.setLineDash([10, 10]);
            ctx.beginPath();
            ctx.moveTo(canvas.width / 2, 0);
            ctx.lineTo(canvas.width / 2, canvas.height);
            ctx.stroke();
            ctx.setLineDash([]);
            
            // Draw ball trail
            ball.trail.forEach((pos, i) => {
                ctx.fillStyle = `rgba(0, 255, 255, ${i / ball.trail.length * 0.5})`;
                ctx.fillRect(pos.x - ball.radius/2, pos.y - ball.radius/2, ball.radius, ball.radius);
            });
            
            // Draw ball
            ctx.fillStyle = '#00ffff';
            ctx.shadowBlur = 20;
            ctx.shadowColor = '#00ffff';
            ctx.fillRect(ball.x - ball.radius, ball.y - ball.radius, ball.radius * 2, ball.radius * 2);
            ctx.shadowBlur = 0;
            
            // Draw paddles
            ctx.fillStyle = '#ff00ff';
            ctx.shadowBlur = 20;
            ctx.shadowColor = '#ff00ff';
            ctx.fillRect(leftPaddle.x, leftPaddle.y, leftPaddle.width, leftPaddle.height);
            ctx.fillRect(rightPaddle.x, rightPaddle.y, rightPaddle.width, rightPaddle.height);
            ctx.shadowBlur = 0;
        }
        
        function gameLoop() {
            if (gameState !== 'playing') return;
            
            updatePaddles();
            updateBall();
            draw();
            
            animationId = requestAnimationFrame(gameLoop);
        }
        
        function endGame() {
            gameState = 'ended';
            cancelAnimationFrame(animationId);
            
            const winner = leftScore > rightScore ? 'Player 1' : (players === 1 ? 'AI' : 'Player 2');
            const endStats = document.getElementById('endStats');
            const endMessage = document.getElementById('endMessage');
            
            endStats.innerHTML = `
                Winner: ${winner}<br>
                Final Score: ${leftScore} - ${rightScore}<br>
                Max Speed: ${maxSpeed.toFixed(1)}x<br>
                Rallies: ${rallies}
            `;
            
            const messages = [
                "Your reflexes have been thoroughly tested",
                "The ball has achieved light speed",
                "Pong anxiety successfully induced",
                "Your thumbs deserve a vacation"
            ];
            
            endMessage.textContent = messages[Math.floor(Math.random() * messages.length)];
            
            document.getElementById('gameScreen').classList.remove('active');
            document.getElementById('endScreen').classList.add('active');
            scoreDisplay.style.display = 'none';
            
            // Save high score
            const totalScore = leftScore + rallies;
            if (totalScore > highScore) {
                highScore = totalScore;
                localStorage.setItem('speedyPongHighScore', highScore);
            }
        }
        
        function restartGame() {
            document.getElementById('endScreen').classList.remove('active');
            startGame(players);
        }
        
        function showIntro() {
            document.getElementById('endScreen').classList.remove('active');
            document.getElementById('introScreen').classList.add('active');
        }
        
        // Handle orientation changes
        window.addEventListener('resize', () => {
            if (gameState === 'playing') {
                setupCanvas();
            }
        });
        
        // Prevent scrolling
        document.addEventListener('touchmove', (e) => {
            e.preventDefault();
        }, { passive: false });
        
        // Parallax effect for emojis
        document.addEventListener('mousemove', (e) => {
            const emojis = document.querySelectorAll('.floating-emoji');
            const x = (e.clientX / window.innerWidth - 0.5) * 20;
            const y = (e.clientY / window.innerHeight - 0.5) * 20;
            
            emojis.forEach((emoji, i) => {
                const factor = (i + 1) * 0.5;
                emoji.style.transform = `translate(${x * factor}px, ${y * factor}px)`;
            });
        });
    </script>
</body>
</html>
```