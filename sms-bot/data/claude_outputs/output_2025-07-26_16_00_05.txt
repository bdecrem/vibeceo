<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>RHYME CHAOS ðŸŽ¯</title>
    <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=JetBrains+Mono&display=swap" rel="stylesheet">
    <style>
        /* CHAOS Theme */
        :root {
            --bg: #FCFCF7;
            --border: #FFD63D;
            --shadow: #C9C2F9;
            --text: #0A0A0A;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Space Grotesk', system-ui, sans-serif;
            background: var(--bg);
            color: var(--text);
            line-height: 1.6;
            padding: 20px;
            min-height: 100vh;
        }

        .app-container {
            max-width: 666px;
            margin: 0 auto;
        }

        .screen {
            display: none;
            animation: slideIn 0.3s ease-out;
        }

        .screen.active {
            display: block;
        }

        h1 {
            font-size: 40px;
            text-transform: uppercase;
            transform: rotate(-2deg);
            margin-bottom: 30px;
            text-shadow: 2px 2px var(--shadow);
        }

        input, button, select {
            width: 100%;
            padding: 12px 20px;
            margin: 8px 0;
            border: 4px solid var(--border);
            font-family: 'JetBrains Mono', monospace;
            font-size: 16px;
            min-height: 48px;
        }

        button {
            background: var(--border);
            font-weight: bold;
            text-transform: uppercase;
            cursor: pointer;
            transform: rotate(1deg);
            transition: all 0.2s;
            box-shadow: 4px 4px var(--shadow);
        }

        button:hover {
            transform: rotate(-1deg) scale(1.02);
        }

        button:active {
            transform: scale(0.98);
            box-shadow: 2px 2px var(--shadow);
        }

        .rhyme-word {
            display: inline-block;
            padding: 8px 16px;
            margin: 6px;
            background: white;
            border: 3px solid var(--border);
            border-radius: 4px;
            transform: rotate(var(--rotation));
            box-shadow: 3px 3px var(--shadow);
            font-family: 'JetBrains Mono', monospace;
            cursor: pointer;
            transition: all 0.2s;
        }

        .rhyme-word:hover {
            transform: scale(1.1) rotate(calc(var(--rotation) * -1));
        }

        .history {
            margin-top: 40px;
            padding: 20px;
            border: 4px solid var(--border);
            box-shadow: 6px 6px var(--shadow);
            transform: rotate(-1deg);
        }

        .history h3 {
            text-transform: uppercase;
            margin-bottom: 15px;
        }

        .history-item {
            font-family: 'JetBrains Mono', monospace;
            margin: 8px 0;
            padding: 8px;
            border-bottom: 2px dashed var(--border);
        }

        #results {
            margin-top: 30px;
            min-height: 100px;
        }

        @keyframes slideIn {
            from { transform: translateX(-20px); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }

        @media (max-width: 768px) {
            body { padding: 15px; }
            h1 { font-size: 32px; }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Auth Screens -->
        <div id="welcome-screen" class="screen active">
            <h1>RHYME CHAOS ðŸŽ¯</h1>
            <p>Find rhymes, cause chaos! The most rebellious rhyming dictionary ever.</p>
            <button onclick="showNewUserScreen()">New Rhymer</button>
            <button onclick="showReturningUserScreen()">Return to Chaos</button>
        </div>

        <div id="new-user-screen" class="screen">
            <h1>Join the Rhyme Revolution</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">START RHYMING</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <div id="returning-user-screen" class="screen">
            <h1>Welcome Back Rebel</h1>
            <select id="user-label-select"></select>
            <input type="text" id="returning-passcode" placeholder="4-digit code" maxlength="4">
            <button onclick="loginReturningUser()">ENTER THE CHAOS</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <!-- Main App -->
        <div id="main-screen" class="screen">
            <div id="user-status">Causing chaos as <span id="current-user-label"></span>!</div>
            
            <h1>RHYME CHAOS ðŸŽ¯</h1>
            
            <input type="text" 
                   id="word-input" 
                   placeholder="Enter a word to find rhymes..." 
                   onkeypress="if(event.key === 'Enter') findRhymes()">
            <button onclick="findRhymes()">FIND RHYMES ðŸŽ¯</button>
            
            <div id="results"></div>
            
            <div class="history">
                <h3>Your Rhyme History</h3>
                <div id="history-list"></div>
            </div>

            <button onclick="showScreen('welcome-screen')" style="margin-top: 20px">ESCAPE</button>
        </div>
    </div>

    <script>
        let currentUser = null;
        let rhymeCache = {};
        
        // Auth functions
        async function generateNewUser() {
            const slots = await checkAvailableSlots();
            if (slots.isFull) {
                alert('App is full! Try again later.');
                return false;
            }
            
            const user = await generateUser();
            if (user?.success) {
                currentUser = user;
                document.getElementById('new-user-info').innerHTML = 
                    `Your ID: ${user.userLabel}<br>Code: ${user.passcode}<br>Save these!`;
                return true;
            }
            return false;
        }

        async function registerNewUser() {
            if (!currentUser) return;
            
            const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
            if (result?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                enterMainScreen();
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            await generateNewUser();
        }

        async function loginReturningUser() {
            const label = document.getElementById('user-label-select').value;
            const passcode = document.getElementById('returning-passcode').value;
            
            const result = await authenticateUser(label, passcode);
            if (result?.success) {
                currentUser = { userLabel: label, passcode, participantId: result.user.participantId };
                updateZadAuth(label, result.user.participantId);
                enterMainScreen();
            } else {
                alert('Wrong code! Try again.');
            }
        }

        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const slots = await checkAvailableSlots();
            const select = document.getElementById('user-label-select');
            select.innerHTML = '<option value="">Select Your ID</option>';
            slots.usedLabels.forEach(label => {
                select.innerHTML += `<option value="${label}">${label}</option>`;
            });
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            if (screenId !== 'main-screen') stopPolling();
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            startPolling();
            loadLatestData();
        }

        // Rhyming functions
        async function findRhymes() {
            const word = document.getElementById('word-input').value.trim().toLowerCase();
            const resultDiv = document.getElementById('results');
            
            if (!word) {
                alert('Enter a word first! ðŸŽ¯');
                return;
            }
            
            resultDiv.innerHTML = 'Finding rhymes...';
            
            try {
                // Check cache first
                if (rhymeCache[word]) {
                    displayRhymes(word, rhymeCache[word]);
                    await saveRhymeSearch(word, rhymeCache[word]);
                    return;
                }
                
                const rhymes = await generateText(`Find rhyming words for: ${word}`, {
                    systemPrompt: 'You are a rhyming dictionary. Return ONLY a comma-separated list of words that rhyme with the given word. Include perfect rhymes and near rhymes. No explanations.',
                    maxTokens: 150,
                    temperature: 0.7
                });
                
                const rhymeList = rhymes.split(',').map(w => w.trim()).filter(w => w);
                rhymeCache[word] = rhymeList; // Cache the results
                
                displayRhymes(word, rhymeList);
                await saveRhymeSearch(word, rhymeList);
                
            } catch (error) {
                resultDiv.innerHTML = 'Error finding rhymes. Try again!';
            }
        }

        function displayRhymes(word, rhymes) {
            const resultDiv = document.getElementById('results');
            resultDiv.innerHTML = `
                <h3>Rhymes with "${word}":</h3>
                ${rhymes.map(rhyme => {
                    const rotation = Math.random() * 4 - 2;
                    return `<span class="rhyme-word" style="--rotation: ${rotation}deg">${rhyme}</span>`;
                }).join('')}
            `;
        }

        async function saveRhymeSearch(word, rhymes) {
            await save('rhyme_search', {
                word: word,
                rhymes: rhymes.join(','),
                timestamp: new Date().toISOString()
            });
            await loadLatestData();
        }

        // Polling and data loading
        let pollingInterval;

        function startPolling() {
            loadLatestData();
            pollingInterval = setInterval(loadLatestData, 2000);
        }

        function stopPolling() {
            if (pollingInterval) clearInterval(pollingInterval);
        }

        async function loadLatestData() {
            const searches = await load('rhyme_search');
            const mySearches = searches.filter(s => s.author === getUsername());
            
            // Deduplicate searches
            const uniqueSearches = mySearches.reduce((acc, search) => {
                const existing = acc.find(s => s.word === search.word);
                if (!existing || new Date(search.created_at) > new Date(existing.created_at)) {
                    if (existing) {
                        const index = acc.indexOf(existing);
                        acc[index] = search;
                    } else {
                        acc.push(search);
                    }
                }
                return acc;
            }, []);
            
            // Sort by timestamp descending
            uniqueSearches.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
            
            // Update history
            const historyList = document.getElementById('history-list');
            historyList.innerHTML = uniqueSearches
                .slice(0, 5)
                .map(search => `
                    <div class="history-item">
                        "${search.word}" â†’ ${search.rhymes.split(',').slice(0, 3).join(', ')}...
                    </div>
                `).join('');
        }

        // Initialize
        initAuth();
    </script>
</body>
</html>