<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WTAF WEIRD STREET BUILDER üèóÔ∏è</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=Inter:wght@400;600&display=swap');

        body { 
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #1a1a1a 0%, #2a2a2a 50%, #3a3a3a 100%);
            background-size: 400% 400%;
            animation: gradientShift 15s ease-in-out infinite;
            color: white;
            overflow-x: hidden;
            margin: 0;
            min-height: 100vh;
        }

        h1, h2, h3 {
            font-family: 'Space Grotesk', sans-serif;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: -0.02em;
        }

        @keyframes gradientShift {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }

        .app-container {
            max-width: 800px;
            margin: 0 auto;
            background: rgba(0,0,0,0.4);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            padding: 2rem;
            border: 1px solid rgba(255,255,255,0.1);
            position: relative;
            z-index: 10;
            min-height: 90vh;
        }

        .screen { display: none; }
        .screen.active { display: block; animation: fadeIn 0.3s ease; }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        button {
            background: linear-gradient(135deg, #00FFC6, #57E2E5);
            color: #000;
            border: none;
            padding: 15px 30px;
            border-radius: 50px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-size: 14px;
            margin: 10px 5px;
        }

        button:hover {
            transform: scale(1.05);
            box-shadow: 0 0 30px rgba(0, 255, 198, 0.5);
        }

        input, select, textarea {
            background: rgba(255,255,255,0.1);
            border: 2px solid rgba(255,255,255,0.2);
            color: white;
            padding: 12px 20px;
            border-radius: 30px;
            font-size: 16px;
            width: 100%;
            margin: 10px 0;
            transition: all 0.3s ease;
        }

        input:focus, select:focus, textarea:focus {
            outline: none;
            border-color: #00FFC6;
            box-shadow: 0 0 20px rgba(0, 255, 198, 0.3);
        }

        .floating-emoji {
            position: fixed;
            font-size: 2rem;
            animation: float 6s ease-in-out infinite;
            pointer-events: none;
            z-index: 5;
            opacity: 0.8;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            50% { transform: translateY(-20px) rotate(10deg); }
        }

        h1 {
            position: relative;
            animation: glitch 3s ease-in-out infinite;
        }

        @keyframes glitch {
            0%, 100% { text-shadow: 2px 2px 0 #FF2E93, -2px -2px 0 #00FFC6; }
            25% { text-shadow: -2px 2px 0 #3F88FF, 2px -2px 0 #FF2E93; }
            50% { text-shadow: 2px -2px 0 #00FFC6, -2px 2px 0 #7C3AED; }
            75% { text-shadow: -2px -2px 0 #FF2E93, 2px 2px 0 #3F88FF; }
        }

        /* Street Builder Specific Styles */
        .street-container {
            width: 100%;
            overflow-x: auto;
            padding: 20px 0;
            margin-top: 20px;
            white-space: nowrap;
        }

        .street {
            display: inline-flex;
            min-width: 100%;
            padding: 20px;
            align-items: flex-end;
        }

        .building {
            display: inline-block;
            margin-right: 20px;
            text-align: center;
            animation: buildingPop 0.5s ease-out;
            vertical-align: bottom;
        }

        @keyframes buildingPop {
            from { transform: scale(0); }
            to { transform: scale(1); }
        }

        .building-art {
            background: rgba(0,0,0,0.3);
            border: 2px solid rgba(255,255,255,0.2);
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 10px;
            min-width: 150px;
            min-height: 200px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 48px;
        }

        .building-info {
            background: rgba(0,0,0,0.2);
            padding: 10px;
            border-radius: 10px;
            max-width: 200px;
            white-space: normal;
        }

        .add-building-form {
            background: rgba(0,0,0,0.3);
            padding: 20px;
            border-radius: 15px;
            margin: 20px 0;
        }

        .first-house {
            font-family: monospace;
            white-space: pre;
            color: #00FFC6;
            font-size: 12px;
            line-height: 1;
        }
    </style>
</head>
<body>
    <div class="floating-emoji" style="top: 5%; left: 2%;" data-value="2">üèóÔ∏è</div>
    <div class="floating-emoji" style="top: 5%; right: 2%;" data-value="3">üèòÔ∏è</div>
    <div class="floating-emoji" style="bottom: 5%; left: 2%;" data-value="1">üåÜ</div>
    <div class="floating-emoji" style="bottom: 5%; right: 2%;" data-value="4">üåÉ</div>

    <div class="app-container">
        <div id="welcome-screen" class="screen active">
            <h1>WEIRD STREET BUILDER üèóÔ∏è</h1>
            <p>JOIN THE MOST CHAOTIC STREET IN THE MULTIVERSE! ADD YOUR ARCHITECTURAL MADNESS! üåà</p>
            <button onclick="showNewUserScreen()">New User</button>
            <button onclick="showReturningUserScreen()">Returning User</button>
        </div>
        
        <div id="new-user-screen" class="screen">
            <h1>New Architect üé®</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Register & Start Building</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="returning-user-screen" class="screen">
            <h1>Return to Your Creation üé™</h1>
            <select id="user-label-select">
                <option>Select User</option>
            </select>
            <input type="text" id="returning-passcode" placeholder="Enter 4-digit passcode" maxlength="4">
            <button onclick="loginReturningUser()">Login</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="main-screen" class="screen">
            <h1>WEIRD STREET BUILDER</h1>
            <div id="user-status">Architect: <span id="current-user-label"></span></div>
            
            <div class="add-building-form">
                <h3>ADD YOUR WEIRD BUILDING üè¢</h3>
                <input type="text" id="building-name" placeholder="Name your architectural masterpiece">
                <textarea id="building-desc" placeholder="Describe your weird creation" rows="3"></textarea>
                <input type="text" id="building-emoji" placeholder="Add an emoji sign (optional)" maxlength="2">
                <button onclick="addBuilding()">ADD TO STREET</button>
            </div>

            <div class="street-container">
                <div id="street" class="street">
                    <!-- Buildings will appear here -->
                </div>
            </div>
            
            <button onclick="showScreen('welcome-screen')">Leave Street</button>
        </div>
    </div>

    <script>
        let currentUser = null;
        let pollingInterval;

        // Authentication System
        async function generateNewUser() {
            try {
                const slots = await checkAvailableSlots();
                if (slots.isFull) {
                    alert('STREET\'S FULL, TRY ANOTHER DIMENSION üö´');
                    return false;
                }
                
                const user = await generateUser();
                if (user && user.success) {
                    currentUser = {
                        userLabel: user.userLabel,
                        passcode: user.passcode,
                        participantId: user.participantId
                    };
                    
                    document.getElementById('new-user-info').innerHTML = 
                        `<strong>YOUR LABEL:</strong> ${currentUser.userLabel}<br><strong>SECRET DIGITS:</strong> ${currentUser.passcode}<br><em>SCREENSHOT THIS OR CRY LATER üì∏</em>`;
                    
                    return true;
                } else {
                    alert('NO MORE ROOM IN THIS CHAOS REALM üåÄ');
                    return false;
                }
            } catch (error) {
                console.error('User generation error:', error);
                alert('GENERATION EXPLODED, TRY AGAIN üí•');
                return false;
            }
        }

        async function registerNewUser() {
            if (!currentUser) {
                alert('GENERATE YOUR IDENTITY FIRST, CHAOS ARCHITECT üé≠');
                return;
            }
            
            try {
                const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
                if (result && result.success) {
                    updateZadAuth(currentUser.userLabel, currentUser.participantId);
                    enterMainScreen();
                } else {
                    alert('REGISTRATION EXPLODED, TRY AGAIN üí•');
                }
            } catch (error) {
                console.error('Registration error:', error);
                alert('REGISTRATION EXPLODED, TRY AGAIN üí•');
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            const success = await generateNewUser();
            if (!success) {
                showScreen('welcome-screen');
            }
        }

        async function loginReturningUser() {
            const selectedLabel = document.getElementById('user-label-select').value;
            const enteredPasscode = document.getElementById('returning-passcode').value.trim();
            
            if (!selectedLabel || selectedLabel === 'Select User') {
                alert('PICK YOUR IDENTITY, PHANTOM üëª');
                return;
            }
            
            if (!enteredPasscode || enteredPasscode.length !== 4) {
                alert('4 DIGITS OF CHAOS REQUIRED üî¢');
                return;
            }
            
            try {
                const result = await authenticateUser(selectedLabel, enteredPasscode);
                if (result && result.success) {
                    currentUser = {
                        userLabel: selectedLabel,
                        passcode: enteredPasscode,
                        participantId: result.user.participantId
                    };
                    updateZadAuth(currentUser.userLabel, currentUser.participantId);
                    enterMainScreen();
                } else {
                    alert('NICE TRY, WRONG VIBES ‚ùå');
                }
            } catch (error) {
                console.error('Login error:', error);
                alert('LOGIN MALFUNCTION, REALITY GLITCHING üåÄ');
            }
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(screen => 
                screen.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            
            if (screenId !== 'main-screen') {
                stopPolling();
            }
        }

        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            
            try {
                const slots = await checkAvailableSlots();
                const userSelect = document.getElementById('user-label-select');
                userSelect.innerHTML = '<option>Select User</option>';
                
                slots.usedLabels.forEach(label => {
                    const option = document.createElement('option');
                    option.value = label;
                    option.textContent = label;
                    userSelect.appendChild(option);
                });
                
                if (slots.usedLabels.length === 0) {
                    userSelect.innerHTML = '<option>No users registered yet</option>';
                }
            } catch (error) {
                console.error('Error loading users:', error);
                const userSelect = document.getElementById('user-label-select');
                userSelect.innerHTML = '<option>Error loading users</option>';
            }
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            startPolling();
            loadLatestData();
        }

        // Street Builder Specific Functions
        async function addBuilding() {
            const name = document.getElementById('building-name').value.trim();
            const description = document.getElementById('building-desc').value.trim();
            const emoji = document.getElementById('building-emoji').value.trim();

            if (!name || !description) {
                alert('NAME AND DESCRIBE YOUR CHAOS CREATION! üé®');
                return;
            }

            try {
                await save('building', {
                    name,
                    description,
                    emoji: emoji || 'üè¢',
                    creator: currentUser.userLabel,
                    timestamp: Date.now()
                });

                document.getElementById('building-name').value = '';
                document.getElementById('building-desc').value = '';
                document.getElementById('building-emoji').value = '';

                loadLatestData();
            } catch (error) {
                console.error('Error saving building:', error);
                alert('BUILDING CRASHED INTO THE VOID! TRY AGAIN! üí•');
            }
        }

        function startPolling() {
            pollingInterval = setInterval(loadLatestData, 2000);
        }

        function stopPolling() {
            if (pollingInterval) {
                clearInterval(pollingInterval);
                pollingInterval = null;
            }
        }

        async function loadLatestData() {
            try {
                const buildings = await load('building');
                const street = document.getElementById('street');
                
                // Start with the default house
                let html = `
                    <div class="building">
                        <div class="building-art first-house">
                            /\\___/\\
                            |     |
                            |  ‚ñ°  |
                            |_____|
                        </div>
                        <div class="building-info">
                            <h3>Regular House</h3>
                            <p>Just a normal house to start our weird street</p>
                        </div>
                    </div>`;

                // Add all the weird buildings
                buildings.sort((a, b) => a.timestamp - b.timestamp).forEach(building => {
                    html += `
                        <div class="building">
                            <div class="building-art">
                                ${building.emoji}
                            </div>
                            <div class="building-info">
                                <h3>${building.name}</h3>
                                <p>${building.description}</p>
                                <small>Built by: ${building.creator}</small>
                            </div>
                        </div>`;
                });

                street.innerHTML = html;
            } catch (error) {
                console.error('Error loading buildings:', error);
            }
        }

        // Mouse parallax effect
        document.addEventListener('mousemove', (e) => {
            document.querySelectorAll('.floating-emoji').forEach((elem) => {
                const speed = elem.getAttribute('data-value') || 2;
                const x = (e.clientX * speed) / 100;
                const y = (e.clientY * speed) / 100;
                elem.style.transform = `translateX(${x}px) translateY(${y}px)`;
            });
        });

        // Easter egg
        console.log('üèóÔ∏è Welcome to WEIRD STREET! Type wtaf() for architectural chaos...');
        window.wtaf = function() {
            document.querySelectorAll('.building-art').forEach(building => {
                building.style.animation = 'float 1s infinite';
            });
            setTimeout(() => {
                document.querySelectorAll('.building-art').forEach(building => {
                    building.style.animation = '';
                });
                alert('üéâ CHAOS ARCHITECT MODE UNLOCKED! Your buildings are alive!');
            }, 3000);
        };

        // Initialize authentication
        initAuth();
    </script>
</body>
</html>