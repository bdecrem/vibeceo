I'll create a fun music generator app using the WEBTOYS design system, with a CHAOS theme for extra playfulness. It'll let users select genre, BPM, mood, and other parameters to generate custom music.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WEBTOYS MUSIC LAB üéµ</title>
    <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=JetBrains+Mono&display=swap" rel="stylesheet">
    <style>
        :root {
            --cream: #FCFCF7;
            --yellow: #FFD63D;
            --purple: #C9C2F9;
            --red: #FF4B4B;
            --blue: #6ECBFF;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Space Grotesk', system-ui;
            background: var(--cream);
            color: #2A2A2A;
            line-height: 1.6;
            padding: 20px;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
        }

        h1 {
            font-size: 3rem;
            text-transform: uppercase;
            color: var(--red);
            transform: rotate(-2deg);
            margin-bottom: 2rem;
        }

        .generator-card {
            background: white;
            border: 4px solid var(--yellow);
            border-radius: 20px;
            padding: 2rem;
            box-shadow: 8px 8px 0 var(--purple);
            transform: rotate(1deg);
            margin-bottom: 2rem;
        }

        .control-group {
            margin-bottom: 1.5rem;
        }

        label {
            display: block;
            font-weight: bold;
            margin-bottom: 0.5rem;
        }

        select, input[type="range"] {
            width: 100%;
            padding: 0.5rem;
            border: 3px solid var(--yellow);
            border-radius: 10px;
            font-family: 'JetBrains Mono', monospace;
            margin-bottom: 0.5rem;
        }

        .mood-buttons {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        .mood-btn {
            background: white;
            border: 3px solid var(--yellow);
            padding: 0.5rem;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.2s;
        }

        .mood-btn.active {
            background: var(--yellow);
            transform: translateY(2px);
        }

        .generate-btn {
            background: var(--blue);
            color: white;
            border: none;
            padding: 1rem 2rem;
            border-radius: 50px;
            font-size: 1.2rem;
            font-weight: bold;
            cursor: pointer;
            width: 100%;
            text-transform: uppercase;
            letter-spacing: 2px;
            box-shadow: 0 4px 0 rgba(0,0,0,0.2);
            transition: all 0.2s;
        }

        .generate-btn:active {
            transform: translateY(4px);
            box-shadow: none;
        }

        .player-card {
            background: white;
            border: 4px solid var(--yellow);
            border-radius: 20px;
            padding: 2rem;
            box-shadow: 8px 8px 0 var(--purple);
            transform: rotate(-1deg);
        }

        .status {
            text-align: center;
            margin: 1rem 0;
            font-family: 'JetBrains Mono', monospace;
        }

        audio {
            width: 100%;
            margin: 1rem 0;
            height: 54px;
        }

        @keyframes pulse {
            0% { opacity: 0.5; }
            50% { opacity: 1; }
            100% { opacity: 0.5; }
        }

        .generating {
            animation: pulse 1.5s infinite;
        }

        @media (max-width: 768px) {
            body {
                padding: 10px;
            }

            h1 {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üéµ Music Lab</h1>
        
        <div class="generator-card">
            <div class="control-group">
                <label>Genre</label>
                <select id="genre">
                    <option value="electronic">Electronic üéõÔ∏è</option>
                    <option value="hip hop">Hip Hop üé§</option>
                    <option value="rock">Rock üé∏</option>
                    <option value="jazz">Jazz üé∑</option>
                    <option value="ambient">Ambient üåü</option>
                </select>
            </div>

            <div class="control-group">
                <label>BPM: <span id="bpmValue">120</span></label>
                <input type="range" id="bpm" min="60" max="180" value="120">
            </div>

            <div class="control-group">
                <label>Mood</label>
                <div class="mood-buttons">
                    <button class="mood-btn" data-mood="happy">üòä Happy</button>
                    <button class="mood-btn" data-mood="chill">üòå Chill</button>
                    <button class="mood-btn" data-mood="dark">üòà Dark</button>
                    <button class="mood-btn" data-mood="epic">‚ú® Epic</button>
                </div>
            </div>

            <div class="control-group">
                <label>
                    <input type="checkbox" id="instrumental" checked>
                    Instrumental Only üéπ
                </label>
            </div>

            <button class="generate-btn" id="generate">Generate Magic ‚ú®</button>
        </div>

        <div class="player-card">
            <div class="status" id="status">Ready to make some music! üéµ</div>
            <audio id="audioPlayer" controls></audio>
        </div>
    </div>

    <script>
        let selectedMood = null;
        const moodBtns = document.querySelectorAll('.mood-btn');
        const bpmInput = document.getElementById('bpm');
        const bpmValue = document.getElementById('bpmValue');
        const status = document.getElementById('status');
        const generateBtn = document.getElementById('generate');

        moodBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                moodBtns.forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                selectedMood = btn.dataset.mood;
            });
        });

        bpmInput.addEventListener('input', () => {
            bpmValue.textContent = bpmInput.value;
        });

        generateBtn.addEventListener('click', async () => {
            const genre = document.getElementById('genre').value;
            const bpm = bpmInput.value;
            const instrumental = document.getElementById('instrumental').checked;
            const mood = selectedMood || 'happy';

            let prompt = `${mood} ${genre} music at ${bpm} BPM`;
            if (instrumental) prompt += ', instrumental, no vocals';

            status.textContent = 'Generating your masterpiece... üéµ';
            status.classList.add('generating');
            generateBtn.disabled = true;

            try {
                const result = await generateMusic(prompt);
                if (result.success) {
                    status.textContent = 'Ready to play! üéâ';
                    const audio = document.getElementById('audioPlayer');
                    audio.src = result.audioUrl;
                } else {
                    status.textContent = 'Oops! Something went wrong üòÖ Try again?';
                }
            } catch (error) {
                status.textContent = 'Error generating music üòÖ Try again?';
            }

            status.classList.remove('generating');
            generateBtn.disabled = false;
        });

        async function generateMusic(prompt) {
            try {
                const response = await fetch('/api/sonauto', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ prompt })
                });
                
                const data = await response.json();
                return await pollForCompletion(data.task_id);
            } catch (error) {
                console.error('Generation failed:', error);
                return { success: false };
            }
        }

        async function pollForCompletion(taskId) {
            const maxAttempts = 60;
            let attempts = 0;
            
            while (attempts < maxAttempts) {
                try {
                    const response = await fetch(`/api/sonauto?taskId=${taskId}`);
                    const result = await response.json();
                    
                    const status = typeof result === 'string' ? result : result.status;
                    
                    if (status === 'SUCCESS' || status === 'COMPLETED') {
                        const audioUrl = result.song_paths?.[0] || result.url;
                        return { success: true, audioUrl };
                    }
                    
                    if (status === 'FAILED') {
                        return { success: false };
                    }
                    
                    await new Promise(resolve => setTimeout(resolve, 2000));
                    attempts++;
                } catch (error) {
                    console.error('Polling error:', error);
                    attempts++;
                }
            }
            
            return { success: false };
        }
    </script>
</body>
</html>