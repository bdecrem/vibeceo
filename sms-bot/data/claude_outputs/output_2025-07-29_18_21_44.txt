```html
<!DOCTYPE html>
<html>
<head>
    <title>Tetris</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <style>
        body {
            margin: 0;
            padding: 0;
            background: linear-gradient(to bottom, #1a1a2e, #16213e);
            font-family: Arial, sans-serif;
            touch-action: none;
            overflow: hidden;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            color: white;
        }
        canvas {
            display: block;
            background: #0f3460;
        }
        #controls {
            position: fixed;
            bottom: 0;
            width: 100%;
            height: 120px;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        .btn {
            width: 60px;
            height: 60px;
            margin: 5px;
            background: rgba(255, 255, 255, 0.2);
            border: 2px solid white;
            border-radius: 10px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 24px;
            color: white;
            user-select: none;
        }
        .screen {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: calc(100% - 120px);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
            background: rgba(15, 52, 96, 0.9);
            z-index: 500;
        }
        #gameScreen {
            display: none;
        }
        #endScreen {
            display: none;
        }
        button {
            padding: 15px 30px;
            font-size: 18px;
            background: #e94560;
            color: white;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            margin-top: 20px;
        }
        h1 {
            font-size: 40px;
            margin-bottom: 10px;
        }
        p {
            font-size: 20px;
            max-width: 80%;
        }
        #scoreDisplay {
            position: absolute;
            top: 20px;
            right: 20px;
            font-size: 24px;
            background: rgba(0, 0, 0, 0.5);
            padding: 10px 15px;
            border-radius: 10px;
        }
    </style>
</head>
<body>
    <div id="introScreen" class="screen">
        <h1>üß± TETRIS</h1>
        <p>Stack the blocks and clear lines!</p>
        <button id="startBtn">START GAME</button>
    </div>

    <div id="gameScreen" class="screen">
        <div id="scoreDisplay">Score: 0</div>
        <canvas id="gameCanvas"></canvas>
    </div>

    <div id="endScreen" class="screen">
        <h1>GAME OVER</h1>
        <p>Your score: <span id="finalScore">0</span></p>
        <button id="restartBtn">PLAY AGAIN</button>
    </div>

    <div id="controls">
        <div class="btn" id="leftBtn">‚¨ÖÔ∏è</div>
        <div class="btn" id="downBtn">‚¨áÔ∏è</div>
        <div class="btn" id="rightBtn">‚û°Ô∏è</div>
        <div class="btn" id="rotateBtn">üîÑ</div>
    </div>

    <script>
        var canvas = document.getElementById('gameCanvas');
        var ctx = canvas.getContext('2d');
        var scoreDisplay = document.getElementById('scoreDisplay');
        var finalScore = document.getElementById('finalScore');
        var startBtn = document.getElementById('startBtn');
        var restartBtn = document.getElementById('restartBtn');
        var introScreen = document.getElementById('introScreen');
        var gameScreen = document.getElementById('gameScreen');
        var endScreen = document.getElementById('endScreen');
        var leftBtn = document.getElementById('leftBtn');
        var rightBtn = document.getElementById('rightBtn');
        var downBtn = document.getElementById('downBtn');
        var rotateBtn = document.getElementById('rotateBtn');

        var controlsHeight = 120;
        var cols = 10;
        var rows = 20;
        var blockSize;
        var grid = [];
        var score = 0;
        var gameOver = false;
        var currentPiece;
        var dropInterval = 1000;
        var lastTime = 0;
        var dropCounter = 0;

        var tetrominoes = [
            { shape: [[1, 1, 1, 1]], color: '#00f0f0' }, // I
            { shape: [[1, 1], [1, 1]], color: '#f0f000' }, // O
            { shape: [[0, 1, 0], [1, 1, 1]], color: '#a000f0' }, // T
            { shape: [[0, 1, 1], [1, 1, 0]], color: '#00f000' }, // S
            { shape: [[1, 1, 0], [0, 1, 1]], color: '#f00000' }, // Z
            { shape: [[1, 0, 0], [1, 1, 1]], color: '#0000f0' }, // J
            { shape: [[0, 0, 1], [1, 1, 1]], color: '#f0a000' }  // L
        ];

        function resizeCanvas() {
            var width = window.innerWidth;
            var height = window.innerHeight - controlsHeight;
            
            var dpr = window.devicePixelRatio || 1;
            canvas.width = width * dpr;
            canvas.height = height * dpr;
            canvas.style.width = width + 'px';
            canvas.style.height = height + 'px';
            ctx.scale(dpr, dpr);
            
            blockSize = Math.min(width / cols, height / rows);
        }

        function createGrid() {
            grid = [];
            for (var r = 0; r < rows; r++) {
                grid[r] = [];
                for (var c = 0; c < cols; c++) {
                    grid[r][c] = 0;
                }
            }
        }

        function getRandomPiece() {
            var rand = Math.floor(Math.random() * tetrominoes.length);
            return {
                shape: tetrominoes[rand].shape,
                color: tetrominoes[rand].color,
                x: Math.floor(cols / 2) - 1,
                y: 0
            };
        }

        function drawBlock(x, y, color) {
            ctx.fillStyle = color;
            ctx.fillRect(x * blockSize, y * blockSize, blockSize, blockSize);
            ctx.strokeStyle = '#000';
            ctx.strokeRect(x * blockSize, y * blockSize, blockSize, blockSize);
        }

        function drawGrid() {
            for (var r = 0; r < rows; r++) {
                for (var c = 0; c < cols; c++) {
                    if (grid[r][c]) {
                        drawBlock(c, r, grid[r][c]);
                    }
                }
            }
        }

        function drawPiece() {
            if (!currentPiece) return;
            var shape = currentPiece.shape;
            for (var r = 0; r < shape.length; r++) {
                for (var c = 0; c < shape[r].length; c++) {
                    if (shape[r][c]) {
                        drawBlock(currentPiece.x + c, currentPiece.y + r, currentPiece.color);
                    }
                }
            }
        }

        function rotatePiece() {
            if (!currentPiece) return;
            var originalShape = currentPiece.shape;
            var rows = originalShape.length;
            var cols = originalShape[0].length;
            
            var newShape = [];
            for (var c = 0; c < cols; c++) {
                newShape[c] = [];
                for (var r = 0; r < rows; r++) {
                    newShape[c][r] = originalShape[rows - 1 - r][c];
                }
            }
            
            var original = currentPiece.shape;
            currentPiece.shape = newShape;
            
            if (checkCollision()) {
                currentPiece.shape = original;
            }
        }

        function checkCollision() {
            var shape = currentPiece.shape;
            for (var r = 0; r < shape.length; r++) {
                for (var c = 0; c < shape[r].length; c++) {
                    if (!shape[r][c]) continue;
                    
                    var newX = currentPiece.x + c;
                    var newY = currentPiece.y + r;
                    
                    if (newX < 0 || newX >= cols || newY >= rows) {
                        return true;
                    }
                    
                    if (newY >= 0 && grid[newY][newX]) {
                        return true;
                    }
                }
            }
            return false;
        }

        function mergePiece() {
            var shape = currentPiece.shape;
            for (var r = 0; r < shape.length; r++) {
                for (var c = 0; c < shape[r].length; c++) {
                    if (!shape[r][c]) continue;
                    var y = currentPiece.y + r;
                    if (y < 0) {
                        gameOver = true;
                        return;
                    }
                    grid[y][currentPiece.x + c] = currentPiece.color;
                }
            }
        }

        function clearLines() {
            var linesCleared = 0;
            for (var r = rows - 1; r >= 0; r--) {
                var isLine = true;
                for (var c = 0; c < cols; c++) {
                    if (!grid[r][c]) {
                        isLine = false;
                        break;
                    }
                }
                if (isLine) {
                    linesCleared++;
                    for (var y = r; y > 0; y--) {
                        for (var c = 0; c < cols; c++) {
                            grid[y][c] = grid[y-1][c];
                        }
                    }
                    for (var c = 0; c < cols; c++) {
                        grid[0][c] = 0;
                    }
                    r++;
                }
            }
            if (linesCleared > 0) {
                score += linesCleared * 100;
                scoreDisplay.textContent = 'Score: ' + score;
                dropInterval = Math.max(100, 1000 - Math.floor(score / 500) * 100);
            }
        }

        function movePiece(dx, dy) {
            if (!currentPiece) return;
            currentPiece.x += dx;
            currentPiece.y += dy;
            if (checkCollision()) {
                currentPiece.x -= dx;
                currentPiece.y -= dy;
                if (dy > 0) {
                    mergePiece();
                    clearLines();
                    currentPiece = getRandomPiece();
                    if (checkCollision()) {
                        gameOver = true;
                    }
                }
                return false;
            }
            return true;
        }

        function update(time) {
            if (gameOver) {
                showEndScreen();
                return;
            }
            
            var deltaTime = time - lastTime;
            lastTime = time;
            
            dropCounter += deltaTime;
            if (dropCounter > dropInterval) {
                movePiece(0, 1);
                dropCounter = 0;
            }
            
            draw();
            requestAnimationFrame(update);
        }

        function draw() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            drawGrid();
            drawPiece();
        }

        function showEndScreen() {
            gameScreen.style.display = 'none';
            endScreen.style.display = 'flex';
            finalScore.textContent = score;
        }

        function startGame() {
            introScreen.style.display = 'none';
            gameScreen.style.display = 'flex';
            endScreen.style.display = 'none';
            
            resizeCanvas();
            createGrid();
            score = 0;
            gameOver = false;
            scoreDisplay.textContent = 'Score: 0';
            currentPiece = getRandomPiece();
            dropInterval = 1000;
            
            lastTime = 0;
            dropCounter = 0;
            
            requestAnimationFrame(update);
        }

        startBtn.addEventListener('click', startGame);
        restartBtn.addEventListener('click', startGame);

        leftBtn.addEventListener('click', function() { movePiece(-1, 0); });
        rightBtn.addEventListener('click', function() { movePiece(1, 0); });
        downBtn.addEventListener('click', function() { movePiece(0, 1); });
        rotateBtn.addEventListener('click', rotatePiece);

        document.addEventListener('keydown', function(e) {
            if (gameScreen.style.display !== 'flex') return;
            
            if (e.keyCode === 37) { // left
                movePiece(-1, 0);
            } else if (e.keyCode === 39) { // right
                movePiece(1, 0);
            } else if (e.keyCode === 40) { // down
                movePiece(0, 1);
            } else if (e.keyCode === 38) { // up
                rotatePiece();
            }
        });

        window.addEventListener('resize', function() {
            if (gameScreen.style.display === 'flex') {
                resizeCanvas();
            }
        });

        resizeCanvas();
    </script>
</body>
</html>
```