<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
        body { margin: 0; padding: 0; overflow: hidden; background: #222; }
        #gameContainer { width: 100vw; height: 100vh; display: flex; flex-direction: column; align-items: center; }
        #gameCanvas { background: #000; margin-top: 10px; }
        #controls { position: fixed; bottom: 20px; display: flex; gap: 10px; }
        .btn { width: 50px; height: 50px; background: rgba(255,255,255,0.2); border: none; border-radius: 8px; color: white; font-size: 20px; }
        #score { color: white; font-family: Arial; margin-top: 10px; }
    </style>
</head>
<body>
    <div id="gameContainer">
        <div id="score">Score: 0</div>
        <canvas id="gameCanvas"></canvas>
        <div id="controls">
            <button class="btn" ontouchstart="moveLeft()" onmousedown="moveLeft()">←</button>
            <button class="btn" ontouchstart="moveRight()" onmousedown="moveRight()">→</button>
            <button class="btn" ontouchstart="rotate()" onmousedown="rotate()">↻</button>
            <button class="btn" ontouchstart="drop()" onmousedown="drop()">↓</button>
        </div>
    </div>
    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const COLS = 10;
        const ROWS = 20;
        let score = 0;
        let grid = [];
        let currentPiece = null;
        let gameLoop = null;

        const PIECES = [
            [[1,1,1,1]], // I
            [[1,1],[1,1]], // O
            [[1,1,1],[0,1,0]], // T
            [[1,1,1],[1,0,0]], // L
            [[1,1,1],[0,0,1]], // J
            [[1,1,0],[0,1,1]], // S
            [[0,1,1],[1,1,0]]  // Z
        ];

        function initGame() {
            const unit = Math.min(window.innerWidth / 1.5, window.innerHeight / 1.2) / ROWS;
            canvas.width = unit * COLS;
            canvas.height = unit * ROWS;
            
            grid = Array(ROWS).fill().map(() => Array(COLS).fill(0));
            spawnPiece();
            if (gameLoop) clearInterval(gameLoop);
            gameLoop = setInterval(update, 1000);
            render();
        }

        function spawnPiece() {
            const pieceIdx = Math.floor(Math.random() * PIECES.length);
            currentPiece = {
                shape: PIECES[pieceIdx],
                x: Math.floor(COLS/2) - Math.floor(PIECES[pieceIdx][0].length/2),
                y: 0
            };
        }

        function collides() {
            for (let y = 0; y < currentPiece.shape.length; y++) {
                for (let x = 0; x < currentPiece.shape[y].length; x++) {
                    if (currentPiece.shape[y][x] && 
                        (currentPiece.y + y >= ROWS ||
                         currentPiece.x + x < 0 ||
                         currentPiece.x + x >= COLS ||
                         grid[currentPiece.y + y][currentPiece.x + x])) {
                        return true;
                    }
                }
            }
            return false;
        }

        function moveLeft() { currentPiece.x--; if (collides()) currentPiece.x++; render(); }
        function moveRight() { currentPiece.x++; if (collides()) currentPiece.x--; render(); }
        function rotate() {
            const rotated = currentPiece.shape[0].map((_, i) => 
                currentPiece.shape.map(row => row[i]).reverse()
            );
            const original = currentPiece.shape;
            currentPiece.shape = rotated;
            if (collides()) currentPiece.shape = original;
            render();
        }

        function drop() {
            while (!collides()) {
                currentPiece.y++;
            }
            currentPiece.y--;
            lockPiece();
            render();
        }

        function lockPiece() {
            for (let y = 0; y < currentPiece.shape.length; y++) {
                for (let x = 0; x < currentPiece.shape[y].length; x++) {
                    if (currentPiece.shape[y][x]) {
                        grid[currentPiece.y + y][currentPiece.x + x] = 1;
                    }
                }
            }
            clearLines();
            spawnPiece();
            if (collides()) {
                alert('Game Over!');
                initGame();
            }
        }

        function clearLines() {
            for (let y = ROWS-1; y >= 0; y--) {
                if (grid[y].every(cell => cell)) {
                    grid.splice(y, 1);
                    grid.unshift(Array(COLS).fill(0));
                    score += 100;
                    document.getElementById('score').textContent = `Score: ${score}`;
                }
            }
        }

        function update() {
            currentPiece.y++;
            if (collides()) {
                currentPiece.y--;
                lockPiece();
            }
            render();
        }

        function render() {
            const unit = canvas.width / COLS;
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Draw grid
            for (let y = 0; y < ROWS; y++) {
                for (let x = 0; x < COLS; x++) {
                    if (grid[y][x]) {
                        ctx.fillStyle = '#fff';
                        ctx.fillRect(x * unit, y * unit, unit-1, unit-1);
                    }
                }
            }
            
            // Draw current piece
            ctx.fillStyle = '#0f0';
            for (let y = 0; y < currentPiece.shape.length; y++) {
                for (let x = 0; x < currentPiece.shape[y].length; x++) {
                    if (currentPiece.shape[y][x]) {
                        ctx.fillRect((currentPiece.x + x) * unit, 
                                   (currentPiece.y + y) * unit, unit-1, unit-1);
                    }
                }
            }
        }

        initGame();
    </script>
</body>
</html>
{"controls":["left","right","rotate","drop"],"canvasId":"gameCanvas","gameType":"tetris"}