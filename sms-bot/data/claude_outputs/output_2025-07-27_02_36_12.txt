I'll create a simple music generator app using the CHAOS theme from WEBTOYS. It will feature a clean interface with a prompt input, generation status, and audio player.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WEBTOYS MUSIC MAKER</title>
    <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --cream: #FCFCF7;
            --yellow: #FFD63D;
            --purple: #C9C2F9;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Space Grotesk', system-ui, sans-serif;
            background: var(--cream);
            min-height: 100vh;
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .container {
            max-width: 666px;
            width: 100%;
            margin: 2rem auto;
        }

        h1 {
            font-size: 40px;
            text-transform: uppercase;
            font-weight: bold;
            transform: rotate(-2deg);
            margin-bottom: 2rem;
            text-align: center;
        }

        .input-card {
            background: white;
            border: 4px solid var(--yellow);
            box-shadow: 8px 8px 0 var(--purple);
            padding: 2rem;
            border-radius: 12px;
            transform: rotate(1deg);
            margin-bottom: 2rem;
        }

        input[type="text"] {
            width: 100%;
            padding: 1rem;
            font-family: 'Space Grotesk', system-ui, sans-serif;
            font-size: 1.2rem;
            border: 3px solid var(--yellow);
            border-radius: 8px;
            margin-bottom: 1rem;
        }

        input[type="text"]:focus {
            outline: none;
            transform: scale(1.02);
            transition: transform 0.2s ease;
        }

        .checkbox-wrapper {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        button {
            width: 100%;
            padding: 1rem 2rem;
            font-family: 'Space Grotesk', system-ui, sans-serif;
            font-size: 1.2rem;
            text-transform: uppercase;
            font-weight: bold;
            background: var(--yellow);
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transform: rotate(-1deg);
        }

        button:hover {
            transform: rotate(-1deg) translateY(-2px);
        }

        button:active {
            transform: scale(0.98);
        }

        .status {
            text-align: center;
            margin: 1rem 0;
            font-weight: bold;
        }

        .player-card {
            background: white;
            border: 4px solid var(--yellow);
            box-shadow: 8px 8px 0 var(--purple);
            padding: 2rem;
            border-radius: 12px;
            transform: rotate(-1deg);
        }

        audio {
            width: 100%;
            margin-top: 1rem;
        }

        .loading {
            animation: bounce 1s infinite;
        }

        @keyframes bounce {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-10px); }
        }

        @media (max-width: 768px) {
            .container {
                padding: 0 1rem;
            }

            h1 {
                font-size: 32px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>‚ú® Magic Music Maker ‚ú®</h1>
        
        <div class="input-card">
            <input type="text" id="promptInput" placeholder="Describe your dream song..." 
                   aria-label="Enter your music prompt">
            <div class="checkbox-wrapper">
                <input type="checkbox" id="instrumentalCheck" checked>
                <label for="instrumentalCheck">Instrumental Only</label>
            </div>
            <button onclick="generateMusic()">Create Magic üéµ</button>
        </div>

        <div id="status" class="status"></div>

        <div class="player-card">
            <audio id="audioPlayer" controls></audio>
        </div>
    </div>

    <script>
        async function generateMusic() {
            const promptInput = document.getElementById('promptInput');
            const instrumentalCheck = document.getElementById('instrumentalCheck');
            const status = document.getElementById('status');
            const audioPlayer = document.getElementById('audioPlayer');

            if (!promptInput.value.trim()) {
                status.textContent = "‚ö†Ô∏è Please enter a description first!";
                return;
            }

            try {
                status.textContent = "üéµ Creating your music... (about 30 seconds)";
                status.classList.add('loading');
                
                const finalPrompt = instrumentalCheck.checked 
                    ? `${promptInput.value}, instrumental, no vocals` 
                    : promptInput.value;

                const response = await fetch('/api/sonauto', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ prompt: finalPrompt })
                });

                const data = await response.json();
                const result = await pollForCompletion(data.task_id);

                if (result.success) {
                    status.textContent = "‚ú® Music ready!";
                    status.classList.remove('loading');
                    audioPlayer.src = result.audioUrl;
                    audioPlayer.play();
                } else {
                    throw new Error(result.error);
                }
            } catch (error) {
                status.textContent = "üí• Oops! Something went wrong. Please try again.";
                status.classList.remove('loading');
            }
        }

        async function pollForCompletion(taskId) {
            const maxAttempts = 60;
            let attempts = 0;

            while (attempts < maxAttempts) {
                try {
                    const response = await fetch(`/api/sonauto?taskId=${taskId}`);
                    const result = await response.json();
                    
                    const status = typeof result === 'string' ? result : result.status;
                    
                    if (status === 'SUCCESS' || status === 'COMPLETED') {
                        const audioUrl = result.song_paths?.[0] || result.url;
                        return { success: true, audioUrl };
                    }
                    
                    if (status === 'FAILED') {
                        return { success: false, error: 'Generation failed' };
                    }
                    
                    await new Promise(resolve => setTimeout(resolve, 2000));
                    attempts++;
                } catch (error) {
                    attempts++;
                }
            }
            
            return { success: false, error: 'Generation timed out' };
        }
    </script>
</body>
</html>