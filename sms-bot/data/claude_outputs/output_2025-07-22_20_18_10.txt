<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>Feature Ideas Board</title>
    <style>
        * {
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: #0a0a0a;
            color: #fff;
            margin: 0;
            padding: 10px;
            font-size: 16px;
        }

        .app-container {
            max-width: 800px;
            margin: 0 auto;
            background: #1a1a1a;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 0 40px rgba(0, 0, 0, 0.5);
        }

        h1 {
            font-size: 24px;
            margin: 0 0 20px 0;
        }

        button {
            background: #ff0066;
            color: white;
            border: none;
            padding: 16px 24px;
            border-radius: 6px;
            font-weight: bold;
            cursor: pointer;
            margin: 8px 0;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-size: 16px;
            width: 100%;
            min-height: 44px;
            display: block;
        }

        button:hover {
            background: #ff3388;
        }

        button:active {
            transform: scale(0.98);
        }

        input, select {
            background: #2a2a2a;
            border: 1px solid #444;
            color: white;
            padding: 16px;
            border-radius: 6px;
            width: 100%;
            margin: 10px 0;
            font-size: 16px;
            min-height: 44px;
        }

        .screen {
            display: none;
        }

        .screen.active {
            display: block;
        }

        .idea-card {
            background: #2a2a2a;
            padding: 16px;
            margin: 10px 0;
            border-radius: 8px;
            display: flex;
            flex-direction: column;
            min-height: 60px;
            border-left: 5px solid #ff0066;
        }

        .idea-card .idea-content {
            flex-grow: 1;
        }

        .idea-card .idea-info {
            font-size: 14px;
            color: #aaa;
        }

        .idea-card .reactions, .comments {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }

        .idea-card button {
            width: auto;
            margin: 0;
            padding: 8px 16px;
        }
    </style>
</head>
<body>
<div class="app-container">
    <div id="welcome-screen" class="screen active">
        <h1>Welcome to Feature Ideas Board</h1>
        <p>Share your one-line feature ideas and interact with others!</p>
        <button onclick="showNewUserScreen()">New User</button>
        <button onclick="showReturningUserScreen()">Returning User</button>
    </div>

    <div id="new-user-screen" class="screen">
        <h1>New User</h1>
        <div id="new-user-info"></div>
        <button onclick="registerNewUser()">Register & Enter</button>
        <button onclick="showScreen('welcome-screen')">Back</button>
    </div>

    <div id="returning-user-screen" class="screen">
        <h1>Returning User</h1>
        <select id="user-label-select"></select>
        <input type="text" id="returning-passcode" placeholder="4-digit code" maxlength="4">
        <button onclick="loginReturningUser()">Login</button>
        <button onclick="showScreen('welcome-screen')">Back</button>
    </div>

    <div id="main-screen" class="screen">
        <h1>Feature Ideas Board</h1>
        <div id="user-status">Welcome, <span id="current-user-label"></span>!</div>

        <div id="app-content">
            <textarea id="idea-input" placeholder="Your feature idea..." rows="3"></textarea>
            <button onclick="postIdea()">Post Idea</button>

            <div id="ideas-list"></div>
        </div>

        <button onclick="showScreen('welcome-screen')">Leave</button>
    </div>
</div>

<script>
    let currentUser = null;

    async function generateNewUser() {
        const slots = await checkAvailableSlots();
        if (slots.isFull) {
            alert('App is full!');
            return false;
        }

        const user = await generateUser();
        if (user?.success) {
            currentUser = user;
            document.getElementById('new-user-info').innerHTML =
                `Your ID: ${user.userLabel}<br>Code: ${user.passcode}<br>Save these!`;
            return true;
        }
        return false;
    }

    async function registerNewUser() {
        if (!currentUser) return;

        const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
        if (result?.success) {
            updateZadAuth(currentUser.userLabel, currentUser.participantId);
            enterMainScreen();
        }
    }

    async function showNewUserScreen() {
        showScreen('new-user-screen');
        await generateNewUser();
    }

    async function loginReturningUser() {
        const label = document.getElementById('user-label-select').value;
        const passcode = document.getElementById('returning-passcode').value;

        const result = await authenticateUser(label, passcode);
        if (result?.success) {
            currentUser = { userLabel: label, passcode, participantId: result.user.participantId };
            updateZadAuth(label, result.user.participantId);
            enterMainScreen();
        } else {
            alert('Wrong code!');
        }
    }

    function showScreen(screenId) {
        document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
        document.getElementById(screenId).classList.add('active');
        if (screenId !== 'main-screen') stopPolling();
    }

    async function showReturningUserScreen() {
        showScreen('returning-user-screen');
        const slots = await checkAvailableSlots();
        const select = document.getElementById('user-label-select');
        select.innerHTML = '<option>Select User</option>';
        slots.usedLabels.forEach(label => {
            select.innerHTML += `<option>${label}</option>`;
        });
    }

    function enterMainScreen() {
        showScreen('main-screen');
        document.getElementById('current-user-label').textContent = currentUser.userLabel;
        startPolling();
        loadLatestData();
    }

    async function postIdea() {
        const ideaText = document.getElementById('idea-input').value.trim();
        if (ideaText === '') return;

        await save('idea', { text: ideaText });
        document.getElementById('idea-input').value = '';
        loadLatestData();
    }

    async function loadLatestData() {
        const ideas = await load('idea');
        updateUI(ideas);
    }

    function updateUI(data) {
        const ideasList = document.getElementById('ideas-list');
        ideasList.innerHTML = '';

        data.forEach(item => {
            const card = document.createElement('div');
            card.classList.add('idea-card');
            card.innerHTML = `
                <div class="idea-content">${item.text}</div>
                <div class="idea-info">by ${item.author} at ${new Date(item.created_at).toLocaleString()}</div>
                <div class="reactions">
                    <button onclick="addReaction(${item.id}, 'üí°')">üí°</button>
                    <button onclick="addReaction(${item.id}, 'üî•')">üî•</button>
                    <button onclick="addReaction(${item.id}, 'üëç')">üëç</button>
                    <button onclick="addReaction(${item.id}, 'ü§î')">ü§î</button>
                </div>
                <div class="comments">
                    <input type="text" placeholder="Add a comment..." onkeypress="postComment(event, ${item.id})">
                </div>
            `;
            ideasList.appendChild(card);
        });
    }

    async function addReaction(ideaId, emoji) {
        const ideas = await load('idea');
        const idea = ideas.find(i => i.id === parseInt(ideaId));
        if (idea) {
            const reactions = idea.reactions || {};
            reactions[emoji] = (reactions[emoji] || 0) + 1;

            await save('update_task', {
                taskId: parseInt(ideaId),
                updates: { reactions }
            });

            loadLatestData();
        }
    }

    async function postComment(event, ideaId) {
        if (event.key !== 'Enter') return;

        const commentText = event.target.value.trim();
        if (commentText === '') return;

        await save('comment', { ideaId, text: commentText });
        event.target.value = '';
        loadLatestData();
    }

    let pollingInterval;

    function startPolling() {
        pollingInterval = setInterval(() => loadLatestData(), 2000);
    }

    function stopPolling() {
        if (pollingInterval) clearInterval(pollingInterval);
    }

    const USER_LABELS = ['user1üéØ', 'user2‚ö°', 'user3üåü', 'user4üî•', 'user5üíé'];

    async function checkAvailableSlots() {
        return await save('check_slots', {});
    }

    async function generateUser() {
        return await save('generate_user', {});
    }

    async function registerUser(userLabel, passcode, participantId) {
        return await save('register_user', { userLabel, passcode, participantId });
    }

    async function authenticateUser(userLabel, passcode) {
        return await save('authenticate_user', { userLabel, passcode });
    }

    function updateZadAuth(userLabel, participantId) {
        window.currentUserLabel = userLabel;
        window.currentParticipantId = participantId;
    }

    initAuth();
</script>
</body>
</html>