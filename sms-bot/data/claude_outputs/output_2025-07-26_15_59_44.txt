<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>WTAF Chat</title>
    <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=JetBrains+Mono&display=swap" rel="stylesheet">
    <style>
        /* Theme: CHAOS */
        :root {
            --bg: #FCFCF7;
            --border: #FFD63D;
            --shadow: #C9C2F9;
            --text: #0A0A0A;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Space Grotesk', system-ui, sans-serif;
            background: var(--bg);
            color: var(--text);
            line-height: 1.6;
            font-size: 16px;
        }

        .app-container {
            max-width: 666px;
            margin: 0 auto;
            padding: 20px;
            min-height: 100vh;
        }

        .screen {
            display: none;
        }

        .screen.active {
            display: block;
        }

        h1 {
            font-size: 40px;
            text-transform: uppercase;
            margin-bottom: 20px;
            transform: rotate(-2deg);
            font-weight: 700;
        }

        button {
            background: var(--border);
            border: 3px solid var(--text);
            box-shadow: 4px 4px 0 var(--shadow);
            padding: 12px 24px;
            font-size: 18px;
            font-family: 'Space Grotesk', system-ui, sans-serif;
            text-transform: uppercase;
            cursor: pointer;
            margin: 10px 0;
            min-height: 48px;
            width: 100%;
            transform: rotate(1deg);
            transition: all 0.2s;
        }

        button:active {
            transform: translateY(4px) rotate(1deg);
            box-shadow: 0px 0px 0 var(--shadow);
        }

        input, select {
            width: 100%;
            padding: 12px;
            font-size: 16px;
            border: 3px solid var(--text);
            font-family: 'JetBrains Mono', monospace;
            margin: 10px 0;
            min-height: 48px;
        }

        .chat-container {
            border: 3px solid var(--text);
            min-height: 400px;
            margin: 20px 0;
            padding: 10px;
            overflow-y: auto;
            background: white;
            box-shadow: 4px 4px 0 var(--shadow);
        }

        .message {
            margin: 10px 0;
            padding: 10px;
            border-radius: 4px;
            max-width: 80%;
            word-break: break-word;
        }

        .message.mine {
            background: var(--border);
            margin-left: auto;
            transform: rotate(1deg);
        }

        .message.others {
            background: var(--shadow);
            margin-right: auto;
            transform: rotate(-1deg);
        }

        .message .author {
            font-size: 12px;
            opacity: 0.7;
            font-family: 'JetBrains Mono', monospace;
        }

        .message-input {
            display: flex;
            gap: 10px;
        }

        .message-input input {
            flex-grow: 1;
        }

        .message-input button {
            width: auto;
        }

        #user-status {
            font-family: 'JetBrains Mono', monospace;
            margin-bottom: 20px;
            padding: 10px;
            border: 2px solid var(--text);
            display: inline-block;
            transform: rotate(-1deg);
        }

        .emoji-reactions {
            display: flex;
            gap: 5px;
            margin-top: 5px;
        }

        .emoji-reaction {
            cursor: pointer;
            padding: 2px 5px;
            border: 1px solid var(--text);
            border-radius: 10px;
            font-size: 12px;
        }

        /* Easter egg: Konami code triggers rainbow mode */
        .rainbow-mode {
            animation: rainbow 2s linear infinite;
        }

        @keyframes rainbow {
            0% { filter: hue-rotate(0deg); }
            100% { filter: hue-rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Auth screens -->
        <div id="welcome-screen" class="screen active">
            <h1>WTAF Chat 💬</h1>
            <p>Break something beautiful with friends</p>
            <button onclick="showNewUserScreen()">New User</button>
            <button onclick="showReturningUserScreen()">Returning User</button>
        </div>

        <div id="new-user-screen" class="screen">
            <h1>New User</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Start Chatting</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <div id="returning-user-screen" class="screen">
            <h1>Welcome Back</h1>
            <select id="user-label-select"></select>
            <input type="text" id="returning-passcode" placeholder="4-digit code" maxlength="4">
            <button onclick="loginReturningUser()">Enter Chat</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <!-- Main chat screen -->
        <div id="main-screen" class="screen">
            <div id="user-status">Logged in as <span id="current-user-label"></span></div>
            
            <div class="chat-container" id="messages">
                <!-- Messages will be inserted here -->
            </div>

            <div class="message-input">
                <input type="text" id="message-input" placeholder="Type something rebellious..." maxlength="280">
                <button onclick="sendMessage()">Send 🚀</button>
            </div>

            <button onclick="showScreen('welcome-screen')" style="margin-top: 20px">Leave Chat</button>
        </div>
    </div>

    <script>
        // Auth code (required)
        let currentUser = null;
        let konamiIndex = 0;
        const konamiCode = [38,38,40,40,37,39,37,39,66,65];

        async function generateNewUser() {
            const slots = await checkAvailableSlots();
            if (slots.isFull) {
                alert('Chat is full! (max 5 users)');
                return false;
            }
            
            const user = await generateUser();
            if (user?.success) {
                currentUser = user;
                document.getElementById('new-user-info').innerHTML = 
                    `Your ID: ${user.userLabel}<br>Code: ${user.passcode}<br>Save these!`;
                return true;
            }
            return false;
        }

        async function registerNewUser() {
            if (!currentUser) return;
            
            const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
            if (result?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                enterMainScreen();
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            await generateNewUser();
        }

        async function loginReturningUser() {
            const label = document.getElementById('user-label-select').value;
            const passcode = document.getElementById('returning-passcode').value;
            
            const result = await authenticateUser(label, passcode);
            if (result?.success) {
                currentUser = { userLabel: label, passcode, participantId: result.user.participantId };
                updateZadAuth(label, result.user.participantId);
                enterMainScreen();
            } else {
                alert('Wrong code!');
            }
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            if (screenId !== 'main-screen') stopPolling();
        }

        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const slots = await checkAvailableSlots();
            const select = document.getElementById('user-label-select');
            select.innerHTML = '<option>Select User</option>';
            slots.usedLabels.forEach(label => {
                select.innerHTML += `<option>${label}</option>`;
            });
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            document.getElementById('message-input').value = '';
            startPolling();
            loadLatestData();
        }

        // Chat specific code
        let pollingInterval;

        function startPolling() {
            loadLatestData();
            pollingInterval = setInterval(loadLatestData, 2000);
        }

        function stopPolling() {
            if (pollingInterval) clearInterval(pollingInterval);
        }

        async function sendMessage() {
            const input = document.getElementById('message-input');
            const text = input.value.trim();
            
            if (!text) return;

            await save('message', {
                text,
                timestamp: new Date().toISOString()
            });

            input.value = '';
            await loadLatestData();
        }

        function deduplicate(messages) {
            return messages.reduce((acc, msg) => {
                const existing = acc.find(m => 
                    m.text === msg.text && 
                    m.author === msg.author && 
                    Math.abs(new Date(m.created_at) - new Date(msg.created_at)) < 1000
                );
                
                if (!existing) {
                    acc.push(msg);
                }
                
                return acc;
            }, []);
        }

        async function loadLatestData() {
            const messages = await load('message');
            const uniqueMessages = deduplicate(messages);
            
            // Sort by timestamp
            uniqueMessages.sort((a, b) => new Date(a.created_at) - new Date(b.created_at));

            const container = document.getElementById('messages');
            container.innerHTML = uniqueMessages.map(msg => `
                <div class="message ${msg.author === getUsername() ? 'mine' : 'others'}">
                    <div class="author">${msg.author}</div>
                    ${msg.text}
                    <div class="emoji-reactions">
                        <span class="emoji-reaction" onclick="react('${msg.id}', '👍')">👍 0</span>
                        <span class="emoji-reaction" onclick="react('${msg.id}', '❤️')">❤️ 0</span>
                        <span class="emoji-reaction" onclick="react('${msg.id}', '😂')">😂 0</span>
                    </div>
                </div>
            `).join('');

            // Auto scroll to bottom
            container.scrollTop = container.scrollHeight;
        }

        // Easter egg: Konami code
        document.addEventListener('keydown', (e) => {
            if (e.keyCode === konamiCode[konamiIndex]) {
                konamiIndex++;
                if (konamiIndex === konamiCode.length) {
                    document.body.classList.toggle('rainbow-mode');
                    konamiIndex = 0;
                }
            } else {
                konamiIndex = 0;
            }
        });

        // Enter to send
        document.getElementById('message-input')?.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        // Initialize auth
        initAuth();
    </script>
</body>
</html>