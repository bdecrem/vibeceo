<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>Feature Ideas Board</title>
    <style>
        * { box-sizing: border-box; }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: #0a0a0a;
            color: #fff;
            margin: 0;
            padding: 10px;
            font-size: 16px;
        }

        .app-container {
            max-width: 800px;
            margin: 0 auto;
            background: #1a1a1a;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 0 40px rgba(0,0,0,0.5);
        }

        h1 {
            font-size: 24px;
            margin: 0 0 20px 0;
            text-align: center;
        }

        button {
            background: #ff0066;
            color: white;
            border: none;
            padding: 16px 24px;
            border-radius: 6px;
            font-weight: bold;
            cursor: pointer;
            margin: 8px 0;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-size: 16px;
            width: 100%;
            min-height: 44px;
            display: block;
        }

        button:hover { background: #ff3388; }
        button:active { transform: scale(0.98); }

        input, select, textarea {
            background: #2a2a2a;
            border: 1px solid #444;
            color: white;
            padding: 16px;
            border-radius: 6px;
            width: 100%;
            margin: 10px 0;
            font-size: 16px;
            min-height: 44px;
        }

        .screen { display: none; }
        .screen.active { display: block; }

        .idea-card {
            background: #2a2a2a;
            padding: 16px;
            margin: 10px 0;
            border-radius: 8px;
            min-height: 60px;
        }

        .idea-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
            font-size: 14px;
            color: #888;
        }

        .idea-text {
            font-size: 18px;
            margin: 10px 0;
        }

        .category-tag {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 14px;
            margin-right: 8px;
            background: #ff0066;
        }

        .reactions {
            display: flex;
            align-items: center;
            gap: 10px;
            margin: 10px 0;
        }

        .fire-button {
            background: transparent;
            border: 1px solid #ff0066;
            width: auto;
            padding: 8px 16px;
            margin: 0;
        }

        .comments {
            margin-top: 10px;
            padding-top: 10px;
            border-top: 1px solid #444;
        }

        .comment {
            padding: 8px;
            margin: 4px 0;
            background: #222;
            border-radius: 4px;
            font-size: 14px;
        }

        .filters {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .filters button {
            width: auto;
            padding: 8px 16px;
            margin: 0;
        }

        @media (min-width: 600px) {
            body { padding: 20px; }
            .app-container { padding: 30px; }
            
            button {
                width: auto;
                display: inline-block;
                margin: 5px;
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <div id="welcome-screen" class="screen active">
            <h1>Feature Ideas Board</h1>
            <p>Share and discuss feature ideas with the team!</p>
            <button onclick="showNewUserScreen()">New User</button>
            <button onclick="showReturningUserScreen()">Returning User</button>
        </div>
        
        <div id="new-user-screen" class="screen">
            <h1>New User</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Register & Enter</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="returning-user-screen" class="screen">
            <h1>Returning User</h1>
            <select id="user-label-select"></select>
            <input type="text" id="returning-passcode" placeholder="4-digit code" maxlength="4">
            <button onclick="loginReturningUser()">Login</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="main-screen" class="screen">
            <h1>Feature Ideas Board</h1>
            <div id="user-status">Welcome, <span id="current-user-label"></span>!</div>
            
            <div id="new-idea-form">
                <input type="text" id="idea-text" placeholder="Your feature idea (one line)" maxlength="200">
                <select id="idea-category">
                    <option value="UI/UX">UI/UX</option>
                    <option value="Performance">Performance</option>
                    <option value="Security">Security</option>
                    <option value="Features">Features</option>
                    <option value="Bug Fix">Bug Fix</option>
                    <option value="Other">Other</option>
                </select>
                <button onclick="submitIdea()">Post Idea</button>
            </div>

            <div class="filters">
                <button onclick="filterIdeas('all')">All Ideas</button>
                <button onclick="filterIdeas('top')">Top Rated</button>
                <button onclick="filterIdeas('UI/UX')">UI/UX</button>
                <button onclick="filterIdeas('Performance')">Performance</button>
                <button onclick="filterIdeas('Security')">Security</button>
                <button onclick="filterIdeas('Features')">Features</button>
                <button onclick="filterIdeas('Bug Fix')">Bug Fix</button>
                <button onclick="filterIdeas('Other')">Other</button>
            </div>

            <div id="ideas-container"></div>
            
            <button onclick="showScreen('welcome-screen')">Leave</button>
        </div>
    </div>

    <script>
        let currentUser = null;
        let currentFilter = 'all';

        async function generateNewUser() {
            const slots = await checkAvailableSlots();
            if (slots.isFull) {
                alert('App is full!');
                return false;
            }
            
            const user = await generateUser();
            if (user?.success) {
                currentUser = user;
                document.getElementById('new-user-info').innerHTML = 
                    `Your ID: ${user.userLabel}<br>Code: ${user.passcode}<br>Save these!`;
                return true;
            }
            return false;
        }

        async function registerNewUser() {
            if (!currentUser) return;
            
            const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
            if (result?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                enterMainScreen();
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            await generateNewUser();
        }

        async function loginReturningUser() {
            const label = document.getElementById('user-label-select').value;
            const passcode = document.getElementById('returning-passcode').value;
            
            const result = await authenticateUser(label, passcode);
            if (result?.success) {
                currentUser = { userLabel: label, passcode, participantId: result.user.participantId };
                updateZadAuth(label, result.user.participantId);
                enterMainScreen();
            } else {
                alert('Wrong code!');
            }
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            if (screenId !== 'main-screen') stopPolling();
        }

        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const slots = await checkAvailableSlots();
            const select = document.getElementById('user-label-select');
            select.innerHTML = '<option>Select User</option>';
            slots.usedLabels.forEach(label => {
                select.innerHTML += `<option>${label}</option>`;
            });
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            startPolling();
            loadLatestData();
        }

        let pollingInterval;

        function startPolling() {
            loadLatestData();
            pollingInterval = setInterval(loadLatestData, 2000);
        }

        function stopPolling() {
            if (pollingInterval) clearInterval(pollingInterval);
        }

        async function submitIdea() {
            const text = document.getElementById('idea-text').value.trim();
            const category = document.getElementById('idea-category').value;
            
            if (!text) return;
            
            await save('idea', {
                text,
                category,
                reactions: { "ðŸ”¥": 0 },
                comments: []
            });
            
            document.getElementById('idea-text').value = '';
            await loadLatestData();
        }

        async function addReaction(ideaId) {
            const ideas = await load('idea');
            const idea = ideas.find(i => i.id === parseInt(ideaId));
            if (idea) {
                const reactions = idea.reactions || {};
                reactions["ðŸ”¥"] = (reactions["ðŸ”¥"] || 0) + 1;
                
                await save('update_task', {
                    taskId: parseInt(ideaId),
                    updates: { reactions }
                });
                
                await loadLatestData();
            }
        }

        async function addComment(ideaId) {
            const commentText = document.getElementById(`comment-${ideaId}`).value.trim();
            if (!commentText) return;

            const ideas = await load('idea');
            const idea = ideas.find(i => i.id === parseInt(ideaId));
            if (idea) {
                const comments = idea.comments || [];
                comments.push({
                    text: commentText,
                    author: getCurrentUser(),
                    created_at: new Date().toISOString()
                });

                await save('update_task', {
                    taskId: parseInt(ideaId),
                    updates: { comments }
                });

                document.getElementById(`comment-${ideaId}`).value = '';
                await loadLatestData();
            }
        }

        function filterIdeas(filter) {
            currentFilter = filter;
            loadLatestData();
        }

        async function loadLatestData() {
            const ideas = await load('idea');
            
            let filteredIdeas = ideas;
            
            if (currentFilter === 'top') {
                filteredIdeas.sort((a, b) => (b.reactions?.["ðŸ”¥"] || 0) - (a.reactions?.["ðŸ”¥"] || 0));
            } else if (currentFilter !== 'all') {
                filteredIdeas = ideas.filter(idea => idea.category === currentFilter);
            }

            const container = document.getElementById('ideas-container');
            container.innerHTML = filteredIdeas.map(idea => `
                <div class="idea-card">
                    <div class="idea-header">
                        <span>${idea.author} Â· ${new Date(idea.created_at).toLocaleString()}</span>
                        <span class="category-tag">${idea.category}</span>
                    </div>
                    <div class="idea-text">${idea.text}</div>
                    <div class="reactions">
                        <button class="fire-button" onclick="addReaction(${idea.id})">
                            ðŸ”¥ ${idea.reactions?.["ðŸ”¥"] || 0}
                        </button>
                    </div>
                    <div class="comments">
                        ${(idea.comments || []).map(comment => `
                            <div class="comment">
                                <strong>${comment.author}</strong>: ${comment.text}
                            </div>
                        `).join('')}
                        <input type="text" id="comment-${idea.id}" placeholder="Add comment...">
                        <button onclick="addComment(${idea.id})">Comment</button>
                    </div>
                </div>
            `).join('');
        }

        initAuth();
    </script>
</body>
</html>