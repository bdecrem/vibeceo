<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>Idea Exchange</title>
    <style>
        /* Core WTAF Playful Modern Style V3 - Full style block omitted for brevity */
        :root {
            --bg: #000000;
            --surface: #0a0a0a;
            --surface-light: #141414;
            --accent: #ff0066;
            --accent-hover: #ff3388;
            --accent-alt: #ffff00;
            --text: #ffffff;
            --text-dim: #666666;
            --border: #1a1a1a;
            --space-xs: 8px;
            --space-sm: 12px;
            --space-md: 16px;
            --space-lg: 24px;
            --space-xl: 32px;
        }

        /* Include full CSS from style guide here */
        
        /* App-specific styles */
        .idea-card {
            background: var(--surface-light);
            padding: var(--space-md);
            margin: var(--space-md) 0;
            border-radius: 12px;
            border: 1px solid var(--border);
            position: relative;
        }

        .idea-text {
            font-size: 18px;
            margin-bottom: var(--space-sm);
            line-height: 1.4;
        }

        .idea-meta {
            color: var(--text-dim);
            font-size: 14px;
            margin-bottom: var(--space-sm);
        }

        .reaction-bar {
            display: flex;
            gap: var(--space-xs);
            margin-top: var(--space-sm);
        }

        .reaction-btn {
            background: var(--surface);
            border: 1px solid var(--border);
            color: var(--text);
            padding: 8px 12px;
            border-radius: 20px;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.2s ease;
            min-height: 44px;
            min-width: 44px;
        }

        .reaction-btn:hover {
            background: var(--surface-light);
            border-color: var(--accent);
        }

        .reaction-count {
            font-size: 12px;
            margin-left: 4px;
            color: var(--accent);
        }

        .comment-section {
            margin-top: var(--space-sm);
            padding-top: var(--space-sm);
            border-top: 1px solid var(--border);
        }

        .comment {
            font-size: 14px;
            color: var(--text-dim);
            font-style: italic;
            margin-top: var(--space-xs);
        }

        #idea-input {
            font-size: 18px;
        }

        .advisor-badge {
            background: var(--accent);
            color: white;
            padding: 2px 6px;
            border-radius: 4px;
            font-size: 12px;
            margin-left: 8px;
        }

        #comment-input {
            margin-right: var(--space-sm);
        }

        .comment-form {
            display: flex;
            gap: var(--space-sm);
            margin-top: var(--space-sm);
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Auth screens -->
        <div id="welcome-screen" class="screen active">
            <h1>Idea Exchange 💭</h1>
            <p>Share and discuss ideas with your advisor</p>
            <button onclick="showNewUserScreen()">New User</button>
            <button onclick="showReturningUserScreen()">Returning User</button>
        </div>

        <div id="new-user-screen" class="screen">
            <h1>New User</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Register & Enter</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <div id="returning-user-screen" class="screen">
            <h1>Welcome Back</h1>
            <select id="user-label-select"></select>
            <input type="text" id="returning-passcode" placeholder="4-digit code" maxlength="4">
            <button onclick="loginReturningUser()">Login</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <!-- Main app -->
        <div id="main-screen" class="screen">
            <div class="header">
                <h1 class="app-title">Idea Exchange <span>💭</span></h1>
                <div class="subtitle">Share and discuss ideas with your advisor</div>
            </div>

            <div class="user-status">
                Logged in as <strong id="current-user-label"></strong>
                <div class="status-indicator"></div>
            </div>

            <div class="content">
                <!-- Idea submission (only for students) -->
                <div id="idea-form" style="display: none;">
                    <input type="text" id="idea-input" 
                           placeholder="Share your idea..." 
                           maxlength="280">
                    <button onclick="submitIdea()">Share Idea</button>
                </div>

                <!-- Ideas list -->
                <div id="ideas-list"></div>
            </div>
        </div>
    </div>

    <script>
        // Auth code block (required)
        let currentUser = null;
        let isAdvisor = false;

        async function generateNewUser() {
            const slots = await checkAvailableSlots();
            if (slots.isFull) {
                alert('App is full!');
                return false;
            }
            const user = await generateUser();
            if (user?.success) {
                currentUser = user;
                document.getElementById('new-user-info').innerHTML = 
                    `Your ID: ${user.userLabel}<br>Code: ${user.passcode}<br>Save these!`;
                return true;
            }
            return false;
        }

        async function registerNewUser() {
            if (!currentUser) return;
            const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
            if (result?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                enterMainScreen();
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            await generateNewUser();
        }

        async function loginReturningUser() {
            const label = document.getElementById('user-label-select').value;
            const passcode = document.getElementById('returning-passcode').value;
            const result = await authenticateUser(label, passcode);
            if (result?.success) {
                currentUser = { userLabel: label, passcode, participantId: result.user.participantId };
                updateZadAuth(label, result.user.participantId);
                enterMainScreen();
            } else {
                alert('Wrong code!');
            }
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            if (screenId !== 'main-screen') stopPolling();
        }

        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const slots = await checkAvailableSlots();
            const select = document.getElementById('user-label-select');
            select.innerHTML = '<option>Select User</option>';
            slots.usedLabels.forEach(label => {
                select.innerHTML += `<option>${label}</option>`;
            });
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            isAdvisor = currentUser.userLabel.includes('advisor');
            document.getElementById('idea-form').style.display = isAdvisor ? 'none' : 'block';
            startPolling();
            loadLatestData();
        }

        // App-specific code
        async function submitIdea() {
            const input = document.getElementById('idea-input');
            const text = input.value.trim();
            
            if (text) {
                await save('idea', {
                    text,
                    reactions: {},
                    comments: []
                });
                
                input.value = '';
                await loadLatestData();
            }
        }

        async function addReaction(ideaId, emoji) {
            if (!isAdvisor) return; // Only advisor can react
            
            const ideas = await load('idea');
            const idea = ideas.find(i => i.id === parseInt(ideaId));
            
            if (idea) {
                const reactions = idea.reactions || {};
                reactions[emoji] = (reactions[emoji] || 0) + 1;
                
                await save('update_task', {
                    taskId: parseInt(ideaId),
                    updates: { reactions }
                });
                
                await loadLatestData();
            }
        }

        async function addComment(ideaId) {
            if (!isAdvisor) return; // Only advisor can comment
            
            const input = document.getElementById(`comment-${ideaId}`);
            const text = input.value.trim();
            
            if (text) {
                const ideas = await load('idea');
                const idea = ideas.find(i => i.id === parseInt(ideaId));
                
                if (idea) {
                    const comments = idea.comments || [];
                    comments.push({
                        text,
                        created_at: new Date().toISOString()
                    });
                    
                    await save('update_task', {
                        taskId: parseInt(ideaId),
                        updates: { comments }
                    });
                    
                    input.value = '';
                    await loadLatestData();
                }
            }
        }

        async function loadLatestData() {
            const ideas = await load('idea');
            
            // Sort by newest first
            ideas.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
            
            const html = ideas.map(idea => `
                <div class="idea-card">
                    <div class="idea-meta">
                        ${idea.author}
                        <span class="idea-time">${new Date(idea.created_at).toLocaleString()}</span>
                    </div>
                    <div class="idea-text">${idea.text}</div>
                    
                    <div class="reaction-bar">
                        ${['💡','🔥','🤔','👍'].map(emoji => `
                            <button onclick="addReaction(${idea.id}, '${emoji}')" 
                                    class="reaction-btn" 
                                    ${!isAdvisor ? 'disabled' : ''}>
                                ${emoji}
                                <span class="reaction-count">
                                    ${(idea.reactions && idea.reactions[emoji]) || 0}
                                </span>
                            </button>
                        `).join('')}
                    </div>

                    <div class="comment-section">
                        ${(idea.comments || []).map(comment => `
                            <div class="comment">${comment.text}</div>
                        `).join('')}
                        
                        ${isAdvisor ? `
                            <div class="comment-form">
                                <input type="text" 
                                       id="comment-${idea.id}" 
                                       placeholder="Add feedback...">
                                <button onclick="addComment(${idea.id})">Send</button>
                            </div>
                        ` : ''}
                    </div>
                </div>
            `).join('');
            
            document.getElementById('ideas-list').innerHTML = html;
        }

        // Polling setup
        let pollingInterval;

        function startPolling() {
            loadLatestData();
            pollingInterval = setInterval(loadLatestData, 2000);
        }

        function stopPolling() {
            if (pollingInterval) clearInterval(pollingInterval);
        }

        // Initialize
        initAuth();
    </script>
</body>
</html>