<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>WTAF Chat</title>
    <link href="https://fonts.googleapis.com/css2?family=Atkinson+Hyperlegible:wght@400;700&family=VT323&family=Work+Sans:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
/* WEBTOYS Design System CSS */
:root {
  --webtoys-bg: #FCFCF7;
  --webtoys-yellow: #FFD63D;
  --webtoys-blue: #4AC2FF;
  --webtoys-red: #FF4B4B;
  --webtoys-purple-shadow: #D3C2F9;
  --webtoys-purple-text: #A77EFF;
  --webtoys-green: #A9F7A6;
  --webtoys-text-primary: #333;
  --webtoys-text-secondary: #555;
  --webtoys-text-dark: #222;
}

* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  font-family: "Atkinson Hyperlegible", sans-serif;
  background: var(--webtoys-bg);
  color: var(--webtoys-text-primary);
  line-height: 1.6;
  font-size: 16px;
  padding: 1rem;
}

.cartridge, 
.app-container,
.chat-container, 
.screen {
  background: white;
  border: 4px solid var(--webtoys-yellow);
  border-radius: 1rem;
  box-shadow: 0 8px 0 var(--webtoys-purple-shadow);
  padding: 1.5rem;
  max-width: 480px;
  margin: 1rem auto;
}

h1, .chat-header {
  color: var(--webtoys-red);
  font-size: 1.5rem;
  text-align: center;
  margin-bottom: 1rem;
}

.retro-text, .message {
  font-family: "VT323", monospace;
}

button {
  background: var(--webtoys-blue);
  border: none;
  border-radius: 1rem;
  padding: 0.75rem 1.5rem;
  color: white;
  font-size: 1rem;
  font-family: "Work Sans", sans-serif;
  cursor: pointer;
  transition: transform 0.2s ease;
  min-height: 44px;
  width: 100%;
  display: block;
  margin: 8px 0;
}

button:active {
  transform: scale(0.96);
}

input[type="text"], 
input[type="password"], 
select {
  padding: 0.75rem;
  border: 2px solid var(--webtoys-blue);
  border-radius: 1rem;
  font-size: 1rem;
  font-family: "Work Sans", sans-serif;
  width: 100%;
  margin: 10px 0;
  min-height: 44px;
}

.messages {
  background: #F6F6F6;
  border-radius: 0.75rem;
  padding: 1rem;
  margin-bottom: 1rem;
  height: 400px;
  overflow-y: auto;
}

.message {
  padding: 0.75rem 1rem;
  border-radius: 1rem;
  margin-bottom: 0.75rem;
  max-width: 80%;
  font-size: 1.2rem;
}

.message.own {
  background: var(--webtoys-blue);
  color: white;
  margin-left: auto;
}

.message.other {
  background: var(--webtoys-yellow);
  color: var(--webtoys-text-primary);
}

.message-info {
  font-size: 0.8rem;
  opacity: 0.8;
  margin-bottom: 0.25rem;
}

.screen { 
  display: none; 
}

.screen.active { 
  display: block; 
}

#user-status {
  text-align: center;
  padding: 0.5rem;
  background: var(--webtoys-green);
  border-radius: 0.5rem;
  margin-bottom: 1rem;
}

.typing-indicator {
  color: var(--webtoys-purple-text);
  font-style: italic;
  margin: 0.5rem 0;
  height: 1.2rem;
}

@media (min-width: 600px) {
  button { 
    width: auto; 
    display: inline-block;
    margin: 5px;
  }
}
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Welcome Screen -->
        <div id="welcome-screen" class="screen active">
            <h1>WTAF Chat ðŸ’¬</h1>
            <div class="sprite">
                â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®<br>
                â”‚ Welcome! â”‚<br>
                â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯
            </div>
            <button onclick="showNewUserScreen()">New User</button>
            <button onclick="showReturningUserScreen()">Returning User</button>
        </div>

        <!-- New User Screen -->
        <div id="new-user-screen" class="screen">
            <h1>New User</h1>
            <div id="new-user-info" class="retro-text"></div>
            <button onclick="registerNewUser()">Start Chatting</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <!-- Returning User Screen -->
        <div id="returning-user-screen" class="screen">
            <h1>Welcome Back!</h1>
            <select id="user-label-select"></select>
            <input type="text" id="returning-passcode" placeholder="Enter your 4-digit code" maxlength="4">
            <button onclick="loginReturningUser()">Start Chatting</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <!-- Main Chat Screen -->
        <div id="main-screen" class="screen">
            <div id="user-status">Chatting as <span id="current-user-label"></span></div>
            <div class="messages" id="messages"></div>
            <div class="typing-indicator" id="typing-indicator"></div>
            <div class="input-area">
                <input type="text" id="message-input" placeholder="Type your message..." maxlength="280">
                <button onclick="sendMessage()">Send</button>
                <button onclick="showScreen('welcome-screen')">Leave Chat</button>
            </div>
        </div>
    </div>

    <script>
        let currentUser = null;
        let pollingInterval;
        let typingTimeout;

        // Initialize auth system
        initAuth();

        // Handle enter key for sending messages
        document.getElementById('message-input').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        // Handle typing indicator
        document.getElementById('message-input').addEventListener('input', function() {
            clearTimeout(typingTimeout);
            save('typing', { typing: true });
            
            typingTimeout = setTimeout(() => {
                save('typing', { typing: false });
            }, 1000);
        });

        async function sendMessage() {
            const input = document.getElementById('message-input');
            const message = input.value.trim();
            
            if (message) {
                await save('message', { text: message });
                input.value = '';
                await loadLatestData();
            }
        }

        async function loadLatestData() {
            const messages = await load('message');
            const typing = await load('typing');
            
            // Show messages
            const messagesDiv = document.getElementById('messages');
            messagesDiv.innerHTML = messages
                .sort((a, b) => new Date(a.created_at) - new Date(b.created_at))
                .map(msg => {
                    const isOwn = msg.author === currentUser.userLabel;
                    const time = new Date(msg.created_at).toLocaleTimeString();
                    return `
                        <div class="message ${isOwn ? 'own' : 'other'}">
                            <div class="message-info">${msg.author} â€¢ ${time}</div>
                            ${msg.text}
                        </div>
                    `;
                })
                .join('');
            
            // Auto-scroll to bottom
            messagesDiv.scrollTop = messagesDiv.scrollHeight;

            // Show typing indicator
            const typingUsers = typing
                .filter(t => t.typing && t.author !== currentUser.userLabel)
                .map(t => t.author);
            
            const typingDiv = document.getElementById('typing-indicator');
            if (typingUsers.length > 0) {
                typingDiv.textContent = `${typingUsers.join(', ')} is typing...`;
            } else {
                typingDiv.textContent = '';
            }
        }

        function startPolling() {
            pollingInterval = setInterval(() => loadLatestData(), 2000);
        }

        function stopPolling() {
            if (pollingInterval) clearInterval(pollingInterval);
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            startPolling();
            loadLatestData();
        }

        // Auth flow functions
        async function generateNewUser() {
            const slots = await checkAvailableSlots();
            if (slots.isFull) {
                alert('Chat is full! Maximum 5 users.');
                return false;
            }
            
            const user = await generateUser();
            if (user?.success) {
                currentUser = user;
                document.getElementById('new-user-info').innerHTML = 
                    `Your Chat ID: ${user.userLabel}<br>Code: ${user.passcode}<br>Save these to log back in later!`;
                return true;
            }
            return false;
        }

        async function registerNewUser() {
            if (!currentUser) return;
            
            const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
            if (result?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                enterMainScreen();
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            await generateNewUser();
        }

        async function loginReturningUser() {
            const label = document.getElementById('user-label-select').value;
            const passcode = document.getElementById('returning-passcode').value;
            
            const result = await authenticateUser(label, passcode);
            if (result?.success) {
                currentUser = { userLabel: label, passcode, participantId: result.user.participantId };
                updateZadAuth(label, result.user.participantId);
                enterMainScreen();
            } else {
                alert('Wrong code! Try again.');
            }
        }

        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const slots = await checkAvailableSlots();
            const select = document.getElementById('user-label-select');
            select.innerHTML = '<option value="">Select Your Chat ID</option>';
            slots.usedLabels.forEach(label => {
                select.innerHTML += `<option value="${label}">${label}</option>`;
            });
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            if (screenId !== 'main-screen') stopPolling();
        }
    </script>
</body>
</html>