I'll create a chat app with emoji reactions using the MIDNIGHT theme for a cyberpunk feel. Here's the complete app:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>NEON CHAT</title>
    <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=JetBrains+Mono&display=swap" rel="stylesheet">
    <style>
        :root {
            --bg: #0A0A0A;
            --text: #FFFFFF;
            --border: #00FF88;
            --shadow: #FF00FF;
            --card: #111111;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Space Grotesk', system-ui, sans-serif;
            background: var(--bg);
            color: var(--text);
            line-height: 1.6;
            font-size: 16px;
        }

        .screen {
            display: none;
            padding: 20px;
            min-height: 100vh;
        }

        .screen.active {
            display: block;
        }

        h1 {
            font-size: 40px;
            text-transform: uppercase;
            margin-bottom: 20px;
            transform: rotate(-2deg);
            color: var(--border);
            text-shadow: 2px 2px var(--shadow);
        }

        button {
            background: var(--border);
            border: none;
            color: var(--bg);
            padding: 15px 30px;
            font-size: 18px;
            font-weight: bold;
            margin: 10px 0;
            cursor: pointer;
            transform: translateY(0);
            transition: transform 0.2s;
            width: 100%;
            height: 50px;
            text-transform: uppercase;
            font-family: 'Space Grotesk', system-ui, sans-serif;
        }

        button:hover {
            transform: translateY(-2px);
        }

        button:active {
            transform: translateY(2px);
        }

        input, select {
            width: 100%;
            padding: 12px;
            margin: 10px 0;
            background: var(--card);
            border: 3px solid var(--border);
            color: var(--text);
            font-family: 'JetBrains Mono', monospace;
            font-size: 16px;
            height: 50px;
        }

        .chat-container {
            max-width: 666px;
            margin: 0 auto;
            padding: 20px;
            height: calc(100vh - 200px);
            display: flex;
            flex-direction: column;
        }

        .messages {
            flex-grow: 1;
            overflow-y: auto;
            margin-bottom: 20px;
            padding: 10px;
            border: 3px solid var(--border);
            background: var(--card);
        }

        .message {
            margin: 10px 0;
            padding: 10px;
            border-radius: 4px;
            max-width: 80%;
            position: relative;
        }

        .message.mine {
            margin-left: auto;
            background: var(--border);
            color: var(--bg);
        }

        .message.others {
            margin-right: auto;
            background: var(--shadow);
            color: var(--text);
        }

        .author {
            font-size: 12px;
            opacity: 0.8;
            margin-bottom: 4px;
        }

        .reactions {
            display: flex;
            gap: 5px;
            margin-top: 5px;
        }

        .reaction {
            padding: 2px 5px;
            border-radius: 12px;
            background: var(--card);
            border: 1px solid var(--border);
            cursor: pointer;
            font-size: 14px;
        }

        .reaction-count {
            margin-left: 3px;
            font-size: 12px;
        }

        .reaction-picker {
            display: none;
            position: absolute;
            bottom: 100%;
            left: 0;
            background: var(--card);
            border: 2px solid var(--border);
            padding: 5px;
            gap: 5px;
            flex-wrap: wrap;
            width: 200px;
        }

        .reaction-picker.active {
            display: flex;
        }

        .emoji-btn {
            cursor: pointer;
            padding: 5px;
            border-radius: 4px;
        }

        .emoji-btn:hover {
            background: var(--border);
        }

        #floating-emoji {
            position: fixed;
            bottom: 20px;
            right: 20px;
            font-size: 40px;
            cursor: pointer;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }

        @keyframes emojiRain {
            0% { transform: translateY(-100vh) rotate(0deg); }
            100% { transform: translateY(100vh) rotate(360deg); }
        }

        .raining-emoji {
            position: fixed;
            font-size: 24px;
            pointer-events: none;
            animation: emojiRain 3s linear forwards;
        }
    </style>
</head>
<body>
    <div class="app-container">
        <div id="welcome-screen" class="screen active">
            <h1>NEON CHAT üí¨</h1>
            <p>Chat with friends in cyberpunk style!</p>
            <button onclick="showNewUserScreen()">New User</button>
            <button onclick="showReturningUserScreen()">Returning User</button>
        </div>

        <div id="new-user-screen" class="screen">
            <h1>New User</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Enter The Matrix</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <div id="returning-user-screen" class="screen">
            <h1>Return To Chat</h1>
            <select id="user-label-select"></select>
            <input type="text" id="returning-passcode" placeholder="4-digit code" maxlength="4">
            <button onclick="loginReturningUser()">Jack In</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <div id="main-screen" class="screen">
            <div class="chat-container">
                <h1>NEON CHAT</h1>
                <div id="user-status">Connected as <span id="current-user-label"></span></div>
                <div id="messages" class="messages"></div>
                <div class="input-area">
                    <input type="text" id="message-input" placeholder="Type your message..." onkeypress="if(event.key === 'Enter') sendMessage()">
                    <button onclick="sendMessage()">SEND üì°</button>
                </div>
                <button onclick="showScreen('welcome-screen')">Disconnect</button>
            </div>
        </div>
    </div>
    <div id="floating-emoji" onclick="triggerEmojiRain()">üí¨</div>

    <script>
        let currentUser = null;
        const REACTION_EMOJIS = ['‚ù§Ô∏è', 'üëç', 'üòÇ', 'üî•', '‚ú®', 'üöÄ'];

        // Auth flow functions (provided in template)
        async function generateNewUser() {
            const slots = await checkAvailableSlots();
            if (slots.isFull) {
                alert('Matrix is full!');
                return false;
            }
            const user = await generateUser();
            if (user?.success) {
                currentUser = user;
                document.getElementById('new-user-info').innerHTML = 
                    `Your ID: ${user.userLabel}<br>Code: ${user.passcode}<br>Save these!`;
                return true;
            }
            return false;
        }

        async function registerNewUser() {
            if (!currentUser) return;
            const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
            if (result?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                enterMainScreen();
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            await generateNewUser();
        }

        async function loginReturningUser() {
            const label = document.getElementById('user-label-select').value;
            const passcode = document.getElementById('returning-passcode').value;
            const result = await authenticateUser(label, passcode);
            if (result?.success) {
                currentUser = { userLabel: label, passcode, participantId: result.user.participantId };
                updateZadAuth(label, result.user.participantId);
                enterMainScreen();
            } else {
                alert('Invalid code!');
            }
        }

        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const slots = await checkAvailableSlots();
            const select = document.getElementById('user-label-select');
            select.innerHTML = '<option>Select User</option>';
            slots.usedLabels.forEach(label => {
                select.innerHTML += `<option>${label}</option>`;
            });
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            if (screenId !== 'main-screen') stopPolling();
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            startPolling();
            loadLatestData();
        }

        // Chat-specific functions
        async function sendMessage() {
            const input = document.getElementById('message-input');
            const text = input.value.trim();
            
            if (text) {
                await save('message', {
                    text,
                    reactions: {}
                });
                input.value = '';
                await loadLatestData();
            }
        }

        async function toggleReaction(messageId, emoji) {
            const messages = await load('message');
            const message = messages.find(m => m.id === messageId);
            
            if (message) {
                const reactions = message.reactions || {};
                const currentReactors = reactions[emoji] || [];
                const username = getUsername();
                
                if (currentReactors.includes(username)) {
                    reactions[emoji] = currentReactors.filter(u => u !== username);
                } else {
                    reactions[emoji] = [...currentReactors, username];
                }
                
                await save('message', {
                    ...message,
                    reactions
                });
                
                await loadLatestData();
            }
        }

        function showReactionPicker(messageId) {
            const picker = document.querySelector(`#reaction-picker-${messageId}`);
            picker.classList.toggle('active');
        }

        function deduplicate(items) {
            return items.reduce((acc, item) => {
                const existing = acc.find(i => i.text === item.text && i.author === item.author);
                if (!existing || new Date(item.created_at) > new Date(existing.created_at)) {
                    if (existing) {
                        const index = acc.indexOf(existing);
                        acc[index] = item;
                    } else {
                        acc.push(item);
                    }
                }
                return acc;
            }, []);
        }

        async function loadLatestData() {
            const messages = await load('message');
            const uniqueMessages = deduplicate(messages);
            
            const container = document.getElementById('messages');
            container.innerHTML = uniqueMessages.map(message => {
                const isMine = message.author === getUsername();
                const reactions = message.reactions || {};
                
                const reactionHtml = Object.entries(reactions)
                    .filter(([_, users]) => users.length > 0)
                    .map(([emoji, users]) => `
                        <span class="reaction" onclick="toggleReaction(${message.id}, '${emoji}')">
                            ${emoji}<span class="reaction-count">${users.length}</span>
                        </span>
                    `).join('');

                const pickerHtml = `
                    <div id="reaction-picker-${message.id}" class="reaction-picker">
                        ${REACTION_EMOJIS.map(emoji => `
                            <span class="emoji-btn" onclick="toggleReaction(${message.id}, '${emoji}')">${emoji}</span>
                        `).join('')}
                    </div>
                `;

                return `
                    <div class="message ${isMine ? 'mine' : 'others'}">
                        <div class="author">${message.author}</div>
                        <div class="text">${message.text}</div>
                        <div class="reactions">
                            ${reactionHtml}
                            <span class="reaction" onclick="showReactionPicker(${message.id})">+</span>
                        </div>
                        ${pickerHtml}
                    </div>
                `;
            }).join('');
            
            container.scrollTop = container.scrollHeight;
        }

        let pollingInterval;
        function startPolling() {
            loadLatestData();
            pollingInterval = setInterval(loadLatestData, 2000);
        }

        function stopPolling() {
            if (pollingInterval) clearInterval(pollingInterval);
        }

        function triggerEmojiRain() {
            for (let i = 0; i < 20; i++) {
                setTimeout(() => {
                    const emoji = document.createElement('div');
                    emoji.className = 'raining-emoji';
                    emoji.textContent = REACTION_EMOJIS[Math.floor(Math.random() * REACTION_EMOJIS.length)];
                    emoji.style.left = `${Math.random() * 100}vw`;
                    document.body.appendChild(emoji);
                    setTimeout(() => emoji.remove(), 3000);
                }, i * 150);
            }
        }

        initAuth();
    </script>
</body>
</html>