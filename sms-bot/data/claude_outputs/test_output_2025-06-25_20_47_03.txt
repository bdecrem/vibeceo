Creating a mobile-first Snake game that meets all the specified requirements is a comprehensive task. Below is a complete HTML file that incorporates the game using embedded CSS and JavaScript. The game is designed to be responsive, supports touch controls, and uses localStorage for scoring.

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>Snake Game</title>
    <style>
        body, html {
            margin: 0;
            padding: 0;
            overflow: hidden;
            touch-action: manipulation;
            -webkit-user-select: none;
            -webkit-touch-callout: none;
        }
        canvas {
            display: block;
            background-color: #000;
        }
        #controls {
            position: absolute;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 10px;
        }
        .control-button {
            width: 44px;
            height: 44px;
            background-color: #444;
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 18px;
            text-align: center;
            line-height: 44px;
        }
        #modal {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 20px;
            border-radius: 10px;
            display: none;
            text-align: center;
        }
        #modal button {
            margin-top: 10px;
            padding: 10px;
            border: none;
            border-radius: 5px;
            background-color: #444;
            color: white;
            font-size: 16px;
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas"></canvas>
    <div id="controls">
        <button class="control-button" id="up">↑</button>
        <button class="control-button" id="left">←</button>
        <button class="control-button" id="right">→</button>
        <button class="control-button" id="down">↓</button>
        <button class="control-button" id="pause">||</button>
    </div>
    <div id="modal">
        <p id="modalMessage"></p>
        <button id="restartBtn">Restart</button>
    </div>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        let snake = [{x: 10, y: 10}];
        let direction = {x: 1, y: 0};
        let food = {x: 15, y: 15};
        let tileSize = 20;
        let snakeLength = 5;
        let score = 0;
        let gamePaused = false;
        let gameOver = false;

        const modal = document.getElementById('modal');
        const modalMessage = document.getElementById('modalMessage');
        const restartBtn = document.getElementById('restartBtn');

        function setup() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            window.addEventListener('resize', onResize);
            window.addEventListener('keydown', handleKeyDown);
            document.getElementById('up').addEventListener('click', () => setDirection(0, -1));
            document.getElementById('down').addEventListener('click', () => setDirection(0, 1));
            document.getElementById('left').addEventListener('click', () => setDirection(-1, 0));
            document.getElementById('right').addEventListener('click', () => setDirection(1, 0));
            document.getElementById('pause').addEventListener('click', togglePause);
            restartBtn.addEventListener('click', restartGame);
            requestAnimationFrame(gameLoop);
        }

        function gameLoop() {
            if (!gamePaused && !gameOver) {
                update();
                draw();
            }
            requestAnimationFrame(gameLoop);
        }

        function update() {
            const head = {x: snake[0].x + direction.x, y: snake[0].y + direction.y};
            if (head.x === food.x && head.y === food.y) {
                snakeLength++;
                score++;
                placeFood();
            }
            snake.unshift(head);
            if (snake.length > snakeLength) {
                snake.pop();
            }
            if (head.x < 0 || head.x >= canvas.width / tileSize || head.y < 0 || head.y >= canvas.height / tileSize || isSnakeCollision(head)) {
                gameOver = true;
                showModal('Game Over!');
                localStorage.setItem('snakeHighScore', Math.max(score, getHighScore()));
            }
        }

        function draw() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.fillStyle = 'lime';
            snake.forEach(part => ctx.fillRect(part.x * tileSize, part.y * tileSize, tileSize, tileSize));
            ctx.fillStyle = 'red';
            ctx.fillRect(food.x * tileSize, food.y * tileSize, tileSize, tileSize);
            ctx.fillStyle = 'white';
            ctx.font = '20px Arial';
            ctx.fillText(`Score: ${score}`, 10, 30);
            ctx.fillText(`High Score: ${getHighScore()}`, 10, 60);
        }

        function onResize() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        }

        function handleKeyDown(e) {
            switch (e.key) {
                case 'ArrowUp':
                    setDirection(0, -1);
                    break;
                case 'ArrowDown':
                    setDirection(0, 1);
                    break;
                case 'ArrowLeft':
                    setDirection(-1, 0);
                    break;
                case 'ArrowRight':
                    setDirection(1, 0);
                    break;
                case ' ':
                    togglePause();
                    break;
            }
        }

        function setDirection(x, y) {
            if (!gamePaused && !gameOver) {
                direction = {x, y};
            }
        }

        function togglePause() {
            gamePaused = !gamePaused;
            showModal(gamePaused ? 'Paused' : '');
        }

        function isSnakeCollision(head) {
            return snake.some(part => part.x === head.x && part.y === head.y);
        }

        function placeFood() {
            food = {
                x: Math.floor(Math.random() * canvas.width / tileSize),
                y: Math.floor(Math.random() * canvas.height / tileSize)
            };
        }

        function showModal(message) {
            modalMessage.textContent = message;
            modal.style.display = message ? 'block' : 'none';
        }

        function getHighScore() {
            return localStorage.getItem('snakeHighScore') || 0;
        }

        function restartGame() {
            snake = [{x: 10, y: 10}];
            direction = {x: 1, y: 0};
            snakeLength = 5;
            score = 0;
            gameOver = false;
            showModal('');
            placeFood();
        }

        setup();
    </script>
</body>
</html>
```

### Key Features:
- **Responsive Design:** The canvas resizes with window changes, maintaining a full viewport without scrolling.
- **Touch Controls:** Buttons emulate arrow keys for direction control and spacebar for pause.
- **Local Storage:** Stores the high score to maintain persistence across sessions.
- **Pause/Resume:** Allows pausing and resuming with appropriate state handling.
- **Custom Modal:** Replaces browser alerts with a custom modal system for better user experience on mobile devices.
- **High Frame Rate:** Uses `requestAnimationFrame` for smooth animation.

This HTML file is meant to be a standalone solution. Simply save it as an `.html` file and open it in a browser to play the game.