<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>KPop Chat</title>
    <style>
        :root {
            --bg: #000000;
            --surface: #0a0a0a;
            --surface-light: #141414;
            --accent: #ff0066;
            --accent-hover: #ff3388;
            --accent-alt: #ffff00;
            --text: #ffffff;
            --text-dim: #666666;
            --border: #1a1a1a;
            --space-xs: 8px;
            --space-sm: 12px;
            --space-md: 16px;
            --space-lg: 24px;
            --space-xl: 32px;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
            background: var(--bg);
            color: var(--text);
            line-height: 1.6;
            font-size: 16px;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }

        .app-container {
            max-width: 800px;
            margin: 0 auto;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            background: var(--surface);
            position: relative;
            overflow: hidden;
        }

        .app-container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 2px;
            background: linear-gradient(90deg, var(--accent) 0%, var(--accent-alt) 25%, var(--accent) 50%, var(--accent-alt) 75%, var(--accent) 100%);
            background-size: 200% 100%;
            animation: slide 3s linear infinite;
        }

        @keyframes slide {
            0% { background-position: 0% 0%; }
            100% { background-position: 200% 0%; }
        }

        .header {
            background: var(--surface-light);
            padding: var(--space-md) var(--space-lg);
            border-bottom: 1px solid var(--border);
        }

        .app-title {
            font-size: 20px;
            font-weight: 900;
            letter-spacing: -0.5px;
            text-transform: uppercase;
        }

        .app-title span {
            color: var(--accent);
        }

        .content {
            flex: 1;
            padding: var(--space-lg);
            overflow-y: auto;
        }

        .user-status {
            background: var(--surface-light);
            padding: var(--space-sm) var(--space-lg);
            font-size: 14px;
            color: var(--text-dim);
            border-bottom: 1px solid var(--border);
            display: flex;
            align-items: center;
            gap: var(--space-sm);
        }

        .user-status strong {
            color: var(--accent);
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        h1, h2 {
            font-weight: 900;
            letter-spacing: -0.5px;
            text-transform: uppercase;
            margin: 0 0 var(--space-md) 0;
        }

        h1 {
            font-size: 24px;
        }

        h1 span {
            color: var(--accent);
        }

        h2 {
            font-size: 18px;
            font-weight: 700;
        }

        button {
            background: var(--accent);
            color: white;
            border: none;
            padding: var(--space-sm) var(--space-lg);
            border-radius: 8px;
            font-size: 16px;
            font-weight: 700;
            cursor: pointer;
            transition: all 0.2s ease;
            white-space: nowrap;
            font-family: inherit;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            position: relative;
            overflow: hidden;
            min-height: 44px;
            width: 100%;
            display: block;
            margin: 8px 0;
        }

        button::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s;
        }

        button:hover::before {
            left: 100%;
        }

        button:hover {
            background: var(--accent-hover);
            transform: translateY(-2px) scale(1.02);
            box-shadow: 0 4px 12px rgba(255, 0, 102, 0.3);
        }

        button:active {
            transform: translateY(0) scale(0.98);
        }

        input, select, textarea {
            background: var(--surface);
            border: 2px solid var(--border);
            color: var(--text);
            padding: var(--space-sm) var(--space-md);
            border-radius: 8px;
            font-size: 16px;
            font-family: inherit;
            transition: all 0.2s ease;
            width: 100%;
            margin: 10px 0;
            min-height: 44px;
        }

        input:focus, select:focus, textarea:focus {
            outline: none;
            border-color: var(--accent);
            background: var(--surface-light);
            box-shadow: 0 0 0 3px rgba(255, 0, 102, 0.1);
        }

        .message {
            display: flex;
            gap: var(--space-sm);
            margin: var(--space-md) 0;
            animation: fadeIn 0.3s ease;
        }

        .message-bubble {
            background: var(--surface-light);
            padding: var(--space-sm) var(--space-md);
            border-radius: 16px 16px 16px 4px;
            max-width: 70%;
            border: 1px solid var(--border);
            position: relative;
        }

        .message.own {
            flex-direction: row-reverse;
        }

        .message.own .message-bubble {
            background: var(--accent);
            border-color: var(--accent);
            border-radius: 16px 16px 4px 16px;
            box-shadow: 0 0 20px rgba(255, 0, 102, 0.2);
        }

        .message-author {
            font-size: 12px;
            font-weight: 700;
            margin-bottom: 4px;
            color: var(--text-dim);
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .message.own .message-author {
            color: rgba(255, 255, 255, 0.8);
        }

        .message-text {
            word-wrap: break-word;
        }

        .message-time {
            font-size: 11px;
            color: var(--text-dim);
            margin-top: 4px;
            font-variant-numeric: tabular-nums;
        }

        .message.own .message-time {
            color: rgba(255, 255, 255, 0.6);
        }

        .screen {
            display: none;
            animation: fadeIn 0.3s ease;
        }

        .screen.active {
            display: block;
        }

        @media (max-width: 600px) {
            .header {
                padding: var(--space-md);
            }

            .content {
                padding: var(--space-md);
            }

            .message-bubble {
                max-width: 85%;
            }
        }

        @media (min-width: 600px) {
            body {
                padding: 20px;
            }

            .app-container {
                border-radius: 16px;
            }

            button {
                width: auto;
                display: inline-block;
                margin: 5px;
            }
        }

        ::-webkit-scrollbar {
            width: 8px;
        }

        ::-webkit-scrollbar-track {
            background: var(--surface);
        }

        ::-webkit-scrollbar-thumb {
            background: var(--accent);
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: var(--accent-hover);
        }
    </style>
</head>
<body>
<div class="app-container">
    <div id="welcome-screen" class="screen active">
        <h1>Welcome to KPop Chat</h1>
        <p>Discuss your favorite KPop artists with friends! ðŸŽ¶</p>
        <button onclick="showNewUserScreen()">New User</button>
        <button onclick="showReturningUserScreen()">Returning User</button>
    </div>
    
    <div id="new-user-screen" class="screen">
        <h1>New User</h1>
        <div id="new-user-info"></div>
        <button onclick="registerNewUser()">Register & Enter</button>
        <button onclick="showScreen('welcome-screen')">Back</button>
    </div>
    
    <div id="returning-user-screen" class="screen">
        <h1>Returning User</h1>
        <select id="user-label-select"></select>
        <input type="text" id="returning-passcode" placeholder="4-digit code" maxlength="4">
        <button onclick="loginReturningUser()">Login</button>
        <button onclick="showScreen('welcome-screen')">Back</button>
    </div>
    
    <div id="main-screen" class="screen">
        <h1>KPop Chat</h1>
        <div id="user-status">Welcome, <span id="current-user-label"></span>!</div>
        
        <div id="app-content">
            <div class="content" id="chat-content">
                <!-- Chat messages will be appended here -->
            </div>
            <input type="text" id="chat-input" placeholder="Type a message...">
            <button onclick="sendMessage()">Send</button>
        </div>
        
        <button onclick="showScreen('welcome-screen')">Leave</button>
    </div>
</div>

<script>
    let currentUser = null;

    async function generateNewUser() {
        const slots = await checkAvailableSlots();
        if (slots.isFull) {
            alert('App is full!');
            return false;
        }
        
        const user = await generateUser();
        if (user?.success) {
            currentUser = user;
            document.getElementById('new-user-info').innerHTML = 
              `Your ID: ${user.userLabel}<br>Code: ${user.passcode}<br>Save these!`;
            return true;
        }
        return false;
    }

    async function registerNewUser() {
        if (!currentUser) return;
        
        const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
        if (result?.success) {
            updateZadAuth(currentUser.userLabel, currentUser.participantId);
            enterMainScreen();
        }
    }

    async function showNewUserScreen() {
        showScreen('new-user-screen');
        await generateNewUser();
    }

    async function loginReturningUser() {
        const label = document.getElementById('user-label-select').value;
        const passcode = document.getElementById('returning-passcode').value;
        
        const result = await authenticateUser(label, passcode);
        if (result?.success) {
            currentUser = { userLabel: label, passcode, participantId: result.user.participantId };
            updateZadAuth(label, result.user.participantId);
            enterMainScreen();
        } else {
            alert('Wrong code!');
        }
    }

    function showScreen(screenId) {
        document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
        document.getElementById(screenId).classList.add('active');
        if (screenId !== 'main-screen') stopPolling();
    }

    async function showReturningUserScreen() {
        showScreen('returning-user-screen');
        const slots = await checkAvailableSlots();
        const select = document.getElementById('user-label-select');
        select.innerHTML = '<option>Select User</option>';
        slots.usedLabels.forEach(label => {
            select.innerHTML += `<option>${label}</option>`;
        });
    }

    function enterMainScreen() {
        showScreen('main-screen');
        document.getElementById('current-user-label').textContent = currentUser.userLabel;
        startPolling();
        loadLatestData();
    }

    async function sendMessage() {
        const messageInput = document.getElementById('chat-input');
        const messageText = messageInput.value.trim();
        if (messageText) {
            await save('chat', { text: messageText });
            messageInput.value = '';
        }
    }

    async function loadLatestData() {
        const messages = await load('chat');
        updateUI(messages);
    }

    function updateUI(messages) {
        const chatContent = document.getElementById('chat-content');
        chatContent.innerHTML = '';
        messages.forEach(msg => {
            const isOwnMessage = msg.author === currentUser.userLabel;
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${isOwnMessage ? 'own' : ''}`;
            messageDiv.innerHTML = `
                <div class="message-bubble">
                    <div class="message-author">${msg.author}</div>
                    <div class="message-text">${msg.text}</div>
                    <div class="message-time">${new Date(msg.created_at).toLocaleTimeString()}</div>
                </div>
            `;
            chatContent.appendChild(messageDiv);
        });
        chatContent.scrollTop = chatContent.scrollHeight;
    }

    let pollingInterval;

    function startPolling() {
        pollingInterval = setInterval(() => loadLatestData(), 2000);
    }

    function stopPolling() {
        if (pollingInterval) clearInterval(pollingInterval);
    }

    const USER_LABELS = ['user1ðŸŽ¯', 'user2âš¡', 'user3ðŸŒŸ', 'user4ðŸ”¥', 'user5ðŸ’Ž'];

    initAuth();
</script>
</body>
</html>