<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>Advisor Ideas</title>
    <style>
        /* Core variables - Dark UI with personality */
        :root {
            --bg: #000000;
            --surface: #0a0a0a;
            --surface-light: #141414;
            --accent: #ff0066;
            --accent-hover: #ff3388;
            --accent-alt: #00ffcc;
            --text: #ffffff;
            --text-dim: #666666;
            --border: #1a1a1a;
            --space-xs: 8px;
            --space-sm: 12px;
            --space-md: 16px;
            --space-lg: 24px;
            --space-xl: 32px;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
            background: var(--bg);
            color: var(--text);
            line-height: 1.6;
            font-size: 16px;
            -webkit-font-smoothing: antialiased;
        }

        .app-container {
            max-width: 800px;
            margin: 0 auto;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            background: var(--surface);
            position: relative;
            overflow: hidden;
        }

        /* Auth screens & core styling from template */
        .screen { display: none; }
        .screen.active { display: block; }

        /* Idea Card Styling */
        .idea-card {
            background: var(--surface-light);
            border: 1px solid var(--border);
            border-radius: 12px;
            padding: var(--space-md);
            margin: var(--space-sm) 0;
            animation: slideIn 0.3s ease;
        }

        @keyframes slideIn {
            from { transform: translateY(20px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        .idea-text {
            font-size: 18px;
            margin-bottom: var(--space-sm);
            word-break: break-word;
        }

        .idea-meta {
            font-size: 14px;
            color: var(--text-dim);
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: var(--space-xs);
        }

        .reaction-bar {
            display: flex;
            gap: var(--space-xs);
            margin-top: var(--space-sm);
            flex-wrap: wrap;
        }

        .reaction-btn {
            background: var(--surface);
            border: 1px solid var(--border);
            border-radius: 20px;
            padding: 6px 12px;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.2s ease;
            min-height: 44px;
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .reaction-btn:hover {
            border-color: var(--accent);
            transform: translateY(-2px);
        }

        .reaction-count {
            background: var(--surface-light);
            border-radius: 10px;
            padding: 2px 6px;
            font-size: 12px;
            color: var(--text-dim);
        }

        .comment-section {
            margin-top: var(--space-sm);
            padding-top: var(--space-sm);
            border-top: 1px solid var(--border);
        }

        .comment {
            font-size: 14px;
            color: var(--text-dim);
            font-style: italic;
            margin-top: var(--space-xs);
        }

        /* Input area */
        .input-area {
            position: sticky;
            bottom: 0;
            background: var(--surface);
            padding: var(--space-md);
            border-top: 1px solid var(--border);
        }

        .input-group {
            display: flex;
            gap: var(--space-sm);
        }

        input[type="text"] {
            flex: 1;
            background: var(--surface-light);
            border: 2px solid var(--border);
            color: var(--text);
            padding: var(--space-sm) var(--space-md);
            border-radius: 8px;
            font-size: 16px;
            min-height: 44px;
        }

        input[type="text"]:focus {
            outline: none;
            border-color: var(--accent);
        }

        button {
            background: var(--accent);
            color: white;
            border: none;
            padding: var(--space-sm) var(--space-lg);
            border-radius: 8px;
            font-size: 16px;
            font-weight: 700;
            cursor: pointer;
            transition: all 0.2s ease;
            min-height: 44px;
        }

        button:hover {
            background: var(--accent-hover);
            transform: translateY(-2px);
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Auth Screens -->
        <div id="welcome-screen" class="screen active">
            <div style="padding: var(--space-lg);">
                <h1>💡 Advisor Ideas</h1>
                <p>Share and discuss ideas with your advisor.</p>
                <button onclick="showNewUserScreen()">New User</button>
                <button onclick="showReturningUserScreen()">Returning User</button>
            </div>
        </div>

        <div id="new-user-screen" class="screen">
            <div style="padding: var(--space-lg);">
                <h1>New User</h1>
                <div id="new-user-info"></div>
                <button onclick="registerNewUser()">Register & Enter</button>
                <button onclick="showScreen('welcome-screen')">Back</button>
            </div>
        </div>

        <div id="returning-user-screen" class="screen">
            <div style="padding: var(--space-lg);">
                <h1>Welcome Back</h1>
                <select id="user-label-select"></select>
                <input type="text" id="returning-passcode" placeholder="4-digit code" maxlength="4">
                <button onclick="loginReturningUser()">Login</button>
                <button onclick="showScreen('welcome-screen')">Back</button>
            </div>
        </div>

        <!-- Main App Screen -->
        <div id="main-screen" class="screen">
            <div style="padding: var(--space-lg);">
                <h1>💡 Advisor Ideas</h1>
                <div id="user-status">Logged in as <span id="current-user-label"></span></div>
                
                <!-- Ideas List -->
                <div id="ideas-list"></div>

                <!-- Input Area -->
                <div class="input-area">
                    <div class="input-group">
                        <input type="text" id="idea-input" placeholder="Share your idea..." maxlength="200">
                        <button onclick="submitIdea()">Share</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Auth boilerplate
        let currentUser = null;
        let pollingInterval;

        function startPolling() {
            pollingInterval = setInterval(loadLatestData, 2000);
        }

        function stopPolling() {
            if (pollingInterval) clearInterval(pollingInterval);
        }

        // Core app functions
        async function submitIdea() {
            const input = document.getElementById('idea-input');
            const text = input.value.trim();
            
            if (text) {
                await save('idea', {
                    text,
                    reactions: {},
                    comment: ''
                });
                input.value = '';
                await loadLatestData();
            }
        }

        async function addReaction(ideaId, emoji) {
            const ideas = await load('idea');
            const idea = ideas.find(i => i.id === parseInt(ideaId));
            
            if (idea) {
                const reactions = idea.reactions || {};
                reactions[emoji] = (reactions[emoji] || 0) + 1;
                
                await save('update_task', {
                    taskId: parseInt(ideaId),
                    updates: { reactions }
                });
                
                await loadLatestData();
            }
        }

        async function addComment(ideaId) {
            const comment = prompt('Add a comment:');
            if (comment) {
                await save('update_task', {
                    taskId: parseInt(ideaId),
                    updates: { comment }
                });
                await loadLatestData();
            }
        }

        async function loadLatestData() {
            const ideas = await load('idea');
            
            // Group by ID and get latest version of each idea
            const latestIdeas = Object.values(ideas.reduce((acc, idea) => {
                if (!acc[idea.id] || new Date(idea.created_at) > new Date(acc[idea.id].created_at)) {
                    acc[idea.id] = idea;
                }
                return acc;
            }, {}));

            // Sort by creation date, newest first
            latestIdeas.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));

            const html = latestIdeas.map(idea => `
                <div class="idea-card">
                    <div class="idea-text">${idea.text}</div>
                    <div class="idea-meta">
                        <span>by ${idea.author}</span>
                        <span>${new Date(idea.created_at).toLocaleString()}</span>
                    </div>
                    <div class="reaction-bar">
                        ${['💡', '🔥', '🤔', '👍'].map(emoji => `
                            <button onclick="addReaction(${idea.id}, '${emoji}')" class="reaction-btn">
                                ${emoji} 
                                <span class="reaction-count">${(idea.reactions && idea.reactions[emoji]) || 0}</span>
                            </button>
                        `).join('')}
                        <button onclick="addComment(${idea.id})" class="reaction-btn">💬 Comment</button>
                    </div>
                    ${idea.comment ? `
                        <div class="comment-section">
                            <div class="comment">${idea.comment}</div>
                        </div>
                    ` : ''}
                </div>
            `).join('');

            document.getElementById('ideas-list').innerHTML = html;
        }

        // Auth helper functions
        async function generateNewUser() {
            const slots = await checkAvailableSlots();
            if (slots.isFull) {
                alert('App is full!');
                return false;
            }
            const user = await generateUser();
            if (user?.success) {
                currentUser = user;
                document.getElementById('new-user-info').innerHTML = 
                    `Your ID: ${user.userLabel}<br>Code: ${user.passcode}<br>Save these!`;
                return true;
            }
            return false;
        }

        async function registerNewUser() {
            if (!currentUser) return;
            const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
            if (result?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                enterMainScreen();
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            await generateNewUser();
        }

        async function loginReturningUser() {
            const label = document.getElementById('user-label-select').value;
            const passcode = document.getElementById('returning-passcode').value;
            const result = await authenticateUser(label, passcode);
            if (result?.success) {
                currentUser = { userLabel: label, passcode, participantId: result.user.participantId };
                updateZadAuth(label, result.user.participantId);
                enterMainScreen();
            } else {
                alert('Wrong code!');
            }
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            if (screenId !== 'main-screen') stopPolling();
        }

        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const slots = await checkAvailableSlots();
            const select = document.getElementById('user-label-select');
            select.innerHTML = '<option>Select User</option>';
            slots.usedLabels.forEach(label => {
                select.innerHTML += `<option>${label}</option>`;
            });
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            startPolling();
            loadLatestData();
        }

        // Initialize
        initAuth();
    </script>
</body>
</html>