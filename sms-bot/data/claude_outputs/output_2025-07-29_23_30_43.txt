Here's a complete, mobile-friendly Snake game with touch and keyboard controls:

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Snake Game</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            overflow: hidden;
            touch-action: none;
            font-family: Arial, sans-serif;
            background-color: #000;
        }
        
        #gameCanvas {
            display: block;
            width: 100vw;
            height: 100vh;
            background: #001800;
        }
        
        .ui-overlay {
            position: absolute;
            top: 10px;
            left: 0;
            right: 0;
            text-align: center;
            color: white;
            font-size: 24px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
            pointer-events: none;
        }
        
        .control-bar {
            position: fixed;
            bottom: 20px;
            left: 0;
            right: 0;
            display: flex;
            justify-content: space-between;
            padding: 0 20px;
        }
        
        .control-btn {
            width: 80px;
            height: 60px;
            background: rgba(255,255,255,0.2);
            border: 2px solid rgba(255,255,255,0.5);
            border-radius: 8px;
            color: white;
            font-size: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            touch-action: none;
            user-select: none;
        }
        
        .game-over {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0,0,0,0.8);
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            color: white;
            display: none;
        }
        
        .game-over button {
            margin-top: 10px;
            padding: 10px 20px;
            font-size: 18px;
            background: #4CAF50;
            border: none;
            border-radius: 5px;
            color: white;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas"></canvas>
    <div class="ui-overlay">
        Score: <span id="score">0</span>
    </div>
    <div class="control-bar">
        <div class="control-btn" id="leftBtn">←</div>
        <div class="control-btn" id="upBtn">↑</div>
        <div class="control-btn" id="downBtn">↓</div>
        <div class="control-btn" id="rightBtn">→</div>
    </div>
    <div class="game-over" id="gameOver">
        <h2>Game Over!</h2>
        <p>Final Score: <span id="finalScore">0</span></p>
        <button onclick="startGame()">Play Again</button>
    </div>
    
    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        
        // Game constants
        const GRID_SIZE = 20;
        let CELL_SIZE;
        let GRID_WIDTH;
        let GRID_HEIGHT;
        
        // Game state
        let snake;
        let food;
        let direction;
        let nextDirection;
        let score;
        let gameLoop;
        let speed;
        
        function resizeCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            
            // Calculate grid dimensions based on screen size
            CELL_SIZE = Math.floor(Math.min(canvas.width, canvas.height) / GRID_SIZE);
            GRID_WIDTH = Math.floor(canvas.width / CELL_SIZE);
            GRID_HEIGHT = Math.floor(canvas.height / CELL_SIZE);
        }
        
        window.addEventListener('resize', resizeCanvas);
        resizeCanvas();
        
        function startGame() {
            // Initialize snake
            snake = [
                {x: Math.floor(GRID_WIDTH/2), y: Math.floor(GRID_HEIGHT/2)},
                {x: Math.floor(GRID_WIDTH/2)-1, y: Math.floor(GRID_HEIGHT/2)},
                {x: Math.floor(GRID_WIDTH/2)-2, y: Math.floor(GRID_HEIGHT/2)}
            ];
            
            direction = 'right';
            nextDirection = 'right';
            score = 0;
            speed = 200; // Start speed (milliseconds)
            
            // Place initial food
            spawnFood();
            
            // Clear previous game loop if exists
            if (gameLoop) clearInterval(gameLoop);
            
            // Start game loop
            gameLoop = setInterval(update, speed);
            
            // Hide game over screen
            document.getElementById('gameOver').style.display = 'none';
            document.getElementById('score').textContent = '0';
        }
        
        function spawnFood() {
            while (true) {
                food = {
                    x: Math.floor(Math.random() * GRID_WIDTH),
                    y: Math.floor(Math.random() * GRID_HEIGHT)
                };
                
                // Check if food spawned on snake
                let onSnake = false;
                for (let segment of snake) {
                    if (segment.x === food.x && segment.y === food.y) {
                        onSnake = true;
                        break;
                    }
                }
                
                if (!onSnake) break;
            }
        }
        
        function update() {
            // Update direction
            direction = nextDirection;
            
            // Calculate new head position
            const head = {x: snake[0].x, y: snake[0].y};
            switch(direction) {
                case 'up': head.y--; break;
                case 'down': head.y++; break;
                case 'left': head.x--; break;
                case 'right': head.x++; break;
            }
            
            // Check for collision with walls
            if (head.x < 0 || head.x >= GRID_WIDTH || 
                head.y < 0 || head.y >= GRID_HEIGHT) {
                gameOver();
                return;
            }
            
            // Check for collision with self
            for (let segment of snake) {
                if (head.x === segment.x && head.y === segment.y) {
                    gameOver();
                    return;
                }
            }
            
            // Add new head
            snake.unshift(head);
            
            // Check for food collision
            if (head.x === food.x && head.y === food.y) {
                score += 10;
                document.getElementById('score').textContent = score;
                spawnFood();
                
                // Increase speed every 50 points
                if (score % 50 === 0 && speed > 50) {
                    speed -= 20;
                    clearInterval(gameLoop);
                    gameLoop = setInterval(update, speed);
                }
            } else {
                // Remove tail if no food eaten
                snake.pop();
            }
            
            render();
        }
        
        function render() {
            // Clear canvas
            ctx.fillStyle = '#001800';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // Draw snake
            ctx.fillStyle = '#00FF00';
            for (let segment of snake) {
                ctx.fillRect(
                    segment.x * CELL_SIZE + 1,
                    segment.y * CELL_SIZE + 1,
                    CELL_SIZE - 2,
                    CELL_SIZE - 2
                );
            }
            
            // Draw food
            ctx.fillStyle = '#FF0000';
            ctx.fillRect(
                food.x * CELL_SIZE + 1,
                food.y * CELL_SIZE + 1,
                CELL_SIZE - 2,
                CELL_SIZE - 2
            );
        }
        
        function gameOver() {
            clearInterval(gameLoop);
            document.getElementById('gameOver').style.display = 'block';
            document.getElementById('finalScore').textContent = score;
        }
        
        // Touch controls
        document.getElementById('leftBtn').addEventListener('touchstart', () => nextDirection = 'left');
        document.getElementById('rightBtn').addEventListener('touchstart', () => nextDirection = 'right');
        document.getElementById('upBtn').addEventListener('touchstart', () => nextDirection = 'up');
        document.getElementById('downBtn').addEventListener('touchstart', () => nextDirection = 'down');
        
        // Keyboard controls
        window.addEventListener('keydown', (e) => {
            switch(e.key) {
                case 'ArrowUp':
                    if (direction !== 'down') nextDirection = 'up';
                    break;
                case 'ArrowDown':
                    if (direction !== 'up') nextDirection = 'down';
                    break;
                case 'ArrowLeft':
                    if (direction !== 'right') nextDirection = 'left';
                    break;
                case 'ArrowRight':
                    if (direction !== 'left') nextDirection = 'right';
                    break;
            }
        });
        
        // Start the game
        startGame();
    </script>
</body>
</html>
```

This implementation includes:

1. Responsive canvas that scales to fit any screen size
2. Touch controls with on-screen buttons
3. Keyboard controls using arrow keys
4. Progressive difficulty (snake speeds up every 50 points)
5. Collision detection with walls and self
6. Score tracking
7. Game over screen with restart button
8. Clean visual style with contrasting colors
9. Prevention of illegal moves (can't turn 180 degrees)
10. Mobile-friendly layout and controls

To play:
- Use the arrow buttons at the bottom of the screen on mobile
- Use keyboard arrow keys on desktop
- Collect red food squares to grow and score points
- Avoid hitting walls and the snake's own body
- Game speeds up as your score increases
- Click "Play Again" when game is over to restart

The game is optimized for mobile devices with:
- Proper viewport settings
- Touch-friendly button sizes
- No scrolling or zooming
- Responsive layout that works in any orientation
- Clear visual feedback