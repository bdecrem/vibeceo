```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>MergeMaster</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=Inter:wght@400;600&display=swap');
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            -webkit-tap-highlight-color: transparent;
        }
        
        body {
            font-family: 'Inter', sans-serif;
            overflow: hidden;
            touch-action: none;
            user-select: none;
            -webkit-user-select: none;
            height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            background: linear-gradient(135deg, #FFB800 0%, #FF6B6B 25%, #4ECDC4 50%, #45B7D1 75%, #96CEB4 100%);
            background-size: 300% 300%;
            animation: gradientShift 15s ease infinite;
        }
        
        @keyframes gradientShift {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }
        
        .container {
            width: 100%;
            max-width: 400px;
            padding: 20px;
            position: relative;
        }
        
        .glass-container {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(20px);
            -webkit-backdrop-filter: blur(20px);
            border-radius: 24px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            padding: 24px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            animation: fadeIn 0.6s ease-out;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        h1 {
            font-family: 'Space Grotesk', sans-serif;
            font-size: 2.5rem;
            font-weight: 700;
            text-align: center;
            color: #fff;
            margin-bottom: 8px;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        
        .tagline {
            text-align: center;
            color: rgba(255, 255, 255, 0.9);
            margin-bottom: 24px;
            font-size: 0.9rem;
        }
        
        .score-container {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
            gap: 12px;
        }
        
        .score-box {
            flex: 1;
            background: rgba(255, 255, 255, 0.15);
            border-radius: 16px;
            padding: 12px;
            text-align: center;
        }
        
        .score-label {
            font-size: 0.75rem;
            color: rgba(255, 255, 255, 0.7);
            margin-bottom: 4px;
        }
        
        .score-value {
            font-family: 'Space Grotesk', sans-serif;
            font-size: 1.5rem;
            font-weight: 700;
            color: #fff;
        }
        
        #gameBoard {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 16px;
            padding: 12px;
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            grid-gap: 8px;
            aspect-ratio: 1;
            position: relative;
        }
        
        .tile {
            background: rgba(255, 255, 255, 0.2);
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-family: 'Space Grotesk', sans-serif;
            font-weight: 700;
            font-size: 1.5rem;
            color: #fff;
            position: relative;
            transition: all 0.15s ease;
        }
        
        .tile[data-value="2"] { background: rgba(255, 184, 0, 0.8); }
        .tile[data-value="4"] { background: rgba(255, 107, 107, 0.8); }
        .tile[data-value="8"] { background: rgba(78, 205, 196, 0.8); }
        .tile[data-value="16"] { background: rgba(69, 183, 209, 0.8); }
        .tile[data-value="32"] { background: rgba(150, 206, 180, 0.8); }
        .tile[data-value="64"] { background: rgba(255, 138, 101, 0.8); }
        .tile[data-value="128"] { background: rgba(255, 92, 92, 0.8); font-size: 1.3rem; }
        .tile[data-value="256"] { background: rgba(255, 206, 84, 0.8); font-size: 1.3rem; }
        .tile[data-value="512"] { background: rgba(75, 207, 250, 0.8); font-size: 1.3rem; }
        .tile[data-value="1024"] { background: rgba(52, 231, 228, 0.8); font-size: 1.1rem; }
        .tile[data-value="2048"] { background: rgba(255, 71, 87, 0.9); font-size: 1.1rem; }
        
        .tile.new {
            animation: pop 0.3s ease;
        }
        
        .tile.merge {
            animation: merge 0.3s ease;
        }
        
        @keyframes pop {
            0% { transform: scale(0); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }
        
        @keyframes merge {
            0% { transform: scale(1); }
            50% { transform: scale(1.2); }
            100% { transform: scale(1); }
        }
        
        .btn {
            width: 100%;
            padding: 16px;
            background: rgba(255, 255, 255, 0.2);
            border: none;
            border-radius: 16px;
            font-family: 'Space Grotesk', sans-serif;
            font-size: 1.1rem;
            font-weight: 600;
            color: #fff;
            cursor: pointer;
            transition: all 0.2s ease;
            margin-top: 20px;
        }
        
        .btn:active {
            transform: scale(0.95);
            background: rgba(255, 255, 255, 0.3);
        }
        
        .floating-emoji {
            position: fixed;
            font-size: 2rem;
            pointer-events: none;
            z-index: 1;
            opacity: 0.7;
            animation: float 20s infinite ease-in-out;
        }
        
        @keyframes float {
            0%, 100% { transform: translateY(0) rotate(0deg); }
            33% { transform: translateY(-30px) rotate(10deg); }
            66% { transform: translateY(20px) rotate(-10deg); }
        }
        
        .emoji-1 { top: 10%; left: 10%; animation-delay: 0s; }
        .emoji-2 { top: 70%; right: 15%; animation-delay: 5s; }
        .emoji-3 { bottom: 20%; left: 20%; animation-delay: 10s; }
        
        .screen {
            display: none;
            animation: fadeIn 0.6s ease-out;
        }
        
        .screen.active {
            display: block;
        }
        
        .intro-content, .end-content {
            text-align: center;
            padding: 40px 20px;
        }
        
        .intro-emoji, .end-emoji {
            font-size: 4rem;
            margin-bottom: 20px;
            animation: bounce 2s infinite ease-in-out;
        }
        
        @keyframes bounce {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-10px); }
        }
        
        @media (max-width: 380px) {
            .tile { font-size: 1.2rem; }
            .tile[data-value="128"], .tile[data-value="256"], .tile[data-value="512"] { font-size: 1rem; }
            .tile[data-value="1024"], .tile[data-value="2048"] { font-size: 0.9rem; }
        }
    </style>
</head>
<body>
    <div class="floating-emoji emoji-1">üçä</div>
    <div class="floating-emoji emoji-2">üçã</div>
    <div class="floating-emoji emoji-3">üçë</div>
    
    <div class="container">
        <div id="introScreen" class="screen active">
            <div class="glass-container">
                <div class="intro-content">
                    <div class="intro-emoji">üéØ</div>
                    <h1>MergeMaster</h1>
                    <p class="tagline">Swipe to merge. Chase the citrus high.</p>
                    <button class="btn" onclick="startGame()">Tap to Begin</button>
                </div>
            </div>
        </div>
        
        <div id="gameScreen" class="screen">
            <div class="glass-container">
                <h1>MergeMaster</h1>
                <div class="score-container">
                    <div class="score-box">
                        <div class="score-label">Score</div>
                        <div class="score-value" id="score">0</div>
                    </div>
                    <div class="score-box">
                        <div class="score-label">Best Tile</div>
                        <div class="score-value" id="bestTile">0</div>
                    </div>
                </div>
                <div id="gameBoard"></div>
            </div>
        </div>
        
        <div id="endScreen" class="screen">
            <div class="glass-container">
                <div class="end-content">
                    <div class="end-emoji">üèÜ</div>
                    <h1>Nice Merge!</h1>
                    <p class="tagline">You reached <span id="finalBest">0</span></p>
                    <p class="tagline" style="margin-top: 8px;">Score: <span id="finalScore">0</span></p>
                    <button class="btn" onclick="restartGame()">Play Again</button>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        let board = [];
        let score = 0;
        let bestTile = 0;
        let touchStartX = 0;
        let touchStartY = 0;
        let gameActive = false;
        
        function initBoard() {
            board = Array(4).fill().map(() => Array(4).fill(0));
            score = 0;
            bestTile = 0;
            addNewTile();
            addNewTile();
            renderBoard();
            updateScore();
        }
        
        function addNewTile() {
            const emptyCells = [];
            for (let i = 0; i < 4; i++) {
                for (let j = 0; j < 4; j++) {
                    if (board[i][j] === 0) {
                        emptyCells.push({row: i, col: j});
                    }
                }
            }
            
            if (emptyCells.length > 0) {
                const randomCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];
                board[randomCell.row][randomCell.col] = Math.random() < 0.9 ? 2 : 4;
                return randomCell;
            }
            return null;
        }
        
        function renderBoard() {
            const boardElement = document.getElementById('gameBoard');
            boardElement.innerHTML = '';
            
            for (let i = 0; i < 4; i++) {
                for (let j = 0; j < 4; j++) {
                    const tile = document.createElement('div');
                    tile.className = 'tile';
                    if (board[i][j] > 0) {
                        tile.textContent = board[i][j];
                        tile.setAttribute('data-value', board[i][j]);
                    }
                    boardElement.appendChild(tile);
                }
            }
        }
        
        function move(direction) {
            if (!gameActive) return;
            
            const oldBoard = board.map(row => [...row]);
            let moved = false;
            
            if (direction === 'left' || direction === 'right') {
                for (let i = 0; i < 4; i++) {
                    const row = board[i];
                    const filtered = row.filter(val => val !== 0);
                    const merged = [];
                    
                    if (direction === 'right') filtered.reverse();
                    
                    for (let j = 0; j < filtered.length; j++) {
                        if (j < filtered.length - 1 && filtered[j] === filtered[j + 1]) {
                            merged.push(filtered[j] * 2);
                            score += filtered[j] * 2;
                            if (filtered[j] * 2 > bestTile) bestTile = filtered[j] * 2;
                            j++;
                        } else {
                            merged.push(filtered[j]);
                        }
                    }
                    
                    while (merged.length < 4) {
                        merged.push(0);
                    }
                    
                    if (direction === 'right') merged.reverse();
                    board[i] = merged;
                }
            } else {
                for (let j = 0; j < 4; j++) {
                    const column = [];
                    for (let i = 0; i < 4; i++) {
                        column.push(board[i][j]);
                    }
                    
                    const filtered = column.filter(val => val !== 0);
                    const merged = [];
                    
                    if (direction === 'down') filtered.reverse();
                    
                    for (let i = 0; i < filtered.length; i++) {
                        if (i < filtered.length - 1 && filtered[i] === filtered[i + 1]) {
                            merged.push(filtered[i] * 2);
                            score += filtered[i] * 2;
                            if (filtered[i] * 2 > bestTile) bestTile = filtered[i] * 2;
                            i++;
                        } else {
                            merged.push(filtered[i]);
                        }
                    }
                    
                    while (merged.length < 4) {
                        merged.push(0);
                    }
                    
                    if (direction === 'down') merged.reverse();
                    
                    for (let i = 0; i < 4; i++) {
                        board[i][j] = merged[i];
                    }
                }
            }
            
            for (let i = 0; i < 4; i++) {
                for (let j = 0; j < 4; j++) {
                    if (oldBoard[i][j] !== board[i][j]) {
                        moved = true;
                        break;
                    }
                }
            }
            
            if (moved) {
                addNewTile();
                renderBoard();
                updateScore();
                
                if (isGameOver()) {
                    endGame();
                }
            }
        }
        
        function isGameOver() {
            for (let i = 0; i < 4; i++) {
                for (let j = 0; j < 4; j++) {
                    if (board[i][j] === 0) return false;
                    if (j < 3 && board[i][j] === board[i][j + 1]) return false;
                    if (i < 3 && board[i][j] === board[i + 1][j]) return false;
                }
            }
            return true;
        }
        
        function updateScore() {
            document.getElementById('score').textContent = score;
            document.getElementById('bestTile').textContent = bestTile;
        }
        
        function startGame() {
            document.getElementById('introScreen').classList.remove('active');
            document.getElementById('gameScreen').classList.add('active');
            gameActive = true;
            initBoard();
        }
        
        function endGame() {
            gameActive = false;
            setTimeout(() => {
                document.getElementById('finalScore').textContent = score;
                document.getElementById('finalBest').textContent = bestTile;
                document.getElementById('gameScreen').classList.remove('active');
                document.getElementById('endScreen').classList.add('active');
            }, 500);
        }
        
        function restartGame() {
            document.getElementById('endScreen').classList.remove('active');
            document.getElementById('gameScreen').classList.add('active');
            gameActive = true;
            initBoard();
        }
        
        document.addEventListener('touchstart', (e) => {
            if (!gameActive) return;
            touchStartX = e.touches[0].clientX;
            touchStartY = e.touches[0].clientY;
            e.preventDefault();
        }, {passive: false});
        
        document.addEventListener('touchend', (e) => {
            if (!gameActive) return;
            const touchEndX = e.changedTouches[0].clientX;
            const touchEndY = e.changedTouches[0].clientY;
            
            const deltaX = touchEndX - touchStartX;
            const deltaY = touchEndY - touchStartY;
            
            if (Math.abs(deltaX) > 30 || Math.abs(deltaY) > 30) {
                if (Math.abs(deltaX) > Math.abs(deltaY)) {
                    move(deltaX > 0 ? 'right' : 'left');
                } else {
                    move(deltaY > 0 ? 'down' : 'up');
                }
            }
            e.preventDefault();
        }, {passive: false});
        
        document.addEventListener('keydown', (e) => {
            if (!gameActive) return;
            switch(e.key) {
                case 'ArrowLeft': move('left'); break;
                case 'ArrowRight': move('right'); break;
                case 'ArrowUp': move('up'); break;
                case 'ArrowDown': move('down'); break;
            }
        });
        
        document.addEventListener('mousemove', (e) => {
            const emojis = document.querySelectorAll('.floating-emoji');
            const x = e.clientX / window.innerWidth;
            const y = e.clientY / window.innerHeight;
            
            emojis.forEach((emoji, index) => {
                const offsetX = (x - 0.5) * 20 * (index + 1);
                const offsetY = (y - 0.5) * 20 * (index + 1);
                emoji.style.transform = `translate(${offsetX}px, ${offsetY}px)`;
            });
        });
    </script>
</body>
</html>
```