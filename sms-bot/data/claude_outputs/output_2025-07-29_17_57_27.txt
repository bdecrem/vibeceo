```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mobile Tetris</title>
    <style>
        * { 
            margin: 0; 
            padding: 0; 
            box-sizing: border-box; 
        }
        body { 
            overflow: hidden;
            touch-action: none;
            font-family: -apple-system, system-ui, sans-serif;
            background: #000;
            height: 100vh;
            width: 100vw;
        }
        canvas {
            display: block;
            background: #111;
        }
        #controls {
            position: fixed;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 120px;
            background: rgba(0, 0, 0, 0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 10px;
            z-index: 1000;
        }
        button {
            width: 60px;
            height: 60px;
            font-size: 24px;
            background: rgba(255,255,255,0.2);
            border: 2px solid white;
            border-radius: 10px;
            color: white;
            touch-action: manipulation;
            display: flex;
            justify-content: center;
            align-items: center;
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas"></canvas>
    
    <div id="controls">
        <button id="leftBtn">←</button>
        <button id="rotateBtn">↻</button>
        <button id="rightBtn">→</button>
        <button id="downBtn">↓</button>
    </div>

    <script>
        // Game constants
        const COLS = 10;
        const ROWS = 20;
        const controlsHeight = 120;
        const headerHeight = 0;
        const canvasDisplayWidth = window.innerWidth;
        const canvasDisplayHeight = window.innerHeight - controlsHeight - headerHeight;
        const blockSizeX = Math.floor(canvasDisplayWidth / COLS);
        const blockSizeY = Math.floor(canvasDisplayHeight / ROWS);
        const blockSize = Math.min(blockSizeX, blockSizeY);
        const boardWidth = blockSize * COLS;
        const boardHeight = blockSize * ROWS;
        const offsetX = (canvasDisplayWidth - boardWidth) / 2;
        const offsetY = (canvasDisplayHeight - boardHeight) / 2;

        // Set up canvas
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        canvas.width = canvasDisplayWidth;
        canvas.height = canvasDisplayHeight;

        // Tetromino shapes
        const SHAPES = [
            [[1, 1, 1, 1]], // I
            [[1, 1, 1], [0, 1, 0]], // T
            [[1, 1, 1], [1, 0, 0]], // L
            [[1, 1, 1], [0, 0, 1]], // J
            [[1, 1], [1, 1]], // O
            [[0, 1, 1], [1, 1, 0]], // S
            [[1, 1, 0], [0, 1, 1]]  // Z
        ];

        // Colors for tetrominos
        const COLORS = [
            '#00f0f0', // I - Cyan
            '#a000f0', // T - Purple
            '#f0a000', // L - Orange
            '#0000f0', // J - Blue
            '#f0f000', // O - Yellow
            '#00f000', // S - Green
            '#f00000'  // Z - Red
        ];

        // Game state
        let board = createBoard();
        let player = {
            pos: {x: 0, y: 0},
            matrix: null,
            score: 0
        };
        let dropCounter = 0;
        let dropInterval = 1000;
        let lastTime = 0;
        let gameOver = false;

        // Create empty board
        function createBoard() {
            const board = [];
            for (let y = 0; y < ROWS; y++) {
                board.push(Array(COLS).fill(0));
            }
            return board;
        }

        // Create a new tetromino
        function createPiece() {
            const rand = Math.floor(Math.random() * SHAPES.length);
            return {
                matrix: SHAPES[rand],
                color: COLORS[rand]
            };
        }

        // Draw game board background
        function drawGameBoard() {
            // Draw board background
            ctx.fillStyle = 'rgba(255, 255, 255, 0.05)';
            ctx.fillRect(offsetX, offsetY, boardWidth, boardHeight);
            
            // Draw board border
            ctx.strokeStyle = 'rgba(255, 255, 255, 0.3)';
            ctx.lineWidth = 2;
            ctx.strokeRect(offsetX, offsetY, boardWidth, boardHeight);
        }

        // Draw the game
        function draw() {
            // Clear canvas
            ctx.fillStyle = '#000';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // Draw game board
            drawGameBoard();
            
            // Draw board contents
            drawMatrix(board, {x: 0, y: 0});
            
            // Draw current piece
            if (player.matrix) {
                drawMatrix(player.matrix, player.pos);
            }
            
            // Draw score
            ctx.fillStyle = '#fff';
            ctx.font = '20px Arial';
            ctx.textAlign = 'left';
            ctx.fillText(`Score: ${player.score}`, 10, 30);
            
            // Draw game over
            if (gameOver) {
                ctx.fillStyle = 'rgba(0, 0, 0, 0.75)';
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                
                ctx.fillStyle = '#fff';
                ctx.font = '30px Arial';
                ctx.textAlign = 'center';
                ctx.fillText('GAME OVER', canvas.width / 2, canvas.height / 2 - 30);
                ctx.font = '20px Arial';
                ctx.fillText(`Final Score: ${player.score}`, canvas.width / 2, canvas.height / 2 + 20);
                ctx.fillText('Tap to restart', canvas.width / 2, canvas.height / 2 + 60);
            }
        }

        // Draw a matrix
        function drawMatrix(matrix, offset) {
            matrix.forEach((row, y) => {
                row.forEach((value, x) => {
                    if (value !== 0) {
                        ctx.fillStyle = COLORS[value - 1];
                        ctx.fillRect(
                            offsetX + (x + offset.x) * blockSize,
                            offsetY + (y + offset.y) * blockSize,
                            blockSize,
                            blockSize
                        );
                        ctx.strokeStyle = '#000';
                        ctx.strokeRect(
                            offsetX + (x + offset.x) * blockSize,
                            offsetY + (y + offset.y) * blockSize,
                            blockSize,
                            blockSize
                        );
                    }
                });
            });
        }

        // Merge player piece with board
        function merge() {
            player.matrix.forEach((row, y) => {
                row.forEach((value, x) => {
                    if (value !== 0) {
                        board[y + player.pos.y][x + player.pos.x] = value;
                    }
                });
            });
        }

        // Rotate matrix clockwise
        function rotate(matrix) {
            const N = matrix.length;
            const result = [];
            for (let i = 0; i < N; i++) {
                result.push([]);
                for (let j = 0; j < N; j++) {
                    result[i][j] = matrix[N - j - 1][i];
                }
            }
            return result;
        }

        // Player rotation
        function playerRotate() {
            if (gameOver) return;
            
            const pos = player.pos.x;
            let offset = 1;
            const rotated = rotate(player.matrix);
            
            player.matrix = rotated;
            while (collide()) {
                player.pos.x += offset;
                offset = -(offset + (offset > 0 ? 1 : -1));
                if (offset > player.matrix[0].length) {
                    player.matrix = rotate(rotate(rotate(player.matrix)));
                    player.pos.x = pos;
                    return;
                }
            }
        }

        // Player movement
        function playerMove(dir) {
            if (gameOver) return;
            
            player.pos.x += dir;
            if (collide()) {
                player.pos.x -= dir;
            }
        }

        // Player drop
        function playerDrop() {
            if (gameOver) return;
            
            player.pos.y++;
            if (collide()) {
                player.pos.y--;
                merge();
                playerReset();
                sweepRows();
                updateScore();
            }
            dropCounter = 0;
        }

        // Hard drop
        function playerHardDrop() {
            if (gameOver) return;
            
            while (!collide()) {
                player.pos.y++;
            }
            player.pos.y--;
            playerDrop();
        }

        // Collision detection
        function collide() {
            const [m, o] = [player.matrix, player.pos];
            for (let y = 0; y < m.length; ++y) {
                for (let x = 0; x < m[y].length; ++x) {
                    if (m[y][x] !== 0 &&
                        (board[y + o.y] &&
                        board[y + o.y][x + o.x]) !== 0) {
                        return true;
                    }
                }
            }
            return false;
        }

        // Reset player
        function playerReset() {
            const piece = createPiece();
            player.matrix = piece.matrix;
            player.color = piece.color;
            player.pos.y = 0;
            player.pos.x = Math.floor(COLS / 2) - Math.floor(player.matrix[0].length / 2);
            
            if (collide()) {
                gameOver = true;
            }
        }

        // Sweep completed rows
        function sweepRows() {
            let rowCount = 0;
            outer: for (let y = board.length - 1; y >= 0; --y) {
                for (let x = 0; x < board[y].length; ++x) {
                    if (board[y][x] === 0) {
                        continue outer;
                    }
                }
                
                const row = board.splice(y, 1)[0].fill(0);
                board.unshift(row);
                ++y;
                rowCount++;
            }
            
            return rowCount;
        }

        // Update score
        function updateScore() {
            player.score += 10;
        }

        // Game loop
        function update(time = 0) {
            const deltaTime = time - lastTime;
            lastTime = time;
            
            dropCounter += deltaTime;
            if (dropCounter > dropInterval) {
                playerDrop();
            }
            
            draw();
            requestAnimationFrame(update);
        }

        // Initialize game
        function init() {
            board = createBoard();
            player.score = 0;
            gameOver = false;
            playerReset();
            update();
        }

        // Add button handlers
        function addButtonHandler(buttonId, action) {
            const btn = document.getElementById(buttonId);
            
            // Handle touch events (mobile)
            btn.addEventListener('touchstart', (e) => {
                e.preventDefault();
                action();
            });
            
            // Handle click events (desktop)  
            btn.addEventListener('click', (e) => {
                e.preventDefault();
                action();
            });
        }

        // Set up button handlers
        addButtonHandler('leftBtn', () => playerMove(-1));
        addButtonHandler('rightBtn', () => playerMove(1));
        addButtonHandler('rotateBtn', playerRotate);
        addButtonHandler('downBtn', playerHardDrop);

        // Handle canvas tap for restart
        canvas.addEventListener('touchstart', (e) => {
            e.preventDefault();
            if (gameOver) {
                init();
            }
        });

        canvas.addEventListener('click', (e) => {
            if (gameOver) {
                init();
            }
        });

        // Handle keyboard controls for desktop
        document.addEventListener('keydown', event => {
            if (gameOver) return;
            
            switch (event.keyCode) {
                case 37: // left arrow
                    playerMove(-1);
                    break;
                case 39: // right arrow
                    playerMove(1);
                    break;
                case 40: // down arrow
                    playerDrop();
                    break;
                case 38: // up arrow
                    playerRotate();
                    break;
                case 32: // space
                    playerHardDrop();
                    break;
            }
        });

        // Start the game
        init();
    </script>
</body>
</html>
```