# Mobile-First Tetris Game

I'll create a complete, responsive Tetris game that works on both mobile and desktop devices with proper touch controls.

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mobile Tetris</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            touch-action: manipulation;
        }
        
        body {
            overflow: hidden;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #1a1a2e, #16213e);
            height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            color: white;
        }
        
        .game-container {
            position: relative;
            width: 100%;
            max-width: 500px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        
        #gameCanvas {
            background-color: #0f3460;
            border-radius: 8px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
        }
        
        #controls {
            position: fixed;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 120px;
            background: rgba(0, 0, 0, 0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 15px;
            padding: 10px;
            z-index: 1000;
        }
        
        .control-btn {
            width: 70px;
            height: 70px;
            font-size: 28px;
            background: rgba(255, 255, 255, 0.15);
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s;
            user-select: none;
        }
        
        .control-btn:active {
            background: rgba(255, 255, 255, 0.3);
            transform: scale(0.95);
        }
        
        .rotate-btn {
            background: rgba(76, 175, 80, 0.3);
            border-color: rgba(76, 175, 80, 0.5);
        }
        
        .down-btn {
            background: rgba(244, 67, 54, 0.3);
            border-color: rgba(244, 67, 54, 0.5);
        }
        
        .game-info {
            display: flex;
            justify-content: space-between;
            width: 100%;
            max-width: 500px;
            padding: 15px;
            margin-bottom: 10px;
        }
        
        .score-container, .level-container {
            background: rgba(0, 0, 0, 0.4);
            padding: 12px 20px;
            border-radius: 8px;
            text-align: center;
            min-width: 120px;
        }
        
        .score-value, .level-value {
            font-size: 24px;
            font-weight: bold;
            color: #4caf50;
            margin-top: 5px;
        }
        
        .game-title {
            font-size: 32px;
            margin-bottom: 10px;
            text-align: center;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);
            background: linear-gradient(to right, #4facfe, #00f2fe);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        
        .instructions {
            background: rgba(0, 0, 0, 0.4);
            padding: 15px;
            border-radius: 8px;
            margin: 15px 0;
            text-align: center;
            max-width: 500px;
            font-size: 14px;
            line-height: 1.5;
        }
        
        .game-over {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.85);
            padding: 30px;
            border-radius: 10px;
            text-align: center;
            z-index: 2000;
            display: none;
        }
        
        .game-over h2 {
            font-size: 36px;
            color: #f44336;
            margin-bottom: 20px;
        }
        
        .final-score {
            font-size: 24px;
            margin: 15px 0;
        }
        
        .restart-btn {
            background: #4caf50;
            color: white;
            border: none;
            padding: 12px 30px;
            font-size: 18px;
            border-radius: 30px;
            cursor: pointer;
            margin-top: 20px;
            transition: background 0.3s;
        }
        
        .restart-btn:hover {
            background: #45a049;
        }
        
        @media (max-width: 500px) {
            .control-btn {
                width: 60px;
                height: 60px;
                font-size: 24px;
            }
            
            .game-title {
                font-size: 28px;
            }
            
            .score-container, .level-container {
                padding: 10px 15px;
                min-width: 100px;
            }
            
            .score-value, .level-value {
                font-size: 20px;
            }
        }
    </style>
</head>
<body>
    <h1 class="game-title">TETRIS</h1>
    
    <div class="game-info">
        <div class="score-container">
            <div>SCORE</div>
            <div id="score" class="score-value">0</div>
        </div>
        <div class="level-container">
            <div>LEVEL</div>
            <div id="level" class="level-value">1</div>
        </div>
    </div>
    
    <div class="game-container">
        <canvas id="gameCanvas"></canvas>
        
        <div class="game-over" id="gameOver">
            <h2>GAME OVER</h2>
            <div class="final-score">Score: <span id="finalScore">0</span></div>
            <div class="final-score">Lines: <span id="finalLines">0</span></div>
            <button class="restart-btn" id="restartBtn">PLAY AGAIN</button>
        </div>
    </div>
    
    <div class="instructions">
        Move and rotate the falling pieces to complete lines. Clear more lines at once for higher scores!
    </div>
    
    <div id="controls">
        <div class="control-btn" id="leftBtn">←</div>
        <div class="control-btn rotate-btn" id="rotateBtn">↻</div>
        <div class="control-btn" id="rightBtn">→</div>
        <div class="control-btn down-btn" id="downBtn">↓</div>
    </div>

    <script>
        // Game constants
        const COLS = 10;
        const ROWS = 20;
        const controlsHeight = 120;
        const headerHeight = 0;
        const canvasDisplayWidth = Math.min(window.innerWidth, 500);
        const canvasDisplayHeight = window.innerHeight - controlsHeight - headerHeight - 150;
        const blockSizeX = Math.floor(canvasDisplayWidth / COLS);
        const blockSizeY = Math.floor(canvasDisplayHeight / ROWS);
        const blockSize = Math.min(blockSizeX, blockSizeY);
        const boardWidth = blockSize * COLS;
        const boardHeight = blockSize * ROWS;
        const offsetX = (canvasDisplayWidth - boardWidth) / 2;
        const offsetY = (canvasDisplayHeight - boardHeight) / 2;
        
        // Tetromino shapes
        const SHAPES = [
            [[1, 1, 1, 1]], // I
            [[1, 1, 1], [0, 1, 0]], // T
            [[1, 1, 1], [1, 0, 0]], // L
            [[1, 1, 1], [0, 0, 1]], // J
            [[1, 1], [1, 1]], // O
            [[0, 1, 1], [1, 1, 0]], // S
            [[1, 1, 0], [0, 1, 1]]  // Z
        ];
        
        // Tetromino colors
        const COLORS = [
            '#00f0f0', // Cyan
            '#a000f0', // Purple
            '#f0a000', // Orange
            '#0000f0', // Blue
            '#f0f000', // Yellow
            '#00f000', // Green
            '#f00000'  // Red
        ];
        
        // Game variables
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        canvas.width = canvasDisplayWidth;
        canvas.height = canvasDisplayHeight;
        
        let board = [];
        let score = 0;
        let level = 1;
        let lines = 0;
        let gameOver = false;
        let dropCounter = 0;
        let dropInterval = 1000;
        let lastTime = 0;
        
        // Player piece
        const player = {
            pos: {x: 0, y: 0},
            matrix: null,
            score: 0
        };
        
        // Initialize the game board
        function createBoard() {
            board = [];
            for (let y = 0; y < ROWS; y++) {
                board.push(Array(COLS).fill(0));
            }
        }
        
        // Create a new tetromino
        function createPiece() {
            const rand = Math.floor(Math.random() * SHAPES.length);
            return {
                matrix: SHAPES[rand],
                color: COLORS[rand]
            };
        }
        
        // Draw the game board
        function drawBoard() {
            // Draw board background
            ctx.fillStyle = 'rgba(30, 30, 60, 0.7)';
            ctx.fillRect(offsetX, offsetY, boardWidth, boardHeight);
            
            // Draw grid lines
            ctx.strokeStyle = 'rgba(100, 100, 150, 0.2)';
            ctx.lineWidth = 0.5;
            
            // Vertical lines
            for (let i = 0; i <= COLS; i++) {
                ctx.beginPath();
                ctx.moveTo(offsetX + i * blockSize, offsetY);
                ctx.lineTo(offsetX + i * blockSize, offsetY + boardHeight);
                ctx.stroke();
            }
            
            // Horizontal lines
            for (let i = 0; i <= ROWS; i++) {
                ctx.beginPath();
                ctx.moveTo(offsetX, offsetY + i * blockSize);
                ctx.lineTo(offsetX + boardWidth, offsetY + i * blockSize);
                ctx.stroke();
            }
            
            // Draw board border
            ctx.strokeStyle = 'rgba(255, 255, 255, 0.3)';
            ctx.lineWidth = 2;
            ctx.strokeRect(offsetX, offsetY, boardWidth, boardHeight);
        }
        
        // Draw a tetromino
        function drawMatrix(matrix, offset, color) {
            matrix.forEach((row, y) => {
                row.forEach((value, x) => {
                    if (value !== 0) {
                        ctx.fillStyle = color;
                        ctx.fillRect(
                            offsetX + (x + offset.x) * blockSize, 
                            offsetY + (y + offset.y) * blockSize, 
                            blockSize, 
                            blockSize
                        );
                        
                        // Add 3D effect
                        ctx.strokeStyle = 'rgba(255, 255, 255, 0.4)';
                        ctx.lineWidth = 2;
                        ctx.strokeRect(
                            offsetX + (x + offset.x) * blockSize, 
                            offsetY + (y + offset.y) * blockSize, 
                            blockSize, 
                            blockSize
                        );
                        
                        // Inner highlight
                        ctx.fillStyle = 'rgba(255, 255, 255, 0.2)';
                        ctx.fillRect(
                            offsetX + (x + offset.x) * blockSize, 
                            offsetY + (y + offset.y) * blockSize, 
                            blockSize * 0.3, 
                            blockSize * 0.3
                        );
                    }
                });
            });
        }
        
        // Draw the entire game
        function draw() {
            // Clear canvas
            ctx.fillStyle = '#0f3460';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // Draw board
            drawBoard();
            
            // Draw placed pieces
            board.forEach((row, y) => {
                row.forEach((value, x) => {
                    if (value !== 0) {
                        ctx.fillStyle = COLORS[value - 1];
                        ctx.fillRect(
                            offsetX + x * blockSize, 
                            offsetY + y * blockSize, 
                            blockSize, 
                            blockSize
                        );
                        
                        // Add 3D effect
                        ctx.strokeStyle = 'rgba(255, 255, 255, 0.4)';
                        ctx.lineWidth = 2;
                        ctx.strokeRect(
                            offsetX + x * blockSize, 
                            offsetY + y * blockSize, 
                            blockSize, 
                            blockSize
                        );
                        
                        // Inner highlight
                        ctx.fillStyle = 'rgba(255, 255, 255, 0.2)';
                        ctx.fillRect(
                            offsetX + x * blockSize, 
                            offsetY + y * blockSize, 
                            blockSize * 0.3, 
                            blockSize * 0.3
                        );
                    }
                });
            });
            
            // Draw current piece
            if (player.matrix) {
                drawMatrix(player.matrix, player.pos, player.color);
            }
        }
        
        // Collision detection
        function collide(board, player) {
            const [m, o] = [player.matrix, player.pos];
            for (let y = 0; y < m.length; ++y) {
                for (let x = 0; x < m[y].length; ++x) {
                    if (m[y][x] !== 0 &&
                        (board[y + o.y] &&
                        board[y + o.y][x + o.x]) !== 0) {
                        return true;
                    }
                }
            }
            return false;
        }
        
        // Merge player piece with board
        function merge(board, player) {
            player.matrix.forEach((row, y) => {
                row.forEach((value, x) => {
                    if (value !== 0) {
                        board[y + player.pos.y][x + player.pos.x] = player.colorIndex;
                    }
                });
            });
        }
        
        // Rotate matrix
        function rotate(matrix) {
            const N = matrix.length;
            const result = [];
            
            for (let i = 0; i < N; i++) {
                result.push([]);
                for (let j = 0; j < N; j++) {
                    result[i][j] = matrix[N - j - 1][i];
                }
            }
            
            return result;
        }
        
        // Player rotation
        function playerRotate() {
            if (gameOver) return;
            
            const pos = player.pos.x;
            let offset = 1;
            const rotated = rotate(player.matrix);
            
            player.matrix = rotated;
            
            // Handle wall kicks
            while (collide(board, player)) {
                player.pos.x += offset;
                offset = -(offset + (offset > 0 ? 1 : -1));
                if (offset > player.matrix[0].length) {
                    player.matrix = rotate(rotate(rotate(player.matrix))); // Rotate back
                    player.pos.x = pos;
                    return;
                }
            }
        }
        
        // Player movement
        function playerMove(dir) {
            if (gameOver) return;
            player.pos.x += dir;
            if (collide(board, player)) {
                player.pos.x -= dir;
            }
        }
        
        // Player drop
        function playerDrop() {
            if (gameOver) return;
            player.pos.y++;
            if (collide(board, player)) {
                player.pos.y--;
                merge(board, player);
                playerReset();
                sweepRows();
                updateScore();
            }
            dropCounter = 0;
        }
        
        // Hard drop
        function playerHardDrop() {
            if (gameOver) return;
            while (!collide(board, player)) {
                player.pos.y++;
            }
            player.pos.y--;
            merge(board, player);
            playerReset();
            sweepRows();
            updateScore();
        }
        
        // Reset player with new piece
        function playerReset() {
            const piece = createPiece();
            player.matrix = piece.matrix;
            player.color = piece.color;
            player.colorIndex = SHAPES.indexOf(piece.matrix) + 1;
            player.pos.y = 0;
            player.pos.x = Math.floor(COLS / 2) - Math.floor(player.matrix[0].length / 2);
            
            // Game over check
            if (collide(board, player)) {
                gameOver = true;
                document.getElementById('gameOver').style.display = 'block';
                document.getElementById('finalScore').textContent = score;
                document.getElementById('finalLines').textContent = lines;
            }
        }
        
        // Sweep completed rows
        function sweepRows() {
            let rowCount = 0;
            outer: for (let y = board.length - 1; y >= 0; --y) {
                for (let x = 0; x < board[y].length; ++x) {
                    if (board[y][x] === 0) {
                        continue outer;
                    }
                }
                
                // Remove the row
                const row = board.splice(y, 1)[0].fill(0);
                board.unshift(row);
                ++y;
                
                rowCount++;
            }
            
            // Update score
            if (rowCount > 0) {
                lines += rowCount;
                // Scoring system: 40, 100, 300, 1200 for 1, 2, 3, 4 rows
                const linePoints = [0, 40, 100, 300, 1200];
                score += linePoints[rowCount] * level;
                
                // Level up every 10 lines
                level = Math.floor(lines / 10) + 1;
                dropInterval = 1000 - (level - 1) * 100; // Speed up as level increases
                if (dropInterval < 100) dropInterval = 100;
                
                updateScore();
            }
        }
        
        // Update score display
        function updateScore() {
            document.getElementById('score').textContent = score;
            document.getElementById('level').textContent = level;
        }
        
        // Game loop
        function update(time = 0) {
            const deltaTime = time - lastTime;
            lastTime = time;
            
            dropCounter += deltaTime;
            if (dropCounter > dropInterval) {
                playerDrop();
            }
            
            draw();
            if (!gameOver) {
                requestAnimationFrame(update);
            }
        }
        
        // Add button handler for both touch and click
        function addButtonHandler(buttonId, action) {
            const btn = document.getElementById(buttonId);
            
            // Handle touch events (mobile)
            btn.addEventListener('touchstart', (e) => {
                e.preventDefault();
                action();
            });
            
            // Handle click events (desktop)  
            btn.addEventListener('click', (e) => {
                e.preventDefault();
                action();
            });
        }
        
        // Initialize game
        function init() {
            createBoard();
            playerReset();
            updateScore();
            gameOver = false;
            document.getElementById('gameOver').style.display = 'none';
            lastTime = 0;
            dropCounter = 0;
            score = 0;
            level = 1;
            lines = 0;
            updateScore();
            update();
        }
        
        // Event listeners for controls
        addButtonHandler('leftBtn', () => playerMove(-1));
        addButtonHandler('rightBtn', () => playerMove(1));
        addButtonHandler('rotateBtn', playerRotate);
        addButtonHandler('downBtn', playerHardDrop);
        document.getElementById('restartBtn').addEventListener('click', init);
        
        // Keyboard controls for desktop
        document.addEventListener('keydown', event => {
            if (gameOver) return;
            
            switch (event.keyCode) {
                case 37: // left arrow
                    playerMove(-1);
                    break;
                case 39: // right arrow
                    playerMove(1);
                    break;
                case 40: // down arrow
                    playerDrop();
                    break;
                case 38: // up arrow
                    playerRotate();
                    break;
                case 32: // space
                    playerHardDrop();
                    break;
            }
        });
        
        // Start the game
        init();
    </script>
</body>
</html>
```

## Features of this Tetris Game:

1. **Mobile-First Design**:
   - Responsive layout that works on all screen sizes
   - Touch-friendly controls with large buttons
   - Properly sized game board for mobile screens

2. **Game Features**:
   - Classic Tetris gameplay with all 7 tetromino shapes
   - Score tracking and level progression
   - Increasing difficulty as you level up
   - Line clearing with proper scoring
   - Game over detection and restart functionality

3. **Controls**:
   - On-screen buttons for left, right, rotate, and hard drop
   - Keyboard controls for desktop play (arrow keys and spacebar)
   - Touch events properly implemented for mobile

4. **Visual Design**:
   - Colorful tetromino pieces with 3D effects
   - Grid-based game board with visible boundaries
   - Dark theme with vibrant colors for contrast
   - Responsive score and level displays

5. **Performance**:
   - Optimized game loop using requestAnimationFrame
   - Efficient collision detection and row sweeping
   - Smooth animations and transitions

The game is ready to play immediately - just open the HTML file in any modern browser! On mobile devices, use the on-screen controls, and on desktop, you can use the keyboard arrows and spacebar.