<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>Toy Chat üó®Ô∏è</title>
    <style>
        * {
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: #fefef5;
            color: #333;
            margin: 0;
            padding: 10px;
            font-size: 16px;
        }

        .app-container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            border: 3px solid #FFD63D;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 8px 8px 0 #C9C2F9;
        }

        h1 {
            color: #FF4B4B;
            font-size: 24px;
            margin: 0 0 20px 0;
            text-transform: uppercase;
        }

        button {
            background: #6ECBFF;
            color: white;
            border: none;
            padding: 16px 24px;
            border-radius: 25px;
            font-weight: bold;
            cursor: pointer;
            margin: 8px 0;
            font-size: 16px;
            width: 100%;
            min-height: 44px;
            display: block;
        }

        button:hover {
            background: #5ab8e6;
        }

        input, select {
            background: white;
            border: 2px solid #6ECBFF;
            color: #333;
            padding: 16px;
            border-radius: 8px;
            width: 100%;
            margin: 10px 0;
            font-size: 16px;
            min-height: 44px;
        }

        .screen { display: none; }
        .screen.active { display: block; }

        /* Chat specific styles */
        .chat-container {
            height: 60vh;
            overflow-y: auto;
            border: 2px solid #6ECBFF;
            border-radius: 8px;
            padding: 10px;
            margin-bottom: 10px;
        }

        .message {
            margin: 10px 0;
            padding: 12px;
            border-radius: 12px;
            max-width: 80%;
            word-wrap: break-word;
        }

        .message.mine {
            background: #FFEB63;
            margin-left: auto;
        }

        .message.others {
            background: #89ECFF;
            margin-right: auto;
        }

        .message .author {
            font-weight: bold;
            margin-bottom: 4px;
        }

        .message-form {
            display: flex;
            gap: 10px;
        }

        .message-form input {
            flex-grow: 1;
            margin: 0;
        }

        .message-form button {
            width: auto;
            margin: 0;
            padding: 12px 24px;
        }

        @media (min-width: 600px) {
            body { padding: 20px; }
            .app-container { padding: 30px; }
            
            button {
                width: auto;
                display: inline-block;
                margin: 5px;
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <div id="welcome-screen" class="screen active">
            <h1>Toy Chat üó®Ô∏è</h1>
            <p>Chat with your friends in this silly space!</p>
            <button onclick="showNewUserScreen()">New User</button>
            <button onclick="showReturningUserScreen()">Returning User</button>
        </div>
        
        <div id="new-user-screen" class="screen">
            <h1>New User</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Register & Enter</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="returning-user-screen" class="screen">
            <h1>Returning User</h1>
            <select id="user-label-select"></select>
            <input type="text" id="returning-passcode" placeholder="4-digit code" maxlength="4">
            <button onclick="loginReturningUser()">Login</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="main-screen" class="screen">
            <h1>Toy Chat üó®Ô∏è</h1>
            <div id="user-status">Welcome, <span id="current-user-label"></span>!</div>
            
            <div id="app-content">
                <div class="chat-container" id="chat-messages"></div>
                <div class="message-form">
                    <input type="text" id="message-input" placeholder="Type your message..." maxlength="280">
                    <button onclick="sendMessage()">Send</button>
                </div>
            </div>
            
            <button onclick="showScreen('welcome-screen')">Leave</button>
        </div>
    </div>

    <script>
        let currentUser = null;

        async function generateNewUser() {
            const slots = await checkAvailableSlots();
            if (slots.isFull) {
                alert('App is full!');
                return false;
            }
            
            const user = await generateUser();
            if (user?.success) {
                currentUser = user;
                document.getElementById('new-user-info').innerHTML = 
                    `Your ID: ${user.userLabel}<br>Code: ${user.passcode}<br>Save these!`;
                return true;
            }
            return false;
        }

        async function registerNewUser() {
            if (!currentUser) return;
            
            const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
            if (result?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                enterMainScreen();
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            await generateNewUser();
        }

        async function loginReturningUser() {
            const label = document.getElementById('user-label-select').value;
            const passcode = document.getElementById('returning-passcode').value;
            
            const result = await authenticateUser(label, passcode);
            if (result?.success) {
                currentUser = { userLabel: label, passcode, participantId: result.user.participantId };
                updateZadAuth(label, result.user.participantId);
                enterMainScreen();
            } else {
                alert('Wrong code!');
            }
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            if (screenId !== 'main-screen') stopPolling();
        }

        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const slots = await checkAvailableSlots();
            const select = document.getElementById('user-label-select');
            select.innerHTML = '<option>Select User</option>';
            slots.usedLabels.forEach(label => {
                select.innerHTML += `<option>${label}</option>`;
            });
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            startPolling();
            loadLatestData();
        }

        let pollingInterval;

        function startPolling() {
            pollingInterval = setInterval(() => loadLatestData(), 2000);
        }

        function stopPolling() {
            if (pollingInterval) clearInterval(pollingInterval);
        }

        async function loadLatestData() {
            const messages = await load('chat_messages');
            updateUI(messages);
        }

        function updateUI(messages) {
            const container = document.getElementById('chat-messages');
            container.innerHTML = messages
                .sort((a, b) => new Date(a.created_at) - new Date(b.created_at))
                .map(msg => `
                    <div class="message ${msg.author === currentUser.userLabel ? 'mine' : 'others'}">
                        <div class="author">${msg.author}</div>
                        ${msg.text}
                    </div>
                `).join('');
            container.scrollTop = container.scrollHeight;
        }

        async function sendMessage() {
            const input = document.getElementById('message-input');
            const text = input.value.trim();
            
            if (text) {
                await save('chat_messages', { text });
                input.value = '';
                loadLatestData();
            }
        }

        // Enter key to send
        document.getElementById('message-input')?.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        initAuth();
    </script>
</body>
</html>