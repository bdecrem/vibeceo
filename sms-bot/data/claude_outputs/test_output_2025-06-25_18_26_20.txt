Creating a simple Tetris game involves setting up the game board, handling piece movement and rotation, and managing scoring and game-over conditions. Here's a basic implementation using HTML5 Canvas and JavaScript:

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple Tetris Game</title>
    <style>
        canvas {
            border: 1px solid black;
            display: block;
            margin: 0 auto;
        }
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background: #000;
        }
    </style>
</head>
<body>
<canvas id="tetris" width="240" height="400"></canvas>
<script>
    const canvas = document.getElementById('tetris');
    const context = canvas.getContext('2d');
    context.scale(20, 20);

    const arenaWidth = 12;
    const arenaHeight = 20;

    function createMatrix(w, h) {
        const matrix = [];
        while (h--) {
            matrix.push(new Array(w).fill(0));
        }
        return matrix;
    }

    function drawMatrix(matrix, offset) {
        matrix.forEach((row, y) => {
            row.forEach((value, x) => {
                if (value !== 0) {
                    context.fillStyle = 'red';
                    context.fillRect(x + offset.x, y + offset.y, 1, 1);
                }
            });
        });
    }

    function merge(arena, player) {
        player.matrix.forEach((row, y) => {
            row.forEach((value, x) => {
                if (value !== 0) {
                    arena[y + player.pos.y][x + player.pos.x] = value;
                }
            });
        });
    }

    function arenaSweep() {
        let rowCount = 1;
        outer: for (let y = arena.length - 1; y > 0; --y) {
            for (let x = 0; x < arena[y].length; ++x) {
                if (arena[y][x] === 0) {
                    continue outer;
                }
            }

            const row = arena.splice(y, 1)[0].fill(0);
            arena.unshift(row);
            ++y;

            player.score += rowCount * 10;
            rowCount *= 2;
        }
    }

    function collide(arena, player) {
        const [m, o] = [player.matrix, player.pos];
        for (let y = 0; y < m.length; ++y) {
            for (let x = 0; x < m[y].length; ++x) {
                if (m[y][x] !== 0 &&
                   (arena[y + o.y] && arena[y + o.y][x + o.x]) !== 0) {
                    return true;
                }
            }
        }
        return false;
    }

    function createPiece(type) {
        if (type === 'T') {
            return [
                [0, 1, 0],
                [1, 1, 1],
                [0, 0, 0],
            ];
        } else if (type === 'O') {
            return [
                [1, 1],
                [1, 1],
            ];
        } else if (type === 'L') {
            return [
                [0, 1, 0],
                [0, 1, 0],
                [0, 1, 1],
            ];
        } else if (type === 'J') {
            return [
                [0, 1, 0],
                [0, 1, 0],
                [1, 1, 0],
            ];
        } else if (type === 'I') {
            return [
                [0, 1, 0, 0],
                [0, 1, 0, 0],
                [0, 1, 0, 0],
                [0, 1, 0, 0],
            ];
        } else if (type === 'S') {
            return [
                [0, 1, 1],
                [1, 1, 0],
                [0, 0, 0],
            ];
        } else if (type === 'Z') {
            return [
                [1, 1, 0],
                [0, 1, 1],
                [0, 0, 0],
            ];
        }
    }

    function draw() {
        context.clearRect(0, 0, canvas.width, canvas.height);
        context.fillStyle = '#000';
        context.fillRect(0, 0, canvas.width, canvas.height);

        drawMatrix(arena, {x: 0, y: 0});
        drawMatrix(player.matrix, player.pos);
    }

    function rotate(matrix, dir) {
        for (let y = 0; y < matrix.length; ++y) {
            for (let x = 0; x < y; ++x) {
                [
                    matrix[x][y],
                    matrix[y][x],
                ] = [
                    matrix[y][x],
                    matrix[x][y],
                ];
            }
        }

        if (dir > 0) {
            matrix.forEach(row => row.reverse());
        } else {
            matrix.reverse();
        }
    }

    function playerDrop() {
        player.pos.y++;
        if (collide(arena, player)) {
            player.pos.y--;
            merge(arena, player);
            playerReset();
            arenaSweep();
            updateScore();
        }
        dropCounter = 0;
    }

    function playerMove(dir) {
        player.pos.x += dir;
        if (collide(arena, player)) {
            player.pos.x -= dir;
        }
    }

    function playerReset() {
        const pieces = 'TJLOSZI';
        player.matrix = createPiece(pieces[Math.floor(pieces.length * Math.random())]);
        player.pos.y = 0;
        player.pos.x = (arena[0].length / 2 | 0) - 
                       (player.matrix[0].length / 2 | 0);
        if (collide(arena, player)) {
            arena.forEach(row => row.fill(0));
            player.score = 0;
            updateScore();
        }
    }

    function playerRotate(dir) {
        const pos = player.pos.x;
        let offset = 1;
        rotate(player.matrix, dir);
        while (collide(arena, player)) {
            player.pos.x += offset;
            offset = -(offset + (offset > 0 ? 1 : -1));
            if (offset > player.matrix[0].length) {
                rotate(player.matrix, -dir);
                player.pos.x = pos;
                return;
            }
        }
    }

    let dropCounter = 0;
    let dropInterval = 1000;

    let lastTime = 0;
    function update(time = 0) {
        const deltaTime = time - lastTime;
        lastTime = time;

        dropCounter += deltaTime;
        if (dropCounter > dropInterval) {
            playerDrop();
        }

        draw();
        requestAnimationFrame(update);
    }

    function updateScore() {
        document.getElementById('score').innerText = player.score;
    }

    const arena = createMatrix(arenaWidth, arenaHeight);

    const player = {
        pos: {x: 0, y: 0},
        matrix: null,
        score: 0,
    };

    document.addEventListener('keydown', event => {
        if (event.keyCode === 37) {
            playerMove(-1);
        } else if (event.keyCode === 39) {
            playerMove(1);
        } else if (event.keyCode === 40) {
            playerDrop();
        } else if (event.keyCode === 81) {
            playerRotate(-1);
        } else if (event.keyCode === 87) {
            playerRotate(1);
        }
    });

    playerReset();
    updateScore();
    update();

</script>
<div style="color: white; text-align: center; margin-top: 10px;">
    <div id="score">0</div>
</div>
</body>
</html>
```

### Features:
- **Controls**: Use arrow keys to move the pieces left, right, and down. Use `Q` and `W` to rotate the pieces.
- **Scoring**: Complete lines to increase your score.
- **Game Over**: The game resets when pieces reach the top of the board.
- **Responsive**: Adjusts to different screen sizes but designed to be run in a desktop browser for simplicity.

Feel free to expand on this foundation by adding more features like sound, better graphics, or a more complex scoring system.