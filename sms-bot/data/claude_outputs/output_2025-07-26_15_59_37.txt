<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>AI Journal Buddy</title>
    <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=JetBrains+Mono&display=swap" rel="stylesheet">
    <style>
        /* CHAOS Theme */
        :root {
            --bg: #FCFCF7;
            --border: #FFD63D;
            --shadow: #C9C2F9;
            --text: #0A0A0A;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Space Grotesk', system-ui, sans-serif;
            background: var(--bg);
            color: var(--text);
            line-height: 1.6;
            padding: 20px;
            font-size: 16px;
        }

        .screen {
            display: none;
            max-width: 666px;
            margin: 0 auto;
        }

        .screen.active {
            display: block;
        }

        h1 {
            font-size: 40px;
            text-transform: uppercase;
            margin-bottom: 20px;
            transform: rotate(-2deg);
            color: var(--text);
        }

        .card {
            background: var(--bg);
            border: 4px solid var(--border);
            padding: 20px;
            margin: 20px 0;
            box-shadow: 8px 8px 0 var(--shadow);
            transform: rotate(1deg);
        }

        .entry-card {
            background: white;
            border: 4px solid var(--border);
            padding: 20px;
            margin: 20px 0;
            box-shadow: 8px 8px 0 var(--shadow);
        }

        .suggestion-card {
            background: var(--shadow);
            color: var(--text);
            padding: 15px;
            margin: 20px 0;
            border: 4px solid var(--border);
            font-family: 'JetBrains Mono', monospace;
            transform: rotate(-1deg);
        }

        textarea, input {
            width: 100%;
            padding: 15px;
            margin: 10px 0;
            border: 3px solid var(--border);
            font-family: 'Space Grotesk', system-ui, sans-serif;
            font-size: 16px;
            min-height: 44px;
        }

        textarea {
            min-height: 120px;
        }

        button {
            background: var(--border);
            border: none;
            padding: 15px 30px;
            font-size: 18px;
            font-weight: bold;
            text-transform: uppercase;
            cursor: pointer;
            min-height: 44px;
            width: 100%;
            margin: 10px 0;
            box-shadow: 4px 4px 0 var(--shadow);
            transform: rotate(-1deg);
            transition: all 0.2s;
        }

        button:active {
            transform: translateY(4px) rotate(-1deg);
            box-shadow: 0px 0px 0 var(--shadow);
        }

        .date {
            font-family: 'JetBrains Mono', monospace;
            font-size: 14px;
            color: #666;
        }

        .goals-display {
            font-style: italic;
            margin: 10px 0;
            padding: 10px;
            background: rgba(201, 194, 249, 0.2);
        }

    </style>
</head>
<body>
    <div class="app-container">
        <!-- Welcome Screen -->
        <div id="welcome-screen" class="screen active">
            <h1>üåü AI Journal Buddy</h1>
            <p>Your personal journaling companion with AI-powered insights</p>
            <button onclick="showNewUserScreen()">New User</button>
            <button onclick="showReturningUserScreen()">Returning User</button>
        </div>

        <!-- New User Screen -->
        <div id="new-user-screen" class="screen">
            <h1>New User</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Register & Enter</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <!-- Returning User Screen -->
        <div id="returning-user-screen" class="screen">
            <h1>Welcome Back</h1>
            <select id="user-label-select"></select>
            <input type="text" id="returning-passcode" placeholder="4-digit code" maxlength="4">
            <button onclick="loginReturningUser()">Login</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <!-- Goals Screen -->
        <div id="goals-screen" class="screen">
            <h1>Set Your Goals</h1>
            <p>What are your main goals or themes you want to explore in your journal?</p>
            <textarea id="goals-input" placeholder="Example: Self-improvement, creativity, mindfulness..."></textarea>
            <button onclick="saveGoals()">Set Goals</button>
        </div>

        <!-- Main Screen -->
        <div id="main-screen" class="screen">
            <h1>My Journal</h1>
            <div id="user-status">Welcome, <span id="current-user-label"></span>! üìù</div>
            
            <div class="goals-display" id="goals-display"></div>
            
            <div class="card">
                <textarea id="entry-input" placeholder="What's on your mind today?"></textarea>
                <button onclick="saveEntry()">Save Entry ‚ú®</button>
            </div>

            <div id="suggestion-container" class="suggestion-card">
                Loading next topic suggestion...
            </div>

            <div id="entries-container"></div>
            
            <button onclick="showScreen('welcome-screen')">Leave</button>
        </div>
    </div>

    <script>
        let currentUser = null;
        let pollingInterval;

        // Authentication Helper Functions
        async function generateNewUser() {
            const slots = await checkAvailableSlots();
            if (slots.isFull) {
                alert('App is full!');
                return false;
            }
            const user = await generateUser();
            if (user?.success) {
                currentUser = user;
                document.getElementById('new-user-info').innerHTML = 
                    `Your ID: ${user.userLabel}<br>Code: ${user.passcode}<br>Save these!`;
                return true;
            }
            return false;
        }

        async function registerNewUser() {
            if (!currentUser) return;
            const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
            if (result?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                showScreen('goals-screen');
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            await generateNewUser();
        }

        async function loginReturningUser() {
            const label = document.getElementById('user-label-select').value;
            const passcode = document.getElementById('returning-passcode').value;
            const result = await authenticateUser(label, passcode);
            if (result?.success) {
                currentUser = { userLabel: label, passcode, participantId: result.user.participantId };
                updateZadAuth(label, result.user.participantId);
                enterMainScreen();
            } else {
                alert('Wrong code!');
            }
        }

        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const slots = await checkAvailableSlots();
            const select = document.getElementById('user-label-select');
            select.innerHTML = '<option>Select User</option>';
            slots.usedLabels.forEach(label => {
                select.innerHTML += `<option>${label}</option>`;
            });
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            if (screenId !== 'main-screen') stopPolling();
        }

        // Journal Functions
        async function saveGoals() {
            const goals = document.getElementById('goals-input').value;
            if (!goals) {
                alert('Please enter your goals!');
                return;
            }
            await save('goals', { goals });
            enterMainScreen();
        }

        async function saveEntry() {
            const text = document.getElementById('entry-input').value;
            if (!text) {
                alert('Please write something!');
                return;
            }
            await save('entry', { text, timestamp: new Date().toISOString() });
            document.getElementById('entry-input').value = '';
            await loadLatestData();
        }

        function startPolling() {
            pollingInterval = setInterval(() => loadLatestData(), 2000);
        }

        function stopPolling() {
            if (pollingInterval) clearInterval(pollingInterval);
        }

        function deduplicate(items, uniqueField = 'timestamp') {
            return items.reduce((acc, item) => {
                const existing = acc.find(i => i[uniqueField] === item[uniqueField]);
                if (!existing || new Date(item.created_at) > new Date(existing.created_at)) {
                    if (existing) {
                        const index = acc.indexOf(existing);
                        acc[index] = item;
                    } else {
                        acc.push(item);
                    }
                }
                return acc;
            }, []);
        }

        async function generateNextTopicSuggestion(entries, goals) {
            const prompt = `Based on these journal entries: "${entries.map(e => e.text).join('" "')}"\n\nAnd these goals: "${goals}"\n\nSuggest an introspective journal topic for their next entry. Keep it short and specific.`;
            
            try {
                const suggestion = await generateText(prompt, {
                    maxTokens: 100,
                    temperature: 0.7
                });
                return suggestion;
            } catch (error) {
                return "How are you feeling right now?";
            }
        }

        async function loadLatestData() {
            const allGoals = await load('goals');
            const myGoals = allGoals.filter(g => g.author === getUsername());
            const latestGoals = deduplicate(myGoals)[0]?.goals || '';
            
            document.getElementById('goals-display').innerHTML = `
                <strong>My Goals:</strong> ${latestGoals}
            `;

            const allEntries = await load('entry');
            const myEntries = allEntries.filter(e => e.author === getUsername());
            const uniqueEntries = deduplicate(myEntries)
                .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));

            const entriesHtml = uniqueEntries.map(entry => `
                <div class="entry-card">
                    <div class="date">${new Date(entry.timestamp).toLocaleString()}</div>
                    <p>${entry.text}</p>
                </div>
            `).join('');

            document.getElementById('entries-container').innerHTML = entriesHtml;

            // Generate next topic suggestion
            const suggestion = await generateNextTopicSuggestion(uniqueEntries, latestGoals);
            document.getElementById('suggestion-container').innerHTML = `
                <strong>‚ú® Next Topic Suggestion:</strong><br>
                ${suggestion}
            `;
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            startPolling();
            loadLatestData();
        }

        initAuth();
    </script>
</body>
</html>