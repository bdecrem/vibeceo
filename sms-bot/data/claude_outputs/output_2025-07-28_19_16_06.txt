```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0">
  <title>Flappy Bird</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: linear-gradient(to bottom, #64b3f4, #c2e59c);
      font-family: sans-serif;
      touch-action: none;
      overflow: hidden;
    }
    canvas {
      display: block;
    }
    #controls {
      position: fixed;
      bottom: 0;
      width: 100%;
      height: 120px;
      background: rgba(0,0,0,0.2);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
    }
    #jumpButton {
      width: 80px;
      height: 80px;
      border-radius: 50%;
      background: rgba(255,255,255,0.5);
      border: 2px solid #fff;
      font-size: 24px;
      cursor: pointer;
      display: flex;
      justify-content: center;
      align-items: center;
    }
    .screen {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: calc(100% - 120px);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      text-align: center;
      background: rgba(0,0,0,0.5);
      color: white;
      z-index: 500;
    }
    button {
      margin-top: 20px;
      padding: 10px 20px;
      font-size: 18px;
      background: #fff;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <canvas id="gameCanvas"></canvas>
  <div id="introScreen" class="screen">
    <h1>üê¶ Flappy Bird</h1>
    <p>Tap to flap and avoid pipes!</p>
    <button id="startButton">Start Game</button>
  </div>
  <div id="gameOverScreen" class="screen" style="display:none;">
    <h2>Game Over!</h2>
    <p>Score: <span id="finalScore">0</span></p>
    <button id="restartButton">Play Again</button>
  </div>
  <div id="controls">
    <div id="jumpButton">‚¨ÜÔ∏è</div>
  </div>

  <script>
    var canvas = document.getElementById('gameCanvas');
    var ctx = canvas.getContext('2d');
    var dpr = window.devicePixelRatio || 1;
    var controlsHeight = 120;

    function resizeCanvas() {
      canvas.width = window.innerWidth * dpr;
      canvas.height = (window.innerHeight - controlsHeight) * dpr;
      canvas.style.width = window.innerWidth + 'px';
      canvas.style.height = (window.innerHeight - controlsHeight) + 'px';
      ctx.scale(dpr, dpr);
    }

    window.addEventListener('resize', resizeCanvas);
    resizeCanvas();

    var gameState = 'intro'; // intro, playing, gameOver
    var score = 0;
    var bird = {
      x: 100,
      y: canvas.height / 2 / dpr,
      radius: 20,
      velocity: 0,
      gravity: 0.5,
      jump: -10
    };

    var pipes = [];
    var pipeWidth = 70;
    var pipeGap = 150;
    var pipeSpeed = 3;
    var pipeInterval = 1500; // ms
    var lastPipe = 0;

    function resetGame() {
      bird.y = canvas.height / 2 / dpr;
      bird.velocity = 0;
      pipes = [];
      score = 0;
      lastPipe = 0;
    }

    function jump() {
      if (gameState === 'playing') {
        bird.velocity = bird.jump;
      }
    }

    document.getElementById('jumpButton').addEventListener('click', function(e) {
      e.preventDefault();
      jump();
    });

    document.addEventListener('keydown', function(e) {
      if (e.code === 'Space') {
        jump();
      }
    });

    document.getElementById('startButton').addEventListener('click', function() {
      gameState = 'playing';
      document.getElementById('introScreen').style.display = 'none';
      resetGame();
    });

    document.getElementById('restartButton').addEventListener('click', function() {
      gameState = 'playing';
      document.getElementById('gameOverScreen').style.display = 'none';
      resetGame();
    });

    function updateBird() {
      bird.velocity += bird.gravity;
      bird.y += bird.velocity;

      // Ground collision
      if (bird.y + bird.radius > canvas.height / dpr) {
        gameState = 'gameOver';
        document.getElementById('finalScore').textContent = score;
        document.getElementById('gameOverScreen').style.display = 'flex';
      }

      // Ceiling collision
      if (bird.y - bird.radius < 0) {
        bird.y = bird.radius;
        bird.velocity = 0;
      }
    }

    function updatePipes(timestamp) {
      if (timestamp - lastPipe > pipeInterval) {
        var pipeHeight = Math.floor(Math.random() * (canvas.height/dpr - pipeGap - 100)) + 50;
        pipes.push({
          x: canvas.width / dpr,
          y: 0,
          width: pipeWidth,
          height: pipeHeight,
          passed: false
        });
        pipes.push({
          x: canvas.width / dpr,
          y: pipeHeight + pipeGap,
          width: pipeWidth,
          height: canvas.height / dpr - pipeHeight - pipeGap,
          passed: false
        });
        lastPipe = timestamp;
      }

      for (var i = 0; i < pipes.length; i++) {
        var pipe = pipes[i];
        pipe.x -= pipeSpeed;

        // Score when passing a pipe
        if (!pipe.passed && pipe.x + pipe.width < bird.x) {
          pipe.passed = true;
          if (i % 2 === 0) score++;
        }

        // Collision detection
        if (
          bird.x + bird.radius > pipe.x &&
          bird.x - bird.radius < pipe.x + pipe.width &&
          bird.y - bird.radius < pipe.y + pipe.height &&
          bird.y + bird.radius > pipe.y
        ) {
          gameState = 'gameOver';
          document.getElementById('finalScore').textContent = score;
          document.getElementById('gameOverScreen').style.display = 'flex';
        }

        // Remove offscreen pipes
        if (pipe.x + pipe.width < 0) {
          pipes.splice(i, 1);
          i--;
        }
      }
    }

    function drawBird() {
      ctx.beginPath();
      ctx.arc(bird.x, bird.y, bird.radius, 0, Math.PI * 2);
      ctx.fillStyle = '#FFD700';
      ctx.fill();
      ctx.closePath();
    }

    function drawPipes() {
      for (var i = 0; i < pipes.length; i++) {
        var pipe = pipes[i];
        ctx.fillStyle = '#2E8B57';
        ctx.fillRect(pipe.x, pipe.y, pipe.width, pipe.height);
      }
    }

    function drawScore() {
      ctx.fillStyle = 'white';
      ctx.font = '30px sans-serif';
      ctx.fillText('Score: ' + score, 20, 40);
    }

    var lastTimestamp = 0;
    function gameLoop(timestamp) {
      var delta = timestamp - lastTimestamp;
      lastTimestamp = timestamp;

      ctx.clearRect(0, 0, canvas.width, canvas.height);

      if (gameState === 'playing') {
        updateBird();
        updatePipes(timestamp);
        drawPipes();
        drawBird();
        drawScore();
      }

      requestAnimationFrame(gameLoop);
    }

    requestAnimationFrame(gameLoop);
  </script>
</body>
</html>
```