```html
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, user-scalable=no">
    <title>WTAF Tetris</title>
    <style>
        * { margin: 0; padding: 0; touch-action: none; }
        body { background: linear-gradient(to bottom, #1a1a2e, #16213e); font-family: sans-serif; overflow: hidden; }
        canvas { display: block; }
        .screen { position: absolute; top: 0; left: 0; width: 100%; height: 100%; display: flex; flex-direction: column; justify-content: center; align-items: center; color: white; text-align: center; }
        .hidden { display: none; }
        h1 { font-size: 40px; margin-bottom: 20px; color: #ffd166; text-shadow: 0 0 10px #ff9e1f; }
        p { font-size: 20px; max-width: 80%; margin-bottom: 30px; }
        button { background: #06d6a0; color: white; border: none; padding: 15px 30px; font-size: 20px; border-radius: 50px; cursor: pointer; box-shadow: 0 5px 0 #049c76; margin: 10px; }
        button:active { transform: translateY(5px); box-shadow: none; }
        .controls { position: fixed; bottom: 0; width: 100%; height: 120px; background: rgba(0,0,0,0.5); display: flex; justify-content: center; align-items: center; z-index: 1000; }
        .d-pad { display: grid; grid-template-columns: repeat(3, 60px); grid-template-rows: repeat(3, 60px); gap: 10px; }
        .d-btn { background: rgba(255,255,255,0.2); border-radius: 10px; display: flex; justify-content: center; align-items: center; font-size: 24px; user-select: none; }
        #up { grid-column: 2; grid-row: 1; }
        #left { grid-column: 1; grid-row: 2; }
        #right { grid-column: 3; grid-row: 2; }
        #down { grid-column: 2; grid-row: 3; }
        .score { position: absolute; top: 20px; left: 20px; font-size: 24px; color: white; }
    </style>
</head>
<body>
    <canvas id="game"></canvas>
    <div id="intro" class="screen">
        <h1>üß± WTAF Tetris</h1>
        <p>Stack blocks. Clear lines. Don't crash!</p>
        <button id="start">‚ñ∂Ô∏è Start Game</button>
    </div>
    <div id="gameover" class="screen hidden">
        <h1>üí• Game Over</h1>
        <p>Score: <span id="final-score">0</span></p>
        <button id="restart">üîÑ Play Again</button>
    </div>
    <div class="score">Score: <span id="score">0</span></div>
    <div class="controls">
        <div class="d-pad">
            <div id="up" class="d-btn">‚¨ÜÔ∏è</div>
            <div id="left" class="d-btn">‚¨ÖÔ∏è</div>
            <div id="right" class="d-btn">‚û°Ô∏è</div>
            <div id="down" class="d-btn">‚¨áÔ∏è</div>
        </div>
    </div>

    <script>
        var canvas = document.getElementById('game');
        var ctx = canvas.getContext('2d');
        var introScreen = document.getElementById('intro');
        var gameOverScreen = document.getElementById('gameover');
        var scoreElement = document.getElementById('score');
        var finalScoreElement = document.getElementById('final-score');
        var startButton = document.getElementById('start');
        var restartButton = document.getElementById('restart');

        var COLS = 10, ROWS = 20;
        var blockSize, board, currentPiece, nextPiece, score, dropInterval, lastTime;
        var gameOver = false;

        var colors = [
            null,
            '#FF0D72', // I
            '#0DC2FF', // J
            '#0DFF72', // L
            '#F538FF', // O
            '#FF8E0D', // S
            '#FFE138', // T
            '#3877FF'  // Z
        ];

        var shapes = [
            [],
            [[0,0,0,0], [1,1,1,1], [0,0,0,0], [0,0,0,0]], // I
            [[2,0,0], [2,2,2], [0,0,0]],                   // J
            [[0,0,2], [2,2,2], [0,0,0]],                   // L
            [[1,1], [1,1]],                                // O
            [[0,2,2], [2,2,0], [0,0,0]],                   // S
            [[0,1,0], [1,1,1], [0,0,0]],                   // T
            [[2,2,0], [0,2,2], [0,0,0]]                    // Z
        ];

        function createBoard() {
            var b = [];
            for (var r = 0; r < ROWS; r++) {
                b.push(Array(COLS).fill(0));
            }
            return b;
        }

        function createPiece(type) {
            return {
                shape: shapes[type],
                color: colors[type],
                x: Math.floor(COLS / 2) - Math.floor(shapes[type][0].length / 2),
                y: 0,
                type: type
            };
        }

        function drawBlock(x, y, color) {
            ctx.fillStyle = color;
            ctx.fillRect(x * blockSize, y * blockSize, blockSize, blockSize);
            ctx.strokeStyle = '#000';
            ctx.strokeRect(x * blockSize, y * blockSize, blockSize, blockSize);
        }

        function drawBoard() {
            for (var y = 0; y < ROWS; y++) {
                for (var x = 0; x < COLS; x++) {
                    if (board[y][x]) {
                        drawBlock(x, y, colors[board[y][x]]);
                    }
                }
            }
        }

        function drawPiece(piece) {
            for (var y = 0; y < piece.shape.length; y++) {
                for (var x = 0; x < piece.shape[y].length; x++) {
                    if (piece.shape[y][x]) {
                        drawBlock(piece.x + x, piece.y + y, piece.color);
                    }
                }
            }
        }

        function rotate(piece) {
            var shape = piece.shape;
            var r = [];
            for (var x = 0; x < shape[0].length; x++) {
                var newRow = [];
                for (var y = shape.length - 1; y >= 0; y--) {
                    newRow.push(shape[y][x]);
                }
                r.push(newRow);
            }
            return r;
        }

        function isValidPosition(piece, dx, dy, newShape) {
            var shape = newShape || piece.shape;
            for (var y = 0; y < shape.length; y++) {
                for (var x = 0; x < shape[y].length; x++) {
                    if (shape[y][x]) {
                        var newX = piece.x + x + dx;
                        var newY = piece.y + y + dy;
                        if (newX < 0 || newX >= COLS || newY >= ROWS) return false;
                        if (newY >= 0 && board[newY][newX]) return false;
                    }
                }
            }
            return true;
        }

        function merge() {
            for (var y = 0; y < currentPiece.shape.length; y++) {
                for (var x = 0; x < currentPiece.shape[y].length; x++) {
                    if (currentPiece.shape[y][x]) {
                        var boardY = currentPiece.y + y;
                        if (boardY < 0) {
                            gameOver = true;
                            return;
                        }
                        board[boardY][currentPiece.x + x] = currentPiece.type;
                    }
                }
            }
        }

        function clearLines() {
            var lines = 0;
            for (var y = ROWS - 1; y >= 0; y--) {
                if (board[y].every(function(cell) { return cell !== 0; })) {
                    board.splice(y, 1);
                    board.unshift(Array(COLS).fill(0));
                    lines++;
                    y++;
                }
            }
            if (lines > 0) {
                score += lines * 100;
                scoreElement.textContent = score;
                dropInterval = Math.max(100, 1000 - Math.floor(score / 500) * 100);
            }
        }

        function resetGame() {
            board = createBoard();
            score = 0;
            scoreElement.textContent = score;
            dropInterval = 1000;
            gameOver = false;
            currentPiece = createPiece(Math.floor(Math.random() * 7) + 1);
            nextPiece = createPiece(Math.floor(Math.random() * 7) + 1);
        }

        function update() {
            if (gameOver) return;
            if (!isValidPosition(currentPiece, 0, 1)) {
                merge();
                if (gameOver) return;
                clearLines();
                currentPiece = nextPiece;
                nextPiece = createPiece(Math.floor(Math.random() * 7) + 1);
                if (!isValidPosition(currentPiece, 0, 0)) {
                    gameOver = true;
                }
            } else {
                currentPiece.y++;
            }
        }

        function draw() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            drawBoard();
            drawPiece(currentPiece);
        }

        function gameLoop(time) {
            if (!lastTime) lastTime = time;
            var delta = time - lastTime;

            if (delta > dropInterval) {
                update();
                lastTime = time;
            }

            draw();

            if (gameOver) {
                finalScoreElement.textContent = score;
                gameOverScreen.classList.remove('hidden');
                return;
            }

            requestAnimationFrame(gameLoop);
        }

        function handleInput(direction) {
            if (gameOver) return;
            switch (direction) {
                case 'left':
                    if (isValidPosition(currentPiece, -1, 0)) currentPiece.x--;
                    break;
                case 'right':
                    if (isValidPosition(currentPiece, 1, 0)) currentPiece.x++;
                    break;
                case 'down':
                    if (isValidPosition(currentPiece, 0, 1)) currentPiece.y++;
                    break;
                case 'up':
                    var rotated = rotate(currentPiece);
                    if (isValidPosition(currentPiece, 0, 0, rotated)) currentPiece.shape = rotated;
                    break;
            }
        }

        function setupCanvas() {
            var controlsHeight = 120;
            var availableHeight = window.innerHeight - controlsHeight;
            blockSize = Math.min(
                Math.floor(window.innerWidth / COLS),
                Math.floor(availableHeight / ROWS)
            );
            canvas.width = COLS * blockSize;
            canvas.height = ROWS * blockSize;
            canvas.style.width = (COLS * blockSize) + 'px';
            canvas.style.height = (ROWS * blockSize) + 'px';
            canvas.style.display = 'block';
            canvas.style.margin = '0 auto';
            canvas.style.paddingTop = Math.max(0, (availableHeight - canvas.height) / 2) + 'px';
        }

        window.addEventListener('resize', function() {
            setupCanvas();
        });

        startButton.addEventListener('click', function() {
            introScreen.classList.add('hidden');
            setupCanvas();
            resetGame();
            lastTime = 0;
            requestAnimationFrame(gameLoop);
        });

        restartButton.addEventListener('click', function() {
            gameOverScreen.classList.add('hidden');
            setupCanvas();
            resetGame();
            lastTime = 0;
            requestAnimationFrame(gameLoop);
        });

        document.getElementById('left').addEventListener('touchstart', function(e) { e.preventDefault(); handleInput('left'); });
        document.getElementById('right').addEventListener('touchstart', function(e) { e.preventDefault(); handleInput('right'); });
        document.getElementById('down').addEventListener('touchstart', function(e) { e.preventDefault(); handleInput('down'); });
        document.getElementById('up').addEventListener('touchstart', function(e) { e.preventDefault(); handleInput('up'); });

        document.addEventListener('keydown', function(e) {
            if (e.keyCode === 37) handleInput('left');
            if (e.keyCode === 39) handleInput('right');
            if (e.keyCode === 40) handleInput('down');
            if (e.keyCode === 38) handleInput('up');
        });
    </script>
</body>
</html>
```