```html
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
<title>BrickBounce</title>
<style>
@import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@700&family=Inter:wght@400;600&display=swap');

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Inter', sans-serif;
  overflow: hidden;
  touch-action: none;
  -webkit-user-select: none;
  user-select: none;
  position: relative;
  width: 100vw;
  height: 100vh;
}

.gradient-bg {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(135deg, #FF6B6B, #FFE66D, #4ECDC4, #95E1D3);
  background-size: 400% 400%;
  animation: gradientShift 15s ease infinite;
  z-index: -2;
}

@keyframes gradientShift {
  0% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
  100% { background-position: 0% 50%; }
}

.floating-emoji {
  position: absolute;
  font-size: 2rem;
  pointer-events: none;
  z-index: 1;
  opacity: 0.3;
  animation: float 20s infinite ease-in-out;
}

.emoji-1 { top: 10%; left: 10%; animation-delay: 0s; }
.emoji-2 { top: 70%; right: 15%; animation-delay: 5s; }
.emoji-3 { bottom: 20%; left: 20%; animation-delay: 10s; }

@keyframes float {
  0%, 100% { transform: translateY(0) rotate(0deg); }
  50% { transform: translateY(-20px) rotate(10deg); }
}

.screen {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  opacity: 0;
  transition: opacity 0.5s ease;
  z-index: 10;
}

.screen.active {
  opacity: 1;
}

.glass-container {
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  border-radius: 20px;
  padding: 2rem;
  text-align: center;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.2);
  animation: slideIn 0.6s ease-out;
}

@keyframes slideIn {
  from {
    transform: translateY(30px);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

h1 {
  font-family: 'Space Grotesk', sans-serif;
  font-size: 3rem;
  color: #fff;
  margin-bottom: 1rem;
  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
}

.subtitle {
  font-size: 1.2rem;
  color: rgba(255, 255, 255, 0.9);
  margin-bottom: 2rem;
}

.btn {
  background: rgba(255, 255, 255, 0.2);
  backdrop-filter: blur(5px);
  border: 2px solid rgba(255, 255, 255, 0.4);
  color: #fff;
  font-size: 1.2rem;
  font-weight: 600;
  padding: 1rem 2rem;
  border-radius: 50px;
  cursor: pointer;
  transition: all 0.3s ease;
  min-width: 200px;
  min-height: 60px;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
}

.btn:hover, .btn:active {
  background: rgba(255, 255, 255, 0.3);
  transform: translateY(-2px);
  box-shadow: 0 5px 20px rgba(0, 0, 0, 0.2);
}

#gameCanvas {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 5;
  cursor: none;
}

.score-display {
  position: absolute;
  top: 20px;
  left: 50%;
  transform: translateX(-50%);
  font-family: 'Space Grotesk', sans-serif;
  font-size: 2rem;
  color: #fff;
  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
  z-index: 6;
  opacity: 0;
  transition: opacity 0.5s ease;
}

.score-display.active {
  opacity: 1;
}

.final-score {
  font-family: 'Space Grotesk', sans-serif;
  font-size: 4rem;
  color: #FFE66D;
  margin: 1rem 0;
  text-shadow: 3px 3px 6px rgba(0, 0, 0, 0.3);
}

@media (max-width: 768px) {
  h1 { font-size: 2.5rem; }
  .subtitle { font-size: 1rem; }
  .btn { font-size: 1rem; padding: 0.8rem 1.5rem; }
  .final-score { font-size: 3rem; }
}
</style>
</head>
<body>
<div class="gradient-bg"></div>
<div class="floating-emoji emoji-1">ðŸŽ®</div>
<div class="floating-emoji emoji-2">ðŸ§±</div>
<div class="floating-emoji emoji-3">âœ¨</div>

<div id="introScreen" class="screen active">
  <div class="glass-container">
    <h1>BrickBounce</h1>
    <p class="subtitle">Tap to break, swipe to move</p>
    <button class="btn" onclick="startGame()">Play Now ðŸŽ®</button>
  </div>
</div>

<canvas id="gameCanvas"></canvas>
<div class="score-display" id="scoreDisplay">0</div>

<div id="endScreen" class="screen">
  <div class="glass-container">
    <h1>Game Over!</h1>
    <div class="final-score" id="finalScore">0</div>
    <p class="subtitle">Bricks bounced beautifully</p>
    <button class="btn" onclick="restartGame()">Bounce Again ðŸ”„</button>
  </div>
</div>

<script>
const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');
const dpr = window.devicePixelRatio || 1;

let gameState = 'intro';
let score = 0;
let animationId = null;

canvas.width = window.innerWidth * dpr;
canvas.height = window.innerHeight * dpr;
canvas.style.width = window.innerWidth + 'px';
canvas.style.height = window.innerHeight + 'px';
ctx.scale(dpr, dpr);

const game = {
  paddle: {
    x: window.innerWidth / 2 - 50,
    y: window.innerHeight - 80,
    width: 100,
    height: 15,
    speed: 0,
    targetX: window.innerWidth / 2 - 50
  },
  ball: {
    x: window.innerWidth / 2,
    y: window.innerHeight / 2,
    radius: 8,
    dx: 4,
    dy: -4,
    speed: 6
  },
  bricks: [],
  particles: [],
  powerUps: []
};

const brickColors = ['#FF6B6B', '#FFE66D', '#4ECDC4', '#95E1D3', '#FA8072'];

function initBricks() {
  game.bricks = [];
  const rows = 5;
  const cols = Math.floor(window.innerWidth / 80);
  const brickWidth = (window.innerWidth - 20) / cols - 10;
  const brickHeight = 25;
  
  for (let r = 0; r < rows; r++) {
    for (let c = 0; c < cols; c++) {
      game.bricks.push({
        x: c * (brickWidth + 10) + 15,
        y: r * (brickHeight + 10) + 60,
        width: brickWidth,
        height: brickHeight,
        color: brickColors[r % brickColors.length],
        hits: 1,
        alive: true
      });
    }
  }
}

function createParticles(x, y, color) {
  for (let i = 0; i < 8; i++) {
    game.particles.push({
      x: x,
      y: y,
      dx: (Math.random() - 0.5) * 8,
      dy: (Math.random() - 0.5) * 8,
      size: Math.random() * 4 + 2,
      color: color,
      life: 1
    });
  }
}

function updateParticles() {
  game.particles = game.particles.filter(p => {
    p.x += p.dx;
    p.y += p.dy;
    p.dy += 0.2;
    p.life -= 0.02;
    return p.life > 0;
  });
}

function drawParticles() {
  game.particles.forEach(p => {
    ctx.globalAlpha = p.life;
    ctx.fillStyle = p.color;
    ctx.beginPath();
    ctx.arc(p.x, p.y, p.size, 0, Math.PI * 2);
    ctx.fill();
  });
  ctx.globalAlpha = 1;
}

function handleTouch(e) {
  if (gameState !== 'playing') return;
  e.preventDefault();
  
  const touch = e.touches[0];
  const rect = canvas.getBoundingClientRect();
  const x = touch.clientX - rect.left;
  
  game.paddle.targetX = x - game.paddle.width / 2;
}

function handleMouse(e) {
  if (gameState !== 'playing') return;
  
  const rect = canvas.getBoundingClientRect();
  const x = e.clientX - rect.left;
  
  game.paddle.targetX = x - game.paddle.width / 2;
}

canvas.addEventListener('touchstart', handleTouch);
canvas.addEventListener('touchmove', handleTouch);
canvas.addEventListener('mousemove', handleMouse);

function updatePaddle() {
  const ease = 0.2;
  game.paddle.x += (game.paddle.targetX - game.paddle.x) * ease;
  
  if (game.paddle.x < 0) game.paddle.x = 0;
  if (game.paddle.x + game.paddle.width > window.innerWidth) {
    game.paddle.x = window.innerWidth - game.paddle.width;
  }
}

function updateBall() {
  game.ball.x += game.ball.dx;
  game.ball.y += game.ball.dy;
  
  if (game.ball.x + game.ball.radius > window.innerWidth || game.ball.x - game.ball.radius < 0) {
    game.ball.dx = -game.ball.dx;
    createParticles(game.ball.x, game.ball.y, '#FFE66D');
  }
  
  if (game.ball.y - game.ball.radius < 0) {
    game.ball.dy = -game.ball.dy;
    createParticles(game.ball.x, game.ball.y, '#FFE66D');
  }
  
  if (game.ball.y > window.innerHeight) {
    endGame();
  }
  
  if (game.ball.x > game.paddle.x && 
      game.ball.x < game.paddle.x + game.paddle.width &&
      game.ball.y + game.ball.radius > game.paddle.y &&
      game.ball.y - game.ball.radius < game.paddle.y + game.paddle.height) {
    
    game.ball.dy = -Math.abs(game.ball.dy);
    
    const hitPos = (game.ball.x - game.paddle.x) / game.paddle.width;
    game.ball.dx = 8 * (hitPos - 0.5);
    
    createParticles(game.ball.x, game.paddle.y, '#4ECDC4');
  }
  
  game.bricks.forEach((brick, index) => {
    if (!brick.alive) return;
    
    if (game.ball.x > brick.x && 
        game.ball.x < brick.x + brick.width &&
        game.ball.y - game.ball.radius < brick.y + brick.height &&
        game.ball.y + game.ball.radius > brick.y) {
      
      brick.alive = false;
      game.ball.dy = -game.ball.dy;
      score += 10;
      document.getElementById('scoreDisplay').textContent = score;
      
      createParticles(brick.x + brick.width / 2, brick.y + brick.height / 2, brick.color);
      
      if (game.bricks.every(b => !b.alive)) {
        endGame();
      }
    }
  });
}

function render() {
  ctx.clearRect(0, 0, window.innerWidth, window.innerHeight);
  
  ctx.fillStyle = 'rgba(255, 255, 255, 0.2)';
  ctx.fillRect(game.paddle.x, game.paddle.y, game.paddle.width, game.paddle.height);
  ctx.strokeStyle = 'rgba(255, 255, 255, 0.8)';
  ctx.lineWidth = 2;
  ctx.strokeRect(game.paddle.x, game.paddle.y, game.paddle.width, game.paddle.height);
  
  ctx.fillStyle = '#fff';
  ctx.beginPath();
  ctx.arc(game.ball.x, game.ball.y, game.ball.radius, 0, Math.PI * 2);
  ctx.fill();
  ctx.strokeStyle = 'rgba(255, 255, 255, 0.5)';
  ctx.stroke();
  
  game.bricks.forEach(brick => {
    if (!brick.alive) return;
    
    ctx.fillStyle = brick.color;
    ctx.fillRect(brick.x, brick.y, brick.width, brick.height);
    ctx.strokeStyle = 'rgba(255, 255, 255, 0.3)';
    ctx.strokeRect(brick.x, brick.y, brick.width, brick.height);
  });
  
  drawParticles();
}

function gameLoop() {
  if (gameState !== 'playing') return;
  
  updatePaddle();
  updateBall();
  updateParticles();
  render();
  
  animationId = requestAnimationFrame(gameLoop);
}

function startGame() {
  document.getElementById('introScreen').classList.remove('active');
  document.getElementById('scoreDisplay').classList.add('active');
  
  score = 0;
  document.getElementById('scoreDisplay').textContent = score;
  
  game.ball.x = window.innerWidth / 2;
  game.ball.y = window.innerHeight / 2;
  game.ball.dx = 4;
  game.ball.dy = -4;
  
  game.paddle.x = window.innerWidth / 2 - 50;
  game.paddle.targetX = game.paddle.x;
  
  initBricks();
  game.particles = [];
  
  gameState = 'playing';
  gameLoop();
}

function endGame() {
  gameState = 'ended';
  cancelAnimationFrame(animationId);
  
  document.getElementById('scoreDisplay').classList.remove('active');
  document.getElementById('finalScore').textContent = score;
  document.getElementById('endScreen').classList.add('active');
}

function restartGame() {
  document.getElementById('endScreen').classList.remove('active');
  startGame();
}

window.addEventListener('resize', () => {
  canvas.width = window.innerWidth * dpr;
  canvas.height = window.innerHeight * dpr;
  canvas.style.width = window.innerWidth + 'px';
  canvas.style.height = window.innerHeight + 'px';
  ctx.scale(dpr, dpr);
  
  if (gameState === 'playing') {
    game.paddle.y = window.innerHeight - 80;
  }
});

document.addEventListener('mousemove', (e) => {
  const emojis = document.querySelectorAll('.floating-emoji');
  const x = e.clientX / window.innerWidth;
  const y = e.clientY / window.innerHeight;
  
  emojis.forEach((emoji, i) => {
    const offsetX = (x - 0.5) * 20 * (i + 1);
    const offsetY = (y - 0.5) * 20 * (i + 1);
    emoji.style.transform = `translate(${offsetX}px, ${offsetY}px)`;
  });
});
</script>
</body>
</html>
```