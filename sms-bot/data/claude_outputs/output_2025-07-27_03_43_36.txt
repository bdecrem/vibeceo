<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WEBTOYS Mood Ring Music Generator</title>
    <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --cream: #FEFEF5;
            --yellow: #FFD63D;
            --blue: #6ECBFF;
            --red: #FF4B4B;
            --purple: #8B7FD4;
            --green: #7FB069;
            --shadow: #C9C2F9;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Space Grotesk', system-ui;
            background: var(--cream);
            min-height: 100vh;
            padding: 2rem;
        }

        h1 {
            text-align: center;
            font-size: 2.5rem;
            color: var(--red);
            margin-bottom: 2rem;
            transform: rotate(-2deg);
            text-transform: uppercase;
        }

        .mood-rings {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 2rem;
            max-width: 800px;
            margin: 0 auto;
            padding: 2rem;
        }

        .mood-ring {
            aspect-ratio: 1;
            border-radius: 50%;
            border: 6px solid var(--yellow);
            box-shadow: 0 8px 0 var(--shadow);
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 1.2rem;
            color: white;
        }

        .mood-ring:hover {
            transform: translateY(-5px) rotate(5deg);
        }

        .mood-ring:active {
            transform: translateY(2px);
            box-shadow: 0 4px 0 var(--shadow);
        }

        .mood-ring.red { background: var(--red); }
        .mood-ring.blue { background: var(--blue); }
        .mood-ring.yellow { background: var(--yellow); color: black; }
        .mood-ring.purple { background: var(--purple); }
        .mood-ring.green { background: var(--green); }

        .player-container {
            margin: 3rem auto;
            padding: 2rem;
            max-width: 600px;
            background: white;
            border: 4px solid var(--yellow);
            border-radius: 1rem;
            box-shadow: 0 8px 0 var(--shadow);
        }

        audio {
            width: 100%;
            height: 54px;
            margin: 1rem 0;
        }

        .status {
            text-align: center;
            margin: 1rem 0;
            font-size: 1.2rem;
            min-height: 2rem;
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }

        .generating {
            animation: pulse 2s infinite;
            color: var(--purple);
        }

        .error {
            color: var(--red);
        }
    </style>
</head>
<body>
    <h1>Mood Ring Music Machine ‚ú®</h1>
    
    <div class="mood-rings">
        <div class="mood-ring red" data-mood="angry">ü§ò</div>
        <div class="mood-ring blue" data-mood="sad">üéπ</div>
        <div class="mood-ring yellow" data-mood="happy">üåü</div>
        <div class="mood-ring purple" data-mood="mysterious">‚ú®</div>
        <div class="mood-ring green" data-mood="nature">üåø</div>
    </div>

    <div class="player-container">
        <div class="status"></div>
        <audio id="audioPlayer" controls></audio>
    </div>

    <script>
        const moodPrompts = {
            angry: "aggressive punk rock drums, heavy metal percussion, intense rhythm",
            sad: "melancholic piano ballad, emotional classical piano, gentle sad melody",
            happy: "upbeat ukulele, cheerful acoustic strumming, positive melody",
            mysterious: "ambient synthesizer, ethereal pads, mysterious atmosphere",
            nature: "peaceful nature sounds, forest ambience, organic instruments"
        };

        const rings = document.querySelectorAll('.mood-ring');
        const status = document.querySelector('.status');
        const audio = document.getElementById('audioPlayer');

        rings.forEach(ring => {
            ring.addEventListener('click', async () => {
                const mood = ring.dataset.mood;
                status.textContent = "‚ú® Generating your mood music...";
                status.className = "status generating";
                
                try {
                    const result = await generateMusic(moodPrompts[mood]);
                    
                    if (result.success) {
                        audio.src = result.audioUrl;
                        status.textContent = `üéµ Now Playing: ${mood.charAt(0).toUpperCase() + mood.slice(1)} Mood`;
                        status.className = "status";
                        audio.play();
                    } else {
                        throw new Error(result.error);
                    }
                } catch (error) {
                    status.textContent = "‚ùå Oops! Something went wrong. Try again!";
                    status.className = "status error";
                }
            });
        });

        async function generateMusic(prompt) {
            try {
                const response = await fetch('/api/sonauto', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ prompt: prompt + ", instrumental, no vocals" })
                });
                
                const data = await response.json();
                return await pollForCompletion(data.task_id);
                
            } catch (error) {
                console.error('Generation failed:', error);
                return { success: false, error: 'Generation failed' };
            }
        }

        async function pollForCompletion(taskId) {
            const maxAttempts = 60;
            let attempts = 0;
            
            while (attempts < maxAttempts) {
                try {
                    const response = await fetch(`/api/sonauto?taskId=${taskId}`);
                    const result = await response.json();
                    
                    const status = typeof result === 'string' ? result : result.status;
                    
                    if (status === 'SUCCESS' || status === 'COMPLETED') {
                        const audioUrl = result.song_paths?.[0] || result.url;
                        return { success: true, audioUrl };
                    }
                    
                    if (status === 'FAILED') {
                        return { success: false, error: 'Generation failed' };
                    }
                    
                    await new Promise(resolve => setTimeout(resolve, 2000));
                    attempts++;
                    
                } catch (error) {
                    attempts++;
                }
            }
            
            return { success: false, error: 'Generation timed out' };
        }
    </script>
</body>
</html>