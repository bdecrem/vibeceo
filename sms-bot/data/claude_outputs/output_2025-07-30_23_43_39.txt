<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>RebelJournal</title>
    <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=JetBrains+Mono&display=swap" rel="stylesheet">
    <style>
        :root {
            --bg: #FCFCF7;
            --border: #FFD63D;
            --shadow: #C9C2F9;
            --text: #0A0A0A;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Space Grotesk', system-ui, sans-serif;
            background: var(--bg);
            color: var(--text);
            line-height: 1.6;
            font-size: 16px;
            padding: 20px;
        }

        .screen {
            display: none;
            max-width: 666px;
            margin: 0 auto;
        }

        .screen.active {
            display: block;
        }

        h1 {
            font-size: 28px;
            text-transform: uppercase;
            transform: rotate(-1deg);
            margin-bottom: 24px;
        }

        .card {
            border: 4px solid var(--border);
            box-shadow: 8px 8px var(--shadow);
            padding: 20px;
            margin-bottom: 24px;
            background: white;
            transform: rotate(1deg);
        }

        textarea, input {
            width: 100%;
            min-height: 44px;
            padding: 12px;
            font-family: 'JetBrains Mono', monospace;
            border: 3px solid var(--border);
            margin-bottom: 16px;
            font-size: 16px;
        }

        textarea {
            min-height: 120px;
            resize: vertical;
        }

        button {
            background: var(--border);
            border: 3px solid var(--text);
            box-shadow: 4px 4px var(--shadow);
            padding: 12px 24px;
            font-family: 'Space Grotesk', system-ui, sans-serif;
            font-size: 16px;
            text-transform: uppercase;
            font-weight: bold;
            cursor: pointer;
            min-height: 44px;
            width: 100%;
            margin-bottom: 12px;
            transform: rotate(-1deg);
            transition: transform 0.2s;
        }

        button:active {
            transform: translateY(2px) rotate(-1deg);
            box-shadow: 2px 2px var(--shadow);
        }

        .entry {
            margin-bottom: 24px;
            opacity: 0.8;
        }

        .entry:first-child {
            opacity: 1;
        }

        .date {
            font-family: 'JetBrains Mono', monospace;
            font-size: 14px;
            color: #666;
        }

        .suggestion {
            border-left: 4px solid var(--border);
            padding-left: 16px;
            margin-bottom: 24px;
            font-style: italic;
        }

        .goals {
            list-style: none;
        }

        .goals li {
            margin-bottom: 8px;
            padding-left: 24px;
            position: relative;
        }

        .goals li::before {
            content: "üéØ";
            position: absolute;
            left: 0;
        }

        #floating-emoji {
            position: fixed;
            bottom: 20px;
            right: 20px;
            font-size: 32px;
            cursor: pointer;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }

        @keyframes emoji-rain {
            0% { transform: translateY(-100vh); }
            100% { transform: translateY(100vh); }
        }

        .emoji-particle {
            position: fixed;
            pointer-events: none;
            animation: emoji-rain 1s linear forwards;
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Auth Screens -->
        <div id="welcome-screen" class="screen active">
            <h1>RebelJournal üìù</h1>
            <p>Your goals-driven journaling companion</p>
            <button onclick="showNewUserScreen()">New User</button>
            <button onclick="showReturningUserScreen()">Returning User</button>
        </div>

        <div id="new-user-screen" class="screen">
            <h1>New User</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Register & Enter</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <div id="returning-user-screen" class="screen">
            <h1>Returning User</h1>
            <select id="user-label-select"></select>
            <input type="text" id="returning-passcode" placeholder="4-digit code" maxlength="4">
            <button onclick="loginReturningUser()">Login</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <!-- Goals Setup Screen -->
        <div id="goals-screen" class="screen">
            <h1>Set Your Goals</h1>
            <div class="card">
                <p>What are your main goals? List them below (one per line):</p>
                <textarea id="goals-input" placeholder="Example:
1. Write a novel
2. Learn to meditate
3. Start a business"></textarea>
                <button onclick="saveGoals()">SET GOALS & START JOURNALING</button>
            </div>
        </div>

        <!-- Main Journal Screen -->
        <div id="main-screen" class="screen">
            <h1>RebelJournal</h1>
            <div id="user-status">Welcome, <span id="current-user-label"></span>!</div>
            
            <div class="card">
                <div id="suggestion" class="suggestion">Loading suggestion...</div>
                <textarea id="entry-input" placeholder="Write your thoughts here..."></textarea>
                <button onclick="saveEntry()">SAVE ENTRY</button>
            </div>

            <div class="card">
                <h2>Your Goals üéØ</h2>
                <ul id="goals-list" class="goals"></ul>
                <button onclick="showGoalsScreen()">UPDATE GOALS</button>
            </div>

            <div id="entries"></div>
            
            <button onclick="showScreen('welcome-screen')">Leave</button>
        </div>
    </div>

    <div id="floating-emoji" onclick="makeEmojiRain()">üìù</div>

    <script>
        let currentUser = null;
        let latestEntries = [];
        let userGoals = [];

        // Auth helper functions
        async function generateNewUser() {
            const slots = await checkAvailableSlots();
            if (slots.isFull) {
                alert('App is full!');
                return false;
            }
            const user = await generateUser();
            if (user?.success) {
                currentUser = user;
                document.getElementById('new-user-info').innerHTML = 
                    `Your ID: ${user.userLabel}<br>Code: ${user.passcode}<br>Save these!`;
                return true;
            }
            return false;
        }

        async function registerNewUser() {
            if (!currentUser) return;
            const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
            if (result?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                showGoalsScreen();
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            await generateNewUser();
        }

        async function loginReturningUser() {
            const label = document.getElementById('user-label-select').value;
            const passcode = document.getElementById('returning-passcode').value;
            const result = await authenticateUser(label, passcode);
            if (result?.success) {
                currentUser = { userLabel: label, passcode, participantId: result.user.participantId };
                updateZadAuth(label, result.user.participantId);
                await loadUserData();
                if (userGoals.length === 0) {
                    showGoalsScreen();
                } else {
                    enterMainScreen();
                }
            } else {
                alert('Wrong code!');
            }
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
        }

        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const slots = await checkAvailableSlots();
            const select = document.getElementById('user-label-select');
            select.innerHTML = '<option>Select User</option>';
            slots.usedLabels.forEach(label => {
                select.innerHTML += `<option>${label}</option>`;
            });
        }

        function showGoalsScreen() {
            showScreen('goals-screen');
            if (userGoals.length > 0) {
                document.getElementById('goals-input').value = userGoals.join('\n');
            }
        }

        async function saveGoals() {
            const goalsText = document.getElementById('goals-input').value;
            userGoals = goalsText.split('\n').filter(g => g.trim());
            
            if (userGoals.length === 0) {
                alert('Please enter at least one goal!');
                return;
            }

            await save('goals', { goals: userGoals.join('|||') });
            enterMainScreen();
        }

        async function loadUserData() {
            const [goals, entries] = await Promise.all([
                load('goals'),
                load('entry')
            ]);

            // Get latest goals
            const myGoals = goals.filter(g => g.author === getUsername());
            if (myGoals.length > 0) {
                const latestGoal = myGoals.sort((a, b) => 
                    new Date(b.created_at) - new Date(a.created_at)
                )[0];
                userGoals = latestGoal.goals.split('|||');
            }

            // Get latest entries
            latestEntries = entries
                .filter(e => e.author === getUsername())
                .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
        }

        async function generateSuggestion() {
            const suggestionDiv = document.getElementById('suggestion');
            suggestionDiv.innerHTML = 'Thinking of a prompt...';

            let prompt = `Based on these goals: ${userGoals.join(', ')}`;
            
            if (latestEntries.length > 0) {
                prompt += `\n\nMost recent journal entry: "${latestEntries[0].text}"\n\nSuggest a thoughtful journal prompt that either follows up on the recent entry or relates to the goals. Make it specific and thought-provoking.`;
            } else {
                prompt += `\n\nSuggest a thoughtful first journal prompt that helps explore one of these goals. Make it specific and thought-provoking.`;
            }

            try {
                const suggestion = await generateText(prompt, {
                    maxTokens: 100,
                    temperature: 0.7
                });
                suggestionDiv.innerHTML = suggestion;
            } catch (error) {
                suggestionDiv.innerHTML = "Today's prompt: What's on your mind?";
            }
        }

        async function saveEntry() {
            const text = document.getElementById('entry-input').value.trim();
            if (!text) {
                alert('Please write something first!');
                return;
            }

            await save('entry', { text });
            document.getElementById('entry-input').value = '';
            await loadLatestData();
        }

        function formatDate(dateString) {
            return new Date(dateString).toLocaleDateString('en-US', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }

        function updateUI() {
            // Update goals list
            const goalsList = document.getElementById('goals-list');
            goalsList.innerHTML = userGoals.map(goal => `<li>${goal}</li>`).join('');

            // Update entries
            const entriesDiv = document.getElementById('entries');
            entriesDiv.innerHTML = latestEntries.map(entry => `
                <div class="card entry">
                    <div class="date">${formatDate(entry.created_at)}</div>
                    <p>${entry.text}</p>
                </div>
            `).join('');
        }

        async function loadLatestData() {
            await loadUserData();
            await generateSuggestion();
            updateUI();
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            loadLatestData();
        }

        function makeEmojiRain() {
            const emojis = ['üìù', '‚ú®', 'üéØ', 'üí≠', 'üí´'];
            for (let i = 0; i < 20; i++) {
                const emoji = document.createElement('div');
                emoji.className = 'emoji-particle';
                emoji.style.left = `${Math.random() * 100}vw`;
                emoji.style.animationDuration = `${1 + Math.random()}s`;
                emoji.textContent = emojis[Math.floor(Math.random() * emojis.length)];
                document.body.appendChild(emoji);
                setTimeout(() => emoji.remove(), 2000);
            }
        }

        initAuth();
    </script>
</body>
</html>