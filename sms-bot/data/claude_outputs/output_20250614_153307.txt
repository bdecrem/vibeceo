Here's a sophisticated memory matching card game with clean design and mobile-first approach:

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Elegant Memory</title>
    <style>
        :root {
            --primary: #2c3e50;
            --accent: #3498db;
            --light: #ecf0f1;
            --card: rgba(255, 255, 255, 0.1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Helvetica Neue', sans-serif;
            background: linear-gradient(135deg, var(--primary), #34495e);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
            color: var(--light);
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
        }

        h1 {
            font-weight: 300;
            font-size: 2.5rem;
            margin-bottom: 10px;
        }

        .stats {
            display: flex;
            gap: 20px;
            font-size: 1.1rem;
            margin-bottom: 20px;
        }

        .game-board {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 10px;
            max-width: 600px;
            width: 100%;
        }

        .card {
            aspect-ratio: 3/4;
            background: var(--card);
            backdrop-filter: blur(10px);
            border-radius: 10px;
            cursor: pointer;
            transition: transform 0.3s ease;
            transform-style: preserve-3d;
            position: relative;
        }

        .card:hover {
            transform: translateY(-5px);
        }

        .card.flipped {
            transform: rotateY(180deg);
        }

        .card-front,
        .card-back {
            position: absolute;
            width: 100%;
            height: 100%;
            backface-visibility: hidden;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2rem;
            border-radius: 10px;
        }

        .card-front {
            background: rgba(255, 255, 255, 0.1);
            border: 2px solid rgba(255, 255, 255, 0.1);
        }

        .card-back {
            background: var(--accent);
            transform: rotateY(180deg);
        }

        .restart-btn {
            margin-top: 20px;
            padding: 12px 24px;
            background: var(--accent);
            border: none;
            border-radius: 25px;
            color: white;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .restart-btn:hover {
            background: #2980b9;
            transform: translateY(-2px);
        }

        @media (max-width: 480px) {
            .game-board {
                grid-template-columns: repeat(3, 1fr);
            }

            h1 {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>Memory Match</h1>
        <div class="stats">
            <div>Moves: <span id="moves">0</span></div>
            <div>Matches: <span id="matches">0</span></div>
        </div>
    </div>
    
    <div class="game-board" id="gameBoard"></div>
    <button class="restart-btn" onclick="restartGame()">New Game</button>

    <script>
        const emojis = ['ðŸŒ¸', 'ðŸŒº', 'ðŸŒ¹', 'ðŸŒ·', 'ðŸŒ»', 'ðŸŒ¼'];
        let cards = [...emojis, ...emojis];
        let flippedCards = [];
        let matchedPairs = 0;
        let moves = 0;

        function shuffle(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
            return array;
        }

        function createBoard() {
            const gameBoard = document.getElementById('gameBoard');
            gameBoard.innerHTML = '';
            shuffle(cards).forEach((emoji, index) => {
                const card = document.createElement('div');
                card.className = 'card';
                card.dataset.index = index;
                card.dataset.emoji = emoji;
                
                card.innerHTML = `
                    <div class="card-front"></div>
                    <div class="card-back">${emoji}</div>
                `;
                
                card.addEventListener('click', flipCard);
                gameBoard.appendChild(card);
            });
        }

        function flipCard() {
            if (flippedCards.length === 2) return;
            if (this.classList.contains('flipped')) return;

            this.classList.add('flipped');
            flippedCards.push(this);

            if (flippedCards.length === 2) {
                moves++;
                document.getElementById('moves').textContent = moves;
                checkMatch();
            }
        }

        function checkMatch() {
            const [card1, card2] = flippedCards;
            const match = card1.dataset.emoji === card2.dataset.emoji;

            if (match) {
                matchedPairs++;
                document.getElementById('matches').textContent = matchedPairs;
                flippedCards = [];
                
                if (matchedPairs === emojis.length) {
                    setTimeout(() => {
                        alert('Congratulations! You won!');
                    }, 500);
                }
            } else {
                setTimeout(() => {
                    card1.classList.remove('flipped');
                    card2.classList.remove('flipped');
                    flippedCards = [];
                }, 1000);
            }
        }

        function restartGame() {
            flippedCards = [];
            matchedPairs = 0;
            moves = 0;
            document.getElementById('moves').textContent = moves;
            document.getElementById('matches').textContent = matchedPairs;
            createBoard();
        }

        // Initialize game
        createBoard();
    </script>
</body>
</html>
```

This memory matching game features:

1. Clean, minimalist design with a sophisticated color scheme
2. Smooth card flip animations
3. Glass morphism effects on cards
4. Responsive grid layout that adapts to mobile screens
5. Touch-friendly controls
6. Game statistics tracking (moves and matches)
7. Subtle hover effects and interactions
8. Easy restart functionality

The game uses emoji as card symbols for simplicity, but you could replace them with custom images or icons for a different aesthetic.

Key design features:

- Gradient background creates depth
- Semi-transparent cards with backdrop blur for modern glass effect
- Smooth animations for card flips and interactions
- Clean typography and spacing
- Mobile-first responsive design
- Touch-optimized card sizes on smaller screens

The game mechanics are straightforward:
- Click/tap cards to flip them
- Match pairs of identical cards
- Track number of moves and matches
- Win when all pairs are matched
- Restart anytime with the New Game button

The layout automatically adjusts from 4 columns on desktop to 3 columns on mobile for better touch interaction on smaller screens.