```html
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>üêç Slither üçé</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            background: linear-gradient(135deg, #1a2a6c, #b21f1f, #1a2a6c);
            height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            font-family: Arial, sans-serif;
            touch-action: none;
            user-select: none;
            -webkit-user-select: none;
            overflow: hidden;
        }
        #gameCanvas {
            background: #0d1b2a;
            border-radius: 8px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
        }
        #controls {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 20px;
            margin-top: 15px;
            width: 100%;
        }
        .d-pad {
            display: grid;
            grid-template-columns: repeat(3, 60px);
            grid-template-rows: repeat(3, 60px);
            gap: 5px;
        }
        .d-btn {
            width: 60px;
            height: 60px;
            background: rgba(255, 255, 255, 0.2);
            border: 2px solid rgba(255, 255, 255, 0.5);
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            color: white;
            user-select: none;
        }
        .d-btn:active {
            background: rgba(255, 255, 255, 0.4);
        }
        #up { grid-column: 2; grid-row: 1; }
        #left { grid-column: 1; grid-row: 2; }
        #right { grid-column: 3; grid-row: 2; }
        #down { grid-column: 2; grid-row: 3; }
        #score {
            position: absolute;
            top: 20px;
            left: 20px;
            font-size: 24px;
            font-weight: bold;
            color: white;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas"></canvas>
    <div id="score">Score: 0</div>
    <div id="controls">
        <div class="d-pad">
            <div class="d-btn" id="up">‚¨ÜÔ∏è</div>
            <div class="d-btn" id="left">‚¨ÖÔ∏è</div>
            <div class="d-btn" id="right">‚û°Ô∏è</div>
            <div class="d-btn" id="down">‚¨áÔ∏è</div>
        </div>
    </div>

    <script>
        // Game variables
        var canvas = document.getElementById('gameCanvas');
        var ctx = canvas.getContext('2d');
        var scoreElement = document.getElementById('score');
        var score = 0;
        var gridSize = 20;
        var gridWidth, gridHeight;
        var snake = [];
        var food = {};
        var direction = 'right';
        var nextDirection = 'right';
        var gameSpeed = 120;
        var lastTime = 0;
        var gameState = 'title'; // title, playing, gameover
        var keys = {};

        // Set up canvas with high DPI support
        function setupCanvas() {
            var controlsHeight = 120;
            canvas.width = window.innerWidth * devicePixelRatio;
            canvas.height = (window.innerHeight - controlsHeight) * devicePixelRatio;
            canvas.style.width = window.innerWidth + 'px';
            canvas.style.height = (window.innerHeight - controlsHeight) + 'px';
            
            gridWidth = Math.floor(canvas.width / gridSize);
            gridHeight = Math.floor(canvas.height / gridSize);
        }

        // Initialize game
        function initGame() {
            // Reset snake
            snake = [
                {x: Math.floor(gridWidth/2), y: Math.floor(gridHeight/2)},
                {x: Math.floor(gridWidth/2)-1, y: Math.floor(gridHeight/2)},
                {x: Math.floor(gridWidth/2)-2, y: Math.floor(gridHeight/2)}
            ];
            
            // Reset direction
            direction = 'right';
            nextDirection = 'right';
            
            // Reset score
            score = 0;
            updateScore();
            
            // Spawn first food
            spawnFood();
        }

        // Spawn food at random location
        function spawnFood() {
            var newFood;
            var onSnake;
            
            do {
                onSnake = false;
                newFood = {
                    x: Math.floor(Math.random() * gridWidth),
                    y: Math.floor(Math.random() * gridHeight)
                };
                
                // Check if food is on snake
                for (var i = 0; i < snake.length; i++) {
                    if (snake[i].x === newFood.x && snake[i].y === newFood.y) {
                        onSnake = true;
                        break;
                    }
                }
            } while (onSnake);
            
            food = newFood;
        }

        // Update score display
        function updateScore() {
            scoreElement.textContent = 'Score: ' + score;
        }

        // Draw game elements
        function draw() {
            // Clear canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Draw grid background
            ctx.fillStyle = '#0d1b2a';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // Draw grid lines
            ctx.strokeStyle = '#1b263b';
            ctx.lineWidth = 1;
            for (var x = 0; x <= canvas.width; x += gridSize) {
                ctx.beginPath();
                ctx.moveTo(x, 0);
                ctx.lineTo(x, canvas.height);
                ctx.stroke();
            }
            for (var y = 0; y <= canvas.height; y += gridSize) {
                ctx.beginPath();
                ctx.moveTo(0, y);
                ctx.lineTo(canvas.width, y);
                ctx.stroke();
            }
            
            if (gameState === 'title') {
                // Draw title screen
                ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                
                ctx.font = (48 * devicePixelRatio) + 'px Arial';
                ctx.textAlign = 'center';
                ctx.fillStyle = '#4CAF50';
                ctx.fillText('üêç SLITHER üçé', canvas.width/2, canvas.height/2 - 50*devicePixelRatio);
                
                ctx.font = (24 * devicePixelRatio) + 'px Arial';
                ctx.fillStyle = 'white';
                ctx.fillText('Use arrow keys or D-pad to move', canvas.width/2, canvas.height/2);
                ctx.fillText('Eat apples to grow longer!', canvas.width/2, canvas.height/2 + 40*devicePixelRatio);
                ctx.fillText('Don\'t hit walls or yourself!', canvas.width/2, canvas.height/2 + 80*devicePixelRatio);
                ctx.fillStyle = '#FFD700';
                ctx.fillText('Tap to Start', canvas.width/2, canvas.height/2 + 150*devicePixelRatio);
                ctx.textAlign = 'left';
                return;
            }
            
            if (gameState === 'gameover') {
                // Draw game over screen
                ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                
                ctx.font = (48 * devicePixelRatio) + 'px Arial';
                ctx.textAlign = 'center';
                ctx.fillStyle = '#f44336';
                ctx.fillText('GAME OVER', canvas.width/2, canvas.height/2 - 50*devicePixelRatio);
                
                ctx.font = (32 * devicePixelRatio) + 'px Arial';
                ctx.fillStyle = 'white';
                ctx.fillText('Score: ' + score, canvas.width/2, canvas.height/2);
                
                ctx.fillStyle = '#4CAF50';
                ctx.fillText('Tap to Restart', canvas.width/2, canvas.height/2 + 70*devicePixelRatio);
                ctx.textAlign = 'left';
                return;
            }
            
            // Draw snake
            for (var i = 0; i < snake.length; i++) {
                if (i === 0) {
                    // Draw head
                    ctx.fillStyle = '#4CAF50';
                } else {
                    // Draw body with gradient
                    var gradient = ctx.createLinearGradient(
                        snake[i].x * gridSize, 
                        snake[i].y * gridSize, 
                        snake[i].x * gridSize + gridSize, 
                        snake[i].y * gridSize + gridSize
                    );
                    gradient.addColorStop(0, '#2E7D32');
                    gradient.addColorStop(1, '#4CAF50');
                    ctx.fillStyle = gradient;
                }
                
                ctx.fillRect(
                    snake[i].x * gridSize, 
                    snake[i].y * gridSize, 
                    gridSize - 1, 
                    gridSize - 1
                );
                
                // Draw eyes on head
                if (i === 0) {
                    ctx.fillStyle = 'black';
                    var eyeSize = gridSize / 5;
                    
                    // Position eyes based on direction
                    if (direction === 'right') {
                        ctx.fillRect(
                            (snake[i].x + 0.7) * gridSize, 
                            (snake[i].y + 0.2) * gridSize, 
                            eyeSize, 
                            eyeSize
                        );
                        ctx.fillRect(
                            (snake[i].x + 0.7) * gridSize, 
                            (snake[i].y + 0.7) * gridSize, 
                            eyeSize, 
                            eyeSize
                        );
                    } else if (direction === 'left') {
                        ctx.fillRect(
                            (snake[i].x + 0.2) * gridSize, 
                            (snake[i].y + 0.2) * gridSize, 
                            eyeSize, 
                            eyeSize
                        );
                        ctx.fillRect(
                            (snake[i].x + 0.2) * gridSize, 
                            (snake[i].y + 0.7) * gridSize, 
                            eyeSize, 
                            eyeSize
                        );
                    } else if (direction === 'up') {
                        ctx.fillRect(
                            (snake[i].x + 0.2) * gridSize, 
                            (snake[i].y + 0.2) * gridSize, 
                            eyeSize, 
                            eyeSize
                        );
                        ctx.fillRect(
                            (snake[i].x + 0.7) * gridSize, 
                            (snake[i].y + 0.2) * gridSize, 
                            eyeSize, 
                            eyeSize
                        );
                    } else if (direction === 'down') {
                        ctx.fillRect(
                            (snake[i].x + 0.2) * gridSize, 
                            (snake[i].y + 0.7) * gridSize, 
                            eyeSize, 
                            eyeSize
                        );
                        ctx.fillRect(
                            (snake[i].x + 0.7) * gridSize, 
                            (snake[i].y + 0.7) * gridSize, 
                            eyeSize, 
                            eyeSize
                        );
                    }
                }
            }
            
            // Draw food (apple)
            ctx.fillStyle = '#f44336';
            ctx.beginPath();
            ctx.arc(
                food.x * gridSize + gridSize/2,
                food.y * gridSize + gridSize/2,
                gridSize/2 - 1,
                0,
                Math.PI * 2
            );
            ctx.fill();
            
            // Draw stem
            ctx.fillStyle = '#388E3C';
            ctx.fillRect(
                food.x * gridSize + gridSize/2 - 1,
                food.y * gridSize + 2,
                2,
                gridSize/4
            );
        }

        // Update game state
        function update() {
            if (gameState !== 'playing') return;
            
            // Update direction
            direction = nextDirection;
            
            // Calculate new head position
            var head = {x: snake[0].x, y: snake[0].y};
            
            switch(direction) {
                case 'up':
                    head.y--;
                    break;
                case 'down':
                    head.y++;
                    break;
                case 'left':
                    head.x--;
                    break;
                case 'right':
                    head.x++;
                    break;
            }
            
            // Check collision with walls
            if (head.x < 0 || head.x >= gridWidth || head.y < 0 || head.y >= gridHeight) {
                gameState = 'gameover';
                return;
            }
            
            // Check collision with self
            for (var i = 0; i < snake.length; i++) {
                if (snake[i].x === head.x && snake[i].y === head.y) {
                    gameState = 'gameover';
                    return;
                }
            }
            
            // Add new head
            snake.unshift(head);
            
            // Check if food is eaten
            if (head.x === food.x && head.y === food.y) {
                // Increase score
                score += 10;
                updateScore();
                
                // Spawn new food
                spawnFood();
            } else {
                // Remove tail if no food eaten
                snake.pop();
            }
        }

        // Game loop
        function gameLoop(currentTime) {
            if (currentTime - lastTime >= gameSpeed) {
                update();
                lastTime = currentTime;
            }
            draw();
            requestAnimationFrame(gameLoop);
        }

        // Handle canvas interaction
        function handleCanvasInteraction() {
            if (gameState === 'title') {
                gameState = 'playing';
                initGame();
            } else if (gameState === 'gameover') {
                gameState = 'title';
            }
        }

        // Event listeners for keyboard
        document.addEventListener('keydown', function(e) {
            switch(e.key) {
                case 'ArrowUp':
                    if (direction !== 'down') nextDirection = 'up';
                    e.preventDefault();
                    break;
                case 'ArrowDown':
                    if (direction !== 'up') nextDirection = 'down';
                    e.preventDefault();
                    break;
                case 'ArrowLeft':
                    if (direction !== 'right') nextDirection = 'left';
                    e.preventDefault();
                    break;
                case 'ArrowRight':
                    if (direction !== 'left') nextDirection = 'right';
                    e.preventDefault();
                    break;
            }
        });

        // Event listeners for touch controls
        document.getElementById('up').addEventListener('touchstart', function(e) {
            e.preventDefault();
            if (direction !== 'down') nextDirection = 'up';
        });
        
        document.getElementById('down').addEventListener('touchstart', function(e) {
            e.preventDefault();
            if (direction !== 'up') nextDirection = 'down';
        });
        
        document.getElementById('left').addEventListener('touchstart', function(e) {
            e.preventDefault();
            if (direction !== 'right') nextDirection = 'left';
        });
        
        document.getElementById('right').addEventListener('touchstart', function(e) {
            e.preventDefault();
            if (direction !== 'left') nextDirection = 'right';
        });

        // Canvas interaction
        canvas.addEventListener('click', function() {
            handleCanvasInteraction();
        });
        
        canvas.addEventListener('touchend', function(e) {
            e.preventDefault();
            handleCanvasInteraction();
        });

        // Initialize and start game
        setupCanvas();
        window.addEventListener('resize', setupCanvas);
        requestAnimationFrame(gameLoop);
    </script>
</body>
</html>
```