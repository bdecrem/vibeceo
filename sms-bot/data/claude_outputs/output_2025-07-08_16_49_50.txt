<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WTAF Daily Standup</title>
    <script src="https://unpkg.com/@supabase/supabase-js@2"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=Inter:wght@400;600&display=swap');

        body { 
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #1a1a1a, #2a2a2a, #3a3a3a);
            background-size: 400% 400%;
            animation: gradientShift 15s ease-in-out infinite;
            color: white;
            overflow-x: hidden;
            margin: 0;
            min-height: 100vh;
        }

        h1, h2, h3 {
            font-family: 'Space Grotesk', sans-serif;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: -0.02em;
        }

        @keyframes gradientShift {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }

        .app-container {
            max-width: 800px;
            margin: 0 auto;
            background: rgba(0,0,0,0.4);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            padding: 2rem;
            border: 1px solid rgba(255,255,255,0.1);
            position: relative;
            z-index: 10;
            min-height: 90vh;
        }

        .screen { display: none; }
        .screen.active { display: block; animation: fadeIn 0.3s ease; }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        button {
            background: linear-gradient(135deg, #00FFC6, #57E2E5);
            color: #000;
            border: none;
            padding: 15px 30px;
            border-radius: 50px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-size: 14px;
            margin: 10px 5px;
        }

        button:hover {
            transform: scale(1.05);
            box-shadow: 0 0 30px rgba(0, 255, 198, 0.5);
        }

        input, select {
            background: rgba(255,255,255,0.1);
            border: 2px solid rgba(255,255,255,0.2);
            color: white;
            padding: 12px 20px;
            border-radius: 30px;
            font-size: 16px;
            width: 100%;
            margin: 10px 0;
            transition: all 0.3s ease;
        }

        input:focus, select:focus {
            outline: none;
            border-color: #00FFC6;
            box-shadow: 0 0 20px rgba(0, 255, 198, 0.3);
        }

        .floating-emoji {
            position: fixed;
            font-size: 2rem;
            animation: float 6s ease-in-out infinite;
            pointer-events: none;
            z-index: 5;
            opacity: 0.8;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            50% { transform: translateY(-20px) rotate(10deg); }
        }

        .status-buttons {
            display: flex;
            gap: 10px;
            margin: 20px 0;
        }

        .status-button {
            flex: 1;
        }

        .status-button[data-status="working"] {
            background: linear-gradient(135deg, #FF9900, #FFB946);
        }

        .status-button[data-status="completed"] {
            background: linear-gradient(135deg, #00FF9D, #00FFB3);
        }

        .status-button[data-status="blocked"] {
            background: linear-gradient(135deg, #FF4646, #FF6B6B);
        }

        .standup-card {
            background: rgba(0,0,0,0.3);
            border: 1px solid rgba(255,255,255,0.2);
            border-radius: 15px;
            padding: 20px;
            margin: 15px 0;
            animation: slideIn 0.3s ease;
        }

        @keyframes slideIn {
            from { opacity: 0; transform: translateX(-50px); }
            to { opacity: 1; transform: translateX(0); }
        }

        .standup-card[data-status="working"] {
            border-left: 4px solid #FF9900;
        }

        .standup-card[data-status="completed"] {
            border-left: 4px solid #00FF9D;
        }

        .standup-card[data-status="blocked"] {
            border-left: 4px solid #FF4646;
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
            font-size: 0.9em;
            opacity: 0.8;
        }

        .reaction-buttons {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }

        .reaction-button {
            background: rgba(255,255,255,0.1);
            border: 1px solid rgba(255,255,255,0.2);
            border-radius: 20px;
            padding: 5px 10px;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .reaction-button:hover {
            background: rgba(255,255,255,0.2);
        }

        .day-separator {
            border-top: 2px solid rgba(255,255,255,0.1);
            margin: 30px 0;
            text-align: center;
            position: relative;
        }

        .day-separator span {
            background: rgba(0,0,0,0.4);
            padding: 0 20px;
            position: relative;
            top: -12px;
        }

        .status-counter {
            background: rgba(0,0,0,0.3);
            border-radius: 10px;
            padding: 15px;
            margin: 20px 0;
            text-align: center;
        }

        .status-counter span {
            color: #00FFC6;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <div class="floating-emoji" style="top: 5%; left: 2%;" data-value="2">✨</div>
    <div class="floating-emoji" style="top: 5%; right: 2%;" data-value="3">🌀</div>
    <div class="floating-emoji" style="bottom: 5%; left: 2%;" data-value="1">🚀</div>
    <div class="floating-emoji" style="bottom: 5%; right: 2%;" data-value="4">💥</div>

    <div class="app-container">
        <div id="welcome-screen" class="screen active">
            <h1>WTAF Daily Standup</h1>
            <p>DROP YOUR UPDATES INTO THE VOID 🌌</p>
            <button onclick="showNewUserScreen()">New User</button>
            <button onclick="showReturningUserScreen()">Returning User</button>
        </div>
        
        <div id="new-user-screen" class="screen">
            <h1>New User</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Register & Enter App</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="returning-user-screen" class="screen">
            <h1>Returning User</h1>
            <select id="user-label-select">
                <option>Select User</option>
            </select>
            <input type="text" id="returning-passcode" placeholder="Enter 4-digit passcode" maxlength="4">
            <button onclick="loginReturningUser()">Login</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="main-screen" class="screen">
            <h1>DAILY STANDUP ZONE</h1>
            <div id="user-status">Welcome, <span id="current-user-label"></span>!</div>
            
            <div id="app-content">
                <div class="status-counter">
                    Posted Today: <span id="posted-counter">0/5</span>
                </div>
                
                <div class="status-buttons">
                    <button class="status-button" data-status="working" onclick="postUpdate('working')">
                        🔨 WORKING ON
                    </button>
                    <button class="status-button" data-status="completed" onclick="postUpdate('completed')">
                        ✅ COMPLETED
                    </button>
                    <button class="status-button" data-status="blocked" onclick="postUpdate('blocked')">
                        🚫 BLOCKED
                    </button>
                </div>

                <button onclick="addDaySeparator()">🌅 NEW DAY</button>
                
                <div id="standup-feed"></div>
            </div>
            
            <button onclick="showScreen('welcome-screen')">Leave App</button>
        </div>
    </div>

    <script>
        const supabase = window.supabase.createClient(
            'https://tqniseocczttrfwtpbdr.supabase.co', 
            'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRxbmlzZW9jY3p0dHJmd3RwYmRyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg4ODI5MjIsImV4cCI6MjA2NDQ1ODkyMn0.mwb33p0xIEXy5F7ZoLc1j9-4ZNk3FuT4zrR0aTdm350'
        );

        const APP_ID = 'test1';
        const USER_LABELS = ['PM🎯', 'DEV⚡', 'DESIGN🌟', 'QA🔥', 'LEAD💎'];
        let currentUser = null;
        let pollingInterval;

        // Include all authentication functions here
        // [Previous authentication functions remain exactly the same]

        async function postUpdate(status) {
            try {
                const timestamp = Date.now();
                await supabase.from('wtaf_zero_admin_collaborative').insert({
                    app_id: APP_ID,
                    participant_id: currentUser.participantId,
                    action_type: 'standup',
                    participant_data: {
                        userLabel: currentUser.userLabel,
                        timestamp: timestamp
                    },
                    content_data: {
                        status: status,
                        reactions: {},
                        timestamp: timestamp
                    }
                });
                await loadLatestData();
            } catch (error) {
                console.error('Post error:', error);
                alert('UPDATE FAILED TO LAUNCH 🚀💥');
            }
        }

        async function addDaySeparator() {
            try {
                const timestamp = Date.now();
                await supabase.from('wtaf_zero_admin_collaborative').insert({
                    app_id: APP_ID,
                    participant_id: currentUser.participantId,
                    action_type: 'separator',
                    participant_data: {
                        userLabel: currentUser.userLabel
                    },
                    content_data: {
                        timestamp: timestamp
                    }
                });
                await loadLatestData();
            } catch (error) {
                console.error('Separator error:', error);
                alert('FAILED TO SLICE TIME 🕒💥');
            }
        }

        async function addReaction(postId, emoji) {
            try {
                const { data: post } = await supabase
                    .from('wtaf_zero_admin_collaborative')
                    .select('content_data')
                    .eq('id', postId)
                    .single();

                const reactions = post.content_data.reactions || {};
                reactions[emoji] = (reactions[emoji] || 0) + 1;

                await supabase
                    .from('wtaf_zero_admin_collaborative')
                    .update({
                        content_data: { ...post.content_data, reactions: reactions }
                    })
                    .eq('id', postId);

                await loadLatestData();
            } catch (error) {
                console.error('Reaction error:', error);
                alert('EMOJI MALFUNCTION 😱');
            }
        }

        async function loadLatestData() {
            try {
                const { data: updates } = await supabase
                    .from('wtaf_zero_admin_collaborative')
                    .select('*')
                    .eq('app_id', APP_ID)
                    .or('action_type.eq.standup,action_type.eq.separator')
                    .order('created_at', { ascending: false });

                const feed = document.getElementById('standup-feed');
                feed.innerHTML = '';

                const today = new Date().toDateString();
                const postedToday = new Set(
                    updates
                        .filter(u => u.action_type === 'standup' && 
                                new Date(u.content_data.timestamp).toDateString() === today)
                        .map(u => u.participant_data.userLabel)
                );

                document.getElementById('posted-counter').textContent = 
                    `${postedToday.size}/5`;

                updates.forEach(update => {
                    if (update.action_type === 'separator') {
                        feed.innerHTML += `
                            <div class="day-separator">
                                <span>${new Date(update.content_data.timestamp).toLocaleDateString()}</span>
                            </div>
                        `;
                    } else {
                        const reactions = update.content_data.reactions || {};
                        feed.innerHTML += `
                            <div class="standup-card" data-status="${update.content_data.status}">
                                <div class="card-header">
                                    <strong>${update.participant_data.userLabel}</strong>
                                    <span>${new Date(update.content_data.timestamp).toLocaleTimeString()}</span>
                                </div>
                                <div>${update.content_data.status.toUpperCase()}</div>
                                <div class="reaction-buttons">
                                    <button class="reaction-button" onclick="addReaction(${update.id}, '👍')">
                                        👍 ${reactions['👍'] || 0}
                                    </button>
                                    <button class="reaction-button" onclick="addReaction(${update.id}, '✨')">
                                        ✨ ${reactions['✨'] || 0}
                                    </button>
                                    <button class="reaction-button" onclick="addReaction(${update.id}, '🔥')">
                                        🔥 ${reactions['🔥'] || 0}
                                    </button>
                                </div>
                            </div>
                        `;
                    }
                });
            } catch (error) {
                console.error('Load error:', error);
            }
        }

        function startPolling() {
            pollingInterval = setInterval(loadLatestData, 2000);
        }

        function stopPolling() {
            if (pollingInterval) {
                clearInterval(pollingInterval);
                pollingInterval = null;
            }
        }

        // Mouse parallax
        document.addEventListener('mousemove', (e) => {
            document.querySelectorAll('.floating-emoji').forEach((elem) => {
                const speed = elem.getAttribute('data-value') || 2;
                const x = (e.clientX * speed) / 100;
                const y = (e.clientY * speed) / 100;
                elem.style.transform = `translateX(${x}px) translateY(${y}px)`;
            });
        });

        // Easter egg
        console.log('🔥 Welcome to the WTAF dimension! Type wtaf() in console for secrets...');
        window.wtaf = function() {
            document.body.style.animation = 'rainbow 1s infinite';
            setTimeout(() => {
                document.body.style.animation = '';
                alert('🎉 WTAF MASTER MODE UNLOCKED! You found the secret!');
            }, 3000);
        };
    </script>
</body>
</html>