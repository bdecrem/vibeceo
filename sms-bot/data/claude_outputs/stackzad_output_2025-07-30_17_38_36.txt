I'll create a moderation page for viewing and deleting artwork images from the shared dataset. This will be a clean, admin-focused interface.

<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>Artwork Moderation</title>
    <style>
        * {
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: #0a0a0a;
            color: #fff;
            margin: 0;
            padding: 10px;
            font-size: 16px;
        }

        .app-container {
            max-width: 1200px;
            margin: 0 auto;
            background: #1a1a1a;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 0 40px rgba(0,0,0,0.5);
        }

        h1 {
            font-size: 24px;
            margin: 0 0 20px 0;
            color: #ff0066;
        }

        button {
            background: #ff0066;
            color: white;
            border: none;
            padding: 16px 24px;
            border-radius: 6px;
            font-weight: bold;
            cursor: pointer;
            margin: 8px 0;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-size: 16px;
            min-height: 44px;
        }

        button:hover {
            background: #ff3388;
        }

        button:active {
            transform: scale(0.98);
        }

        .screen { display: none; }
        .screen.active { display: block; }

        .stats {
            background: #2a2a2a;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
        }

        .artwork-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .artwork-card {
            background: #2a2a2a;
            border-radius: 8px;
            padding: 15px;
            position: relative;
        }

        .artwork-image {
            width: 100%;
            aspect-ratio: 1;
            object-fit: contain;
            background: #1a1a1a;
            border-radius: 4px;
            margin-bottom: 10px;
        }

        .artwork-info {
            font-size: 14px;
            color: #aaa;
            margin-bottom: 10px;
        }

        .delete-btn {
            background: #ff3333;
            padding: 8px 16px;
            width: 100%;
        }

        .artwork-card.deleted {
            opacity: 0.5;
            pointer-events: none;
        }

        #loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.8);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            display: none;
        }

        .spinner {
            width: 50px;
            height: 50px;
            border: 5px solid #ff0066;
            border-top: 5px solid transparent;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        @media (min-width: 600px) {
            body { padding: 20px; }
            .app-container { padding: 30px; }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <div id="welcome-screen" class="screen active">
            <h1>Artwork Moderation</h1>
            <p>Login to manage artwork submissions</p>
            <button onclick="showNewUserScreen()">New Moderator</button>
            <button onclick="showReturningUserScreen()">Returning Moderator</button>
        </div>
        
        <div id="new-user-screen" class="screen">
            <h1>New Moderator</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Register & Enter</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="returning-user-screen" class="screen">
            <h1>Returning Moderator</h1>
            <select id="user-label-select"></select>
            <input type="text" id="returning-passcode" placeholder="4-digit code" maxlength="4">
            <button onclick="loginReturningUser()">Login</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="main-screen" class="screen">
            <h1>Artwork Moderation Panel</h1>
            <div id="user-status">Moderator: <span id="current-user-label"></span></div>
            
            <div class="stats">
                <h2>Statistics</h2>
                <div id="stats-content"></div>
            </div>
            
            <div id="artwork-container" class="artwork-grid"></div>
            
            <button onclick="showScreen('welcome-screen')" style="margin-top: 20px;">Logout</button>
        </div>
    </div>

    <div id="loading-overlay">
        <div class="spinner"></div>
    </div>

    <script>
        let currentUser = null;
        let pollingInterval;

        // Authentication boilerplate
        async function generateNewUser() {
            const slots = await checkAvailableSlots();
            if (slots.isFull) {
                alert('App is full!');
                return false;
            }
            
            const user = await generateUser();
            if (user?.success) {
                currentUser = user;
                document.getElementById('new-user-info').innerHTML = 
                    `Your ID: ${user.userLabel}<br>Code: ${user.passcode}<br>Save these!`;
                return true;
            }
            return false;
        }

        async function registerNewUser() {
            if (!currentUser) return;
            
            const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
            if (result?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                enterMainScreen();
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            await generateNewUser();
        }

        async function loginReturningUser() {
            const label = document.getElementById('user-label-select').value;
            const passcode = document.getElementById('returning-passcode').value;
            
            const result = await authenticateUser(label, passcode);
            if (result?.success) {
                currentUser = { userLabel: label, passcode, participantId: result.user.participantId };
                updateZadAuth(label, result.user.participantId);
                enterMainScreen();
            } else {
                alert('Wrong code!');
            }
        }

        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const slots = await checkAvailableSlots();
            const select = document.getElementById('user-label-select');
            select.innerHTML = '<option>Select Moderator</option>';
            slots.usedLabels.forEach(label => {
                select.innerHTML += `<option>${label}</option>`;
            });
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            if (screenId !== 'main-screen') stopPolling();
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            startPolling();
            loadLatestData();
        }

        // Loading indicator
        function showLoading() {
            document.getElementById('loading-overlay').style.display = 'flex';
        }

        function hideLoading() {
            document.getElementById('loading-overlay').style.display = 'none';
        }

        // Main functionality
        async function loadLatestData() {
            showLoading();
            try {
                const artworks = await load('artwork');
                updateStats(artworks);
                updateArtworkGrid(artworks);
            } catch (error) {
                console.error('Error loading data:', error);
            }
            hideLoading();
        }

        function updateStats(artworks) {
            const stats = document.getElementById('stats-content');
            stats.innerHTML = `
                <p>Total Artworks: ${artworks.length}</p>
                <p>Unique Artists: ${new Set(artworks.map(a => a.author)).size}</p>
                <p>Latest Upload: ${new Date(Math.max(...artworks.map(a => new Date(a.created_at)))).toLocaleString()}</p>
            `;
        }

        function updateArtworkGrid(artworks) {
            const container = document.getElementById('artwork-container');
            container.innerHTML = artworks.map(artwork => `
                <div class="artwork-card" id="artwork-${artwork.id}">
                    <img src="${artwork.image}" class="artwork-image" alt="Artwork by ${artwork.author}">
                    <div class="artwork-info">
                        <strong>${artwork.name}</strong><br>
                        By: ${artwork.author}<br>
                        Created: ${new Date(artwork.created_at).toLocaleString()}
                    </div>
                    <button class="delete-btn" onclick="deleteArtwork(${artwork.id})">Delete Artwork</button>
                </div>
            `).join('');
        }

        async function deleteArtwork(id) {
            if (!confirm('Are you sure you want to delete this artwork?')) return;
            
            showLoading();
            try {
                await save('delete', { recordId: id });
                document.getElementById(`artwork-${id}`).classList.add('deleted');
                await loadLatestData();
            } catch (error) {
                console.error('Error deleting artwork:', error);
                alert('Failed to delete artwork');
            }
            hideLoading();
        }

        function startPolling() {
            pollingInterval = setInterval(() => loadLatestData(), 2000);
        }

        function stopPolling() {
            if (pollingInterval) clearInterval(pollingInterval);
        }

        // Required helper functions
        async function checkAvailableSlots() {
            return await save('check_slots', {});
        }

        async function generateUser() {
            return await save('generate_user', {});
        }

        async function registerUser(userLabel, passcode, participantId) {
            return await save('register_user', { userLabel, passcode, participantId });
        }

        async function authenticateUser(userLabel, passcode) {
            return await save('authenticate_user', { userLabel, passcode });
        }

        function updateZadAuth(userLabel, participantId) {
            window.currentUserLabel = userLabel;
            window.currentParticipantId = participantId;
        }

        // Initialize
        initAuth();
    </script>
</body>
</html>

This moderation interface includes:

1. **Authentication System**: Full moderator login system
2. **Artwork Grid**: Visual display of all artwork with metadata
3. **Deletion Controls**: Ability to remove inappropriate content
4. **Statistics Panel**: Overview of artwork and user stats
5. **Real-time Updates**: Auto-refreshes every 2 seconds
6. **Loading States**: Visual feedback during operations
7. **Mobile-Friendly Design**: Works on all screen sizes
8. **Confirmation Dialogs**: Prevents accidental deletions

Key features:
- Shows artwork in a grid layout with metadata
- Displays creation time and author information
- Includes delete confirmation
- Shows loading states during operations
- Updates in real-time
- Tracks basic statistics
- Full mobile support
- Clean, professional design

The interface is designed to be efficient for moderators while maintaining a professional appearance. All WTAF styling guidelines are followed, and the app properly handles the shared dataset access.