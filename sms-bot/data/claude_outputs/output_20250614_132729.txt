Here's a complete, functional Pong game with clean aesthetics and responsive controls:

```html
<!DOCTYPE html>
<html>
<head>
    <title>Modern Pong</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        body {
            margin: 0;
            padding: 20px;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
            background: #f0f0f0;
        }

        .game-container {
            text-align: center;
        }

        canvas {
            background: #fff;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin: 20px 0;
        }

        .instructions {
            max-width: 500px;
            margin: 20px auto;
            padding: 15px;
            background: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .score {
            font-size: 24px;
            font-weight: bold;
            margin: 10px 0;
        }

        button {
            padding: 10px 20px;
            font-size: 16px;
            border: none;
            border-radius: 4px;
            background: #007bff;
            color: white;
            cursor: pointer;
            margin: 5px;
        }

        button:hover {
            background: #0056b3;
        }
    </style>
</head>
<body>
    <div class="game-container">
        <h1>Modern Pong</h1>
        <div class="instructions">
            <p><strong>Controls:</strong></p>
            <p>Left Paddle: W (up) and S (down)</p>
            <p>Right Paddle: ↑ and ↓ arrow keys</p>
            <p>Or use mouse/touch to control both paddles</p>
        </div>
        <div class="score">
            Player 1: <span id="score1">0</span> | 
            Player 2: <span id="score2">0</span>
        </div>
        <canvas id="pongCanvas" width="600" height="400"></canvas>
        <div>
            <button onclick="resetGame()">New Game</button>
            <button onclick="togglePause()">Pause/Resume</button>
        </div>
    </div>

    <script>
        const canvas = document.getElementById('pongCanvas');
        const ctx = canvas.getContext('2d');
        const score1Elem = document.getElementById('score1');
        const score2Elem = document.getElementById('score2');

        // Game objects
        const ball = {
            x: canvas.width / 2,
            y: canvas.height / 2,
            radius: 8,
            speed: 5,
            dx: 5,
            dy: 5
        };

        const paddleHeight = 80;
        const paddleWidth = 10;
        const paddle1 = {
            x: 10,
            y: canvas.height / 2 - paddleHeight / 2,
            width: paddleWidth,
            height: paddleHeight,
            dy: 5,
            score: 0
        };

        const paddle2 = {
            x: canvas.width - 20,
            y: canvas.height / 2 - paddleHeight / 2,
            width: paddleWidth,
            height: paddleHeight,
            dy: 5,
            score: 0
        };

        let isPaused = false;
        let upPressed = false;
        let downPressed = false;
        let wPressed = false;
        let sPressed = false;

        // Event listeners
        document.addEventListener('keydown', keyDownHandler);
        document.addEventListener('keyup', keyUpHandler);
        canvas.addEventListener('mousemove', mouseMoveHandler);
        canvas.addEventListener('touchmove', touchMoveHandler);

        function keyDownHandler(e) {
            if (e.key === 'ArrowUp') upPressed = true;
            if (e.key === 'ArrowDown') downPressed = true;
            if (e.key === 'w' || e.key === 'W') wPressed = true;
            if (e.key === 's' || e.key === 'S') sPressed = true;
        }

        function keyUpHandler(e) {
            if (e.key === 'ArrowUp') upPressed = false;
            if (e.key === 'ArrowDown') downPressed = false;
            if (e.key === 'w' || e.key === 'W') wPressed = false;
            if (e.key === 's' || e.key === 'S') sPressed = false;
        }

        function mouseMoveHandler(e) {
            const relativeY = e.clientY - canvas.getBoundingClientRect().top;
            if (relativeY > 0 && relativeY < canvas.height) {
                paddle1.y = relativeY - paddle1.height / 2;
                paddle2.y = relativeY - paddle2.height / 2;
            }
        }

        function touchMoveHandler(e) {
            e.preventDefault();
            const relativeY = e.touches[0].clientY - canvas.getBoundingClientRect().top;
            if (relativeY > 0 && relativeY < canvas.height) {
                paddle1.y = relativeY - paddle1.height / 2;
                paddle2.y = relativeY - paddle2.height / 2;
            }
        }

        function movePaddles() {
            // Paddle 1 movement
            if (wPressed && paddle1.y > 0) paddle1.y -= paddle1.dy;
            if (sPressed && paddle1.y + paddle1.height < canvas.height) paddle1.y += paddle1.dy;

            // Paddle 2 movement
            if (upPressed && paddle2.y > 0) paddle2.y -= paddle2.dy;
            if (downPressed && paddle2.y + paddle2.height < canvas.height) paddle2.y += paddle2.dy;
        }

        function moveBall() {
            ball.x += ball.dx;
            ball.y += ball.dy;

            // Top and bottom collision
            if (ball.y + ball.radius > canvas.height || ball.y - ball.radius < 0) {
                ball.dy *= -1;
            }

            // Paddle collision
            if (
                (ball.x - ball.radius < paddle1.x + paddle1.width &&
                ball.y > paddle1.y && ball.y < paddle1.y + paddle1.height) ||
                (ball.x + ball.radius > paddle2.x &&
                ball.y > paddle2.y && ball.y < paddle2.y + paddle2.height)
            ) {
                ball.dx *= -1.1; // Increase speed slightly
            }

            // Score points
            if (ball.x + ball.radius > canvas.width) {
                paddle1.score++;
                score1Elem.textContent = paddle1.score;
                resetBall();
            }
            if (ball.x - ball.radius < 0) {
                paddle2.score++;
                score2Elem.textContent = paddle2.score;
                resetBall();
            }
        }

        function resetBall() {
            ball.x = canvas.width / 2;
            ball.y = canvas.height / 2;
            ball.dx = (Math.random() > 0.5 ? 1 : -1) * 5;
            ball.dy = (Math.random() > 0.5 ? 1 : -1) * 5;
        }

        function draw() {
            // Clear canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Draw paddles
            ctx.fillStyle = '#333';
            ctx.fillRect(paddle1.x, paddle1.y, paddle1.width, paddle1.height);
            ctx.fillRect(paddle2.x, paddle2.y, paddle2.width, paddle2.height);

            // Draw ball
            ctx.beginPath();
            ctx.arc(ball.x, ball.y, ball.radius, 0, Math.PI * 2);
            ctx.fillStyle = '#333';
            ctx.fill();
            ctx.closePath();

            // Draw center line
            ctx.setLineDash([5, 15]);
            ctx.beginPath();
            ctx.moveTo(canvas.width / 2, 0);
            ctx.lineTo(canvas.width / 2, canvas.height);
            ctx.strokeStyle = '#333';
            ctx.stroke();
            ctx.setLineDash([]);
        }

        function gameLoop() {
            if (!isPaused) {
                movePaddles();
                moveBall();
                draw();
            }
            requestAnimationFrame(gameLoop);
        }

        function resetGame() {
            paddle1.score = 0;
            paddle2.score = 0;
            score1Elem.textContent = '0';
            score2Elem.textContent = '0';
            paddle1.y = canvas.height / 2 - paddleHeight / 2;
            paddle2.y = canvas.height / 2 - paddleHeight / 2;
            resetBall();
            isPaused = false;
        }

        function togglePause() {
            isPaused = !isPaused;
        }

        // Start the game
        resetGame();
        gameLoop();
    </script>
</body>
</html>
```

This implementation includes:

1. Complete game mechanics with:
   - Paddle movement using keyboard (WASD and arrow keys)
   - Mouse/touch controls
   - Ball physics with collision detection
   - Score tracking
   - Increasing ball speed after each paddle hit

2. Clean, modern design with:
   - Minimalist color scheme
   - Smooth animations
   - Clear typography
   - Responsive layout

3. Additional features:
   - Pause/Resume functionality
   - New Game button
   - Clear instructions
   - Center line visualization
   - Proper ball reset after scoring
   - Paddle collision detection
   - Score display

To play:
1. Use W/S keys for the left paddle
2. Use Up/Down arrow keys for the right paddle
3. Or use mouse/touch to control both paddles
4. The ball speeds up slightly each time it hits a paddle
5. First player to score wins the round
6. Use the New Game button to reset scores
7. Use Pause/Resume to halt the game

The game is fully responsive and works on both desktop and mobile devices. The styling is clean and modern, with subtle shadows and rounded corners for a professional look.