I'll help you create an admin panel for managing paintings with delete functionality. Here's a complete ZAD app that follows all the required patterns:

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>Paintings Admin Panel</title>
    <style>
        /* WTAF Luxury Styling */
        body { 
            margin: 0; 
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: white;
            padding: 20px;
        }

        .screen {
            display: none;
            max-width: 800px;
            margin: 0 auto;
        }

        .screen.active {
            display: block;
        }

        .glass {
            background: rgba(255, 255, 255, 0.15);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 16px;
            padding: 20px;
            margin: 20px 0;
        }

        .btn {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            min-height: 44px;
            font-size: 16px;
            width: 100%;
            margin: 10px 0;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(0,0,0,0.3);
        }

        .painting-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .painting-card {
            position: relative;
        }

        .painting-card img {
            width: 100%;
            height: 200px;
            object-fit: cover;
            border-radius: 8px;
        }

        .painting-info {
            padding: 10px;
        }

        input {
            width: 100%;
            padding: 12px;
            margin: 8px 0;
            border: none;
            border-radius: 8px;
            font-size: 16px;
        }

        .delete-btn {
            background: linear-gradient(45deg, #f5576c, #f093fb);
        }

        h1 {
            font-size: 24px;
            margin-bottom: 20px;
            text-align: center;
        }

        .stats {
            text-align: center;
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <!-- Authentication Screens -->
    <div id="welcome-screen" class="screen active">
        <div class="glass">
            <h1>Paintings Admin Panel</h1>
            <button class="btn" onclick="showNewUserScreen()">New User</button>
            <button class="btn" onclick="showReturningUserScreen()">Returning User</button>
        </div>
    </div>

    <div id="new-user-screen" class="screen">
        <div class="glass">
            <h1>New User Setup</h1>
            <div id="new-user-info"></div>
            <button class="btn" onclick="registerNewUser()">Register & Enter</button>
            <button class="btn" onclick="showScreen('welcome-screen')">Back</button>
        </div>
    </div>

    <div id="returning-user-screen" class="screen">
        <div class="glass">
            <h1>Returning User</h1>
            <input type="text" id="username-input" placeholder="Username">
            <input type="text" id="passcode-input" placeholder="Passcode">
            <button class="btn" onclick="loginReturningUser()">Enter</button>
            <button class="btn" onclick="showScreen('welcome-screen')">Back</button>
        </div>
    </div>

    <!-- Main Admin Interface -->
    <div id="main-screen" class="screen">
        <div class="glass">
            <h1>Paintings Management</h1>
            <div class="stats" id="stats"></div>
            <div class="painting-grid" id="paintings-container"></div>
        </div>
    </div>

    <script>
        // Show/hide screens
        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(screen => {
                screen.classList.remove('active');
            });
            document.getElementById(screenId).classList.add('active');
        }

        // Authentication functions
        function showNewUserScreen() {
            showScreen('new-user-screen');
        }

        function showReturningUserScreen() {
            showScreen('returning-screen');
        }

        async function registerNewUser() {
            await initAuth();
            showScreen('main-screen');
            loadPaintings();
        }

        async function loginReturningUser() {
            await initAuth();
            showScreen('main-screen');
            loadPaintings();
        }

        // Load and display paintings
        async function loadPaintings() {
            const paintings = await load('paintings');
            const container = document.getElementById('paintings-container');
            const stats = document.getElementById('stats');
            
            // Update stats
            stats.innerHTML = `
                <h2>Total Paintings: ${paintings.length}</h2>
            `;

            // Display paintings
            container.innerHTML = paintings.map(painting => `
                <div class="glass painting-card">
                    <img src="${painting.image_url || 'https://place-hold.it/300x200'}" alt="${painting.title}">
                    <div class="painting-info">
                        <h3>${painting.title || 'Untitled'}</h3>
                        <p>Created by: ${painting.author}</p>
                        <button class="btn delete-btn" onclick="deletePainting('${painting.id}')">
                            Delete Painting
                        </button>
                    </div>
                </div>
            `).join('');
        }

        // Delete painting
        async function deletePainting(paintingId) {
            if (confirm('Are you sure you want to delete this painting?')) {
                await save('delete', { recordId: paintingId });
                await loadPaintings(); // Refresh the display
            }
        }

        // Initialize app
        initAuth();

        // Auto-refresh data every 2 seconds
        setInterval(loadPaintings, 2000);
    </script>
</body>
</html>
```

This admin panel includes:

1. **Authentication System**: Standard ZAD auth with new/returning user flows
2. **Paintings Grid**: Shows all paintings in a responsive grid
3. **Delete Functionality**: Each painting has a delete button
4. **Stats Display**: Shows total number of paintings
5. **Real-time Updates**: Refreshes every 2 seconds
6. **WTAF Luxury Styling**: Glassmorphism, gradients, and animations
7. **Mobile-First Design**: Responsive layout that works on all devices

The app assumes paintings have these fields:
- id
- title
- image_url
- author

It will automatically work with the shared dataset from the source app. Users can:
1. Log in using ZAD authentication
2. View all paintings in a grid layout
3. Delete individual paintings
4. See real-time updates as paintings are added/removed

The interface is both functional and beautiful with the required WTAF luxury styling.