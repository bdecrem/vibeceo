```html
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Flappy Bird</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; touch-action: none; }
        body { background: linear-gradient(to bottom, #64b3f4, #c2e59c); font-family: Arial, sans-serif; height: 100vh; overflow: hidden; }
        #gameCanvas { display: block; background: linear-gradient(to bottom, #64b3f4, #c2e59c); }
        #controls { position: fixed; bottom: 0; width: 100%; height: 120px; background: rgba(0,0,0,0.3); display: flex; justify-content: center; align-items: center; }
        #jumpButton { width: 80px; height: 80px; border-radius: 50%; background: rgba(255,255,255,0.7); border: 3px solid #fff; font-size: 24px; cursor: pointer; }
        .screen { position: absolute; top: 0; left: 0; width: 100%; height: calc(100% - 120px); display: flex; flex-direction: column; justify-content: center; align-items: center; text-align: center; background: rgba(0,0,0,0.5); color: white; }
        button { padding: 12px 24px; font-size: 18px; background: #fff; border: none; border-radius: 30px; margin-top: 20px; cursor: pointer; }
        h1 { font-size: 40px; margin-bottom: 10px; }
        p { font-size: 20px; margin: 10px 0; max-width: 80%; }
    </style>
</head>
<body>
    <canvas id="gameCanvas"></canvas>
    <div id="controls">
        <div id="jumpButton">‚¨ÜÔ∏è</div>
    </div>
    
    <div id="introScreen" class="screen">
        <h1>üê¶ Flappy Bird</h1>
        <p>Tap the button or press SPACE to flap!</p>
        <p>Avoid the pipes and don't hit the ground!</p>
        <button id="startButton">START GAME</button>
    </div>
    
    <div id="endScreen" class="screen" style="display: none;">
        <h1>Game Over!</h1>
        <p>Score: <span id="finalScore">0</span></p>
        <button id="restartButton">PLAY AGAIN</button>
    </div>

    <script>
        var canvas = document.getElementById('gameCanvas');
        var ctx = canvas.getContext('2d');
        var controlsHeight = 120;
        var dpr = window.devicePixelRatio || 1;
        
        function resizeCanvas() {
            canvas.width = window.innerWidth * dpr;
            canvas.height = (window.innerHeight - controlsHeight) * dpr;
            canvas.style.width = window.innerWidth + 'px';
            canvas.style.height = (window.innerHeight - controlsHeight) + 'px';
            ctx.scale(dpr, dpr);
        }
        
        window.addEventListener('resize', resizeCanvas);
        resizeCanvas();
        
        var gameState = 'intro';
        var bird = { x: 100, y: canvas.height / 2 / dpr, radius: 20, velocity: 0 };
        var pipes = [];
        var score = 0;
        var pipeWidth = 80;
        var pipeGap = 200;
        var gravity = 0.5;
        var jump = -10;
        var pipeSpeed = 3;
        var frameCount = 0;
        var lastTime = 0;
        var pipeInterval = 90;
        
        document.getElementById('startButton').addEventListener('click', startGame);
        document.getElementById('restartButton').addEventListener('click', startGame);
        document.getElementById('jumpButton').addEventListener('click', flap);
        document.addEventListener('keydown', function(e) { if(e.code === 'Space') flap(); });
        
        function startGame() {
            gameState = 'playing';
            document.getElementById('introScreen').style.display = 'none';
            document.getElementById('endScreen').style.display = 'none';
            bird.y = canvas.height / 2 / dpr;
            bird.velocity = 0;
            pipes = [];
            score = 0;
            frameCount = 0;
        }
        
        function flap() {
            if (gameState === 'playing') {
                bird.velocity = jump;
            }
        }
        
        function update() {
            if (gameState !== 'playing') return;
            
            bird.velocity += gravity;
            bird.y += bird.velocity;
            
            if (bird.y - bird.radius < 0 || bird.y + bird.radius > canvas.height / dpr) {
                endGame();
                return;
            }
            
            frameCount++;
            if (frameCount % pipeInterval === 0) {
                var gapPosition = Math.random() * (canvas.height / dpr - pipeGap - 100) + 50;
                pipes.push({ x: canvas.width / dpr, topHeight: gapPosition, passed: false });
            }
            
            for (var i = pipes.length - 1; i >= 0; i--) {
                pipes[i].x -= pipeSpeed;
                
                if (!pipes[i].passed && pipes[i].x + pipeWidth < bird.x) {
                    pipes[i].passed = true;
                    score++;
                }
                
                if (pipes[i].x + pipeWidth < 0) {
                    pipes.splice(i, 1);
                    continue;
                }
                
                if (
                    bird.x + bird.radius > pipes[i].x && 
                    bird.x - bird.radius < pipes[i].x + pipeWidth && 
                    (bird.y - bird.radius < pipes[i].topHeight || bird.y + bird.radius > pipes[i].topHeight + pipeGap)
                ) {
                    endGame();
                }
            }
        }
        
        function draw() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            if (gameState === 'intro' || gameState === 'ended') return;
            
            // Draw bird
            ctx.fillStyle = '#FFD700';
            ctx.beginPath();
            ctx.arc(bird.x, bird.y, bird.radius, 0, Math.PI * 2);
            ctx.fill();
            ctx.fillStyle = '#FF0000';
            ctx.beginPath();
            ctx.arc(bird.x + 10, bird.y - 5, 5, 0, Math.PI * 2);
            ctx.fill();
            
            // Draw pipes
            ctx.fillStyle = '#00AA00';
            for (var i = 0; i < pipes.length; i++) {
                var pipe = pipes[i];
                ctx.fillRect(pipe.x, 0, pipeWidth, pipe.topHeight);
                ctx.fillRect(pipe.x, pipe.topHeight + pipeGap, pipeWidth, canvas.height / dpr);
            }
            
            // Draw score
            ctx.fillStyle = 'white';
            ctx.font = '30px Arial';
            ctx.fillText('Score: ' + score, 20, 40);
        }
        
        function endGame() {
            gameState = 'ended';
            document.getElementById('finalScore').textContent = score;
            document.getElementById('endScreen').style.display = 'flex';
        }
        
        function gameLoop(timestamp) {
            var deltaTime = timestamp - lastTime;
            lastTime = timestamp;
            
            if (deltaTime > 16) {
                update();
                draw();
            }
            
            requestAnimationFrame(gameLoop);
        }
        
        requestAnimationFrame(gameLoop);
    </script>
</body>
</html>
```