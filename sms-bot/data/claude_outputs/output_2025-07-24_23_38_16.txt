<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>Simple Todo List</title>
    <style>
        :root {
            --bg: #FAFAF6;
            --accent: #FF4B4B;
            --accent-secondary: #4AC2FF;
            --text: #2D2D2D;
            --border: #FFE666;
            --success: #B6FFB3;
            --muted: #D3C2F9;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: var(--bg);
            color: var(--text);
            font-size: 16px;
            padding: 2rem 1rem;
            line-height: 1.5;
        }

        .container {
            max-width: 600px;
            margin: 0 auto;
        }

        h1 {
            color: var(--accent);
            text-align: center;
            margin-bottom: 2rem;
            font-size: 2rem;
        }

        .todo-input {
            display: flex;
            gap: 1rem;
            margin-bottom: 2rem;
        }

        input {
            flex: 1;
            border: 2px solid var(--accent-secondary);
            border-radius: 12px;
            padding: 0.75rem 1.25rem;
            font-size: 1rem;
            min-height: 44px;
        }

        button {
            background: var(--accent);
            color: white;
            border: none;
            border-radius: 12px;
            padding: 0.75rem 1.5rem;
            font-size: 1rem;
            font-weight: bold;
            cursor: pointer;
            min-height: 44px;
            transition: background 0.2s ease;
        }

        button:hover {
            background: #e53a3a;
        }

        .todo-item {
            background: white;
            border: 2px solid var(--border);
            border-radius: 12px;
            padding: 1rem;
            margin-bottom: 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .todo-text {
            flex: 1;
            margin-right: 1rem;
        }

        .todo-meta {
            font-size: 0.875rem;
            color: #666;
            margin-top: 0.25rem;
        }

        .completed {
            background: var(--success);
        }

        .screen {
            display: none;
        }

        .screen.active {
            display: block;
        }

        #welcome-screen button,
        #new-user-screen button,
        #returning-user-screen button {
            width: 100%;
            margin-bottom: 1rem;
        }

        #user-status {
            text-align: center;
            margin-bottom: 2rem;
            color: var(--accent);
            font-weight: bold;
        }

        select {
            width: 100%;
            min-height: 44px;
            margin-bottom: 1rem;
            padding: 0.5rem;
            border: 2px solid var(--accent-secondary);
            border-radius: 12px;
            font-size: 1rem;
        }
    </style>
</head>
<body>
    <div class="app-container">
        <div id="welcome-screen" class="screen active">
            <h1>Todo List App</h1>
            <button onclick="showNewUserScreen()">New User</button>
            <button onclick="showReturningUserScreen()">Returning User</button>
        </div>

        <div id="new-user-screen" class="screen">
            <h1>New User</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Register & Enter</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <div id="returning-user-screen" class="screen">
            <h1>Returning User</h1>
            <select id="user-label-select"></select>
            <input type="text" id="returning-passcode" placeholder="4-digit code" maxlength="4">
            <button onclick="loginReturningUser()">Login</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <div id="main-screen" class="screen">
            <div class="container">
                <h1>Todo List</h1>
                <div id="user-status"></div>
                
                <div class="todo-input">
                    <input type="text" id="new-todo" placeholder="Enter a new task..." onkeypress="if(event.key === 'Enter') addTodo()">
                    <button onclick="addTodo()">Add</button>
                </div>

                <div id="todos-list"></div>

                <button onclick="showScreen('welcome-screen')" style="width: 100%; margin-top: 2rem;">Leave App</button>
            </div>
        </div>
    </div>

    <script>
        let currentUser = null;
        let pollingInterval;

        async function generateNewUser() {
            const slots = await checkAvailableSlots();
            if (slots.isFull) {
                alert('App is full!');
                return false;
            }
            
            const user = await generateUser();
            if (user?.success) {
                currentUser = user;
                document.getElementById('new-user-info').innerHTML = 
                    `Your ID: ${user.userLabel}<br>Code: ${user.passcode}<br>Save these!`;
                return true;
            }
            return false;
        }

        async function registerNewUser() {
            if (!currentUser) return;
            
            const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
            if (result?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                enterMainScreen();
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            await generateNewUser();
        }

        async function loginReturningUser() {
            const label = document.getElementById('user-label-select').value;
            const passcode = document.getElementById('returning-passcode').value;
            
            const result = await authenticateUser(label, passcode);
            if (result?.success) {
                currentUser = { userLabel: label, passcode, participantId: result.user.participantId };
                updateZadAuth(label, result.user.participantId);
                enterMainScreen();
            } else {
                alert('Wrong code!');
            }
        }

        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const slots = await checkAvailableSlots();
            const select = document.getElementById('user-label-select');
            select.innerHTML = '<option>Select User</option>';
            slots.usedLabels.forEach(label => {
                select.innerHTML += `<option>${label}</option>`;
            });
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            if (screenId !== 'main-screen') stopPolling();
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('user-status').textContent = `Logged in as: ${currentUser.userLabel}`;
            startPolling();
            loadLatestData();
        }

        async function addTodo() {
            const input = document.getElementById('new-todo');
            const text = input.value.trim();
            
            if (text) {
                await save('todo', {
                    text: text,
                    completed: false,
                    created_at: new Date().toISOString()
                });
                
                input.value = '';
                await loadLatestData();
            }
        }

        async function toggleTodo(todoId) {
            const todos = await load('todo');
            const todo = todos.find(t => t.id === parseInt(todoId));
            
            if (todo) {
                await save('update_task', {
                    taskId: parseInt(todoId),
                    updates: { completed: !todo.completed }
                });
                
                await loadLatestData();
            }
        }

        function startPolling() {
            pollingInterval = setInterval(() => loadLatestData(), 2000);
        }

        function stopPolling() {
            if (pollingInterval) clearInterval(pollingInterval);
        }

        async function loadLatestData() {
            const todos = await load('todo');
            
            // Sort by creation date, newest first
            todos.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
            
            const todosList = document.getElementById('todos-list');
            todosList.innerHTML = '';
            
            todos.forEach(todo => {
                const todoEl = document.createElement('div');
                todoEl.className = `todo-item ${todo.completed ? 'completed' : ''}`;
                todoEl.innerHTML = `
                    <div class="todo-text">
                        ${todo.text}
                        <div class="todo-meta">
                            Added by ${todo.author} on ${new Date(todo.created_at).toLocaleDateString()}
                        </div>
                    </div>
                    <button onclick="toggleTodo(${todo.id})">
                        ${todo.completed ? 'Undo' : 'Done'}
                    </button>
                `;
                todosList.appendChild(todoEl);
            });
        }

        initAuth();
    </script>
</body>
</html>