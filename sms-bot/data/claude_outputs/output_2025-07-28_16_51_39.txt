```html
<!DOCTYPE html>
<html>
<head>
    <title>Pac-Man</title>
    <meta name="viewport" content="width=device-width, user-scalable=no">
    <style>
        body { 
            margin: 0; 
            padding: 0; 
            background: #000; 
            display: flex; 
            flex-direction: column; 
            align-items: center;
            font-family: sans-serif;
            touch-action: none;
            height: 100vh;
            overflow: hidden;
        }
        canvas { 
            display: block; 
            background: #000;
        }
        #controls {
            position: fixed;
            bottom: 0;
            width: 100%;
            height: 120px;
            background: #222;
            display: none;
        }
        .d-pad {
            position: absolute;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            display: grid;
            grid-template-columns: repeat(3, 60px);
            grid-template-rows: repeat(3, 60px);
        }
        .d-btn {
            background: rgba(255,255,255,0.3);
            margin: 5px;
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            user-select: none;
        }
        #up { grid-column: 2; grid-row: 1; }
        #left { grid-column: 1; grid-row: 2; }
        #right { grid-column: 3; grid-row: 2; }
        #down { grid-column: 2; grid-row: 3; }
        .screen {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: calc(100% - 120px);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background: #000;
            color: #FF0;
            text-align: center;
            z-index: 10;
        }
        #gameScreen { display: none; }
        #endScreen { display: none; }
        button {
            background: #FF0;
            color: #000;
            border: none;
            padding: 15px 30px;
            font-size: 18px;
            margin-top: 20px;
            cursor: pointer;
            border-radius: 30px;
            font-weight: bold;
        }
        .score-display {
            position: absolute;
            top: 10px;
            left: 10px;
            color: #FFF;
            font-size: 20px;
            z-index: 5;
        }
    </style>
</head>
<body>
    <div id="introScreen" class="screen">
        <h1>üëæ PAC-MAN üëæ</h1>
        <p>Eat all the dots. Avoid the ghosts!</p>
        <button id="startBtn">START GAME</button>
    </div>
    
    <div id="gameScreen">
        <div class="score-display">SCORE: <span id="score">0</span></div>
        <canvas id="gameCanvas"></canvas>
    </div>
    
    <div id="endScreen" class="screen">
        <h1>GAME OVER</h1>
        <p>Final Score: <span id="finalScore">0</span></p>
        <button id="restartBtn">PLAY AGAIN</button>
    </div>
    
    <div id="controls">
        <div class="d-pad">
            <div id="up" class="d-btn">‚Üë</div>
            <div id="left" class="d-btn">‚Üê</div>
            <div id="right" class="d-btn">‚Üí</div>
            <div id="down" class="d-btn">‚Üì</div>
        </div>
    </div>

    <script>
        var canvas = document.getElementById('gameCanvas');
        var ctx = canvas.getContext('2d');
        var scoreElement = document.getElementById('score');
        var finalScoreElement = document.getElementById('finalScore');
        var introScreen = document.getElementById('introScreen');
        var gameScreen = document.getElementById('gameScreen');
        var endScreen = document.getElementById('endScreen');
        var startBtn = document.getElementById('startBtn');
        var restartBtn = document.getElementById('restartBtn');
        var controls = document.getElementById('controls');
        
        var dpr = window.devicePixelRatio || 1;
        var controlsHeight = 120;
        var grid = [];
        var cellSize;
        var player = { x: 0, y: 0, dir: {x: 0, y: 0}, nextDir: {x: 0, y: 0} };
        var ghosts = [];
        var dots = [];
        var score = 0;
        var totalDots = 0;
        var gameRunning = false;
        var lastTime = 0;
        var ghostMoveInterval = 500;
        var lastGhostMove = 0;
        
        var maze = [
            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
            [1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1],
            [1,0,1,1,0,1,1,1,0,1,0,1,1,1,0,1,1,0,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,1,1,0,1,0,1,1,1,1,1,0,1,0,1,1,0,1],
            [1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1],
            [1,1,1,1,0,1,1,1,2,1,2,1,1,1,0,1,1,1,1],
            [2,2,2,1,0,1,2,2,2,2,2,2,2,1,0,1,2,2,2],
            [1,1,1,1,0,1,2,1,1,2,1,1,2,1,0,1,1,1,1],
            [2,2,2,2,0,2,2,1,2,2,2,1,2,2,0,2,2,2,2],
            [1,1,1,1,0,1,2,1,1,1,1,1,2,1,0,1,1,1,1],
            [2,2,2,1,0,1,2,2,2,2,2,2,2,1,0,1,2,2,2],
            [1,1,1,1,0,1,1,1,2,1,2,1,1,1,0,1,1,1,1],
            [1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1],
            [1,0,1,1,0,1,1,1,0,1,0,1,1,1,0,1,1,0,1],
            [1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1],
            [1,1,0,1,0,1,0,1,1,1,1,1,0,1,0,1,0,1,1],
            [1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1],
            [1,0,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,0,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
        ];
        
        function resizeCanvas() {
            var width = window.innerWidth;
            var height = window.innerHeight - controlsHeight;
            
            canvas.width = width * dpr;
            canvas.height = height * dpr;
            canvas.style.width = width + 'px';
            canvas.style.height = height + 'px';
            
            ctx.scale(dpr, dpr);
            
            cellSize = Math.min(width, height) / maze[0].length;
        }
        
        function initGame() {
            resizeCanvas();
            grid = [];
            dots = [];
            ghosts = [];
            score = 0;
            scoreElement.textContent = score;
            
            for (var y = 0; y < maze.length; y++) {
                grid[y] = [];
                for (var x = 0; x < maze[y].length; x++) {
                    grid[y][x] = maze[y][x];
                    if (maze[y][x] === 0) {
                        dots.push({x: x, y: y});
                        totalDots++;
                    }
                }
            }
            
            player = { 
                x: 9, 
                y: 15, 
                dir: {x: 0, y: 0}, 
                nextDir: {x: 0, y: 0} 
            };
            
            ghosts = [
                {x: 9, y: 9, dir: {x: 1, y: 0}, color: '#FF0000'},
                {x: 8, y: 9, dir: {x: -1, y: 0}, color: '#FF99FF'},
                {x: 9, y: 8, dir: {x: 0, y: 1}, color: '#00FFFF'},
                {x: 10, y: 9, dir: {x: 0, y: -1}, color: '#FF9900'}
            ];
            
            gameRunning = true;
            lastTime = 0;
            requestAnimationFrame(gameLoop);
        }
        
        function isValidPosition(x, y) {
            if (x < 0 || x >= maze[0].length || y < 0 || y >= maze.length) return false;
            return maze[Math.floor(y)][Math.floor(x)] !== 1;
        }
        
        function movePlayer() {
            var nextX = player.x + player.nextDir.x;
            var nextY = player.y + player.nextDir.y;
            
            if (isValidPosition(nextX, nextY)) {
                player.dir = {x: player.nextDir.x, y: player.nextDir.y};
            }
            
            var newX = player.x + player.dir.x;
            var newY = player.y + player.dir.y;
            
            if (isValidPosition(newX, newY)) {
                player.x = newX;
                player.y = newY;
                
                // Wrap around tunnel
                if (player.x < 0) player.x = maze[0].length - 1;
                if (player.x >= maze[0].length) player.x = 0;
            }
            
            // Collect dots
            for (var i = 0; i < dots.length; i++) {
                if (Math.floor(dots[i].x) === Math.floor(player.x) && 
                    Math.floor(dots[i].y) === Math.floor(player.y)) {
                    dots.splice(i, 1);
                    score += 10;
                    scoreElement.textContent = score;
                    break;
                }
            }
        }
        
        function moveGhosts() {
            for (var i = 0; i < ghosts.length; i++) {
                var ghost = ghosts[i];
                var possibleDirs = [];
                
                // Check possible directions
                if (isValidPosition(ghost.x + 1, ghost.y) && ghost.dir.x !== -1) 
                    possibleDirs.push({x: 1, y: 0});
                if (isValidPosition(ghost.x - 1, ghost.y) && ghost.dir.x !== 1) 
                    possibleDirs.push({x: -1, y: 0});
                if (isValidPosition(ghost.x, ghost.y + 1) && ghost.dir.y !== -1) 
                    possibleDirs.push({x: 0, y: 1});
                if (isValidPosition(ghost.x, ghost.y - 1) && ghost.dir.y !== 1) 
                    possibleDirs.push({x: 0, y: -1});
                
                // Choose new direction
                if (possibleDirs.length > 0) {
                    // Sometimes chase player
                    if (Math.random() > 0.7) {
                        var dx = player.x - ghost.x;
                        var dy = player.y - ghost.y;
                        var move = {x: 0, y: 0};
                        
                        if (Math.abs(dx) > Math.abs(dy)) {
                            move.x = dx > 0 ? 1 : -1;
                        } else {
                            move.y = dy > 0 ? 1 : -1;
                        }
                        
                        if (isValidPosition(ghost.x + move.x, ghost.y + move.y) &&
                            (move.x !== -ghost.dir.x || move.y !== -ghost.dir.y)) {
                            ghost.dir = move;
                        } else {
                            ghost.dir = possibleDirs[Math.floor(Math.random() * possibleDirs.length)];
                        }
                    } else {
                        ghost.dir = possibleDirs[Math.floor(Math.random() * possibleDirs.length)];
                    }
                }
                
                var newX = ghost.x + ghost.dir.x;
                var newY = ghost.y + ghost.dir.y;
                
                if (isValidPosition(newX, newY)) {
                    ghost.x = newX;
                    ghost.y = newY;
                    
                    // Wrap around tunnel
                    if (ghost.x < 0) ghost.x = maze[0].length - 1;
                    if (ghost.x >= maze[0].length) ghost.x = 0;
                }
            }
        }
        
        function checkCollisions() {
            for (var i = 0; i < ghosts.length; i++) {
                var ghost = ghosts[i];
                if (Math.floor(ghost.x) === Math.floor(player.x) && 
                    Math.floor(ghost.y) === Math.floor(player.y)) {
                    return true;
                }
            }
            return false;
        }
        
        function update() {
            movePlayer();
            
            var now = Date.now();
            if (now - lastGhostMove > ghostMoveInterval) {
                moveGhosts();
                lastGhostMove = now;
            }
            
            if (checkCollisions() || dots.length === 0) {
                gameRunning = false;
                finalScoreElement.textContent = score;
                endScreen.style.display = 'flex';
            }
        }
        
        function draw() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Draw maze
            for (var y = 0; y < maze.length; y++) {
                for (var x = 0; x < maze[y].length; x++) {
                    if (maze[y][x] === 1) {
                        ctx.fillStyle = '#0000FF';
                        ctx.fillRect(x * cellSize, y * cellSize, cellSize, cellSize);
                    }
                }
            }
            
            // Draw dots
            ctx.fillStyle = '#FFFF00';
            for (var i = 0; i < dots.length; i++) {
                var dot = dots[i];
                ctx.beginPath();
                ctx.arc(
                    dot.x * cellSize + cellSize/2, 
                    dot.y * cellSize + cellSize/2, 
                    cellSize/8, 0, Math.PI * 2
                );
                ctx.fill();
            }
            
            // Draw player (Pac-Man)
            ctx.fillStyle = '#FFFF00';
            ctx.beginPath();
            var angle = Math.atan2(player.dir.y, player.dir.x);
            ctx.arc(
                player.x * cellSize + cellSize/2, 
                player.y * cellSize + cellSize/2, 
                cellSize/2 - 2, 
                angle + Math.PI/4, 
                angle + Math.PI*7/4
            );
            ctx.lineTo(
                player.x * cellSize + cellSize/2, 
                player.y * cellSize + cellSize/2
            );
            ctx.fill();
            
            // Draw ghosts
            for (var i = 0; i < ghosts.length; i++) {
                var ghost = ghosts[i];
                ctx.fillStyle = ghost.color;
                ctx.beginPath();
                ctx.arc(
                    ghost.x * cellSize + cellSize/2, 
                    ghost.y * cellSize + cellSize/2, 
                    cellSize/2 - 2, 0, Math.PI
                );
                ctx.lineTo(
                    ghost.x * cellSize + cellSize/2 - cellSize/2 + 2, 
                    ghost.y * cellSize + cellSize/2
                );
                ctx.lineTo(
                    ghost.x * cellSize + cellSize/2 - cellSize/2 + 2, 
                    ghost.y * cellSize + cellSize/2 + cellSize/3
                );
                ctx.lineTo(
                    ghost.x * cellSize + cellSize/2 - cellSize/4, 
                    ghost.y * cellSize + cellSize/2 + cellSize/6
                );
                ctx.lineTo(
                    ghost.x * cellSize + cellSize/2, 
                    ghost.y * cellSize + cellSize/2 + cellSize/3
                );
                ctx.lineTo(
                    ghost.x * cellSize + cellSize/2 + cellSize/4, 
                    ghost.y * cellSize + cellSize/2 + cellSize/6
                );
                ctx.lineTo(
                    ghost.x * cellSize + cellSize/2 + cellSize/2 - 2, 
                    ghost.y * cellSize + cellSize/2 + cellSize/3
                );
                ctx.lineTo(
                    ghost.x * cellSize + cellSize/2 + cellSize/2 - 2, 
                    ghost.y * cellSize + cellSize/2
                );
                ctx.fill();
                
                // Eyes
                ctx.fillStyle = '#FFFFFF';
                ctx.beginPath();
                ctx.arc(
                    ghost.x * cellSize + cellSize/2 - cellSize/5, 
                    ghost.y * cellSize + cellSize/2 - cellSize/8, 
                    cellSize/6, 0, Math.PI * 2
                );
                ctx.arc(
                    ghost.x * cellSize + cellSize/2 + cellSize/5, 
                    ghost.y * cellSize + cellSize/2 - cellSize/8, 
                    cellSize/6, 0, Math.PI * 2
                );
                ctx.fill();
                
                ctx.fillStyle = '#0000FF';
                ctx.beginPath();
                ctx.arc(
                    ghost.x * cellSize + cellSize/2 - cellSize/5 + player.dir.x*2, 
                    ghost.y * cellSize + cellSize/2 - cellSize/8 + player.dir.y*2, 
                    cellSize/10, 0, Math.PI * 2
                );
                ctx.arc(
                    ghost.x * cellSize + cellSize/2 + cellSize/5 + player.dir.x*2, 
                    ghost.y * cellSize + cellSize/2 - cellSize/8 + player.dir.y*2, 
                    cellSize/10, 0, Math.PI * 2
                );
                ctx.fill();
            }
        }
        
        function gameLoop(timestamp) {
            if (!lastTime) lastTime = timestamp;
            var deltaTime = timestamp - lastTime;
            lastTime = timestamp;
            
            if (gameRunning) {
                update();
                draw();
                requestAnimationFrame(gameLoop);
            }
        }
        
        function handleKeyDown(e) {
            if (!gameRunning) return;
            
            switch(e.keyCode) {
                case 37: // Left
                    player.nextDir = {x: -1, y: 0};
                    break;
                case 38: // Up
                    player.nextDir = {x: 0, y: -1};
                    break;
                case 39: // Right
                    player.nextDir = {x: 1, y: 0};
                    break;
                case 40: // Down
                    player.nextDir = {x: 0, y: 1};
                    break;
            }
        }
        
        function setupTouchControls() {
            document.getElementById('up').ontouchstart = function(e) {
                e.preventDefault();
                player.nextDir = {x: 0, y: -1};
            };
            document.getElementById('down').ontouchstart = function(e) {
                e.preventDefault();
                player.nextDir = {x: 0, y: 1};
            };
            document.getElementById('left').ontouchstart = function(e) {
                e.preventDefault();
                player.nextDir = {x: -1, y: 0};
            };
            document.getElementById('right').ontouchstart = function(e) {
                e.preventDefault();
                player.nextDir = {x: 1, y: 0};
            };
        }
        
        startBtn.onclick = function() {
            introScreen.style.display = 'none';
            gameScreen.style.display = 'block';
            if ('ontouchstart' in window) {
                controls.style.display = 'block';
            }
            initGame();
        };
        
        restartBtn.onclick = function() {
            endScreen.style.display = 'none';
            gameScreen.style.display = 'block';
            initGame();
        };
        
        window.addEventListener('keydown', handleKeyDown);
        window.addEventListener('resize', resizeCanvas);
        setupTouchControls();
    </script>
</body>
</html>
```