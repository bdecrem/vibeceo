I'll create a simple mobile-friendly platformer game with touch controls and basic physics. Here's a complete implementation:

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Platform Jumper</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            user-select: none;
        }
        
        body {
            overflow: hidden;
            touch-action: none;
            background: #000;
        }
        
        #gameCanvas {
            display: block;
            width: 100vw;
            height: 100vh;
        }
        
        .controls {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            height: 80px;
            display: flex;
            justify-content: space-between;
            padding: 10px 20px;
            background: rgba(0,0,0,0.3);
        }
        
        .control-btn {
            width: 80px;
            height: 60px;
            background: rgba(255,255,255,0.2);
            border: 2px solid rgba(255,255,255,0.5);
            border-radius: 8px;
            color: white;
            font-size: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            touch-action: none;
        }
        
        #score {
            position: fixed;
            top: 20px;
            left: 20px;
            color: white;
            font-family: Arial, sans-serif;
            font-size: 24px;
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas"></canvas>
    <div id="score">Score: 0</div>
    <div class="controls">
        <div class="control-btn" id="leftBtn">←</div>
        <div class="control-btn" id="jumpBtn">↑</div>
        <div class="control-btn" id="rightBtn">→</div>
    </div>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        
        // Game constants
        const GRAVITY = 0.5;
        const JUMP_FORCE = -12;
        const MOVE_SPEED = 5;
        const PLATFORM_COUNT = 6;
        
        // Game state
        const game = {
            score: 0,
            isPlaying: true
        };
        
        // Input state
        const input = {
            left: false,
            right: false,
            jump: false
        };
        
        // Player object
        const player = {
            x: 0,
            y: 0,
            width: 30,
            height: 30,
            velX: 0,
            velY: 0,
            isJumping: false,
            color: '#ff0'
        };
        
        // Platforms array
        let platforms = [];
        
        // Coins array
        let coins = [];
        
        // Initialize game dimensions
        function resizeCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            
            // Reset player position
            player.x = canvas.width / 2;
            player.y = canvas.height - 100;
            
            // Generate initial platforms
            generatePlatforms();
        }
        
        // Generate platforms
        function generatePlatforms() {
            platforms = [];
            
            // Add ground platform
            platforms.push({
                x: 0,
                y: canvas.height - 40,
                width: canvas.width,
                height: 40,
                color: '#4a4'
            });
            
            // Add floating platforms
            for (let i = 0; i < PLATFORM_COUNT; i++) {
                platforms.push({
                    x: Math.random() * (canvas.width - 100),
                    y: canvas.height - (i + 1) * (canvas.height / PLATFORM_COUNT),
                    width: 100,
                    height: 20,
                    color: '#4a4'
                });
            }
            
            // Generate coins
            generateCoins();
        }
        
        // Generate coins
        function generateCoins() {
            coins = [];
            platforms.forEach(platform => {
                if (Math.random() < 0.7) { // 70% chance for a coin on each platform
                    coins.push({
                        x: platform.x + platform.width/2,
                        y: platform.y - 30,
                        width: 15,
                        height: 15,
                        collected: false,
                        color: '#fd0'
                    });
                }
            });
        }
        
        // Check collisions
        function checkCollisions() {
            // Platform collisions
            let onPlatform = false;
            platforms.forEach(platform => {
                if (player.x + player.width > platform.x &&
                    player.x < platform.x + platform.width &&
                    player.y + player.height > platform.y &&
                    player.y + player.height < platform.y + platform.height &&
                    player.velY > 0) {
                    
                    player.y = platform.y - player.height;
                    player.velY = 0;
                    player.isJumping = false;
                    onPlatform = true;
                }
            });
            
            if (!onPlatform) {
                player.isJumping = true;
            }
            
            // Coin collisions
            coins.forEach(coin => {
                if (!coin.collected &&
                    player.x + player.width > coin.x &&
                    player.x < coin.x + coin.width &&
                    player.y + player.height > coin.y &&
                    player.y < coin.y + coin.height) {
                    
                    coin.collected = true;
                    game.score += 10;
                    document.getElementById('score').textContent = `Score: ${game.score}`;
                }
            });
        }
        
        // Update game state
        function update() {
            // Apply horizontal movement
            if (input.left) {
                player.velX = -MOVE_SPEED;
            } else if (input.right) {
                player.velX = MOVE_SPEED;
            } else {
                player.velX = 0;
            }
            
            // Apply jump
            if (input.jump && !player.isJumping) {
                player.velY = JUMP_FORCE;
                player.isJumping = true;
            }
            
            // Apply gravity
            player.velY += GRAVITY;
            
            // Update position
            player.x += player.velX;
            player.y += player.velY;
            
            // Screen boundaries
            if (player.x < 0) player.x = 0;
            if (player.x + player.width > canvas.width) player.x = canvas.width - player.width;
            if (player.y < 0) player.y = 0;
            if (player.y > canvas.height) {
                // Player fell - reset position
                player.x = canvas.width / 2;
                player.y = canvas.height - 100;
                player.velY = 0;
            }
            
            checkCollisions();
        }
        
        // Render game
        function render() {
            // Clear canvas
            ctx.fillStyle = '#333';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // Draw platforms
            platforms.forEach(platform => {
                ctx.fillStyle = platform.color;
                ctx.fillRect(platform.x, platform.y, platform.width, platform.height);
            });
            
            // Draw coins
            coins.forEach(coin => {
                if (!coin.collected) {
                    ctx.fillStyle = coin.color;
                    ctx.beginPath();
                    ctx.arc(coin.x + coin.width/2, coin.y + coin.height/2, 
                           coin.width/2, 0, Math.PI * 2);
                    ctx.fill();
                }
            });
            
            // Draw player
            ctx.fillStyle = player.color;
            ctx.fillRect(player.x, player.y, player.width, player.height);
        }
        
        // Game loop
        function gameLoop() {
            update();
            render();
            requestAnimationFrame(gameLoop);
        }
        
        // Touch controls
        document.getElementById('leftBtn').addEventListener('touchstart', () => input.left = true);
        document.getElementById('leftBtn').addEventListener('touchend', () => input.left = false);
        document.getElementById('rightBtn').addEventListener('touchstart', () => input.right = true);
        document.getElementById('rightBtn').addEventListener('touchend', () => input.right = false);
        document.getElementById('jumpBtn').addEventListener('touchstart', () => input.jump = true);
        document.getElementById('jumpBtn').addEventListener('touchend', () => input.jump = false);
        
        // Keyboard controls (for testing)
        window.addEventListener('keydown', (e) => {
            if (e.key === 'ArrowLeft') input.left = true;
            if (e.key === 'ArrowRight') input.right = true;
            if (e.key === 'ArrowUp' || e.key === ' ') input.jump = true;
        });
        
        window.addEventListener('keyup', (e) => {
            if (e.key === 'ArrowLeft') input.left = false;
            if (e.key === 'ArrowRight') input.right = false;
            if (e.key === 'ArrowUp' || e.key === ' ') input.jump = false;
        });
        
        // Prevent default touch behaviors
        document.addEventListener('touchstart', (e) => e.preventDefault(), {passive: false});
        document.addEventListener('touchmove', (e) => e.preventDefault(), {passive: false});
        
        // Handle resize
        window.addEventListener('resize', resizeCanvas);
        
        // Start game
        resizeCanvas();
        gameLoop();
    </script>
</body>
</html>
```

This platformer game includes:

1. Responsive canvas that fills the screen
2. Touch controls with left/right movement and jump buttons
3. Platform collision detection
4. Collectible coins for scoring
5. Simple physics with gravity and jumping
6. Screen boundary checking
7. Fallback keyboard controls for testing
8. Automatic platform generation
9. Score display
10. Mobile-friendly layout and controls

Game features:
- Yellow square player character
- Green platforms
- Gold coins to collect
- Score tracking
- Smooth movement and jumping physics
- Multiple platforms to jump between
- Reset when falling off the bottom

Controls:
- Left arrow button: Move left
- Right arrow button: Move right
- Up arrow button: Jump
- (Also supports keyboard arrows/spacebar for testing)

The game is designed to work well on mobile devices with:
- Proper viewport settings
- Touch-friendly button sizes
- Prevented default touch behaviors
- Responsive scaling
- Performance optimizations

Try to collect all the coins by jumping from platform to platform. If you fall, you'll respawn at the starting position. The controls are simple and intuitive for mobile play.