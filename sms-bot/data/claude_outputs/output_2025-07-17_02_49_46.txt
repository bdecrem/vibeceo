```html
<!DOCTYPE html>
<html>
<head>
  <title>Hello World Generator</title>
  <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@700&family=Inter:wght@400;600&display=swap" rel="stylesheet">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Inter', sans-serif;
      min-height: 100vh;
      overflow: hidden;
      position: relative;
    }

    #generator {
      height: 100vh;
      width: 100vw;
      display: flex;
      justify-content: center;
      align-items: center;
      position: relative;
      transition: all 0.5s ease;
    }

    h1 {
      font-family: 'Space Grotesk', sans-serif;
      font-size: 8vw;
      text-align: center;
      position: relative;
      z-index: 2;
      text-shadow: 3px 3px rgba(0,0,0,0.2);
    }

    .floating-emoji {
      position: absolute;
      font-size: 4rem;
      pointer-events: none;
      transition: transform 0.1s ease;
      animation: float 6s ease-in-out infinite;
      z-index: 1;
    }

    @keyframes float {
      0%, 100% { transform: translateY(0); }
      50% { transform: translateY(-20px); }
    }

    .controls {
      position: fixed;
      bottom: 20px;
      right: 20px;
      display: flex;
      gap: 10px;
      z-index: 3;
    }

    button {
      font-family: 'Space Grotesk', sans-serif;
      padding: 12px 24px;
      border: none;
      border-radius: 25px;
      cursor: pointer;
      font-size: 1rem;
      background: rgba(255,255,255,0.2);
      backdrop-filter: blur(5px);
      color: #000;
      transition: all 0.3s ease;
    }

    button:hover {
      transform: scale(1.05);
    }

    .prompt {
      position: fixed;
      bottom: 10px;
      left: 10px;
      font-size: 0.8rem;
      opacity: 0.7;
    }

    .call-to-text {
      position: fixed;
      top: 20px;
      right: 20px;
      background: rgba(255,255,255,0.2);
      backdrop-filter: blur(5px);
      padding: 10px 20px;
      border-radius: 25px;
      font-size: 0.9rem;
    }
  </style>
</head>
<body>
  <div id="generator">
    <h1>Hello World</h1>
  </div>

  <div class="controls">
    <button onclick="generateNew()">Next</button>
    <button onclick="saveCurrentState()">Save This One</button>
  </div>

  <div class="prompt">Generated from: Hello World Generator Prompt</div>
  <div class="call-to-text">ðŸ“± Text START to +1-866-330-0015</div>

  <script>
    const emojis = ['âœ¨', 'ðŸŒˆ', 'ðŸš€', 'ðŸ’«', 'âš¡', 'ðŸŒŸ', 'ðŸ”®', 'ðŸ¦„'];
    const gradients = [
      'linear-gradient(45deg, #FF2E93, #FF61C7)',
      'linear-gradient(45deg, #3F88FF, #ABF7FF)',
      'linear-gradient(45deg, #FF7C5C, #FFEAC2)',
      'linear-gradient(45deg, #7C3AED, #D8B4FE)',
      'linear-gradient(45deg, #00FFC6, #8CFFDA)'
    ];

    function createFloatingEmojis() {
      const container = document.getElementById('generator');
      container.innerHTML = '<h1>Hello World</h1>';
      
      for (let i = 0; i < 6; i++) {
        const emoji = document.createElement('div');
        emoji.className = 'floating-emoji';
        emoji.textContent = emojis[Math.floor(Math.random() * emojis.length)];
        emoji.style.left = Math.random() * 80 + 10 + '%';
        emoji.style.top = Math.random() * 80 + 10 + '%';
        emoji.setAttribute('data-value', Math.random() * 4 + 1);
        container.appendChild(emoji);
      }
    }

    function generateNew() {
      const generator = document.getElementById('generator');
      generator.style.background = gradients[Math.floor(Math.random() * gradients.length)];
      createFloatingEmojis();
    }

    async function saveCurrentState() {
      const currentState = {
        background: document.getElementById('generator').style.background,
        emojis: Array.from(document.querySelectorAll('.floating-emoji')).map(emoji => ({
          text: emoji.textContent,
          left: emoji.style.left,
          top: emoji.style.top
        }))
      };

      try {
        const response = await fetch('/api/admin/save', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ 
            app_id: 'hello_world_generator',
            submission_data: currentState
          })
        });
        
        if (!response.ok) throw new Error('Save failed');
        alert('This Hello World has been saved as the permanent version!');
      } catch (error) {
        console.error('Error:', error);
        alert('Failed to save. Please try again.');
      }
    }

    document.addEventListener('mousemove', (e) => {
      document.querySelectorAll('.floating-emoji').forEach(emoji => {
        const speed = emoji.getAttribute('data-value');
        const x = (e.clientX - window.innerWidth/2) * speed/100;
        const y = (e.clientY - window.innerHeight/2) * speed/100;
        emoji.style.transform = `translate(${x}px, ${y}px)`;
      });
    });

    // Initial generation
    generateNew();

    // Easter egg: Type WTAF
    let typed = '';
    document.addEventListener('keydown', (e) => {
      typed += e.key.toLowerCase();
      if (typed.includes('wtaf')) {
        document.body.style.animation = 'rainbow 1s infinite';
        typed = '';
      }
    });
  </script>
</body>
</html>

<!-- WTAF_ADMIN_PAGE_STARTS_HERE -->

<!DOCTYPE html>
<html>
<head>
  <title>Hello World Generator Admin</title>
  <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@700&family=Inter:wght@400;600&display=swap" rel="stylesheet">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Inter', sans-serif;
      padding: 2rem;
      background: #f5f5f5;
    }

    h1 {
      font-family: 'Space Grotesk', sans-serif;
      margin-bottom: 2rem;
    }

    .admin-panel {
      background: white;
      padding: 2rem;
      border-radius: 10px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    table {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 1rem;
    }

    th, td {
      padding: 1rem;
      text-align: left;
      border-bottom: 1px solid #eee;
    }

    th {
      font-weight: 600;
      background: #f9f9f9;
    }

    .preview {
      width: 200px;
      height: 100px;
      border-radius: 5px;
      margin: 0.5rem 0;
    }

    .controls {
      margin-top: 2rem;
      display: flex;
      gap: 1rem;
    }

    button {
      font-family: 'Space Grotesk', sans-serif;
      padding: 12px 24px;
      border: none;
      border-radius: 25px;
      cursor: pointer;
      font-size: 1rem;
      background: #000;
      color: white;
      transition: all 0.3s ease;
    }

    button:hover {
      transform: scale(1.05);
    }
  </style>
</head>
<body>
  <h1>Hello World Generator Admin</h1>
  
  <div class="admin-panel">
    <table id="submissions-table">
      <thead>
        <tr>
          <th>Date</th>
          <th>Background</th>
          <th>Emojis</th>
          <th>Preview</th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>

    <div class="controls">
      <button onclick="exportCSV()">Export to CSV</button>
      <button onclick="loadSubmissions()">Refresh Data</button>
    </div>
  </div>

  <script>
    async function loadSubmissions() {
      try {
        const response = await fetch('/api/admin/load?app_id=hello_world_generator');
        if (!response.ok) throw new Error('Failed to load submissions');
        const data = await response.json();
        
        const tbody = document.querySelector('#submissions-table tbody');
        tbody.innerHTML = '';
        
        data.forEach(submission => {
          const row = document.createElement('tr');
          const date = new Date(submission.timestamp || Date.now()).toLocaleString();
          const background = submission.submission_data.background;
          const emojis = submission.submission_data.emojis.map(e => e.text).join(' ');
          
          row.innerHTML = `
            <td>${date}</td>
            <td>${background}</td>
            <td>${emojis}</td>
            <td>
              <div class="preview" style="background: ${background}"></div>
            </td>
          `;
          tbody.appendChild(row);
        });
      } catch (error) {
        console.error('Error:', error);
        alert('Failed to load submissions');
      }
    }

    function exportCSV() {
      try {
        const rows = Array.from(document.querySelectorAll('#submissions-table tbody tr'));
        const csvContent = 'Date,Background,Emojis\n' + rows.map(row => {
          const cells = Array.from(row.cells);
          return cells.slice(0, 3).map(cell => `"${cell.textContent}"`).join(',');
        }).join('\n');

        const blob = new Blob([csvContent], { type: 'text/csv' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'hello_world_submissions.csv';
        a.click();
      } catch (error) {
        console.error('Error:', error);
        alert('Failed to export CSV');
      }
    }

    // Load submissions on page load
    loadSubmissions();
  </script>
</body>
</html>
```