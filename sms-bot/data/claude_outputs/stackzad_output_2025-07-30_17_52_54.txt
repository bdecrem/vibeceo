I'll create a moderation page for viewing and deleting images from the shared dataset. Here's the complete solution:

<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>Image Moderation Dashboard</title>
    <style>
        * {
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: #0a0a0a;
            color: #fff;
            margin: 0;
            padding: 10px;
            font-size: 16px;
        }

        .app-container {
            max-width: 1200px;
            margin: 0 auto;
            background: #1a1a1a;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 0 40px rgba(0,0,0,0.5);
        }

        h1 {
            font-size: 24px;
            margin: 0 0 20px 0;
            background: linear-gradient(45deg, #ff0066, #00ffff);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        button {
            background: linear-gradient(45deg, #ff0066, #ff00ff);
            color: white;
            border: none;
            padding: 16px 24px;
            border-radius: 6px;
            font-weight: bold;
            cursor: pointer;
            margin: 8px 0;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-size: 16px;
            min-height: 44px;
            transform: skew(-5deg);
            box-shadow: 4px 4px 0 #ff00ff;
        }

        button:hover {
            background: linear-gradient(45deg, #ff3388, #ff33ff);
        }

        button:active {
            transform: skew(-5deg) scale(0.98);
        }

        .image-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .image-card {
            background: #2a2a2a;
            border-radius: 8px;
            padding: 15px;
            position: relative;
        }

        .image-card img {
            width: 100%;
            height: auto;
            border-radius: 4px;
            margin-bottom: 10px;
        }

        .image-info {
            font-size: 14px;
            color: #aaa;
            margin-bottom: 10px;
        }

        .delete-btn {
            background: #ff0066;
            padding: 8px 16px;
            width: 100%;
        }

        .stats {
            background: #2a2a2a;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            display: flex;
            gap: 20px;
        }

        .stat-item {
            flex: 1;
            text-align: center;
        }

        .stat-number {
            font-size: 24px;
            font-weight: bold;
            color: #ff0066;
        }

        .stat-label {
            font-size: 14px;
            color: #aaa;
        }

        .screen { display: none; }
        .screen.active { display: block; }

        @media (max-width: 600px) {
            .image-grid {
                grid-template-columns: 1fr;
            }
            
            .stats {
                flex-direction: column;
                text-align: center;
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Auth Screens -->
        <div id="welcome-screen" class="screen active">
            <h1>Image Moderation Dashboard</h1>
            <p>Login to manage artwork submissions</p>
            <button onclick="showNewUserScreen()">New Moderator</button>
            <button onclick="showReturningUserScreen()">Returning Moderator</button>
        </div>
        
        <div id="new-user-screen" class="screen">
            <h1>New Moderator</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Register & Enter</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="returning-user-screen" class="screen">
            <h1>Returning Moderator</h1>
            <select id="user-label-select"></select>
            <input type="text" id="returning-passcode" placeholder="4-digit code" maxlength="4">
            <button onclick="loginReturningUser()">Login</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <!-- Main App Screen -->
        <div id="main-screen" class="screen">
            <h1>Image Moderation Dashboard</h1>
            <div id="user-status">Moderator: <span id="current-user-label"></span></div>
            
            <div class="stats">
                <div class="stat-item">
                    <div id="total-images" class="stat-number">0</div>
                    <div class="stat-label">Total Images</div>
                </div>
                <div class="stat-item">
                    <div id="total-users" class="stat-number">0</div>
                    <div class="stat-label">Unique Users</div>
                </div>
                <div class="stat-item">
                    <div id="today-images" class="stat-number">0</div>
                    <div class="stat-label">Today's Images</div>
                </div>
            </div>

            <div id="image-grid" class="image-grid">
                <!-- Images will be loaded here -->
            </div>
            
            <button onclick="showScreen('welcome-screen')">Logout</button>
        </div>
    </div>

    <script>
        let currentUser = null;
        let pollingInterval;

        // Authentication Flow
        async function generateNewUser() {
            const slots = await checkAvailableSlots();
            if (slots.isFull) {
                alert('Maximum moderators reached!');
                return false;
            }
            
            const user = await generateUser();
            if (user?.success) {
                currentUser = user;
                document.getElementById('new-user-info').innerHTML = 
                    `Your ID: ${user.userLabel}<br>Code: ${user.passcode}<br>Save these!`;
                return true;
            }
            return false;
        }

        async function registerNewUser() {
            if (!currentUser) return;
            
            const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
            if (result?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                enterMainScreen();
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            await generateNewUser();
        }

        async function loginReturningUser() {
            const label = document.getElementById('user-label-select').value;
            const passcode = document.getElementById('returning-passcode').value;
            
            const result = await authenticateUser(label, passcode);
            if (result?.success) {
                currentUser = { userLabel: label, passcode, participantId: result.user.participantId };
                updateZadAuth(label, result.user.participantId);
                enterMainScreen();
            } else {
                alert('Invalid credentials!');
            }
        }

        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const slots = await checkAvailableSlots();
            const select = document.getElementById('user-label-select');
            select.innerHTML = '<option>Select Moderator</option>';
            slots.usedLabels.forEach(label => {
                select.innerHTML += `<option>${label}</option>`;
            });
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            if (screenId !== 'main-screen') stopPolling();
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            startPolling();
            loadLatestData();
        }

        // Data Management
        async function loadLatestData() {
            const artworks = await load('artwork');
            updateStats(artworks);
            displayImages(artworks);
        }

        function updateStats(artworks) {
            const uniqueUsers = new Set(artworks.map(a => a.author)).size;
            const today = new Date().toISOString().split('T')[0];
            const todayImages = artworks.filter(a => 
                a.created_at.startsWith(today)
            ).length;

            document.getElementById('total-images').textContent = artworks.length;
            document.getElementById('total-users').textContent = uniqueUsers;
            document.getElementById('today-images').textContent = todayImages;
        }

        function displayImages(artworks) {
            const grid = document.getElementById('image-grid');
            grid.innerHTML = artworks.map(artwork => `
                <div class="image-card">
                    <img src="${artwork.image}" alt="${artwork.name}">
                    <div class="image-info">
                        <strong>Title:</strong> ${artwork.name}<br>
                        <strong>By:</strong> ${artwork.author}<br>
                        <strong>Posted:</strong> ${new Date(artwork.created_at).toLocaleString()}
                    </div>
                    <button class="delete-btn" onclick="deleteImage(${artwork.id})">
                        Delete Image
                    </button>
                </div>
            `).join('');
        }

        async function deleteImage(id) {
            if (!confirm('Are you sure you want to delete this image?')) return;
            
            await save('delete', { recordId: id });
            loadLatestData();
        }

        // Polling
        function startPolling() {
            pollingInterval = setInterval(loadLatestData, 2000);
        }

        function stopPolling() {
            if (pollingInterval) clearInterval(pollingInterval);
        }

        // Initialize
        initAuth();
    </script>
</body>
</html>

This solution provides:

1. **Secure Authentication** - Full moderator login system
2. **Real-time Updates** - Auto-refreshes every 2 seconds
3. **Image Grid** - Responsive grid layout of all artwork
4. **Stats Dashboard** - Shows total images, unique users, and today's submissions
5. **Delete Functionality** - Ability to remove inappropriate content
6. **Mobile-Friendly** - Works on all screen sizes
7. **WTAF Styling** - Punk/chaotic design elements

The interface lets moderators:
- View all submitted artwork
- See image details (title, author, timestamp)
- Delete inappropriate content
- Monitor usage statistics
- Get real-time updates

The design is mobile-first and follows all WTAF design patterns while maintaining professional functionality for moderation purposes.