<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WTAF IDEA VORTEX 🌀</title>
    <script src="https://unpkg.com/@supabase/supabase-js@2"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=Inter:wght@400;600&display=swap');

        body { 
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #FF2E93 0%, #7C3AED 50%, #3F88FF 100%);
            background-size: 400% 400%;
            animation: gradientShift 15s ease-in-out infinite;
            color: white;
            overflow-x: hidden;
            margin: 0;
            min-height: 100vh;
        }

        h1, h2, h3 {
            font-family: 'Space Grotesk', sans-serif;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: -0.02em;
        }

        @keyframes gradientShift {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }

        .app-container {
            max-width: 1200px;
            margin: 0 auto;
            background: rgba(0,0,0,0.4);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            padding: 2rem;
            border: 1px solid rgba(255,255,255,0.1);
            position: relative;
            z-index: 10;
            min-height: 90vh;
        }

        .screen { display: none; }
        .screen.active { display: block; animation: fadeIn 0.3s ease; }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        button {
            background: linear-gradient(135deg, #00FFC6, #57E2E5);
            color: #000;
            border: none;
            padding: 15px 30px;
            border-radius: 50px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-size: 14px;
            margin: 10px 5px;
        }

        button:hover {
            transform: scale(1.05);
            box-shadow: 0 0 30px rgba(0, 255, 198, 0.5);
        }

        input, select, textarea {
            background: rgba(255,255,255,0.1);
            border: 2px solid rgba(255,255,255,0.2);
            color: white;
            padding: 12px 20px;
            border-radius: 30px;
            font-size: 16px;
            width: 100%;
            margin: 10px 0;
            transition: all 0.3s ease;
        }

        input:focus, select:focus, textarea:focus {
            outline: none;
            border-color: #00FFC6;
            box-shadow: 0 0 20px rgba(0, 255, 198, 0.3);
        }

        .floating-emoji {
            position: fixed;
            font-size: 2rem;
            animation: float 6s ease-in-out infinite;
            pointer-events: none;
            z-index: 5;
            opacity: 0.8;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            50% { transform: translateY(-20px) rotate(10deg); }
        }

        .ideas-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            padding: 20px 0;
        }

        .idea-card {
            background: rgba(0,0,0,0.3);
            border: 1px solid rgba(255,255,255,0.2);
            border-radius: 15px;
            padding: 20px;
            backdrop-filter: blur(10px);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .idea-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(123,58,237,0.3);
        }

        .idea-card.Feature { border-left: 4px solid #00FFC6; }
        .idea-card.Bug { border-left: 4px solid #FF2E93; }
        .idea-card.Enhancement { border-left: 4px solid #7C3AED; }
        .idea-card.Question { border-left: 4px solid #3F88FF; }

        .idea-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .idea-meta {
            font-size: 0.8em;
            opacity: 0.8;
        }

        .idea-content {
            margin: 15px 0;
            line-height: 1.5;
        }

        .reactions {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }

        .reaction-btn {
            background: rgba(255,255,255,0.1);
            border: 1px solid rgba(255,255,255,0.2);
            border-radius: 20px;
            padding: 5px 10px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .reaction-btn:hover {
            background: rgba(255,255,255,0.2);
            transform: scale(1.1);
        }

        .comments-section {
            margin-top: 10px;
            padding-top: 10px;
            border-top: 1px solid rgba(255,255,255,0.1);
        }

        .comment {
            background: rgba(255,255,255,0.05);
            padding: 8px 12px;
            border-radius: 10px;
            margin: 5px 0;
            font-size: 0.9em;
        }

        .add-idea-form {
            background: rgba(0,0,0,0.4);
            padding: 20px;
            border-radius: 15px;
            margin: 20px 0;
            display: none;
        }

        .add-idea-form.active {
            display: block;
            animation: slideDown 0.3s ease;
        }

        @keyframes slideDown {
            from { transform: translateY(-20px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        .category-tags {
            display: flex;
            gap: 10px;
            margin: 10px 0;
        }

        .category-tag {
            padding: 5px 15px;
            border-radius: 15px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .category-tag.active {
            background: #00FFC6;
            color: black;
        }

        .golden-glow {
            animation: glow 2s infinite;
        }

        @keyframes glow {
            0%, 100% { box-shadow: 0 0 20px rgba(255, 215, 0, 0.3); }
            50% { box-shadow: 0 0 40px rgba(255, 215, 0, 0.5); }
        }

        #add-idea-btn {
            position: fixed;
            bottom: 30px;
            right: 30px;
            z-index: 100;
            background: linear-gradient(135deg, #FF2E93, #7C3AED);
            padding: 20px;
            border-radius: 50%;
            width: 60px;
            height: 60px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            box-shadow: 0 5px 20px rgba(0,0,0,0.3);
        }

        #add-idea-btn:hover {
            transform: scale(1.1) rotate(180deg);
        }
    </style>
</head>
<body>
    <div class="floating-emoji" style="top: 5%; left: 2%;" data-value="2">💡</div>
    <div class="floating-emoji" style="top: 5%; right: 2%;" data-value="3">🌟</div>
    <div class="floating-emoji" style="bottom: 5%; left: 2%;" data-value="1">🔥</div>
    <div class="floating-emoji" style="bottom: 5%; right: 2%;" data-value="4">✨</div>

    <div class="app-container">
        <div id="welcome-screen" class="screen active">
            <h1>Welcome to IDEA VORTEX 🌀</h1>
            <p>WHERE GENIUS IDEAS COLLIDE WITH CHAOS ⚡</p>
            <button onclick="showNewUserScreen()">New User</button>
            <button onclick="showReturningUserScreen()">Returning User</button>
        </div>
        
        <div id="new-user-screen" class="screen">
            <h1>New User</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Register & Enter App</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="returning-user-screen" class="screen">
            <h1>Returning User</h1>
            <select id="user-label-select">
                <option>Select User</option>
            </select>
            <input type="text" id="returning-passcode" placeholder="Enter 4-digit passcode" maxlength="4">
            <button onclick="loginReturningUser()">Login</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="main-screen" class="screen">
            <h1>IDEA VORTEX 🌀</h1>
            <div id="user-status">Welcome, <span id="current-user-label"></span>!</div>
            
            <div id="app-content">
                <div class="add-idea-form" id="idea-form">
                    <textarea id="idea-text" placeholder="DROP YOUR GENIUS HERE 🧠" rows="4"></textarea>
                    <div class="category-tags">
                        <button class="category-tag" data-category="Feature">Feature</button>
                        <button class="category-tag" data-category="Bug">Bug</button>
                        <button class="category-tag" data-category="Enhancement">Enhancement</button>
                        <button class="category-tag" data-category="Question">Question</button>
                    </div>
                    <button onclick="submitIdea()">LAUNCH IDEA 🚀</button>
                </div>
                
                <div class="ideas-grid" id="ideas-container">
                    <!-- Ideas will be loaded here -->
                </div>
            </div>
            
            <button id="add-idea-btn" onclick="toggleIdeaForm()">+</button>
            <button onclick="showScreen('welcome-screen')">Leave App</button>
        </div>
    </div>

    <script>
        const supabase = window.supabase.createClient(
            'https://tqniseocczttrfwtpbdr.supabase.co', 
            'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRxbmlzZW9jY3p0dHJmd3RwYmRyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg4ODI5MjIsImV4cCI6MjA2NDQ1ODkyMn0.mwb33p0xIEXy5F7ZoLc1j9-4ZNk3FuT4zrR0aTdm350'
        );

        const APP_ID = 'test1';
        const USER_LABELS = ['genius1💡', 'visionary2⚡', 'creator3🌟', 'innovator4🔥', 'builder5💎'];
        let currentUser = null;
        let selectedCategory = null;

        // Include all required authentication functions here
        let currentUser = null;

        async function generateNewUser() {
            const { data: existingUsers } = await supabase
                .from('wtaf_zero_admin_collaborative')
                .select('participant_data')
                .eq('app_id', APP_ID)
                .eq('action_type', 'join');
            
            const usedLabels = existingUsers?.map(u => u.participant_data?.userLabel).filter(Boolean) || [];
            
            if (usedLabels.length >= 5) {
                alert('SQUAD\'S FULL, TRY ANOTHER DIMENSION 🚫');
                return false;
            }
            
            const availableLabel = USER_LABELS.find(label => !usedLabels.includes(label));
            if (!availableLabel) {
                alert('NO MORE ROOM IN THIS CHAOS REALM 🌀');
                return false;
            }
            
            const code = Math.floor(1000 + Math.random() * 9000).toString();
            currentUser = {
                userLabel: availableLabel,
                passcode: code,
                participantId: availableLabel + '_' + code
            };
            
            document.getElementById('new-user-info').innerHTML = 
                `<strong>YOUR LABEL:</strong> ${currentUser.userLabel}<br><strong>SECRET DIGITS:</strong> ${currentUser.passcode}<br><em>SCREENSHOT THIS OR CRY LATER 📸</em>`;
            
            return true;
        }

        async function registerNewUser() {
            if (!currentUser) {
                alert('GENERATE YOUR IDENTITY FIRST, CHAOS AGENT 🎭');
                return;
            }
            
            try {
                await supabase.from('wtaf_zero_admin_collaborative').insert({
                    app_id: APP_ID,
                    participant_id: currentUser.participantId,
                    action_type: 'join',
                    participant_data: {
                        userLabel: currentUser.userLabel,
                        passcode: currentUser.passcode,
                        join_time: Date.now()
                    },
                    content_data: { message: 'Joined the app', timestamp: Date.now() }
                });
                
                enterMainScreen();
            } catch (error) {
                console.error('Registration error:', error);
                alert('REGISTRATION EXPLODED, TRY AGAIN 💥');
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            const success = await generateNewUser();
            if (!success) {
                showScreen('welcome-screen');
            }
        }

        async function loginReturningUser() {
            const selectedLabel = document.getElementById('user-label-select').value;
            const enteredPasscode = document.getElementById('returning-passcode').value.trim();
            
            if (!selectedLabel || selectedLabel === 'Select User') {
                alert('PICK YOUR IDENTITY, PHANTOM 👻');
                return;
            }
            
            if (!enteredPasscode || enteredPasscode.length !== 4) {
                alert('4 DIGITS OF CHAOS REQUIRED 🔢');
                return;
            }
            
            try {
                const { data: joinRecords } = await supabase
                    .from('wtaf_zero_admin_collaborative')
                    .select('*')
                    .eq('app_id', APP_ID)
                    .eq('action_type', 'join');
                
                const userRecord = joinRecords?.find(record => 
                    record.participant_data?.userLabel === selectedLabel && 
                    record.participant_data?.passcode === enteredPasscode
                );
                
                if (userRecord) {
                    currentUser = {
                        userLabel: selectedLabel,
                        passcode: enteredPasscode,
                        participantId: userRecord.participant_id
                    };
                    enterMainScreen();
                } else {
                    alert('NICE TRY, WRONG VIBES ❌');
                }
            } catch (error) {
                console.error('Login error:', error);
                alert('LOGIN MALFUNCTION, REALITY GLITCHING 🌀');
            }
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(screen => 
                screen.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            
            if (screenId !== 'main-screen') {
                stopPolling();
            }
        }

        function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const userSelect = document.getElementById('user-label-select');
            userSelect.innerHTML = '<option>Select User</option>';
            USER_LABELS.forEach(label => {
                const option = document.createElement('option');
                option.value = label;
                option.textContent = label;
                userSelect.appendChild(option);
            });
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            startPolling();
            loadLatestData();
        }

        let pollingInterval;

        function startPolling() {
            pollingInterval = setInterval(async () => {
                await loadLatestData();
            }, 2000);
        }

        function stopPolling() {
            if (pollingInterval) {
                clearInterval(pollingInterval);
                pollingInterval = null;
            }
        }

        // Idea Board Specific Functions
        function toggleIdeaForm() {
            const form = document.getElementById('idea-form');
            form.classList.toggle('active');
        }

        async function submitIdea() {
            const ideaText = document.getElementById('idea-text').value.trim();
            if (!ideaText || !selectedCategory) {
                alert('NEED BOTH IDEA AND CATEGORY, COSMIC GENIUS! 🌠');
                return;
            }

            try {
                await supabase.from('wtaf_zero_admin_collaborative').insert({
                    app_id: APP_ID,
                    participant_id: currentUser.participantId,
                    action_type: 'idea',
                    participant_data: {
                        userLabel: currentUser.userLabel
                    },
                    content_data: {
                        text: ideaText,
                        category: selectedCategory,
                        timestamp: Date.now(),
                        reactions: {},
                        comments: []
                    }
                });

                document.getElementById('idea-text').value = '';
                toggleIdeaForm();
                loadLatestData();
            } catch (error) {
                alert('IDEA LAUNCH FAILED, RETRY! 🚀');
            }
        }

        async function addReaction(ideaId, emoji) {
            const { data } = await supabase
                .from('wtaf_zero_admin_collaborative')
                .select('*')
                .eq('id', ideaId)
                .single();

            if (data) {
                const reactions = data.content_data.reactions || {};
                reactions[emoji] = (reactions[emoji] || 0) + 1;

                await supabase
                    .from('wtaf_zero_admin_collaborative')
                    .update({
                        content_data: {
                            ...data.content_data,
                            reactions
                        }
                    })
                    .eq('id', ideaId);

                loadLatestData();
            }
        }

        async function addComment(ideaId) {
            const commentText = prompt('ADD YOUR QUICK THOUGHT 💭');
            if (!commentText) return;

            const { data } = await supabase
                .from('wtaf_zero_admin_collaborative')
                .select('*')
                .eq('id', ideaId)
                .single();

            if (data) {
                const comments = data.content_data.comments || [];
                comments.push({
                    text: commentText,
                    user: currentUser.userLabel,
                    timestamp: Date.now()
                });

                await supabase
                    .from('wtaf_zero_admin_collaborative')
                    .update({
                        content_data: {
                            ...data.content_data,
                            comments
                        }
                    })
                    .eq('id', ideaId);

                loadLatestData();
            }
        }

        async function loadLatestData() {
            const { data: ideas } = await supabase
                .from('wtaf_zero_admin_collaborative')
                .select('*')
                .eq('app_id', APP_ID)
                .eq('action_type', 'idea')
                .order('created_at', { ascending: false });

            const container = document.getElementById('ideas-container');
            container.innerHTML = '';

            ideas?.forEach(idea => {
                const totalReactions = Object.values(idea.content_data.reactions || {}).reduce((a, b) => a + b, 0);
                const card = document.createElement('div');
                card.className = `idea-card ${idea.content_data.category} ${totalReactions > 5 ? 'golden-glow' : ''}`;
                
                card.innerHTML = `
                    <div class="idea-header">
                        <div class="idea-meta">
                            ${idea.participant_data.userLabel} • ${new Date(idea.content_data.timestamp).toLocaleString()}
                        </div>
                        <div>${idea.content_data.category}</div>
                    </div>
                    <div class="idea-content">${idea.content_data.text}</div>
                    <div class="reactions">
                        ${['💡', '🔥', '👍', '🤔'].map(emoji => `
                            <button class="reaction-btn" onclick="addReaction(${idea.id}, '${emoji}')">
                                ${emoji} ${(idea.content_data.reactions || {})[emoji] || 0}
                            </button>
                        `).join('')}
                        <button class="reaction-btn" onclick="addComment(${idea.id})">💭 ${(idea.content_data.comments || []).length}</button>
                    </div>
                    <div class="comments-section">
                        ${(idea.content_data.comments || []).map(comment => `
                            <div class="comment">
                                <strong>${comment.user}:</strong> ${comment.text}
                            </div>
                        `).join('')}
                    </div>
                `;
                
                container.appendChild(card);
            });
        }

        document.querySelectorAll('.category-tag').forEach(tag => {
            tag.addEventListener('click', () => {
                document.querySelectorAll('.category-tag').forEach(t => t.classList.remove('active'));
                tag.classList.add('active');
                selectedCategory = tag.dataset.category;
            });
        });

        // Mouse parallax effect
        document.addEventListener('mousemove', (e) => {
            document.querySelectorAll('.floating-emoji').forEach((elem) => {
                const speed = elem.getAttribute('data-value') || 2;
                const x = (e.clientX * speed) / 100;
                const y = (e.clientY * speed) / 100;
                elem.style.transform = `translateX(${x}px) translateY(${y}px)`;
            });
        });

        // Easter egg
        console.log('🔥 Welcome to the WTAF dimension! Type wtaf() in console for secrets...');
        window.wtaf = function() {
            document.body.style.animation = 'rainbow 1s infinite';
            setTimeout(() => {
                document.body.style.animation = '';
                alert('🎉 WTAF MASTER MODE UNLOCKED! You found the secret!');
            }, 3000);
        };
    </script>
</body>
</html>