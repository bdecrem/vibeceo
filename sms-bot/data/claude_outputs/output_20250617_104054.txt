```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Serpent Glide</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=Inter:wght@400;500&display=swap');
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            -webkit-tap-highlight-color: transparent;
        }
        
        body {
            font-family: 'Inter', sans-serif;
            overflow: hidden;
            position: relative;
            height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            background: linear-gradient(45deg, #0a0e27, #1a1f3a, #2d1b69, #0f172a);
            background-size: 400% 400%;
            animation: gradientShift 15s ease infinite;
            touch-action: none;
        }
        
        @keyframes gradientShift {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }
        
        .floating-emoji {
            position: absolute;
            font-size: 2rem;
            opacity: 0.3;
            pointer-events: none;
            animation: float 20s infinite ease-in-out;
            z-index: 1;
        }
        
        .emoji-1 { top: 10%; left: 10%; animation-delay: 0s; }
        .emoji-2 { top: 70%; right: 15%; animation-delay: 7s; }
        .emoji-3 { bottom: 20%; left: 50%; animation-delay: 14s; }
        
        @keyframes float {
            0%, 100% { transform: translateY(0) rotate(0deg); }
            50% { transform: translateY(-20px) rotate(10deg); }
        }
        
        .game-container {
            width: 90vw;
            max-width: 400px;
            height: 90vh;
            max-height: 600px;
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(20px);
            border-radius: 24px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 20px;
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.5);
            opacity: 0;
            animation: fadeIn 0.8s ease forwards;
            position: relative;
            z-index: 10;
        }
        
        @keyframes fadeIn {
            to { opacity: 1; }
        }
        
        .screen {
            width: 100%;
            height: 100%;
            display: none;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            text-align: center;
        }
        
        .screen.active {
            display: flex;
        }
        
        h1 {
            font-family: 'Space Grotesk', sans-serif;
            font-size: 2.5rem;
            font-weight: 700;
            color: #fff;
            margin-bottom: 1rem;
            text-shadow: 0 0 20px rgba(255, 255, 255, 0.3);
        }
        
        .subtitle {
            color: rgba(255, 255, 255, 0.7);
            font-size: 1rem;
            margin-bottom: 2rem;
            font-weight: 400;
        }
        
        .play-button {
            background: linear-gradient(135deg, #667eea, #764ba2);
            border: none;
            color: white;
            font-family: 'Space Grotesk', sans-serif;
            font-size: 1.2rem;
            font-weight: 500;
            padding: 16px 48px;
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 10px 25px -5px rgba(102, 126, 234, 0.4);
            min-height: 44px;
        }
        
        .play-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 15px 35px -5px rgba(102, 126, 234, 0.6);
        }
        
        .play-button:active {
            transform: translateY(0);
        }
        
        canvas {
            border-radius: 16px;
            box-shadow: 0 10px 30px -10px rgba(0, 0, 0, 0.3);
            width: 100%;
            height: auto;
            max-width: 360px;
            touch-action: none;
        }
        
        .score-display {
            font-family: 'Space Grotesk', sans-serif;
            font-size: 1.5rem;
            color: #fff;
            margin-top: 1rem;
            opacity: 0.9;
        }
        
        .final-score {
            font-family: 'Space Grotesk', sans-serif;
            font-size: 3rem;
            font-weight: 700;
            color: #fff;
            margin: 1rem 0;
            text-shadow: 0 0 30px rgba(255, 255, 255, 0.5);
        }
        
        .swipe-hint {
            position: absolute;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            color: rgba(255, 255, 255, 0.5);
            font-size: 0.9rem;
            animation: pulse 2s ease-in-out infinite;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 0.5; }
            50% { opacity: 1; }
        }
        
        @media (max-width: 480px) {
            h1 { font-size: 2rem; }
            .subtitle { font-size: 0.9rem; }
            .final-score { font-size: 2.5rem; }
        }
    </style>
</head>
<body>
    <div class="floating-emoji emoji-1">üêç</div>
    <div class="floating-emoji emoji-2">‚ú®</div>
    <div class="floating-emoji emoji-3">üéÆ</div>
    
    <div class="game-container">
        <div id="intro-screen" class="screen active">
            <h1>Serpent Glide</h1>
            <p class="subtitle">Swipe to slither, collect the glow</p>
            <button class="play-button" onclick="startGame()">Start Gliding</button>
        </div>
        
        <div id="game-screen" class="screen">
            <canvas id="game-canvas"></canvas>
            <div class="score-display">Score: <span id="score">0</span></div>
            <div class="swipe-hint">Swipe to move</div>
        </div>
        
        <div id="end-screen" class="screen">
            <h1>Game Over</h1>
            <div class="final-score" id="final-score">0</div>
            <p class="subtitle">Nice glide, serpent soul</p>
            <button class="play-button" onclick="restartGame()">Glide Again</button>
        </div>
    </div>
    
    <script>
        const canvas = document.getElementById('game-canvas');
        const ctx = canvas.getContext('2d');
        const scoreElement = document.getElementById('score');
        const finalScoreElement = document.getElementById('final-score');
        
        const GRID_SIZE = 20;
        const CELL_SIZE = 16;
        
        let snake = [];
        let direction = { x: 1, y: 0 };
        let nextDirection = { x: 1, y: 0 };
        let food = {};
        let score = 0;
        let gameRunning = false;
        let animationId = null;
        let lastTime = 0;
        let moveTimer = 0;
        const MOVE_INTERVAL = 120;
        
        const floatingEmojis = document.querySelectorAll('.floating-emoji');
        
        document.addEventListener('mousemove', (e) => {
            const mouseX = e.clientX / window.innerWidth;
            const mouseY = e.clientY / window.innerHeight;
            
            floatingEmojis.forEach((emoji, index) => {
                const offsetX = (mouseX - 0.5) * 30 * (index + 1);
                const offsetY = (mouseY - 0.5) * 30 * (index + 1);
                emoji.style.transform = `translate(${offsetX}px, ${offsetY}px)`;
            });
        });
        
        function setupCanvas() {
            const dpr = window.devicePixelRatio || 1;
            const size = Math.min(360, window.innerWidth * 0.9);
            
            canvas.width = GRID_SIZE * CELL_SIZE * dpr;
            canvas.height = GRID_SIZE * CELL_SIZE * dpr;
            canvas.style.width = size + 'px';
            canvas.style.height = size + 'px';
            
            ctx.scale(dpr, dpr);
        }
        
        function initGame() {
            snake = [
                { x: 10, y: 10 },
                { x: 9, y: 10 },
                { x: 8, y: 10 }
            ];
            direction = { x: 1, y: 0 };
            nextDirection = { x: 1, y: 0 };
            score = 0;
            scoreElement.textContent = score;
            generateFood();
            moveTimer = 0;
        }
        
        function generateFood() {
            do {
                food = {
                    x: Math.floor(Math.random() * GRID_SIZE),
                    y: Math.floor(Math.random() * GRID_SIZE)
                };
            } while (snake.some(segment => segment.x === food.x && segment.y === food.y));
        }
        
        function update(currentTime) {
            if (!gameRunning) return;
            
            const deltaTime = currentTime - lastTime;
            lastTime = currentTime;
            
            moveTimer += deltaTime;
            
            if (moveTimer >= MOVE_INTERVAL) {
                moveTimer = 0;
                
                direction = { ...nextDirection };
                
                const head = { ...snake[0] };
                head.x += direction.x;
                head.y += direction.y;
                
                if (head.x < 0 || head.x >= GRID_SIZE || 
                    head.y < 0 || head.y >= GRID_SIZE ||
                    snake.some(segment => segment.x === head.x && segment.y === head.y)) {
                    endGame();
                    return;
                }
                
                snake.unshift(head);
                
                if (head.x === food.x && head.y === food.y) {
                    score += 10;
                    scoreElement.textContent = score;
                    generateFood();
                } else {
                    snake.pop();
                }
            }
            
            render();
            animationId = requestAnimationFrame(update);
        }
        
        function render() {
            ctx.fillStyle = 'rgba(10, 14, 39, 0.1)';
            ctx.fillRect(0, 0, GRID_SIZE * CELL_SIZE, GRID_SIZE * CELL_SIZE);
            
            ctx.fillStyle = 'rgba(255, 255, 255, 0.05)';
            for (let i = 0; i < GRID_SIZE; i++) {
                for (let j = 0; j < GRID_SIZE; j++) {
                    if ((i + j) % 2 === 0) {
                        ctx.fillRect(i * CELL_SIZE, j * CELL_SIZE, CELL_SIZE, CELL_SIZE);
                    }
                }
            }
            
            snake.forEach((segment, index) => {
                const opacity = 1 - (index / snake.length) * 0.3;
                const hue = 270 - (index * 5);
                ctx.fillStyle = `hsla(${hue}, 70%, 60%, ${opacity})`;
                
                const padding = 1;
                ctx.fillRect(
                    segment.x * CELL_SIZE + padding,
                    segment.y * CELL_SIZE + padding,
                    CELL_SIZE - padding * 2,
                    CELL_SIZE - padding * 2
                );
                
                if (index === 0) {
                    ctx.fillStyle = '#fff';
                    ctx.fillRect(
                        segment.x * CELL_SIZE + CELL_SIZE * 0.3,
                        segment.y * CELL_SIZE + CELL_SIZE * 0.3,
                        CELL_SIZE * 0.4,
                        CELL_SIZE * 0.4
                    );
                }
            });
            
            ctx.shadowBlur = 15;
            ctx.shadowColor = '#ffd700';
            ctx.fillStyle = '#ffd700';
            ctx.fillRect(
                food.x * CELL_SIZE + 2,
                food.y * CELL_SIZE + 2,
                CELL_SIZE - 4,
                CELL_SIZE - 4
            );
            ctx.shadowBlur = 0;
        }
        
        let touchStartX = 0;
        let touchStartY = 0;
        
        canvas.addEventListener('touchstart', (e) => {
            e.preventDefault();
            touchStartX = e.touches[0].clientX;
            touchStartY = e.touches[0].clientY;
        });
        
        canvas.addEventListener('touchend', (e) => {
            e.preventDefault();
            const touchEndX = e.changedTouches[0].clientX;
            const touchEndY = e.changedTouches[0].clientY;
            
            const dx = touchEndX - touchStartX;
            const dy = touchEndY - touchStartY;
            
            if (Math.abs(dx) > Math.abs(dy)) {
                if (dx > 0 && direction.x === 0) {
                    nextDirection = { x: 1, y: 0 };
                } else if (dx < 0 && direction.x === 0) {
                    nextDirection = { x: -1, y: 0 };
                }
            } else {
                if (dy > 0 && direction.y === 0) {
                    nextDirection = { x: 0, y: 1 };
                } else if (dy < 0 && direction.y === 0) {
                    nextDirection = { x: 0, y: -1 };
                }
            }
        });
        
        document.addEventListener('keydown', (e) => {
            if (!gameRunning) return;
            
            switch(e.key) {
                case 'ArrowUp':
                    if (direction.y === 0) nextDirection = { x: 0, y: -1 };
                    break;
                case 'ArrowDown':
                    if (direction.y === 0) nextDirection = { x: 0, y: 1 };
                    break;
                case 'ArrowLeft':
                    if (direction.x === 0) nextDirection = { x: -1, y: 0 };
                    break;
                case 'ArrowRight':
                    if (direction.x === 0) nextDirection = { x: 1, y: 0 };
                    break;
            }
        });
        
        function startGame() {
            document.getElementById('intro-screen').classList.remove('active');
            document.getElementById('game-screen').classList.add('active');
            
            setupCanvas();
            initGame();
            gameRunning = true;
            lastTime = performance.now();
            animationId = requestAnimationFrame(update);
        }
        
        function endGame() {
            gameRunning = false;
            cancelAnimationFrame(animationId);
            
            finalScoreElement.textContent = score;
            
            setTimeout(() => {
                document.getElementById('game-screen').classList.remove('active');
                document.getElementById('end-screen').classList.add('active');
            }, 500);
        }
        
        function restartGame() {
            document.getElementById('end-screen').classList.remove('active');
            document.getElementById('game-screen').classList.add('active');
            
            initGame();
            gameRunning = true;
            lastTime = performance.now();
            animationId = requestAnimationFrame(update);
        }
        
        window.addEventListener('resize', () => {
            if (gameRunning) setupCanvas();
        });
    </script>
</body>
</html>
```