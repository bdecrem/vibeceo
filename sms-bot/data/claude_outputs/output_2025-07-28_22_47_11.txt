```html
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>Tetris</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            background: #111;
            color: white;
            font-family: Arial, sans-serif;
            touch-action: none;
            overflow: hidden;
        }
        canvas {
            display: block;
            background: #000;
        }
        .screen {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
            background: rgba(0, 0, 0, 0.8);
        }
        button {
            background: #4a00e0;
            color: white;
            border: none;
            padding: 15px 30px;
            font-size: 18px;
            margin: 20px;
            border-radius: 8px;
            cursor: pointer;
        }
        .hidden {
            display: none;
        }
        .controls {
            position: fixed;
            bottom: 0;
            width: 100%;
            height: 120px;
            background: rgba(30, 30, 40, 0.9);
            display: flex;
            justify-content: space-around;
            align-items: center;
        }
        .control-btn {
            width: 60px;
            height: 60px;
            background: #555;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 24px;
            user-select: none;
            cursor: pointer;
        }
        .rotate-btn {
            background: #e04a00;
        }
        .score-display {
            position: absolute;
            top: 20px;
            right: 20px;
            font-size: 20px;
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas"></canvas>
    
    <div id="introScreen" class="screen">
        <h1>üéÆ TETRIS</h1>
        <p>Arrange falling blocks to complete lines</p>
        <button id="startButton">START GAME</button>
    </div>
    
    <div id="gameScreen" class="screen hidden">
        <div class="score-display">Score: <span id="score">0</span></div>
    </div>
    
    <div id="endScreen" class="screen hidden">
        <h1>GAME OVER</h1>
        <p>Score: <span id="finalScore">0</span></p>
        <button id="restartButton">PLAY AGAIN</button>
    </div>
    
    <div id="controls" class="controls">
        <div class="control-btn" id="leftBtn">‚¨ÖÔ∏è</div>
        <div class="control-btn" id="downBtn">‚¨áÔ∏è</div>
        <div class="control-btn" id="rightBtn">‚û°Ô∏è</div>
        <div class="control-btn rotate-btn" id="rotateBtn">üîÑ</div>
    </div>

    <script>
        (function() {
            var canvas = document.getElementById('gameCanvas');
            var ctx = canvas.getContext('2d');
            var introScreen = document.getElementById('introScreen');
            var gameScreen = document.getElementById('gameScreen');
            var endScreen = document.getElementById('endScreen');
            var startButton = document.getElementById('startButton');
            var restartButton = document.getElementById('restartButton');
            var scoreElement = document.getElementById('score');
            var finalScoreElement = document.getElementById('finalScore');
            
            var controlsHeight = 120;
            var gridWidth = 10;
            var gridHeight = 20;
            var blockSize;
            var grid;
            var score = 0;
            var gamePhase = 'intro'; // intro, gameplay, end
            
            var currentPiece;
            var nextPiece;
            var pieceX, pieceY;
            var dropCounter = 0;
            var dropInterval = 1000; // ms
            var lastTime = 0;
            
            var colors = [
                null,
                '#FF0D72', // I
                '#0DC2FF', // J
                '#0DFF72', // L
                '#F538FF', // O
                '#FF8E0D', // S
                '#FFE138', // T
                '#3877FF'  // Z
            ];
            
            var pieces = [
                // I
                [
                    [0, 0, 0, 0],
                    [1, 1, 1, 1],
                    [0, 0, 0, 0],
                    [0, 0, 0, 0]
                ],
                // J
                [
                    [2, 0, 0],
                    [2, 2, 2],
                    [0, 0, 0]
                ],
                // L
                [
                    [0, 0, 3],
                    [3, 3, 3],
                    [0, 0, 0]
                ],
                // O
                [
                    [4, 4],
                    [4, 4]
                ],
                // S
                [
                    [0, 5, 5],
                    [5, 5, 0],
                    [0, 0, 0]
                ],
                // T
                [
                    [0, 6, 0],
                    [6, 6, 6],
                    [0, 0, 0]
                ],
                // Z
                [
                    [7, 7, 0],
                    [0, 7, 7],
                    [0, 0, 0]
                ]
            ];
            
            function resizeCanvas() {
                var width = window.innerWidth;
                var height = window.innerHeight - controlsHeight;
                
                canvas.width = width * window.devicePixelRatio;
                canvas.height = height * window.devicePixelRatio;
                canvas.style.width = width + 'px';
                canvas.style.height = height + 'px';
                
                blockSize = Math.min(
                    Math.floor(width / gridWidth),
                    Math.floor(height / gridHeight)
                );
                
                ctx.scale(window.devicePixelRatio, window.devicePixelRatio);
            }
            
            function createGrid() {
                grid = [];
                for (var y = 0; y < gridHeight; y++) {
                    grid.push(Array(gridWidth).fill(0));
                }
            }
            
            function createPiece() {
                var rand = Math.floor(Math.random() * pieces.length);
                return {
                    shape: pieces[rand],
                    color: rand + 1
                };
            }
            
            function resetGame() {
                createGrid();
                score = 0;
                scoreElement.textContent = score;
                dropInterval = 1000;
                
                currentPiece = createPiece();
                nextPiece = createPiece();
                resetPiece();
            }
            
            function resetPiece() {
                pieceX = Math.floor(gridWidth / 2) - Math.floor(currentPiece.shape[0].length / 2);
                pieceY = 0;
                
                // Game over check
                if (collide()) {
                    gameOver();
                }
            }
            
            function rotate(matrix) {
                var size = matrix.length;
                var result = [];
                for (var i = 0; i < size; ++i) {
                    result.push([]);
                    for (var j = 0; j < size; ++j) {
                        result[i][j] = matrix[size - j - 1][i];
                    }
                }
                return result;
            }
            
            function collide() {
                var shape = currentPiece.shape;
                for (var y = 0; y < shape.length; ++y) {
                    for (var x = 0; x < shape[y].length; ++x) {
                        if (shape[y][x] !== 0 &&
                           (grid[y + pieceY] &&
                            grid[y + pieceY][x + pieceX]) !== 0) {
                            return true;
                        }
                    }
                }
                return false;
            }
            
            function merge() {
                var shape = currentPiece.shape;
                for (var y = 0; y < shape.length; ++y) {
                    for (var x = 0; x < shape[y].length; ++x) {
                        if (shape[y][x] !== 0) {
                            grid[y + pieceY][x + pieceX] = currentPiece.color;
                        }
                    }
                }
            }
            
            function clearLines() {
                var lines = 0;
                outer: for (var y = gridHeight - 1; y >= 0; --y) {
                    for (var x = 0; x < gridWidth; ++x) {
                        if (grid[y][x] === 0) {
                            continue outer;
                        }
                    }
                    
                    var line = grid.splice(y, 1)[0].fill(0);
                    grid.unshift(line);
                    ++y;
                    lines++;
                }
                
                if (lines > 0) {
                    score += lines * 100;
                    scoreElement.textContent = score;
                    dropInterval = Math.max(100, 1000 - Math.floor(score / 500) * 100);
                }
            }
            
            function draw() {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                
                // Draw grid
                for (var y = 0; y < gridHeight; ++y) {
                    for (var x = 0; x < gridWidth; ++x) {
                        if (grid[y][x]) {
                            ctx.fillStyle = colors[grid[y][x]];
                            ctx.fillRect(x * blockSize, y * blockSize, blockSize - 1, blockSize - 1);
                        }
                    }
                }
                
                // Draw current piece
                if (currentPiece) {
                    var shape = currentPiece.shape;
                    ctx.fillStyle = colors[currentPiece.color];
                    for (var y = 0; y < shape.length; ++y) {
                        for (var x = 0; x < shape[y].length; ++x) {
                            if (shape[y][x]) {
                                ctx.fillRect((pieceX + x) * blockSize, (pieceY + y) * blockSize, blockSize - 1, blockSize - 1);
                            }
                        }
                    }
                }
            }
            
            function movePiece(dir) {
                pieceX += dir;
                if (collide()) {
                    pieceX -= dir;
                }
            }
            
            function rotatePiece() {
                var originalShape = currentPiece.shape;
                currentPiece.shape = rotate(originalShape);
                if (collide()) {
                    currentPiece.shape = originalShape;
                }
            }
            
            function dropPiece() {
                pieceY++;
                if (collide()) {
                    pieceY--;
                    merge();
                    clearLines();
                    currentPiece = nextPiece;
                    nextPiece = createPiece();
                    resetPiece();
                }
                dropCounter = 0;
            }
            
            function hardDrop() {
                while (!collide()) {
                    pieceY++;
                }
                pieceY--;
                dropPiece();
            }
            
            function update(time) {
                if (gamePhase !== 'gameplay') return;
                
                var deltaTime = time - lastTime;
                lastTime = time;
                
                dropCounter += deltaTime;
                if (dropCounter > dropInterval) {
                    dropPiece();
                }
                
                draw();
                requestAnimationFrame(update);
            }
            
            function startGame() {
                gamePhase = 'gameplay';
                introScreen.classList.add('hidden');
                gameScreen.classList.remove('hidden');
                endScreen.classList.add('hidden');
                
                resetGame();
                lastTime = 0;
                requestAnimationFrame(update);
            }
            
            function gameOver() {
                gamePhase = 'end';
                gameScreen.classList.add('hidden');
                endScreen.classList.remove('hidden');
                finalScoreElement.textContent = score;
            }
            
            // Event Listeners
            startButton.addEventListener('click', startGame);
            restartButton.addEventListener('click', startGame);
            
            document.getElementById('leftBtn').addEventListener('click', function() {
                if (gamePhase === 'gameplay') movePiece(-1);
            });
            
            document.getElementById('rightBtn').addEventListener('click', function() {
                if (gamePhase === 'gameplay') movePiece(1);
            });
            
            document.getElementById('downBtn').addEventListener('click', function() {
                if (gamePhase === 'gameplay') dropPiece();
            });
            
            document.getElementById('rotateBtn').addEventListener('click', function() {
                if (gamePhase === 'gameplay') rotatePiece();
            });
            
            document.addEventListener('keydown', function(e) {
                if (gamePhase !== 'gameplay') return;
                
                switch(e.keyCode) {
                    case 37: // left
                        movePiece(-1);
                        break;
                    case 39: // right
                        movePiece(1);
                        break;
                    case 40: // down
                        dropPiece();
                        break;
                    case 38: // up
                        rotatePiece();
                        break;
                    case 32: // space
                        hardDrop();
                        break;
                }
            });
            
            window.addEventListener('resize', function() {
                resizeCanvas();
                if (gamePhase === 'gameplay') {
                    draw();
                }
            });
            
            // Initialize
            resizeCanvas();
            introScreen.classList.remove('hidden');
        })();
    </script>
</body>
</html>
```