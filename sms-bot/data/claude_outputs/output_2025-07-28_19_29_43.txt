```html
<!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
<style>
body {
  margin: 0;
  background: linear-gradient(45deg, #1a1a1a, #4a4a4a);
  touch-action: none;
  overflow: hidden;
  font-family: system-ui;
}
#game {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
}
#controls {
  position: fixed;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 120px;
  background: rgba(0,0,0,0.8);
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0 20px;
  box-sizing: border-box;
  z-index: 1000;
}
.btn {
  width: 60px;
  height: 60px;
  background: rgba(255,255,255,0.2);
  border: none;
  border-radius: 50%;
  color: white;
  font-size: 24px;
  touch-action: none;
}
#score {
  position: fixed;
  top: 20px;
  right: 20px;
  color: white;
  font-size: 24px;
}
#menu {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  color: white;
  text-align: center;
  font-size: 24px;
}
#start {
  background: rgba(255,255,255,0.2);
  border: none;
  color: white;
  padding: 15px 30px;
  font-size: 20px;
  border-radius: 30px;
  cursor: pointer;
}
</style>
</head>
<body>
<canvas id="game"></canvas>
<div id="controls">
  <button class="btn" id="left">‚¨ÖÔ∏è</button>
  <button class="btn" id="rotate">üîÑ</button>
  <button class="btn" id="down">‚¨áÔ∏è</button>
  <button class="btn" id="right">‚û°Ô∏è</button>
</div>
<div id="score">0</div>
<div id="menu">
  <h1>TETRIS</h1>
  <p>Stack blocks, clear lines!</p>
  <button id="start">START</button>
</div>

<script>
const canvas = document.getElementById('game');
const ctx = canvas.getContext('2d');
const dpr = window.devicePixelRatio || 1;
const controlsHeight = 120;

let width, height, blockSize;
let board = [];
let currentPiece = null;
let score = 0;
let dropInterval = 1000;
let lastDrop = 0;
let gameOver = false;
let gameStarted = false;

const pieces = [
  [[1,1,1,1]], // I
  [[1,1],[1,1]], // O
  [[0,1,0],[1,1,1]], // T
  [[0,1,1],[1,1,0]], // S
  [[1,1,0],[0,1,1]], // Z
  [[1,0,0],[1,1,1]], // J
  [[0,0,1],[1,1,1]]  // L
];

const colors = ['#00f0f0','#f0f000','#a000f0','#00f000','#f00000','#0000f0','#f0a000'];

function resize() {
  width = window.innerWidth;
  height = window.innerHeight - controlsHeight;
  
  canvas.style.width = width + 'px';
  canvas.style.height = height + 'px';
  canvas.width = width * dpr;
  canvas.height = height * dpr;
  ctx.scale(dpr, dpr);
  
  blockSize = Math.floor(width / 10);
  
  board = Array(20).fill().map(() => Array(10).fill(0));
}

function newPiece() {
  const type = Math.floor(Math.random() * pieces.length);
  currentPiece = {
    shape: pieces[type],
    color: colors[type],
    x: 3,
    y: 0
  };
  
  if (collision()) {
    gameOver = true;
  }
}

function collision() {
  for (let y = 0; y < currentPiece.shape.length; y++) {
    for (let x = 0; x < currentPiece.shape[y].length; x++) {
      if (currentPiece.shape[y][x]) {
        const boardX = currentPiece.x + x;
        const boardY = currentPiece.y + y;
        
        if (boardX < 0 || boardX >= 10 || boardY >= 20 ||
            (boardY >= 0 && board[boardY][boardX])) {
          return true;
        }
      }
    }
  }
  return false;
}

function merge() {
  for (let y = 0; y < currentPiece.shape.length; y++) {
    for (let x = 0; x < currentPiece.shape[y].length; x++) {
      if (currentPiece.shape[y][x]) {
        const boardY = currentPiece.y + y;
        if (boardY >= 0) {
          board[boardY][currentPiece.x + x] = currentPiece.color;
        }
      }
    }
  }
}

function clearLines() {
  let linesCleared = 0;
  
  for (let y = board.length - 1; y >= 0; y--) {
    if (board[y].every(cell => cell)) {
      board.splice(y, 1);
      board.unshift(Array(10).fill(0));
      linesCleared++;
      y++;
    }
  }
  
  if (linesCleared) {
    score += [40,100,300,1200][linesCleared-1];
    document.getElementById('score').textContent = score;
    dropInterval = Math.max(100, 1000 - Math.floor(score/100) * 50);
  }
}

function rotate() {
  const oldShape = currentPiece.shape;
  currentPiece.shape = currentPiece.shape[0].map((_, i) => 
    currentPiece.shape.map(row => row[i]).reverse()
  );
  
  if (collision()) {
    currentPiece.shape = oldShape;
  }
}

function move(dir) {
  currentPiece.x += dir;
  if (collision()) {
    currentPiece.x -= dir;
  }
}

function drop() {
  currentPiece.y++;
  if (collision()) {
    currentPiece.y--;
    merge();
    clearLines();
    newPiece();
  }
}

function draw() {
  ctx.fillStyle = '#000';
  ctx.fillRect(0, 0, width, height);
  
  for (let y = 0; y < board.length; y++) {
    for (let x = 0; x < board[y].length; x++) {
      if (board[y][x]) {
        ctx.fillStyle = board[y][x];
        ctx.fillRect(x * blockSize, y * blockSize, blockSize-1, blockSize-1);
      }
    }
  }
  
  if (currentPiece) {
    ctx.fillStyle = currentPiece.color;
    for (let y = 0; y < currentPiece.shape.length; y++) {
      for (let x = 0; x < currentPiece.shape[y].length; x++) {
        if (currentPiece.shape[y][x]) {
          ctx.fillRect(
            (currentPiece.x + x) * blockSize,
            (currentPiece.y + y) * blockSize,
            blockSize-1,
            blockSize-1
          );
        }
      }
    }
  }
  
  if (gameOver) {
    ctx.fillStyle = 'rgba(0,0,0,0.8)';
    ctx.fillRect(0, 0, width, height);
    ctx.fillStyle = 'white';
    ctx.font = '48px system-ui';
    ctx.textAlign = 'center';
    ctx.fillText('GAME OVER', width/2, height/2);
    ctx.font = '24px system-ui';
    ctx.fillText('Score: ' + score, width/2, height/2 + 40);
  }
}

function update(time) {
  if (!gameStarted || gameOver) return;
  
  if (time - lastDrop > dropInterval) {
    drop();
    lastDrop = time;
  }
}

function gameLoop(time) {
  update(time);
  draw();
  requestAnimationFrame(gameLoop);
}

window.addEventListener('resize', resize);
resize();

document.getElementById('left').addEventListener('touchstart', () => move(-1));
document.getElementById('right').addEventListener('touchstart', () => move(1));
document.getElementById('down').addEventListener('touchstart', drop);
document.getElementById('rotate').addEventListener('touchstart', rotate);

document.addEventListener('keydown', e => {
  if (!gameStarted || gameOver) return;
  
  switch(e.keyCode) {
    case 37: move(-1); break;
    case 39: move(1); break;
    case 40: drop(); break;
    case 38: rotate(); break;
  }
});

document.getElementById('start').addEventListener('click', () => {
  gameStarted = true;
  gameOver = false;
  score = 0;
  document.getElementById('score').textContent = '0';
  document.getElementById('menu').style.display = 'none';
  board = Array(20).fill().map(() => Array(10).fill(0));
  newPiece();
  lastDrop = performance.now();
  requestAnimationFrame(gameLoop);
});

</script>
</body>
</html>
```