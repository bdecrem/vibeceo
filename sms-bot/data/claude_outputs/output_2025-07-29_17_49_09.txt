# Mobile Tetris Game

I'll create a responsive Tetris game with touch controls optimized for mobile devices. The game will include all standard Tetris features with a clean, modern interface.

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Mobile Tetris</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            touch-action: manipulation;
            user-select: none;
            -webkit-tap-highlight-color: transparent;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #1a1a2e, #16213e);
            height: 100vh;
            overflow: hidden;
            display: flex;
            flex-direction: column;
            color: white;
        }
        
        .game-container {
            display: flex;
            flex-direction: column;
            height: 100%;
            padding: 10px;
            gap: 10px;
        }
        
        .header {
            display: flex;
            justify-content: space-between;
            padding: 10px;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
        }
        
        .score-container {
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        
        .score-label {
            font-size: 16px;
            font-weight: 600;
            margin-bottom: 5px;
            color: #4cc9f0;
        }
        
        .score-value {
            font-size: 24px;
            font-weight: 700;
        }
        
        .game-area {
            display: flex;
            flex: 1;
            gap: 10px;
        }
        
        #gameCanvas {
            background: rgba(0, 0, 0, 0.2);
            border-radius: 8px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.4);
            flex: 1;
        }
        
        .side-panel {
            width: 100px;
            display: flex;
            flex-direction: column;
            gap: 15px;
        }
        
        .next-piece-container {
            background: rgba(0, 0, 0, 0.3);
            border-radius: 8px;
            padding: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
            flex: 1;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        
        .next-piece-label {
            font-size: 14px;
            margin-bottom: 10px;
            color: #f72585;
            font-weight: 600;
        }
        
        #nextCanvas {
            background: rgba(0, 0, 0, 0.2);
            border-radius: 5px;
        }
        
        .controls-container {
            display: flex;
            flex-direction: column;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 8px;
            padding: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
        }
        
        .controls-row {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-bottom: 10px;
        }
        
        .controls-row:last-child {
            margin-bottom: 0;
        }
        
        .control-btn {
            background: rgba(255, 255, 255, 0.15);
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            width: 60px;
            height: 60px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            color: white;
            cursor: pointer;
            transition: all 0.2s;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        }
        
        .control-btn:active {
            background: rgba(255, 255, 255, 0.3);
            transform: scale(0.95);
        }
        
        .control-btn.rotate {
            background: linear-gradient(135deg, #4361ee, #3a0ca3);
        }
        
        .control-btn.drop {
            background: linear-gradient(135deg, #f72585, #b5179e);
        }
        
        .game-over {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.85);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            z-index: 10;
            display: none;
        }
        
        .game-over h2 {
            font-size: 36px;
            margin-bottom: 20px;
            color: #f72585;
        }
        
        .final-score {
            font-size: 24px;
            margin-bottom: 30px;
        }
        
        .restart-btn {
            background: linear-gradient(135deg, #4361ee, #3a0ca3);
            border: none;
            border-radius: 50px;
            padding: 15px 40px;
            font-size: 20px;
            color: white;
            font-weight: 600;
            cursor: pointer;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
        }
        
        .restart-btn:active {
            transform: scale(0.95);
        }
        
        @media (max-width: 500px) {
            .control-btn {
                width: 50px;
                height: 50px;
                font-size: 20px;
            }
            
            .side-panel {
                width: 80px;
            }
            
            .next-piece-label {
                font-size: 12px;
            }
        }
    </style>
</head>
<body>
    <div class="game-container">
        <div class="header">
            <div class="score-container">
                <div class="score-label">SCORE</div>
                <div id="score" class="score-value">0</div>
            </div>
            <div class="score-container">
                <div class="score-label">LEVEL</div>
                <div id="level" class="score-value">1</div>
            </div>
            <div class="score-container">
                <div class="score-label">LINES</div>
                <div id="lines" class="score-value">0</div>
            </div>
        </div>
        
        <div class="game-area">
            <canvas id="gameCanvas"></canvas>
            <div class="side-panel">
                <div class="next-piece-container">
                    <div class="next-piece-label">NEXT</div>
                    <canvas id="nextCanvas"></canvas>
                </div>
                <div class="controls-container">
                    <div class="controls-row">
                        <div class="control-btn" id="rotateBtn">↻</div>
                    </div>
                    <div class="controls-row">
                        <div class="control-btn" id="leftBtn">←</div>
                        <div class="control-btn" id="rightBtn">→</div>
                    </div>
                    <div class="controls-row">
                        <div class="control-btn" id="downBtn">↓</div>
                        <div class="control-btn drop" id="dropBtn">⤓</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="game-over" id="gameOver">
        <h2>GAME OVER</h2>
        <div class="final-score">Score: <span id="finalScore">0</span></div>
        <button class="restart-btn" id="restartBtn">PLAY AGAIN</button>
    </div>

    <script>
        // Game constants
        const COLS = 10;
        const ROWS = 20;
        const BLOCK_SIZE = 30;
        const COLORS = [
            null,
            '#FF0D72', // I
            '#0DC2FF', // J
            '#0DFF72', // L
            '#F538FF', // O
            '#FF8E0D', // S
            '#FFE138', // T
            '#3877FF'  // Z
        ];
        
        const SHAPES = [
            null,
            // I
            [
                [0, 0, 0, 0],
                [1, 1, 1, 1],
                [0, 0, 0, 0],
                [0, 0, 0, 0]
            ],
            // J
            [
                [2, 0, 0],
                [2, 2, 2],
                [0, 0, 0]
            ],
            // L
            [
                [0, 0, 3],
                [3, 3, 3],
                [0, 0, 0]
            ],
            // O
            [
                [4, 4],
                [4, 4]
            ],
            // S
            [
                [0, 5, 5],
                [5, 5, 0],
                [0, 0, 0]
            ],
            // T
            [
                [0, 6, 0],
                [6, 6, 6],
                [0, 0, 0]
            ],
            // Z
            [
                [7, 7, 0],
                [0, 7, 7],
                [0, 0, 0]
            ]
        ];
        
        // Game variables
        let canvas, ctx, nextCanvas, nextCtx;
        let board = [];
        let score = 0;
        let level = 1;
        let lines = 0;
        let gameOver = false;
        let dropCounter = 0;
        let dropInterval = 1000;
        let lastTime = 0;
        let player = {
            pos: {x: 0, y: 0},
            matrix: null,
            score: 0
        };
        
        // Initialize the game
        function init() {
            canvas = document.getElementById('gameCanvas');
            ctx = canvas.getContext('2d');
            nextCanvas = document.getElementById('nextCanvas');
            nextCtx = nextCanvas.getContext('2d');
            
            // Set canvas sizes
            resizeCanvas();
            
            // Create empty board
            createBoard();
            
            // Reset game state
            resetGame();
            
            // Set up event listeners
            setupControls();
            
            // Start game loop
            requestAnimationFrame(update);
        }
        
        // Resize canvas to fit screen
        function resizeCanvas() {
            const gameArea = document.querySelector('.game-area');
            const containerWidth = gameArea.clientWidth;
            const containerHeight = gameArea.clientHeight;
            
            // Calculate canvas size
            const maxWidth = containerWidth - 120; // Leave space for side panel
            const maxHeight = containerHeight;
            
            const scaleX = maxWidth / (COLS * BLOCK_SIZE);
            const scaleY = maxHeight / (ROWS * BLOCK_SIZE);
            const scale = Math.min(scaleX, scaleY, 1);
            
            canvas.width = COLS * BLOCK_SIZE * scale;
            canvas.height = ROWS * BLOCK_SIZE * scale;
            
            // Set next piece canvas size
            nextCanvas.width = 100;
            nextCanvas.height = 100;
            
            // Scale context
            ctx.scale(scale, scale);
        }
        
        // Create empty board
        function createBoard() {
            board = [];
            for (let y = 0; y < ROWS; y++) {
                board.push(Array(COLS).fill(0));
            }
        }
        
        // Reset game state
        function resetGame() {
            createBoard();
            score = 0;
            level = 1;
            lines = 0;
            gameOver = false;
            dropInterval = 1000;
            
            document.getElementById('score').textContent = score;
            document.getElementById('level').textContent = level;
            document.getElementById('lines').textContent = lines;
            document.getElementById('gameOver').style.display = 'none';
            
            // Create new piece
            playerReset();
        }
        
        // Reset player position and create new piece
        function playerReset() {
            const pieces = 'ILJOTSZ';
            player.matrix = createPiece(pieces[Math.floor(Math.random() * pieces.length)]);
            player.pos.y = 0;
            player.pos.x = Math.floor(COLS / 2) - Math.floor(player.matrix[0].length / 2);
            
            // Game over if collision immediately
            if (collide()) {
                gameOver = true;
                document.getElementById('finalScore').textContent = score;
                document.getElementById('gameOver').style.display = 'flex';
            }
            
            // Create next piece
            createNextPiece();
        }
        
        // Create a piece
        function createPiece(type) {
            if (type === 'I') return SHAPES[1];
            if (type === 'J') return SHAPES[2];
            if (type === 'L') return SHAPES[3];
            if (type === 'O') return SHAPES[4];
            if (type === 'S') return SHAPES[5];
            if (type === 'T') return SHAPES[6];
            if (type === 'Z') return SHAPES[7];
        }
        
        // Create next piece preview
        function createNextPiece() {
            const pieces = 'ILJOTSZ';
            const nextPieceType = pieces[Math.floor(Math.random() * pieces.length)];
            const nextPiece = createPiece(nextPieceType);
            
            // Draw next piece
            nextCtx.clearRect(0, 0, nextCanvas.width, nextCanvas.height);
            nextCtx.fillStyle = 'rgba(0, 0, 0, 0.2)';
            nextCtx.fillRect(0, 0, nextCanvas.width, nextCanvas.height);
            
            const offsetX = (nextCanvas.width / 2) - (nextPiece[0].length * BLOCK_SIZE / 2);
            const offsetY = (nextCanvas.height / 2) - (nextPiece.length * BLOCK_SIZE / 2);
            
            nextPiece.forEach((row, y) => {
                row.forEach((value, x) => {
                    if (value !== 0) {
                        nextCtx.fillStyle = COLORS[value];
                        nextCtx.fillRect(offsetX + x * BLOCK_SIZE, offsetY + y * BLOCK_SIZE, BLOCK_SIZE - 1, BLOCK_SIZE - 1);
                        
                        // Add 3D effect
                        nextCtx.strokeStyle = 'rgba(255, 255, 255, 0.2)';
                        nextCtx.lineWidth = 2;
                        nextCtx.strokeRect(offsetX + x * BLOCK_SIZE, offsetY + y * BLOCK_SIZE, BLOCK_SIZE - 1, BLOCK_SIZE - 1);
                    }
                });
            });
        }
        
        // Check for collision
        function collide() {
            const [m, o] = [player.matrix, player.pos];
            for (let y = 0; y < m.length; y++) {
                for (let x = 0; x < m[y].length; x++) {
                    if (m[y][x] !== 0 &&
                        (board[y + o.y] &&
                        board[y + o.y][x + o.x]) !== 0) {
                        return true;
                    }
                }
            }
            return false;
        }
        
        // Merge player piece with board
        function merge() {
            player.matrix.forEach((row, y) => {
                row.forEach((value, x) => {
                    if (value !== 0) {
                        board[y + player.pos.y][x + player.pos.x] = value;
                    }
                });
            });
        }
        
        // Rotate player piece
        function playerRotate() {
            const pos = player.pos.x;
            let offset = 1;
            rotate(player.matrix);
            while (collide()) {
                player.pos.x += offset;
                offset = -(offset + (offset > 0 ? 1 : -1));
                if (offset > player.matrix[0].length) {
                    rotate(player.matrix);
                    player.pos.x = pos;
                    return;
                }
            }
        }
        
        // Rotate matrix
        function rotate(matrix) {
            for (let y = 0; y < matrix.length; y++) {
                for (let x = 0; x < y; x++) {
                    [matrix[x][y], matrix[y][x]] = [matrix[y][x], matrix[x][y]];
                }
            }
            
            matrix.forEach(row => row.reverse());
        }
        
        // Move player
        function playerMove(dir) {
            player.pos.x += dir;
            if (collide()) {
                player.pos.x -= dir;
            }
        }
        
        // Drop player
        function playerDrop() {
            player.pos.y++;
            if (collide()) {
                player.pos.y--;
                merge();
                playerReset();
                sweepRows();
                updateScore();
            }
            dropCounter = 0;
        }
        
        // Hard drop
        function playerHardDrop() {
            while (!collide()) {
                player.pos.y++;
            }
            player.pos.y--;
            merge();
            playerReset();
            sweepRows();
            updateScore();
            dropCounter = 0;
        }
        
        // Sweep completed rows
        function sweepRows() {
            let rowCount = 0;
            outer: for (let y = board.length - 1; y >= 0; y--) {
                for (let x = 0; x < board[y].length; x++) {
                    if (board[y][x] === 0) {
                        continue outer;
                    }
                }
                
                const row = board.splice(y, 1)[0].fill(0);
                board.unshift(row);
                rowCount++;
                y++;
            }
            
            // Update lines and level
            if (rowCount > 0) {
                lines += rowCount;
                document.getElementById('lines').textContent = lines;
                
                // Level up every 10 lines
                level = Math.floor(lines / 10) + 1;
                document.getElementById('level').textContent = level;
                
                // Increase speed
                dropInterval = Math.max(100, 1000 - (level - 1) * 100);
            }
            
            return rowCount;
        }
        
        // Update score
        function updateScore() {
            const rowCount = sweepRows();
            if (rowCount > 0) {
                // Scoring system: 40, 100, 300, 1200 for 1, 2, 3, 4 rows
                const linePoints = [0, 40, 100, 300, 1200];
                score += linePoints[rowCount] * level;
                document.getElementById('score').textContent = score;
            }
        }
        
        // Draw the game
        function draw() {
            // Clear canvas
            ctx.fillStyle = 'rgba(0, 0, 0, 0.2)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // Draw board
            drawMatrix(board, {x: 0, y: 0});
            
            // Draw player
            drawMatrix(player.matrix, player.pos);
            
            // Draw grid
            ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';
            ctx.lineWidth = 0.5;
            
            // Vertical lines
            for (let x = 0; x <= COLS; x++) {
                ctx.beginPath();
                ctx.moveTo(x * BLOCK_SIZE, 0);
                ctx.lineTo(x * BLOCK_SIZE, ROWS * BLOCK_SIZE);
                ctx.stroke();
            }
            
            // Horizontal lines
            for (let y = 0; y <= ROWS; y++) {
                ctx.beginPath();
                ctx.moveTo(0, y * BLOCK_SIZE);
                ctx.lineTo(COLS * BLOCK_SIZE, y * BLOCK_SIZE);
                ctx.stroke();
            }
        }
        
        // Draw matrix
        function drawMatrix(matrix, offset) {
            matrix.forEach((row, y) => {
                row.forEach((value, x) => {
                    if (value !== 0) {
                        ctx.fillStyle = COLORS[value];
                        ctx.fillRect((x + offset.x) * BLOCK_SIZE, (y + offset.y) * BLOCK_SIZE, BLOCK_SIZE - 1, BLOCK_SIZE - 1);
                        
                        // Add 3D effect
                        ctx.strokeStyle = 'rgba(255, 255, 255, 0.2)';
                        ctx.lineWidth = 2;
                        ctx.strokeRect((x + offset.x) * BLOCK_SIZE, (y + offset.y) * BLOCK_SIZE, BLOCK_SIZE - 1, BLOCK_SIZE - 1);
                    }
                });
            });
        }
        
        // Update game state
        function update(time = 0) {
            const deltaTime = time - lastTime;
            lastTime = time;
            
            if (!gameOver) {
                dropCounter += deltaTime;
                if (dropCounter > dropInterval) {
                    playerDrop();
                }
                
                draw();
                requestAnimationFrame(update);
            }
        }
        
        // Set up controls
        function setupControls() {
            // Button handlers
            document.getElementById('leftBtn').addEventListener('click', () => playerMove(-1));
            document.getElementById('rightBtn').addEventListener('click', () => playerMove(1));
            document.getElementById('downBtn').addEventListener('click', () => playerDrop());
            document.getElementById('rotateBtn').addEventListener('click', () => playerRotate());
            document.getElementById('dropBtn').addEventListener('click', () => playerHardDrop());
            
            // Keyboard controls
            document.addEventListener('keydown', event => {
                if (gameOver) return;
                
                switch (event.keyCode) {
                    case 37: // Left arrow
                        playerMove(-1);
                        break;
                    case 39: // Right arrow
                        playerMove(1);
                        break;
                    case 40: // Down arrow
                        playerDrop();
                        break;
                    case 38: // Up arrow
                        playerRotate();
                        break;
                    case 32: // Space
                        playerHardDrop();
                        break;
                }
            });
            
            // Restart button
            document.getElementById('restartBtn').addEventListener('click', resetGame);
        }
        
        // Initialize game when page loads
        window.addEventListener('load', init);
        window.addEventListener('resize', resizeCanvas);
    </script>
</body>
</html>
```

## Features of this Tetris Implementation:

1. **Mobile-First Design**:
   - Responsive layout that adapts to any screen size
   - Touch-friendly controls with visual feedback
   - Optimized for portrait orientation

2. **Game Features**:
   - Classic Tetris gameplay with all 7 tetromino shapes
   - Score tracking with level progression
   - Next piece preview
   - Line clearing and scoring system
   - Increasing difficulty as levels progress

3. **Controls**:
   - On-screen buttons for movement, rotation, and dropping
   - Keyboard support for desktop play
   - Visual feedback when buttons are pressed

4. **Visual Design**:
   - Modern gradient background
   - Colorful tetromino pieces with 3D effect
   - Clean, readable score display
   - Game grid with subtle borders

5. **Game States**:
   - Start screen
   - Active gameplay
   - Game over screen with restart option

The game is ready to play immediately - just open the HTML file in any modern browser! On mobile devices, use the on-screen controls. On desktop, you can use arrow keys and spacebar.