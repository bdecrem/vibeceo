```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>Tetris</title>
    <style>
        body, html {
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #000;
            overflow: hidden;
        }
        #tetris {
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        canvas {
            background-color: #111;
            border: 1px solid #555;
        }
        #score {
            color: white;
            margin: 10px;
            font-size: 1.2em;
        }
        #controls {
            color: white;
            font-size: 1em;
            margin-top: 10px;
        }
        button {
            font-size: 1em;
            margin: 5px;
            padding: 10px;
        }
    </style>
</head>
<body>
    <div id="tetris">
        <canvas width="240" height="400"></canvas>
        <div id="score">Score: 0</div>
        <div id="controls">
            <p>Controls: Left / Right to Move, Up to Rotate, Down to Drop</p>
            <button onclick="moveLeft()">Left</button>
            <button onclick="moveRight()">Right</button>
            <button onclick="rotate()">Rotate</button>
            <button onclick="moveDown()">Drop</button>
        </div>
    </div>
    <script>
        const canvas = document.querySelector('canvas');
        const context = canvas.getContext('2d');
        const scoreDisplay = document.getElementById('score');
        const ROW = 20, COL = 10, SQ = 20, VACANT = 'black';
        let board = [];
        let score = 0;

        for (let r = 0; r < ROW; r++) {
            board[r] = [];
            for (let c = 0; c < COL; c++) {
                board[r][c] = VACANT;
            }
        }

        function drawSquare(x, y, color) {
            context.fillStyle = color;
            context.fillRect(x * SQ, y * SQ, SQ, SQ);
            context.strokeStyle = 'black';
            context.strokeRect(x * SQ, y * SQ, SQ, SQ);
        }

        function drawBoard() {
            for (let r = 0; r < ROW; r++) {
                for (let c = 0; c < COL; c++) {
                    drawSquare(c, r, board[r][c]);
                }
            }
        }

        const PIECES = [
            [Z, 'red'], [S, 'green'], [T, 'yellow'], [O, 'blue'], [L, 'purple'], [I, 'cyan'], [J, 'orange']
        ];

        function randomPiece() {
            const r = Math.floor(Math.random() * PIECES.length);
            return new Piece(PIECES[r][0], PIECES[r][1]);
        }

        let p = randomPiece();

        function Piece(tetromino, color) {
            this.tetromino = tetromino;
            this.color = color;
            this.tetrominoN = 0;
            this.activeTetromino = this.tetromino[this.tetrominoN];
            this.x = 3;
            this.y = -2;
        }

        Piece.prototype.fill = function(color) {
            for (let r = 0; r < this.activeTetromino.length; r++) {
                for (let c = 0; c < this.activeTetromino.length; c++) {
                    if (this.activeTetromino[r][c]) {
                        drawSquare(this.x + c, this.y + r, color);
                    }
                }
            }
        };

        Piece.prototype.draw = function() {
            this.fill(this.color);
        };

        Piece.prototype.unDraw = function() {
            this.fill(VACANT);
        };

        Piece.prototype.moveDown = function() {
            if (!this.collision(0, 1, this.activeTetromino)) {
                this.unDraw();
                this.y++;
                this.draw();
            } else {
                this.lock();
                p = randomPiece();
            }
        };

        Piece.prototype.moveRight = function() {
            if (!this.collision(1, 0, this.activeTetromino)) {
                this.unDraw();
                this.x++;
                this.draw();
            }
        };

        Piece.prototype.moveLeft = function() {
            if (!this.collision(-1, 0, this.activeTetromino)) {
                this.unDraw();
                this.x--;
                this.draw();
            }
        };

        Piece.prototype.rotate = function() {
            let nextPattern = this.tetromino[(this.tetrominoN + 1) % this.tetromino.length];
            let kick = 0;
            if (this.collision(0, 0, nextPattern)) {
                if (this.x > COL / 2) {
                    kick = -1;
                } else {
                    kick = 1;
                }
            }
            if (!this.collision(kick, 0, nextPattern)) {
                this.unDraw();
                this.x += kick;
                this.tetrominoN = (this.tetrominoN + 1) % this.tetromino.length;
                this.activeTetromino = this.tetromino[this.tetrominoN];
                this.draw();
            }
        };

        Piece.prototype.lock = function() {
            for (let r = 0; r < this.activeTetromino.length; r++) {
                for (let c = 0; c < this.activeTetromino.length; c++) {
                    if (!this.activeTetromino[r][c]) {
                        continue;
                    }
                    if (this.y + r < 0) {
                        alert('Game Over');
                        board = [];
                        for (let r = 0; r < ROW; r++) {
                            board[r] = [];
                            for (let c = 0; c < COL; c++) {
                                board[r][c] = VACANT;
                            }
                        }
                        score = 0;
                        localStorage.setItem('tetrisScore', score);
                        drawBoard();
                        return;
                    }
                    board[this.y + r][this.x + c] = this.color;
                }
            }
            for (let r = 0; r < ROW; r++) {
                let isRowFull = true;
                for (let c = 0; c < COL; c++) {
                    isRowFull = isRowFull && (board[r][c] != VACANT);
                }
                if (isRowFull) {
                    for (let y = r; y > 1; y--) {
                        for (let c = 0; c < COL; c++) {
                            board[y][c] = board[y - 1][c];
                        }
                    }
                    for (let c = 0; c < COL; c++) {
                        board[0][c] = VACANT;
                    }
                    score += 10;
                }
            }
            drawBoard();
            scoreDisplay.innerHTML = 'Score: ' + score;
            localStorage.setItem('tetrisScore', score);
        };

        Piece.prototype.collision = function(x, y, piece) {
            for (let r = 0; r < piece.length; r++) {
                for (let c = 0; c < piece.length; c++) {
                    if (!piece[r][c]) {
                        continue;
                    }
                    let newX = this.x + c + x;
                    let newY = this.y + r + y;
                    if (newX < 0 || newX >= COL || newY >= ROW) {
                        return true;
                    }
                    if (newY < 0) {
                        continue;
                    }
                    if (board[newY][newX] != VACANT) {
                        return true;
                    }
                }
            }
            return false;
        };

        document.addEventListener('keydown', control);

        function control(event) {
            if (event.keyCode == 37) {
                p.moveLeft();
            } else if (event.keyCode == 38) {
                p.rotate();
            } else if (event.keyCode == 39) {
                p.moveRight();
            } else if (event.keyCode == 40) {
                p.moveDown();
            }
        }

        function moveLeft() {
            p.moveLeft();
        }

        function moveRight() {
            p.moveRight();
        }

        function rotate() {
            p.rotate();
        }

        function moveDown() {
            p.moveDown();
        }

        let dropStart = Date.now();
        let gameOver = false;

        function drop() {
            let now = Date.now();
            let delta = now - dropStart;
            if (delta > 1000) {
                p.moveDown();
                dropStart = Date.now();
            }
            if (!gameOver) {
                requestAnimationFrame(drop);
            }
        }

        drop();

        const Z = [
            [[1, 1, 0],
             [0, 1, 1],
             [0, 0, 0]],
            [[0, 1, 0],
             [1, 1, 0],
             [1, 0, 0]]
        ];

        const S = [
            [[0, 1, 1],
             [1, 1, 0],
             [0, 0, 0]],
            [[1, 0, 0],
             [1, 1, 0],
             [0, 1, 0]]
        ];

        const T = [
            [[0, 1, 0],
             [1, 1, 1],
             [0, 0, 0]],
            [[0, 1, 0],
             [0, 1, 1],
             [0, 1, 0]],
            [[0, 0, 0],
             [1, 1, 1],
             [0, 1, 0]],
            [[0, 1, 0],
             [1, 1, 0],
             [0, 1, 0]]
        ];

        const O = [
            [[0, 0, 0],
             [0, 1, 1],
             [0, 1, 1]]
        ];

        const L = [
            [[0, 0, 1],
             [1, 1, 1],
             [0, 0, 0]],
            [[0, 1, 0],
             [0, 1, 0],
             [0, 1, 1]],
            [[0, 0, 0],
             [1, 1, 1],
             [1, 0, 0]],
            [[1, 1, 0],
             [0, 1, 0],
             [0, 1, 0]]
        ];

        const I = [
            [[0, 0, 0, 0],
             [1, 1, 1, 1],
             [0, 0, 0, 0],
             [0, 0, 0, 0]],
            [[0, 1, 0, 0],
             [0, 1, 0, 0],
             [0, 1, 0, 0],
             [0, 1, 0, 0]]
        ];

        const J = [
            [[1, 0, 0],
             [1, 1, 1],
             [0, 0, 0]],
            [[0, 1, 1],
             [0, 1, 0],
             [0, 1, 0]],
            [[0, 0, 0],
             [1, 1, 1],
             [0, 0, 1]],
            [[0, 1, 0],
             [0, 1, 0],
             [1, 1, 0]]
        ];

        window.addEventListener('unload', function() {
            document.removeEventListener('keydown', control);
        });
    </script>
</body>
</html>
```