```html
<!DOCTYPE html>
<html>
<head>
    <title>Emoji Tetris</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, user-scalable=no">
    <style>
        body {
            margin: 0;
            padding: 0;
            background: linear-gradient(to bottom, #1a1a2e, #16213e);
            font-family: Arial, sans-serif;
            touch-action: none;
            user-select: none;
            -webkit-user-select: none;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            overflow: hidden;
        }
        #gameCanvas {
            background-color: #0f3460;
            display: block;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
        }
        #controls {
            position: fixed;
            bottom: 0;
            width: 100%;
            height: 120px;
            display: flex;
            justify-content: center;
            align-items: center;
            background: rgba(0, 0, 0, 0.3);
        }
        .control-btn {
            width: 60px;
            height: 60px;
            margin: 10px;
            background: rgba(255, 255, 255, 0.2);
            border: 2px solid white;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            color: white;
            font-size: 24px;
            user-select: none;
            -webkit-user-select: none;
        }
        #upBtn {
            transform: rotate(180deg);
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas"></canvas>
    <div id="controls">
        <div class="control-btn" id="leftBtn">‚Üê</div>
        <div class="control-btn" id="upBtn">‚Üª</div>
        <div class="control-btn" id="rightBtn">‚Üí</div>
        <div class="control-btn" id="downBtn">‚Üì</div>
    </div>

    <script>
        var canvas = document.getElementById('gameCanvas');
        var ctx = canvas.getContext('2d');
        var devicePixelRatio = window.devicePixelRatio || 1;
        var controlsHeight = 120;
        
        function resizeCanvas() {
            canvas.width = window.innerWidth * devicePixelRatio;
            canvas.height = (window.innerHeight - controlsHeight) * devicePixelRatio;
            canvas.style.width = window.innerWidth + 'px';
            canvas.style.height = (window.innerHeight - controlsHeight) + 'px';
        }
        
        window.addEventListener('resize', resizeCanvas);
        resizeCanvas();
        
        var cellSize = Math.floor(Math.min(canvas.width/10, canvas.height/20));
        var boardWidth = 10;
        var boardHeight = 20;
        var board = [];
        var currentPiece = null;
        var score = 0;
        var level = 1;
        var lines = 0;
        var gameOver = false;
        var dropCounter = 0;
        var dropInterval = 1000;
        var lastTime = 0;
        
        var pieces = [
            {
                shape: [[1,1,1,1]],
                color: '#00f0f0',
                emoji: 'üü¶'
            },
            {
                shape: [[1,1],[1,1]],
                color: '#f0f000',
                emoji: 'üü®'
            },
            {
                shape: [[0,1,0],[1,1,1]],
                color: '#a000f0',
                emoji: 'üü™'
            },
            {
                shape: [[0,1,1],[1,1,0]],
                color: '#00f000',
                emoji: 'üü©'
            },
            {
                shape: [[1,1,0],[0,1,1]],
                color: '#f00000',
                emoji: 'üü•'
            },
            {
                shape: [[1,0,0],[1,1,1]],
                color: '#0000f0',
                emoji: 'üü¶'
            },
            {
                shape: [[0,0,1],[1,1,1]],
                color: '#f0a000',
                emoji: 'üüß'
            }
        ];
        
        var keys = {
            left: false,
            right: false,
            down: false,
            up: false
        };
        
        function initBoard() {
            board = [];
            for (var y = 0; y < boardHeight; y++) {
                board[y] = [];
                for (var x = 0; x < boardWidth; x++) {
                    board[y][x] = 0;
                }
            }
        }
        
        function createPiece() {
            var pieceType = Math.floor(Math.random() * pieces.length);
            var piece = {
                type: pieceType,
                shape: pieces[pieceType].shape,
                x: Math.floor(boardWidth / 2) - Math.floor(pieces[pieceType].shape[0].length / 2),
                y: 0,
                color: pieces[pieceType].color,
                emoji: pieces[pieceType].emoji
            };
            return piece;
        }
        
        function drawBoard() {
            for (var y = 0; y < boardHeight; y++) {
                for (var x = 0; x < boardWidth; x++) {
                    if (board[y][x]) {
                        ctx.fillStyle = board[y][x].color;
                        ctx.fillRect(
                            x * cellSize,
                            y * cellSize,
                            cellSize - 1,
                            cellSize - 1
                        );
                        ctx.font = (cellSize * 0.8) + 'px Arial';
                        ctx.textAlign = 'center';
                        ctx.textBaseline = 'middle';
                        ctx.fillStyle = 'white';
                        ctx.fillText(
                            board[y][x].emoji,
                            x * cellSize + cellSize/2,
                            y * cellSize + cellSize/2
                        );
                    }
                }
            }
        }
        
        function drawPiece() {
            if (!currentPiece) return;
            
            for (var y = 0; y < currentPiece.shape.length; y++) {
                for (var x = 0; x < currentPiece.shape[y].length; x++) {
                    if (currentPiece.shape[y][x]) {
                        ctx.fillStyle = currentPiece.color;
                        ctx.fillRect(
                            (currentPiece.x + x) * cellSize,
                            (currentPiece.y + y) * cellSize,
                            cellSize - 1,
                            cellSize - 1
                        );
                        ctx.font = (cellSize * 0.8) + 'px Arial';
                        ctx.textAlign = 'center';
                        ctx.textBaseline = 'middle';
                        ctx.fillStyle = 'white';
                        ctx.fillText(
                            currentPiece.emoji,
                            (currentPiece.x + x) * cellSize + cellSize/2,
                            (currentPiece.y + y) * cellSize + cellSize/2
                        );
                    }
                }
            }
        }
        
        function rotatePiece() {
            if (!currentPiece) return;
            
            var originalShape = currentPiece.shape;
            var newShape = [];
            for (var x = 0; x < originalShape[0].length; x++) {
                newShape.push([]);
                for (var y = originalShape.length - 1; y >= 0; y--) {
                    newShape[x].push(originalShape[y][x]);
                }
            }
            
            var originalPiece = {
                shape: currentPiece.shape,
                x: currentPiece.x,
                y: currentPiece.y
            };
            
            currentPiece.shape = newShape;
            
            // Wall kick
            if (checkCollision()) {
                // Try moving left
                currentPiece.x--;
                if (checkCollision()) {
                    // Try moving right
                    currentPiece.x += 2;
                    if (checkCollision()) {
                        // Try moving up
                        currentPiece.x--;
                        currentPiece.y--;
                        if (checkCollision()) {
                            // Revert if all fail
                            currentPiece.shape = originalShape;
                            currentPiece.x = originalPiece.x;
                            currentPiece.y = originalPiece.y;
                        }
                    }
                }
            }
        }
        
        function checkCollision() {
            if (!currentPiece) return false;
            
            for (var y = 0; y < currentPiece.shape.length; y++) {
                for (var x = 0; x < currentPiece.shape[y].length; x++) {
                    if (currentPiece.shape[y][x]) {
                        var newX = currentPiece.x + x;
                        var newY = currentPiece.y + y;
                        
                        if (
                            newX < 0 || 
                            newX >= boardWidth || 
                            newY >= boardHeight ||
                            (newY >= 0 && board[newY][newX])
                        ) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        function mergePiece() {
            if (!currentPiece) return;
            
            for (var y = 0; y < currentPiece.shape.length; y++) {
                for (var x = 0; x < currentPiece.shape[y].length; x++) {
                    if (currentPiece.shape[y][x]) {
                        var boardY = currentPiece.y + y;
                        if (boardY >= 0) {
                            board[boardY][currentPiece.x + x] = {
                                color: currentPiece.color,
                                emoji: currentPiece.emoji
                            };
                        }
                    }
                }
            }
        }
        
        function clearLines() {
            var linesCleared = 0;
            for (var y = boardHeight - 1; y >= 0; y--) {
                var isLineComplete = true;
                for (var x = 0; x < boardWidth; x++) {
                    if (!board[y][x]) {
                        isLineComplete = false;
                        break;
                    }
                }
                
                if (isLineComplete) {
                    linesCleared++;
                    // Remove the line
                    for (var yy = y; yy > 0; yy--) {
                        for (var x = 0; x < boardWidth; x++) {
                            board[yy][x] = board[yy-1][x];
                        }
                    }
                    // Clear top line
                    for (var x = 0; x < boardWidth; x++) {
                        board[0][x] = 0;
                    }
                    // Since we moved lines down, check same index again
                    y++;
                }
            }
            
            if (linesCleared > 0) {
                lines += linesCleared;
                score += [40, 100, 300, 1200][linesCleared-1] * level;
                level = Math.floor(lines / 10) + 1;
                dropInterval = Math.max(100, 1000 - (level - 1) * 100);
            }
        }
        
        function movePiece(dx, dy) {
            if (!currentPiece) return;
            
            currentPiece.x += dx;
            currentPiece.y += dy;
            
            if (checkCollision()) {
                currentPiece.x -= dx;
                currentPiece.y -= dy;
                
                if (dy > 0) {
                    mergePiece();
                    clearLines();
                    currentPiece = createPiece();
                    
                    if (checkCollision()) {
                        gameOver = true;
                    }
                }
                
                return false;
            }
            
            return true;
        }
        
        function hardDrop() {
            if (!currentPiece) return;
            
            while (movePiece(0, 1)) {
                score += 2;
            }
        }
        
        function update() {
            if (gameOver) return;
            
            if (keys.left) {
                movePiece(-1, 0);
                keys.left = false;
            }
            
            if (keys.right) {
                movePiece(1, 0);
                keys.right = false;
            }
            
            if (keys.down) {
                movePiece(0, 1);
                keys.down = false;
            }
            
            if (keys.up) {
                rotatePiece();
                keys.up = false;
            }
        }
        
        function draw() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Scale for high DPI
            ctx.save();
            ctx.scale(devicePixelRatio, devicePixelRatio);
            
            // Draw background grid
            ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';
            for (var x = 0; x <= boardWidth; x++) {
                ctx.beginPath();
                ctx.moveTo(x * cellSize, 0);
                ctx.lineTo(x * cellSize, boardHeight * cellSize);
                ctx.stroke();
            }
            for (var y = 0; y <= boardHeight; y++) {
                ctx.beginPath();
                ctx.moveTo(0, y * cellSize);
                ctx.lineTo(boardWidth * cellSize, y * cellSize);
                ctx.stroke();
            }
            
            drawBoard();
            drawPiece();
            
            // Draw score
            ctx.fillStyle = 'white';
            ctx.font = '20px Arial';
            ctx.textAlign = 'left';
            ctx.fillText('Score: ' + score, 10, 30);
            ctx.fillText('Level: ' + level, 10, 60);
            ctx.fillText('Lines: ' + lines, 10, 90);
            
            if (gameOver) {
                ctx.fillStyle = 'rgba(0, 0, 0, 0.75)';
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                ctx.fillStyle = 'white';
                ctx.font = '36px Arial';
                ctx.textAlign = 'center';
                ctx.fillText('GAME OVER', canvas.width/2, canvas.height/2 - 30);
                ctx.font = '24px Arial';
                ctx.fillText('Score: ' + score, canvas.width/2, canvas.height/2 + 20);
                ctx.fillText('Tap to Restart', canvas.width/2, canvas.height/2 + 60);
            }
            
            ctx.restore();
        }
        
        function gameLoop(currentTime) {
            var deltaTime = currentTime - lastTime;
            lastTime = currentTime;
            
            if (!gameOver) {
                dropCounter += deltaTime;
                if (dropCounter > dropInterval) {
                    movePiece(0, 1);
                    dropCounter = 0;
                }
            }
            
            update();
            draw();
            requestAnimationFrame(gameLoop);
        }
        
        function startGame() {
            initBoard();
            currentPiece = createPiece();
            score = 0;
            level = 1;
            lines = 0;
            gameOver = false;
            dropCounter = 0;
            dropInterval = 1000;
        }
        
        // Touch controls
        document.getElementById('leftBtn').addEventListener('touchstart', function(e) {
            e.preventDefault();
            keys.left = true;
        });
        
        document.getElementById('rightBtn').addEventListener('touchstart', function(e) {
            e.preventDefault();
            keys.right = true;
        });
        
        document.getElementById('upBtn').addEventListener('touchstart', function(e) {
            e.preventDefault();
            keys.up = true;
        });
        
        document.getElementById('downBtn').addEventListener('touchstart', function(e) {
            e.preventDefault();
            keys.down = true;
        });
        
        // Keyboard controls
        document.addEventListener('keydown', function(e) {
            if (e.keyCode === 37) keys.left = true;
            if (e.keyCode === 39) keys.right = true;
            if (e.keyCode === 40) keys.down = true;
            if (e.keyCode === 38) keys.up = true;
            if (e.keyCode === 32) hardDrop();
        });
        
        // Canvas interaction
        function handleCanvasInteraction() {
            if (gameOver) {
                startGame();
            }
        }
        
        canvas.addEventListener('click', function() {
            handleCanvasInteraction();
        });
        
        canvas.addEventListener('touchend', function(e) {
            e.preventDefault();
            handleCanvasInteraction();
        });
        
        startGame();
        requestAnimationFrame(gameLoop);
    </script>
</body>
</html>
```