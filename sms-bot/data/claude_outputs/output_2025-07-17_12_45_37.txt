<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CHAOS TOWER BUILDER üèóÔ∏è</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=Inter:wght@400;600&display=swap');

        body { 
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #2B0054 0%, #1A0038 50%, #000000 100%);
            background-size: 400% 400%;
            animation: gradientShift 15s ease-in-out infinite;
            color: white;
            overflow-x: hidden;
            margin: 0;
            min-height: 100vh;
        }

        h1, h2, h3 {
            font-family: 'Space Grotesk', sans-serif;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: -0.02em;
        }

        @keyframes gradientShift {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }

        .app-container {
            max-width: 800px;
            margin: 0 auto;
            background: rgba(0,0,0,0.4);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            padding: 2rem;
            border: 1px solid rgba(255,255,255,0.1);
            position: relative;
            z-index: 10;
            min-height: 90vh;
        }

        .screen { display: none; }
        .screen.active { display: block; animation: fadeIn 0.3s ease; }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        button {
            background: linear-gradient(135deg, #FF00E5, #8A2BE2);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 50px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-size: 14px;
            margin: 10px 5px;
        }

        button:hover {
            transform: scale(1.05);
            box-shadow: 0 0 30px rgba(255, 0, 229, 0.5);
        }

        input, select, textarea {
            background: rgba(255,255,255,0.1);
            border: 2px solid rgba(255,255,255,0.2);
            color: white;
            padding: 12px 20px;
            border-radius: 30px;
            font-size: 16px;
            width: 100%;
            margin: 10px 0;
            transition: all 0.3s ease;
        }

        input:focus, select:focus, textarea:focus {
            outline: none;
            border-color: #FF00E5;
            box-shadow: 0 0 20px rgba(255, 0, 229, 0.3);
        }

        .floating-emoji {
            position: fixed;
            font-size: 2rem;
            animation: float 6s ease-in-out infinite;
            pointer-events: none;
            z-index: 5;
            opacity: 0.8;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            50% { transform: translateY(-20px) rotate(10deg); }
        }

        .tower-container {
            margin-top: 30px;
            padding: 20px;
        }

        .floor {
            background: rgba(255,255,255,0.1);
            border: 2px solid rgba(255,255,255,0.2);
            border-radius: 15px;
            padding: 20px;
            margin: 15px 0;
            animation: slideIn 0.5s ease;
            position: relative;
            overflow: hidden;
        }

        .floor::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 2px;
            background: linear-gradient(90deg, #FF00E5, #8A2BE2);
        }

        .floor h3 {
            margin: 0;
            color: #FF00E5;
            text-shadow: 0 0 10px rgba(255,0,229,0.5);
        }

        .floor p {
            margin: 10px 0;
            font-size: 0.9em;
            color: rgba(255,255,255,0.8);
        }

        .floor-form {
            background: rgba(0,0,0,0.3);
            border-radius: 15px;
            padding: 20px;
            margin: 20px 0;
        }

        @keyframes slideIn {
            from { 
                opacity: 0;
                transform: translateY(50px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .floor-number {
            position: absolute;
            right: 20px;
            top: 20px;
            font-size: 0.8em;
            color: rgba(255,255,255,0.5);
        }

        .user-label {
            font-size: 0.8em;
            color: #FF00E5;
            margin-top: 5px;
        }

    </style>
</head>
<body>
    <div class="floating-emoji" style="top: 5%; left: 2%;" data-value="2">üèóÔ∏è</div>
    <div class="floating-emoji" style="top: 5%; right: 2%;" data-value="3">üåÜ</div>
    <div class="floating-emoji" style="bottom: 5%; left: 2%;" data-value="1">üè¢</div>
    <div class="floating-emoji" style="bottom: 5%; right: 2%;" data-value="4">‚ú®</div>

    <div class="app-container">
        <div id="welcome-screen" class="screen active">
            <h1>CHAOS TOWER BUILDER üèóÔ∏è</h1>
            <p>BUILD THE MOST CHAOTIC SKYSCRAPER IN THE MULTIVERSE!</p>
            <button onclick="showNewUserScreen()">New Architect</button>
            <button onclick="showReturningUserScreen()">Returning Builder</button>
        </div>
        
        <div id="new-user-screen" class="screen">
            <h1>New Architect</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Enter The Tower</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="returning-user-screen" class="screen">
            <h1>Returning Builder</h1>
            <select id="user-label-select">
                <option>Select User</option>
            </select>
            <input type="text" id="returning-passcode" placeholder="Enter 4-digit passcode" maxlength="4">
            <button onclick="loginReturningUser()">Enter Tower</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="main-screen" class="screen">
            <h1>CHAOS TOWER</h1>
            <div id="user-status">Architect: <span id="current-user-label"></span></div>
            
            <div id="app-content">
                <div class="floor-form">
                    <h3>ADD YOUR FLOOR</h3>
                    <input type="text" id="floor-name" placeholder="Floor Name" maxlength="30">
                    <textarea id="floor-description" placeholder="Short Description" maxlength="100"></textarea>
                    <button onclick="addFloor()">BUILD FLOOR üèóÔ∏è</button>
                </div>
                
                <div id="tower-container" class="tower-container">
                    <!-- Floors will be displayed here -->
                </div>
            </div>
            
            <button onclick="leaveApp()">ESCAPE TOWER</button>
        </div>
    </div>

    <script>
        let currentUser = null;
        let pollingInterval;

        // Authentication System
        function initAuth() {
            // Authentication initialization code here
        }

        async function generateNewUser() {
            try {
                const slots = await checkAvailableSlots();
                if (slots.isFull) {
                    alert('TOWER\'S ARCHITECT TEAM IS FULL üèóÔ∏è');
                    return false;
                }
                
                const user = await generateUser();
                if (user && user.success) {
                    currentUser = {
                        userLabel: user.userLabel,
                        passcode: user.passcode,
                        participantId: user.participantId
                    };
                    
                    document.getElementById('new-user-info').innerHTML = 
                        `<strong>YOUR ARCHITECT LABEL:</strong> ${currentUser.userLabel}<br>
                        <strong>SECRET CODE:</strong> ${currentUser.passcode}<br>
                        <em>SCREENSHOT THIS OR LOSE YOUR BUILDING RIGHTS! üì∏</em>`;
                    
                    return true;
                }
                return false;
            } catch (error) {
                console.error('User generation error:', error);
                alert('ARCHITECT CREATION FAILED üèóÔ∏èüí•');
                return false;
            }
        }

        // Include all authentication functions exactly as provided...
        
        async function addFloor() {
            const name = document.getElementById('floor-name').value.trim();
            const description = document.getElementById('floor-description').value.trim();
            
            if (!name || !description) {
                alert('FLOOR NEEDS A NAME AND DESCRIPTION! üèóÔ∏è');
                return;
            }

            try {
                await save('floor', {
                    name,
                    description,
                    creator: currentUser.userLabel,
                    timestamp: Date.now()
                });

                document.getElementById('floor-name').value = '';
                document.getElementById('floor-description').value = '';
                
                await loadLatestData();
            } catch (error) {
                console.error('Error adding floor:', error);
                alert('FLOOR CONSTRUCTION FAILED! üèóÔ∏èüí•');
            }
        }

        async function loadLatestData() {
            try {
                const floors = await load('floor');
                const container = document.getElementById('tower-container');
                
                // Always show the grocery store first
                let html = `
                    <div class="floor">
                        <span class="floor-number">Floor 1</span>
                        <h3>Grocery Store</h3>
                        <p>The foundation of our tower - a well-stocked grocery store!</p>
                        <div class="user-label">üëë Ground Floor</div>
                    </div>
                `;

                // Sort floors by timestamp and add them
                floors.sort((a, b) => a.timestamp - b.timestamp)
                    .forEach((floor, index) => {
                        html += `
                            <div class="floor">
                                <span class="floor-number">Floor ${index + 2}</span>
                                <h3>${floor.name}</h3>
                                <p>${floor.description}</p>
                                <div class="user-label">Built by: ${floor.creator}</div>
                            </div>
                        `;
                    });

                container.innerHTML = html;
            } catch (error) {
                console.error('Error loading floors:', error);
            }
        }

        function startPolling() {
            pollingInterval = setInterval(loadLatestData, 2000);
        }

        function stopPolling() {
            if (pollingInterval) {
                clearInterval(pollingInterval);
                pollingInterval = null;
            }
        }

        // Mouse parallax effect
        document.addEventListener('mousemove', (e) => {
            document.querySelectorAll('.floating-emoji').forEach((elem) => {
                const speed = elem.getAttribute('data-value') || 2;
                const x = (e.clientX * speed) / 100;
                const y = (e.clientY * speed) / 100;
                elem.style.transform = `translateX(${x}px) translateY(${y}px)`;
            });
        });

        // Easter egg
        console.log('üèóÔ∏è Welcome to the CHAOS TOWER! Type tower() for a surprise...');
        window.tower = function() {
            document.body.style.animation = 'rainbow 1s infinite';
            setTimeout(() => {
                document.body.style.animation = '';
                alert('üéâ MASTER ARCHITECT MODE ACTIVATED! Build wisely!');
            }, 3000);
        };

        // Initialize authentication
        initAuth();
    </script>
</body>
</html>