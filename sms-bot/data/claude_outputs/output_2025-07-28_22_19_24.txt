```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0">
    <title>Emoji Tetris</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            background: linear-gradient(135deg, #1a1a2e, #16213e);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            font-family: Arial, sans-serif;
            overflow: hidden;
            touch-action: none;
        }
        #gameContainer {
            position: relative;
            width: 100%;
            height: calc(100vh - 120px);
        }
        #gameCanvas {
            background: #0f3460;
            display: block;
        }
        #controls {
            position: fixed;
            bottom: 0;
            width: 100%;
            height: 120px;
            background: rgba(0, 0, 0, 0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        .d-pad {
            display: grid;
            grid-template-columns: repeat(3, 60px);
            grid-template-rows: repeat(3, 60px);
            gap: 5px;
        }
        .d-pad button {
            width: 60px;
            height: 60px;
            background: rgba(255, 255, 255, 0.2);
            border: 2px solid #fff;
            border-radius: 10px;
            color: white;
            font-size: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
        }
        .d-pad button:active {
            background: rgba(255, 255, 255, 0.4);
        }
        #up { grid-column: 2; grid-row: 1; }
        #left { grid-column: 1; grid-row: 2; }
        #right { grid-column: 3; grid-row: 2; }
        #down { grid-column: 2; grid-row: 3; }
        .screen {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background: rgba(15, 52, 96, 0.9);
            color: white;
            text-align: center;
            z-index: 2000;
        }
        #gameScreen { display: none; }
        #endScreen { display: none; }
        h1 {
            font-size: 48px;
            margin: 0 0 20px;
        }
        p {
            font-size: 24px;
            margin: 10px 0;
            max-width: 80%;
        }
        button {
            background: #e94560;
            color: white;
            border: none;
            padding: 15px 30px;
            font-size: 24px;
            border-radius: 10px;
            margin-top: 20px;
            cursor: pointer;
        }
        button:active {
            background: #ff6b81;
        }
        #scoreDisplay {
            position: absolute;
            top: 20px;
            left: 20px;
            font-size: 24px;
            color: white;
            z-index: 100;
        }
    </style>
</head>
<body>
    <div id="gameContainer">
        <canvas id="gameCanvas"></canvas>
        <div id="scoreDisplay">Score: 0</div>
        
        <div id="startScreen" class="screen">
            <h1>üß± Emoji Tetris</h1>
            <p>Stack the blocks! üéØ</p>
            <p>‚Üê ‚Üí Move | ‚Üë Rotate | ‚Üì Drop</p>
            <button id="startButton">Play Game</button>
        </div>
        
        <div id="gameScreen" class="screen">
            <div id="score">Score: 0</div>
        </div>
        
        <div id="endScreen" class="screen">
            <h1>Game Over!</h1>
            <p>Your score: <span id="finalScore">0</span></p>
            <button id="restartButton">Play Again</button>
        </div>
    </div>

    <div id="controls">
        <div class="d-pad">
            <button id="up">‚Üë</button>
            <button id="left">‚Üê</button>
            <button id="right">‚Üí</button>
            <button id="down">‚Üì</button>
        </div>
    </div>

    <script>
        (function() {
            var canvas = document.getElementById('gameCanvas');
            var ctx = canvas.getContext('2d');
            var startScreen = document.getElementById('startScreen');
            var gameScreen = document.getElementById('gameScreen');
            var endScreen = document.getElementById('endScreen');
            var startButton = document.getElementById('startButton');
            var restartButton = document.getElementById('restartButton');
            var scoreDisplay = document.getElementById('scoreDisplay');
            var finalScoreDisplay = document.getElementById('finalScore');
            
            var dpr = window.devicePixelRatio || 1;
            var controlsHeight = 120;
            var canvasWidth = window.innerWidth * dpr;
            var canvasHeight = (window.innerHeight - controlsHeight) * dpr;
            
            canvas.width = canvasWidth;
            canvas.height = canvasHeight;
            canvas.style.width = window.innerWidth + 'px';
            canvas.style.height = (window.innerHeight - controlsHeight) + 'px';
            
            var blockSize = Math.floor(canvasWidth / 10);
            var gridWidth = 10;
            var gridHeight = 20;
            var offsetX = Math.floor((canvasWidth - gridWidth * blockSize) / 2);
            var offsetY = Math.floor((canvasHeight - gridHeight * blockSize) / 2);
            
            var grid = [];
            for (var y = 0; y < gridHeight; y++) {
                grid[y] = [];
                for (var x = 0; x < gridWidth; x++) {
                    grid[y][x] = 0;
                }
            }
            
            var tetrominoes = [
                { shape: [[1,1,1,1]], color: '#00f0f0' }, // I
                { shape: [[1,1],[1,1]], color: '#f0f000' }, // O
                { shape: [[0,1,0],[1,1,1]], color: '#a000f0' }, // T
                { shape: [[0,1,1],[1,1,0]], color: '#00f000' }, // S
                { shape: [[1,1,0],[0,1,1]], color: '#f00000' }, // Z
                { shape: [[1,0,0],[1,1,1]], color: '#0000f0' }, // J
                { shape: [[0,0,1],[1,1,1]], color: '#f0a000' }  // L
            ];
            
            var currentPiece = null;
            var score = 0;
            var gameOver = false;
            var dropInterval = 1000;
            var lastTime = 0;
            var dropCounter = 0;
            
            function createPiece() {
                var rand = Math.floor(Math.random() * tetrominoes.length);
                return {
                    shape: tetrominoes[rand].shape,
                    color: tetrominoes[rand].color,
                    x: Math.floor(gridWidth / 2) - 1,
                    y: 0
                };
            }
            
            function drawBlock(x, y, color) {
                ctx.fillStyle = color;
                ctx.fillRect(offsetX + x * blockSize, offsetY + y * blockSize, blockSize - 1, blockSize - 1);
            }
            
            function drawGrid() {
                for (var y = 0; y < gridHeight; y++) {
                    for (var x = 0; x < gridWidth; x++) {
                        if (grid[y][x]) {
                            drawBlock(x, y, grid[y][x]);
                        }
                    }
                }
            }
            
            function drawPiece() {
                if (!currentPiece) return;
                for (var y = 0; y < currentPiece.shape.length; y++) {
                    for (var x = 0; x < currentPiece.shape[y].length; x++) {
                        if (currentPiece.shape[y][x]) {
                            drawBlock(currentPiece.x + x, currentPiece.y + y, currentPiece.color);
                        }
                    }
                }
            }
            
            function rotatePiece() {
                if (!currentPiece) return;
                var originalShape = currentPiece.shape;
                var rows = originalShape.length;
                var cols = originalShape[0].length;
                var newShape = [];
                for (var x = 0; x < cols; x++) {
                    newShape[x] = [];
                    for (var y = 0; y < rows; y++) {
                        newShape[x][y] = originalShape[rows - 1 - y][x];
                    }
                }
                var original = currentPiece.shape;
                currentPiece.shape = newShape;
                if (collision()) {
                    currentPiece.shape = original;
                }
            }
            
            function collision() {
                if (!currentPiece) return false;
                for (var y = 0; y < currentPiece.shape.length; y++) {
                    for (var x = 0; x < currentPiece.shape[y].length; x++) {
                        if (!currentPiece.shape[y][x]) continue;
                        var newX = currentPiece.x + x;
                        var newY = currentPiece.y + y;
                        if (newX < 0 || newX >= gridWidth || newY >= gridHeight) {
                            return true;
                        }
                        if (newY >= 0 && grid[newY][newX]) {
                            return true;
                        }
                    }
                }
                return false;
            }
            
            function mergePiece() {
                if (!currentPiece) return;
                for (var y = 0; y < currentPiece.shape.length; y++) {
                    for (var x = 0; x < currentPiece.shape[y].length; x++) {
                        if (currentPiece.shape[y][x]) {
                            var gridY = currentPiece.y + y;
                            if (gridY < 0) {
                                gameOver = true;
                                return;
                            }
                            grid[gridY][currentPiece.x + x] = currentPiece.color;
                        }
                    }
                }
            }
            
            function clearLines() {
                var linesCleared = 0;
                for (var y = gridHeight - 1; y >= 0; y--) {
                    var isLineComplete = true;
                    for (var x = 0; x < gridWidth; x++) {
                        if (!grid[y][x]) {
                            isLineComplete = false;
                            break;
                        }
                    }
                    if (isLineComplete) {
                        for (var row = y; row > 0; row--) {
                            for (var col = 0; col < gridWidth; col++) {
                                grid[row][col] = grid[row-1][col];
                            }
                        }
                        for (var col = 0; col < gridWidth; col++) {
                            grid[0][col] = 0;
                        }
                        linesCleared++;
                        y++;
                    }
                }
                if (linesCleared > 0) {
                    score += linesCleared * 100;
                    if (linesCleared === 4) score += 400; //_bonus for tetris
                    scoreDisplay.textContent = 'Score: ' + score;
                    dropInterval = Math.max(100, 1000 - Math.floor(score / 500) * 100);
                }
            }
            
            function movePiece(dir) {
                if (!currentPiece) return;
                currentPiece.x += dir;
                if (collision()) {
                    currentPiece.x -= dir;
                }
            }
            
            function dropPiece() {
                if (!currentPiece) return;
                currentPiece.y++;
                if (collision()) {
                    currentPiece.y--;
                    mergePiece();
                    clearLines();
                    currentPiece = createPiece();
                    if (collision()) {
                        gameOver = true;
                    }
                }
            }
            
            function hardDrop() {
                while (!collision()) {
                    currentPiece.y++;
                }
                currentPiece.y--;
                dropPiece();
            }
            
            function draw() {
                ctx.clearRect(0, 0, canvasWidth, canvasHeight);
                drawGrid();
                drawPiece();
            }
            
            function update(time) {
                if (lastTime === 0) {
                    lastTime = time;
                }
                var deltaTime = time - lastTime;
                lastTime = time;
                
                dropCounter += deltaTime;
                if (dropCounter > dropInterval) {
                    dropPiece();
                    dropCounter = 0;
                }
                
                if (gameOver) {
                    showEndScreen();
                    return;
                }
                
                draw();
                requestAnimationFrame(update);
            }
            
            function startGame() {
                startScreen.style.display = 'none';
                gameScreen.style.display = 'flex';
                endScreen.style.display = 'none';
                
                // Reset game state
                for (var y = 0; y < gridHeight; y++) {
                    for (var x = 0; x < gridWidth; x++) {
                        grid[y][x] = 0;
                    }
                }
                score = 0;
                gameOver = false;
                dropInterval = 1000;
                scoreDisplay.textContent = 'Score: 0';
                
                currentPiece = createPiece();
                lastTime = 0;
                dropCounter = 0;
                
                requestAnimationFrame(update);
            }
            
            function showEndScreen() {
                gameScreen.style.display = 'none';
                endScreen.style.display = 'flex';
                finalScoreDisplay.textContent = score;
            }
            
            // Controls
            document.getElementById('up').addEventListener('click', rotatePiece);
            document.getElementById('left').addEventListener('click', function() { movePiece(-1); });
            document.getElementById('right').addEventListener('click', function() { movePiece(1); });
            document.getElementById('down').addEventListener('click', hardDrop);
            
            startButton.addEventListener('click', startGame);
            restartButton.addEventListener('click', startGame);
            
            // Keyboard controls
            document.addEventListener('keydown', function(e) {
                if (gameScreen.style.display === 'flex') {
                    switch(e.keyCode) {
                        case 37: movePiece(-1); break; // Left
                        case 39: movePiece(1); break;  // Right
                        case 40: hardDrop(); break;    // Down
                        case 38: rotatePiece(); break; // Up
                    }
                }
            });
        })();
    </script>
</body>
</html>
```