```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0">
  <title>Tetris</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: linear-gradient(to bottom, #1a1a2e, #16213e);
      font-family: sans-serif;
      touch-action: none;
      overflow: hidden;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
      color: white;
    }
    canvas {
      display: block;
      background: #0f3460;
    }
    #controls {
      position: fixed;
      bottom: 0;
      width: 100%;
      height: 120px;
      background: rgba(0, 0, 0, 0.3);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
    }
    .btn {
      background: rgba(255, 255, 255, 0.2);
      border: 2px solid white;
      border-radius: 50%;
      width: 60px;
      height: 60px;
      margin: 10px;
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: 24px;
      color: white;
      user-select: none;
      cursor: pointer;
    }
    .btn:active {
      background: rgba(255, 255, 255, 0.4);
    }
    .screen {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      background: rgba(15, 52, 96, 0.9);
      z-index: 2000;
    }
    #gameScreen { display: none; }
    #endScreen { display: none; }
    button {
      background: #e94560;
      border: none;
      padding: 15px 30px;
      font-size: 18px;
      color: white;
      border-radius: 30px;
      margin-top: 20px;
      cursor: pointer;
    }
    h1 { font-size: 48px; margin: 0; }
    h2 { font-size: 36px; margin: 10px 0; }
    p { font-size: 20px; max-width: 80%; text-align: center; }
  </style>
</head>
<body>
  <div id="introScreen" class="screen">
    <h1>üß± TETRIS</h1>
    <p>Stack the blocks and clear lines!</p>
    <button id="startBtn">‚ñ∂Ô∏è Play</button>
  </div>

  <div id="gameScreen" class="screen">
    <canvas id="gameCanvas"></canvas>
    <div id="score">Score: 0</div>
  </div>

  <div id="endScreen" class="screen">
    <h2>üíÄ Game Over</h2>
    <p id="finalScore">Score: 0</p>
    <button id="restartBtn">üîÅ Restart</button>
  </div>

  <div id="controls">
    <div class="btn" id="leftBtn">‚¨ÖÔ∏è</div>
    <div class="btn" id="rotateBtn">üîÑ</div>
    <div class="btn" id="rightBtn">‚û°Ô∏è</div>
    <div class="btn" id="downBtn">‚¨áÔ∏è</div>
  </div>

  <script>
    var canvas = document.getElementById('gameCanvas');
    var ctx = canvas.getContext('2d');
    var scoreElement = document.getElementById('score');
    var finalScoreElement = document.getElementById('finalScore');
    var introScreen = document.getElementById('introScreen');
    var gameScreen = document.getElementById('gameScreen');
    var endScreen = document.getElementById('endScreen');
    var startBtn = document.getElementById('startBtn');
    var restartBtn = document.getElementById('restartBtn');

    var leftBtn = document.getElementById('leftBtn');
    var rightBtn = document.getElementById('rightBtn');
    var rotateBtn = document.getElementById('rotateBtn');
    var downBtn = document.getElementById('downBtn');

    var dpr = window.devicePixelRatio || 1;
    var controlsHeight = 120;
    var cols = 10;
    var rows = 20;
    var blockSize;
    var grid = [];
    var score = 0;
    var dropInterval = 1000;
    var lastTime = 0;
    var dropCounter = 0;

    var currentPiece = null;
    var nextPiece = null;

    var pieces = [
      { shape: [[1,1,1,1]], color: '#00f0f0' }, // I
      { shape: [[1,1],[1,1]], color: '#f0f000' }, // O
      { shape: [[0,1,0],[1,1,1]], color: '#a000f0' }, // T
      { shape: [[0,1,1],[1,1,0]], color: '#00f000' }, // S
      { shape: [[1,1,0],[0,1,1]], color: '#f00000' }, // Z
      { shape: [[1,0,0],[1,1,1]], color: '#0000f0' }, // J
      { shape: [[0,0,1],[1,1,1]], color: '#f0a000' }  // L
    ];

    function resizeCanvas() {
      var width = window.innerWidth;
      var height = window.innerHeight - controlsHeight;
      canvas.width = width * dpr;
      canvas.height = height * dpr;
      canvas.style.width = width + 'px';
      canvas.style.height = height + 'px';
      ctx.scale(dpr, dpr);
      blockSize = Math.min(width / cols, height / rows);
    }

    function createGrid() {
      grid = [];
      for (var y = 0; y < rows; y++) {
        grid.push(Array(cols).fill(0));
      }
    }

    function getRandomPiece() {
      return JSON.parse(JSON.stringify(pieces[Math.floor(Math.random() * pieces.length)]));
    }

    function createPiece() {
      var piece = nextPiece || getRandomPiece();
      nextPiece = getRandomPiece();
      currentPiece = piece;
      currentPiece.x = Math.floor(cols / 2) - Math.floor(piece.shape[0].length / 2);
      currentPiece.y = 0;
    }

    function drawBlock(x, y, color) {
      ctx.fillStyle = color;
      ctx.fillRect(x * blockSize, y * blockSize, blockSize, blockSize);
      ctx.strokeStyle = 'black';
      ctx.strokeRect(x * blockSize, y * blockSize, blockSize, blockSize);
    }

    function drawGrid() {
      for (var y = 0; y < rows; y++) {
        for (var x = 0; x < cols; x++) {
          if (grid[y][x]) {
            drawBlock(x, y, grid[y][x]);
          }
        }
      }
    }

    function drawPiece() {
      if (!currentPiece) return;
      for (var y = 0; y < currentPiece.shape.length; y++) {
        for (var x = 0; x < currentPiece.shape[y].length; x++) {
          if (currentPiece.shape[y][x]) {
            drawBlock(currentPiece.x + x, currentPiece.y + y, currentPiece.color);
          }
        }
      }
    }

    function rotatePiece() {
      if (!currentPiece) return;
      var originalShape = currentPiece.shape;
      var newShape = [];
      var size = originalShape.length;
      for (var i = 0; i < size; i++) {
        newShape.push([]);
        for (var j = 0; j < size; j++) {
          newShape[i].push(originalShape[size - 1 - j][i]);
        }
      }
      currentPiece.shape = newShape;
      if (checkCollision()) {
        currentPiece.shape = originalShape;
      }
    }

    function checkCollision() {
      for (var y = 0; y < currentPiece.shape.length; y++) {
        for (var x = 0; x < currentPiece.shape[y].length; x++) {
          if (!currentPiece.shape[y][x]) continue;
          var newX = currentPiece.x + x;
          var newY = currentPiece.y + y;
          if (newX < 0 || newX >= cols || newY >= rows) return true;
          if (newY >= 0 && grid[newY][newX]) return true;
        }
      }
      return false;
    }

    function mergePiece() {
      for (var y = 0; y < currentPiece.shape.length; y++) {
        for (var x = 0; x < currentPiece.shape[y].length; x++) {
          if (!currentPiece.shape[y][x]) continue;
          if (currentPiece.y + y < 0) {
            return true; // Game over
          }
          grid[currentPiece.y + y][currentPiece.x + x] = currentPiece.color;
        }
      }
      return false;
    }

    function clearLines() {
      var lines = 0;
      for (var y = rows - 1; y >= 0; y--) {
        if (grid[y].every(function(cell) { return cell !== 0; })) {
          grid.splice(y, 1);
          grid.unshift(Array(cols).fill(0));
          lines++;
          y++;
        }
      }
      if (lines > 0) {
        score += lines * 100;
        scoreElement.textContent = 'Score: ' + score;
        dropInterval = Math.max(100, 1000 - Math.floor(score / 500) * 100);
      }
    }

    function movePiece(dx, dy) {
      if (!currentPiece) return;
      currentPiece.x += dx;
      currentPiece.y += dy;
      if (checkCollision()) {
        currentPiece.x -= dx;
        currentPiece.y -= dy;
        if (dy > 0) {
          var gameOver = mergePiece();
          clearLines();
          createPiece();
          if (checkCollision() || gameOver) {
            endGame();
          }
        }
        return false;
      }
      return true;
    }

    function dropPiece() {
      if (!movePiece(0, 1)) return;
    }

    function update(time) {
      if (!lastTime) lastTime = time;
      var deltaTime = time - lastTime;
      lastTime = time;
      dropCounter += deltaTime;
      if (dropCounter > dropInterval) {
        dropPiece();
        dropCounter = 0;
      }
      draw();
      requestAnimationFrame(update);
    }

    function draw() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      drawGrid();
      drawPiece();
    }

    function endGame() {
      finalScoreElement.textContent = 'Score: ' + score;
      gameScreen.style.display = 'none';
      endScreen.style.display = 'flex';
    }

    function startGame() {
      introScreen.style.display = 'none';
      gameScreen.style.display = 'flex';
      score = 0;
      dropInterval = 1000;
      scoreElement.textContent = 'Score: 0';
      createGrid();
      nextPiece = getRandomPiece();
      createPiece();
      lastTime = 0;
      dropCounter = 0;
      requestAnimationFrame(update);
    }

    startBtn.addEventListener('click', startGame);
    restartBtn.addEventListener('click', startGame);

    leftBtn.addEventListener('touchstart', function(e) { e.preventDefault(); movePiece(-1, 0); });
    rightBtn.addEventListener('touchstart', function(e) { e.preventDefault(); movePiece(1, 0); });
    rotateBtn.addEventListener('touchstart', function(e) { e.preventDefault(); rotatePiece(); });
    downBtn.addEventListener('touchstart', function(e) { e.preventDefault(); movePiece(0, 1); });

    leftBtn.addEventListener('mousedown', function() { movePiece(-1, 0); });
    rightBtn.addEventListener('mousedown', function() { movePiece(1, 0); });
    rotateBtn.addEventListener('mousedown', function() { rotatePiece(); });
    downBtn.addEventListener('mousedown', function() { movePiece(0, 1); });

    document.addEventListener('keydown', function(e) {
      if (e.key === 'ArrowLeft') movePiece(-1, 0);
      if (e.key === 'ArrowRight') movePiece(1, 0);
      if (e.key === 'ArrowDown') movePiece(0, 1);
      if (e.key === 'ArrowUp') rotatePiece();
      if (e.key === ' ') { e.preventDefault(); movePiece(0, 1); }
    });

    window.addEventListener('resize', resizeCanvas);
    resizeCanvas();
  </script>
</body>
</html>
```