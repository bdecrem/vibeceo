<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>WTAF Chat</title>
    <style>
        * {
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: #fefef5;
            color: #333;
            margin: 0;
            padding: 10px;
            font-size: 16px;
        }

        .app-container {
            max-width: 320px;
            margin: 0 auto;
            background: white;
            border: 3px solid #FFD63D;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 8px 8px 0 #C9C2F9;
        }

        h1 {
            color: #FF4B4B;
            font-size: 24px;
            margin: 0 0 20px 0;
            text-transform: uppercase;
            text-align: center;
        }

        button {
            background: #6ECBFF;
            color: white;
            border: none;
            padding: 16px 24px;
            border-radius: 25px;
            font-weight: bold;
            cursor: pointer;
            margin: 8px 0;
            font-size: 16px;
            width: 100%;
            min-height: 44px;
            display: block;
        }

        button:hover {
            background: #5ab8e6;
        }

        button:active {
            transform: scale(0.98);
        }

        input, select {
            background: white;
            border: 2px solid #6ECBFF;
            color: #333;
            padding: 16px;
            border-radius: 8px;
            width: 100%;
            margin: 10px 0;
            font-size: 16px;
            min-height: 44px;
        }

        .screen { display: none; }
        .screen.active { display: block; }

        #messages-container {
            max-height: 400px;
            overflow-y: auto;
            margin: 20px 0;
        }

        .message {
            background: #FFEB63;
            padding: 16px;
            margin: 10px 0;
            border-radius: 8px;
            min-height: 60px;
            word-wrap: break-word;
        }

        .message.other {
            background: #89ECFF;
        }

        .message-meta {
            font-size: 12px;
            color: #666;
            margin-top: 8px;
        }

        #user-status {
            background: #FFD63D;
            padding: 8px 12px;
            border-radius: 4px;
            margin: 10px 0;
            font-size: 14px;
            text-align: center;
        }

        @media (min-width: 600px) {
            body { padding: 20px; }
            .app-container { 
                padding: 30px;
                max-width: 800px;
            }
            
            button {
                width: auto;
                display: inline-block;
                margin: 5px;
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <div id="welcome-screen" class="screen active">
            <h1>WTAF CHAT</h1>
            <p>Chat with up to 5 friends!</p>
            <button onclick="showNewUserScreen()">New User</button>
            <button onclick="showReturningUserScreen()">Returning User</button>
        </div>
        
        <div id="new-user-screen" class="screen">
            <h1>NEW USER</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Register & Enter</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="returning-user-screen" class="screen">
            <h1>RETURNING USER</h1>
            <select id="user-label-select"></select>
            <input type="text" id="returning-passcode" placeholder="4-digit code" maxlength="4">
            <button onclick="loginReturningUser()">Login</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="main-screen" class="screen">
            <h1>WTAF CHAT</h1>
            <div id="user-status">Welcome, <span id="current-user-label"></span>!</div>
            
            <div id="messages-container"></div>
            
            <div id="message-input-container">
                <input type="text" id="message-input" placeholder="Type your message..." maxlength="200">
                <button onclick="sendMessage()">Send</button>
            </div>
            
            <button onclick="showScreen('welcome-screen')">Leave Chat</button>
        </div>
    </div>

    <script>
        let currentUser = null;
        let pollingInterval;

        async function generateNewUser() {
            const slots = await checkAvailableSlots();
            if (slots.isFull) {
                alert('Chat is full! Maximum 5 users.');
                return false;
            }
            
            const user = await generateUser();
            if (user?.success) {
                currentUser = user;
                document.getElementById('new-user-info').innerHTML = 
                    `Your ID: ${user.userLabel}<br>Code: ${user.passcode}<br>Save these!`;
                return true;
            }
            return false;
        }

        async function registerNewUser() {
            if (!currentUser) return;
            
            const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
            if (result?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                enterMainScreen();
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            await generateNewUser();
        }

        async function loginReturningUser() {
            const label = document.getElementById('user-label-select').value;
            const passcode = document.getElementById('returning-passcode').value;
            
            const result = await authenticateUser(label, passcode);
            if (result?.success) {
                currentUser = { userLabel: label, passcode, participantId: result.user.participantId };
                updateZadAuth(label, result.user.participantId);
                enterMainScreen();
            } else {
                alert('Wrong code!');
            }
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            if (screenId !== 'main-screen') stopPolling();
        }

        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const slots = await checkAvailableSlots();
            const select = document.getElementById('user-label-select');
            select.innerHTML = '<option>Select User</option>';
            slots.usedLabels.forEach(label => {
                select.innerHTML += `<option>${label}</option>`;
            });
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            startPolling();
            loadLatestData();
            
            // Add enter key listener for message input
            document.getElementById('message-input').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    sendMessage();
                }
            });
        }

        async function sendMessage() {
            const input = document.getElementById('message-input');
            const message = input.value.trim();
            
            if (message) {
                await save('message', {
                    text: message,
                    created_at: new Date().toISOString()
                });
                
                input.value = '';
                await loadLatestData();
            }
        }

        function startPolling() {
            loadLatestData();
            pollingInterval = setInterval(loadLatestData, 2000);
        }

        function stopPolling() {
            if (pollingInterval) clearInterval(pollingInterval);
        }

        async function loadLatestData() {
            const messages = await load('message');
            
            // Sort messages by creation time
            messages.sort((a, b) => new Date(a.created_at) - new Date(b.created_at));
            
            const container = document.getElementById('messages-container');
            container.innerHTML = messages.map(msg => {
                const isCurrentUser = msg.author === currentUser.userLabel;
                return `
                    <div class="message ${isCurrentUser ? '' : 'other'}">
                        <div class="message-text">${msg.text}</div>
                        <div class="message-meta">
                            ${msg.author} - ${new Date(msg.created_at).toLocaleTimeString()}
                        </div>
                    </div>
                `;
            }).join('');
            
            // Scroll to bottom
            container.scrollTop = container.scrollHeight;
        }

        initAuth();
    </script>
</body>
</html>