<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>Feature Ideas Board</title>
    <style>
    :root {
      --bg: #000000;
      --surface: #0a0a0a;
      --surface-light: #141414;
      --accent: #ff0066;
      --accent-hover: #ff3388;
      --text: #ffffff;
      --text-dim: #666666;
      --border: #1a1a1a;
      
      --space-xs: 8px;
      --space-sm: 12px;
      --space-md: 16px;
      --space-lg: 24px;
      --space-xl: 32px;
    }

    * { 
      box-sizing: border-box; 
      margin: 0;
      padding: 0;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
      background: var(--bg);
      color: var(--text);
      margin: 0;
      padding: 10px;
      font-size: 16px;
      line-height: 1.6;
      -webkit-font-smoothing: antialiased;
    }

    .app-container {
      max-width: 800px;
      margin: 0 auto;
      background: var(--surface);
      border-radius: 16px;
      padding: var(--space-lg);
      position: relative;
      overflow: hidden;
    }

    .app-container::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 2px;
      background: var(--accent);
    }

    h1 {
      font-weight: 900;
      letter-spacing: -0.5px;
      color: var(--text);
      margin: 0 0 var(--space-md) 0;
      text-transform: uppercase;
      font-size: 24px;
    }

    button {
      background: var(--accent);
      color: white;
      border: none;
      padding: 14px 28px;
      border-radius: 8px;
      font-weight: 700;
      cursor: pointer;
      font-size: 16px;
      font-family: inherit;
      transition: all 0.2s ease;
      margin: 8px 0;
      min-height: 44px;
      width: 100%;
      display: block;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    button:hover {
      background: var(--accent-hover);
      transform: translateY(-2px);
    }

    input, select, textarea {
      background: var(--surface-light);
      border: 2px solid var(--border);
      color: var(--text);
      padding: 12px 16px;
      border-radius: 8px;
      width: 100%;
      margin: 10px 0;
      font-size: 16px;
      font-family: inherit;
      min-height: 44px;
    }

    input:focus, select:focus, textarea:focus {
      outline: none;
      border-color: var(--accent);
    }

    .screen { 
      display: none; 
      animation: fadeIn 0.3s ease;
    }

    .screen.active { 
      display: block; 
    }

    .idea-card {
      background: var(--surface-light);
      padding: var(--space-md);
      margin: var(--space-sm) 0;
      border-radius: 8px;
      border: 1px solid var(--border);
    }

    .idea-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: var(--space-xs);
    }

    .idea-author {
      font-weight: 700;
      color: var(--accent);
      font-size: 14px;
      text-transform: uppercase;
    }

    .idea-time {
      font-size: 12px;
      color: var(--text-dim);
    }

    .idea-category {
      display: inline-block;
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 12px;
      background: var(--accent);
      color: white;
      margin-bottom: var(--space-xs);
    }

    .idea-text {
      font-size: 16px;
      margin: var(--space-xs) 0;
    }

    .idea-reactions {
      display: flex;
      gap: var(--space-xs);
      margin-top: var(--space-xs);
    }

    .reaction-btn {
      background: var(--surface);
      border: 1px solid var(--border);
      padding: 4px 8px;
      border-radius: 4px;
      cursor: pointer;
      min-height: 44px;
      width: auto;
      display: inline-flex;
      align-items: center;
      gap: 4px;
    }

    .comments-section {
      margin-top: var(--space-sm);
      padding-top: var(--space-sm);
      border-top: 1px solid var(--border);
    }

    .comment {
      background: var(--surface);
      padding: var(--space-xs);
      margin: var(--space-xs) 0;
      border-radius: 4px;
      font-size: 14px;
    }

    .filters {
      display: flex;
      gap: var(--space-xs);
      margin-bottom: var(--space-md);
      flex-wrap: wrap;
    }

    .filter-btn {
      background: var(--surface-light);
      color: var(--text);
      border: 1px solid var(--border);
      padding: 8px 16px;
      border-radius: 4px;
      cursor: pointer;
      min-height: 44px;
      width: auto;
      margin: 0;
    }

    .filter-btn.active {
      background: var(--accent);
      border-color: var(--accent);
    }

    @media (min-width: 600px) {
      body { 
        padding: 20px; 
      }
      
      .app-container { 
        padding: var(--space-xl); 
      }
      
      button { 
        width: auto; 
        display: inline-block;
        margin: 5px;
      }
    }
    </style>
</head>
<body>
    <div class="app-container">
        <div id="welcome-screen" class="screen active">
            <h1>Feature Ideas Board</h1>
            <p>Share and discuss feature ideas with the team!</p>
            <button onclick="showNewUserScreen()">New User</button>
            <button onclick="showReturningUserScreen()">Returning User</button>
        </div>
        
        <div id="new-user-screen" class="screen">
            <h1>New User</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Register & Enter</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="returning-user-screen" class="screen">
            <h1>Returning User</h1>
            <select id="user-label-select"></select>
            <input type="text" id="returning-passcode" placeholder="4-digit code" maxlength="4">
            <button onclick="loginReturningUser()">Login</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="main-screen" class="screen">
            <h1>Feature Ideas Board</h1>
            <div id="user-status">Welcome, <span id="current-user-label"></span>!</div>
            
            <div class="new-idea-form">
                <input type="text" id="idea-text" placeholder="Share your feature idea..." maxlength="200">
                <select id="idea-category">
                    <option value="UI/UX">UI/UX</option>
                    <option value="Performance">Performance</option>
                    <option value="Security">Security</option>
                    <option value="Analytics">Analytics</option>
                    <option value="Integration">Integration</option>
                    <option value="Other">Other</option>
                </select>
                <button onclick="submitIdea()">Share Idea</button>
            </div>

            <div class="filters">
                <button class="filter-btn active" onclick="setFilter('all')">All</button>
                <button class="filter-btn" onclick="setFilter('top')">Top ðŸ”¥</button>
                <button class="filter-btn" onclick="setFilter('UI/UX')">UI/UX</button>
                <button class="filter-btn" onclick="setFilter('Performance')">Performance</button>
                <button class="filter-btn" onclick="setFilter('Security')">Security</button>
                <button class="filter-btn" onclick="setFilter('Analytics')">Analytics</button>
                <button class="filter-btn" onclick="setFilter('Integration')">Integration</button>
                <button class="filter-btn" onclick="setFilter('Other')">Other</button>
            </div>

            <div id="ideas-container"></div>
            
            <button onclick="showScreen('welcome-screen')">Leave</button>
        </div>
    </div>

    <script>
    let currentUser = null;
    let currentFilter = 'all';

    // Auth boilerplate
    async function generateNewUser() {
      const slots = await checkAvailableSlots();
      if (slots.isFull) {
        alert('App is full!');
        return false;
      }
      
      const user = await generateUser();
      if (user?.success) {
        currentUser = user;
        document.getElementById('new-user-info').innerHTML = 
          `Your ID: ${user.userLabel}<br>Code: ${user.passcode}<br>Save these!`;
        return true;
      }
      return false;
    }

    async function registerNewUser() {
      if (!currentUser) return;
      
      const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
      if (result?.success) {
        updateZadAuth(currentUser.userLabel, currentUser.participantId);
        enterMainScreen();
      }
    }

    async function showNewUserScreen() {
      showScreen('new-user-screen');
      await generateNewUser();
    }

    async function loginReturningUser() {
      const label = document.getElementById('user-label-select').value;
      const passcode = document.getElementById('returning-passcode').value;
      
      const result = await authenticateUser(label, passcode);
      if (result?.success) {
        currentUser = { userLabel: label, passcode, participantId: result.user.participantId };
        updateZadAuth(label, result.user.participantId);
        enterMainScreen();
      } else {
        alert('Wrong code!');
      }
    }

    async function showReturningUserScreen() {
      showScreen('returning-user-screen');
      const slots = await checkAvailableSlots();
      const select = document.getElementById('user-label-select');
      select.innerHTML = '<option>Select User</option>';
      slots.usedLabels.forEach(label => {
        select.innerHTML += `<option>${label}</option>`;
      });
    }

    function showScreen(screenId) {
      document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
      document.getElementById(screenId).classList.add('active');
      if (screenId !== 'main-screen') stopPolling();
    }

    function enterMainScreen() {
      showScreen('main-screen');
      document.getElementById('current-user-label').textContent = currentUser.userLabel;
      startPolling();
      loadLatestData();
    }

    // Polling setup
    let pollingInterval;

    function startPolling() {
      loadLatestData();
      pollingInterval = setInterval(loadLatestData, 2000);
    }

    function stopPolling() {
      if (pollingInterval) clearInterval(pollingInterval);
    }

    // App-specific functions
    async function submitIdea() {
      const text = document.getElementById('idea-text').value.trim();
      const category = document.getElementById('idea-category').value;
      
      if (!text) return;
      
      await save('idea', {
        text,
        category,
        reactions: { 'ðŸ”¥': 0 },
        comments: []
      });
      
      document.getElementById('idea-text').value = '';
      await loadLatestData();
    }

    async function addReaction(ideaId) {
      const ideas = await load('idea');
      const idea = ideas.find(i => i.id === parseInt(ideaId));
      if (idea) {
        const reactions = idea.reactions || {};
        reactions['ðŸ”¥'] = (reactions['ðŸ”¥'] || 0) + 1;
        
        await save('update_task', {
          taskId: parseInt(ideaId),
          updates: { reactions }
        });
        
        await loadLatestData();
      }
    }

    async function addComment(ideaId) {
      const commentText = document.getElementById(`comment-${ideaId}`).value.trim();
      if (!commentText) return;

      const ideas = await load('idea');
      const idea = ideas.find(i => i.id === parseInt(ideaId));
      if (idea) {
        const comments = idea.comments || [];
        comments.push({
          text: commentText,
          author: getCurrentUser().userLabel,
          timestamp: new Date().toISOString()
        });

        await save('update_task', {
          taskId: parseInt(ideaId),
          updates: { comments }
        });

        document.getElementById(`comment-${ideaId}`).value = '';
        await loadLatestData();
      }
    }

    function setFilter(filter) {
      currentFilter = filter;
      document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.classList.toggle('active', btn.textContent.includes(filter));
      });
      loadLatestData();
    }

    async function loadLatestData() {
      const ideas = await load('idea');
      
      // Get latest version of each idea
      const latestIdeas = ideas.reduce((acc, idea) => {
        const existing = acc.find(i => i.id === idea.id);
        if (!existing || new Date(idea.created_at) > new Date(existing.created_at)) {
          if (existing) {
            const index = acc.indexOf(existing);
            acc[index] = idea;
          } else {
            acc.push(idea);
          }
        }
        return acc;
      }, []);

      // Apply filters
      let filtered = latestIdeas;
      if (currentFilter === 'top') {
        filtered = latestIdeas.sort((a, b) => 
          (b.reactions?.['ðŸ”¥'] || 0) - (a.reactions?.['ðŸ”¥'] || 0)
        );
      } else if (currentFilter !== 'all') {
        filtered = latestIdeas.filter(idea => idea.category === currentFilter);
      }

      // Sort by newest first
      filtered.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));

      const container = document.getElementById('ideas-container');
      container.innerHTML = filtered.map(idea => `
        <div class="idea-card">
          <div class="idea-header">
            <span class="idea-author">${idea.author}</span>
            <span class="idea-time">${new Date(idea.created_at).toLocaleString()}</span>
          </div>
          <span class="idea-category">${idea.category}</span>
          <div class="idea-text">${idea.text}</div>
          <div class="idea-reactions">
            <button onclick="addReaction(${idea.id})" class="reaction-btn">
              ðŸ”¥ ${idea.reactions?.['ðŸ”¥'] || 0}
            </button>
          </div>
          <div class="comments-section">
            ${(idea.comments || []).map(comment => `
              <div class="comment">
                <strong>${comment.author}:</strong> ${comment.text}
              </div>
            `).join('')}
            <input type="text" id="comment-${idea.id}" placeholder="Add a comment..." maxlength="100">
            <button onclick="addComment(${idea.id})">Comment</button>
          </div>
        </div>
      `).join('');
    }

    initAuth();
    </script>
</body>
</html>