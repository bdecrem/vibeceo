Here's a complete, mobile-friendly Snake game with touch controls and responsive design:

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Snake Game</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            overflow: hidden;
            touch-action: none;
            background-color: #2c3e50;
            display: flex;
            flex-direction: column;
            height: 100vh;
            font-family: Arial, sans-serif;
        }
        
        #gameCanvas {
            background: #34495e;
            touch-action: none;
        }

        .score-container {
            color: white;
            padding: 10px;
            text-align: center;
            font-size: 24px;
        }

        .game-container {
            flex: 1;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .controls {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 20px;
        }

        .control-btn {
            width: 60px;
            height: 60px;
            background: rgba(255,255,255,0.2);
            border: 2px solid white;
            border-radius: 50%;
            touch-action: none;
            display: flex;
            justify-content: center;
            align-items: center;
            color: white;
            font-size: 24px;
            user-select: none;
        }
    </style>
</head>
<body>
    <div class="score-container">Score: <span id="score">0</span></div>
    <div class="game-container">
        <canvas id="gameCanvas"></canvas>
    </div>
    <div class="controls">
        <div class="control-btn" id="leftBtn">←</div>
        <div class="control-btn" id="upBtn">↑</div>
        <div class="control-btn" id="downBtn">↓</div>
        <div class="control-btn" id="rightBtn">→</div>
    </div>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const scoreElement = document.getElementById('score');

        // Game constants
        const GRID_SIZE = 20;
        let CELL_SIZE;
        let GAME_WIDTH;
        let GAME_HEIGHT;

        // Game state
        let snake = [];
        let food = { x: 0, y: 0 };
        let direction = 'right';
        let nextDirection = 'right';
        let score = 0;
        let gameLoop;
        let gameSpeed = 150;
        let isGameOver = false;

        // Initialize game dimensions
        function initializeGame() {
            // Make the game square and responsive
            const minDimension = Math.min(
                window.innerWidth * 0.9,
                (window.innerHeight - 200) * 0.9
            );
            
            GAME_WIDTH = Math.floor(minDimension);
            GAME_HEIGHT = Math.floor(minDimension);
            CELL_SIZE = Math.floor(GAME_WIDTH / GRID_SIZE);

            canvas.width = GAME_WIDTH;
            canvas.height = GAME_HEIGHT;

            // Initialize snake
            snake = [
                { x: 5, y: 10 },
                { x: 4, y: 10 },
                { x: 3, y: 10 }
            ];

            // Place initial food
            placeFood();
        }

        // Place food in random location
        function placeFood() {
            while (true) {
                food = {
                    x: Math.floor(Math.random() * GRID_SIZE),
                    y: Math.floor(Math.random() * GRID_SIZE)
                };
                // Check if food is on snake
                if (!snake.some(segment => segment.x === food.x && segment.y === food.y)) {
                    break;
                }
            }
        }

        // Game update logic
        function update() {
            if (isGameOver) return;

            direction = nextDirection;
            
            // Calculate new head position
            const head = { ...snake[0] };
            switch (direction) {
                case 'up': head.y--; break;
                case 'down': head.y++; break;
                case 'left': head.x--; break;
                case 'right': head.x++; break;
            }

            // Wall collision with wrap-around
            head.x = (head.x + GRID_SIZE) % GRID_SIZE;
            head.y = (head.y + GRID_SIZE) % GRID_SIZE;

            // Self collision check
            if (snake.some(segment => segment.x === head.x && segment.y === head.y)) {
                gameOver();
                return;
            }

            // Add new head
            snake.unshift(head);

            // Check food collision
            if (head.x === food.x && head.y === food.y) {
                score += 10;
                scoreElement.textContent = score;
                placeFood();
                // Increase speed
                if (gameSpeed > 50) {
                    gameSpeed -= 2;
                    clearInterval(gameLoop);
                    gameLoop = setInterval(update, gameSpeed);
                }
            } else {
                // Remove tail if no food eaten
                snake.pop();
            }
        }

        // Render game
        function render() {
            // Clear canvas
            ctx.fillStyle = '#34495e';
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            // Draw snake
            snake.forEach((segment, index) => {
                ctx.fillStyle = index === 0 ? '#2ecc71' : '#27ae60';
                ctx.fillRect(
                    segment.x * CELL_SIZE,
                    segment.y * CELL_SIZE,
                    CELL_SIZE - 1,
                    CELL_SIZE - 1
                );
            });

            // Draw food
            ctx.fillStyle = '#e74c3c';
            ctx.fillRect(
                food.x * CELL_SIZE,
                food.y * CELL_SIZE,
                CELL_SIZE - 1,
                CELL_SIZE - 1
            );

            // Draw game over
            if (isGameOver) {
                ctx.fillStyle = 'rgba(0, 0, 0, 0.75)';
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                ctx.fillStyle = 'white';
                ctx.font = '30px Arial';
                ctx.textAlign = 'center';
                ctx.fillText('Game Over!', canvas.width / 2, canvas.height / 2);
                ctx.font = '20px Arial';
                ctx.fillText('Tap to restart', canvas.width / 2, canvas.height / 2 + 40);
            }
        }

        function gameOver() {
            isGameOver = true;
            clearInterval(gameLoop);
        }

        function startGame() {
            snake = [
                { x: 5, y: 10 },
                { x: 4, y: 10 },
                { x: 3, y: 10 }
            ];
            direction = 'right';
            nextDirection = 'right';
            score = 0;
            scoreElement.textContent = score;
            gameSpeed = 150;
            isGameOver = false;
            placeFood();
            clearInterval(gameLoop);
            gameLoop = setInterval(update, gameSpeed);
        }

        // Control handlers
        function handleDirection(newDirection) {
            const opposites = {
                'up': 'down',
                'down': 'up',
                'left': 'right',
                'right': 'left'
            };
            if (opposites[newDirection] !== direction) {
                nextDirection = newDirection;
            }
        }

        // Touch controls
        document.getElementById('upBtn').addEventListener('touchstart', (e) => {
            e.preventDefault();
            handleDirection('up');
        });
        document.getElementById('downBtn').addEventListener('touchstart', (e) => {
            e.preventDefault();
            handleDirection('down');
        });
        document.getElementById('leftBtn').addEventListener('touchstart', (e) => {
            e.preventDefault();
            handleDirection('left');
        });
        document.getElementById('rightBtn').addEventListener('touchstart', (e) => {
            e.preventDefault();
            handleDirection('right');
        });

        // Keyboard controls
        document.addEventListener('keydown', (e) => {
            switch(e.key) {
                case 'ArrowUp': handleDirection('up'); break;
                case 'ArrowDown': handleDirection('down'); break;
                case 'ArrowLeft': handleDirection('left'); break;
                case 'ArrowRight': handleDirection('right'); break;
            }
        });

        // Restart on tap when game over
        canvas.addEventListener('touchstart', (e) => {
            e.preventDefault();
            if (isGameOver) {
                startGame();
            }
        });

        // Animation loop
        function gameRenderLoop() {
            render();
            requestAnimationFrame(gameRenderLoop);
        }

        // Initialize and start game
        window.addEventListener('resize', initializeGame);
        initializeGame();
        startGame();
        gameRenderLoop();
    </script>
</body>
</html>
```

This Snake game implementation includes:

1. Responsive design that works on all screen sizes
2. Touch controls with virtual buttons
3. Keyboard support for desktop play
4. Score tracking and progressive difficulty
5. Smooth animations using requestAnimationFrame
6. Game over state with tap-to-restart
7. Snake wraps around screen edges
8. Collision detection for self-collision
9. Food spawning that avoids snake body
10. Speed increases as score goes up

Features:
- The snake grows when eating food (red squares)
- Score increases by 10 points per food eaten
- Game speed gradually increases
- Controls are large enough for comfortable mobile play
- Game canvas scales to fit the screen while maintaining aspect ratio
- Clean, modern visual style with contrasting colors
- Smooth movement and responsive controls
- Game over screen with restart functionality

To play:
1. Use the arrow buttons at the bottom of the screen (mobile)
2. Or use keyboard arrow keys (desktop)
3. Guide the snake to eat the red food
4. Avoid hitting yourself
5. Tap/click the screen to restart when game over

The game automatically adjusts to the device screen size and maintains playability on both mobile and desktop devices.