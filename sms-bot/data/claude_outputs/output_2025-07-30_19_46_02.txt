<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>REBEL BLOG</title>
    <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=JetBrains+Mono&display=swap" rel="stylesheet">
    <style>
        /* CHAOS Theme */
        :root {
            --bg: #FCFCF7;
            --border: #FFD63D;
            --shadow: #C9C2F9;
            --text: #0A0A0A;
            --font-primary: 'Space Grotesk', system-ui, sans-serif;
            --font-mono: 'JetBrains Mono', monospace;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            background: var(--bg);
            color: var(--text);
            font-family: var(--font-primary);
            font-size: 16px;
            line-height: 1.6;
            padding: 20px;
        }

        .app-container {
            max-width: 666px;
            margin: 0 auto;
        }

        .screen {
            display: none;
        }

        .screen.active {
            display: block;
        }

        h1, h2 {
            font-weight: 700;
            text-transform: uppercase;
            transform: rotate(-1deg);
            margin-bottom: 1rem;
        }

        .post-card {
            background: var(--bg);
            border: 4px solid var(--border);
            box-shadow: 8px 8px 0 var(--shadow);
            padding: 20px;
            margin-bottom: 2rem;
            transform: rotate(1deg);
            transition: all 0.3s ease;
        }

        .post-card:hover {
            transform: rotate(-1deg) scale(1.01);
        }

        button {
            background: var(--border);
            border: 3px solid var(--text);
            color: var(--text);
            font-family: var(--font-primary);
            font-size: 16px;
            font-weight: 700;
            text-transform: uppercase;
            padding: 12px 24px;
            min-height: 44px;
            cursor: pointer;
            margin: 5px;
            transform: rotate(-1deg);
            transition: all 0.2s ease;
        }

        button:hover {
            transform: rotate(1deg) scale(1.05);
        }

        button:active {
            transform: scale(0.95);
        }

        input, textarea {
            width: 100%;
            padding: 12px;
            margin-bottom: 1rem;
            border: 3px solid var(--text);
            font-family: var(--font-mono);
            font-size: 16px;
            min-height: 44px;
        }

        textarea {
            min-height: 120px;
            resize: vertical;
        }

        .post-actions {
            display: flex;
            gap: 10px;
            justify-content: flex-end;
        }

        .floating-emoji {
            position: fixed;
            bottom: 20px;
            right: 20px;
            font-size: 40px;
            cursor: pointer;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }

        @media (max-width: 768px) {
            .post-actions {
                flex-direction: column;
            }
            
            button {
                width: 100%;
                margin: 5px 0;
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Auth Screens -->
        <div id="welcome-screen" class="screen active">
            <h1>üé≠ REBEL BLOG</h1>
            <p>Write something dangerous...</p>
            <button onclick="showNewUserScreen()">New User</button>
            <button onclick="showReturningUserScreen()">Returning User</button>
        </div>

        <div id="new-user-screen" class="screen">
            <h1>New Rebel</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Start Blogging</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <div id="returning-user-screen" class="screen">
            <h1>Welcome Back</h1>
            <select id="user-label-select"></select>
            <input type="text" id="returning-passcode" placeholder="4-digit code" maxlength="4">
            <button onclick="loginReturningUser()">Enter</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <!-- Main App Screen -->
        <div id="main-screen" class="screen">
            <div id="user-status">REBEL: <span id="current-user-label"></span></div>
            
            <!-- New Post Form -->
            <div class="post-card">
                <h2>New Post</h2>
                <input type="text" id="post-title" placeholder="Post title...">
                <textarea id="post-content" placeholder="Write something rebellious..."></textarea>
                <button onclick="createPost()">PUBLISH üî•</button>
            </div>

            <!-- Posts Container -->
            <div id="posts-container"></div>

            <button onclick="showScreen('welcome-screen')">ESCAPE</button>
        </div>
    </div>

    <div class="floating-emoji" onclick="triggerEmojiRain()">‚úçÔ∏è</div>

    <script>
        let currentUser = null;
        let editingPostId = null;

        // Auth Flow
        async function generateNewUser() {
            const slots = await checkAvailableSlots();
            if (slots.isFull) {
                alert('Rebel headquarters is full!');
                return false;
            }
            
            const user = await generateUser();
            if (user?.success) {
                currentUser = user;
                document.getElementById('new-user-info').innerHTML = 
                    `Your ID: ${user.userLabel}<br>Code: ${user.passcode}<br>SAVE THESE!`;
                return true;
            }
            return false;
        }

        async function registerNewUser() {
            if (!currentUser) return;
            
            const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
            if (result?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                enterMainScreen();
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            await generateNewUser();
        }

        async function loginReturningUser() {
            const label = document.getElementById('user-label-select').value;
            const passcode = document.getElementById('returning-passcode').value;
            
            const result = await authenticateUser(label, passcode);
            if (result?.success) {
                currentUser = { userLabel: label, passcode, participantId: result.user.participantId };
                updateZadAuth(label, result.user.participantId);
                enterMainScreen();
            } else {
                alert('Wrong code, rebel!');
            }
        }

        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const slots = await checkAvailableSlots();
            const select = document.getElementById('user-label-select');
            select.innerHTML = '<option>Select Your ID</option>';
            slots.usedLabels.forEach(label => {
                select.innerHTML += `<option>${label}</option>`;
            });
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            if (screenId !== 'main-screen') stopPolling();
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            startPolling();
            loadLatestData();
        }

        // Blog Functions
        async function createPost() {
            const title = document.getElementById('post-title').value;
            const content = document.getElementById('post-content').value;

            if (!title || !content) {
                alert('Fill in both fields, rebel!');
                return;
            }

            if (editingPostId) {
                await save('post', {
                    id: editingPostId,
                    title,
                    content,
                    edited: true
                });
                editingPostId = null;
            } else {
                await save('post', { title, content });
            }

            document.getElementById('post-title').value = '';
            document.getElementById('post-content').value = '';
            await loadLatestData();
        }

        async function deletePost(postId) {
            if (confirm('Sure about that, rebel?')) {
                await save('post', {
                    id: postId,
                    deleted: true
                });
                await loadLatestData();
            }
        }

        function editPost(post) {
            editingPostId = post.id;
            document.getElementById('post-title').value = post.title;
            document.getElementById('post-content').value = post.content;
            document.getElementById('post-title').focus();
        }

        // Data Loading
        let pollingInterval;

        function startPolling() {
            pollingInterval = setInterval(() => loadLatestData(), 2000);
        }

        function stopPolling() {
            if (pollingInterval) clearInterval(pollingInterval);
        }

        function deduplicate(items, uniqueField = 'id') {
            return items.reduce((acc, item) => {
                const existing = acc.find(i => i[uniqueField] === item[uniqueField]);
                if (!existing || new Date(item.created_at) > new Date(existing.created_at)) {
                    if (existing) {
                        const index = acc.indexOf(existing);
                        acc[index] = item;
                    } else {
                        acc.push(item);
                    }
                }
                return acc;
            }, []);
        }

        async function loadLatestData() {
            const posts = await load('post');
            const myPosts = posts.filter(p => p.author === getUsername());
            const uniquePosts = deduplicate(myPosts);
            const activePosts = uniquePosts.filter(p => !p.deleted);

            document.getElementById('posts-container').innerHTML = activePosts
                .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
                .map(post => `
                    <div class="post-card">
                        <h2>${post.title}</h2>
                        <p>${post.content}</p>
                        <div class="post-actions">
                            <button onclick="editPost(${JSON.stringify(post).replace(/"/g, '&quot;')})">
                                EDIT ‚úèÔ∏è
                            </button>
                            <button onclick="deletePost(${post.id})">
                                DELETE üíÄ
                            </button>
                        </div>
                        ${post.edited ? '<small>‚ú® edited</small>' : ''}
                    </div>
                `).join('');
        }

        // Emoji Rain Easter Egg
        function triggerEmojiRain() {
            const emojis = ['‚úçÔ∏è', 'üìù', 'üé≠', 'üíÄ', 'üî•'];
            for (let i = 0; i < 20; i++) {
                const emoji = document.createElement('div');
                emoji.style.position = 'fixed';
                emoji.style.left = `${Math.random() * 100}vw`;
                emoji.style.top = '-20px';
                emoji.style.fontSize = '24px';
                emoji.textContent = emojis[Math.floor(Math.random() * emojis.length)];
                emoji.style.zIndex = '1000';
                emoji.style.pointerEvents = 'none';
                document.body.appendChild(emoji);

                const animation = emoji.animate([
                    { transform: 'translateY(0)', opacity: 1 },
                    { transform: `translateY(${window.innerHeight + 20}px)`, opacity: 0 }
                ], {
                    duration: 1500 + Math.random() * 1000,
                    easing: 'linear'
                });

                animation.onfinish = () => emoji.remove();
            }
        }

        initAuth();
    </script>
</body>
</html>