```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0">
  <title>Tetris</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: linear-gradient(to right, #1a1a2e, #16213e);
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: flex-start;
      height: 100vh;
      overflow: hidden;
      font-family: sans-serif;
      color: white;
      touch-action: none;
    }
    canvas {
      display: block;
      background: #0f3460;
    }
    #controls {
      position: fixed;
      bottom: 0;
      width: 100%;
      height: 120px;
      background: rgba(0, 0, 0, 0.6);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
    }
    .btn {
      width: 60px;
      height: 60px;
      margin: 5px;
      background: #e94560;
      border: none;
      border-radius: 10px;
      color: white;
      font-size: 24px;
      display: flex;
      align-items: center;
      justify-content: center;
      user-select: none;
      cursor: pointer;
    }
    .screen {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      background: rgba(15, 52, 96, 0.9);
      z-index: 999;
    }
    #gameScreen {
      display: none;
    }
    #endScreen {
      display: none;
    }
    button {
      background: #e94560;
      color: white;
      border: none;
      padding: 15px 30px;
      font-size: 18px;
      border-radius: 10px;
      margin-top: 20px;
      cursor: pointer;
    }
    h1 {
      font-size: 40px;
      margin: 0 0 10px 0;
    }
    p {
      font-size: 20px;
      text-align: center;
      max-width: 80%;
    }
    #scoreDisplay {
      position: absolute;
      top: 20px;
      right: 20px;
      font-size: 24px;
      background: rgba(0,0,0,0.5);
      padding: 10px;
      border-radius: 10px;
    }
  </style>
</head>
<body>
  <div id="introScreen" class="screen">
    <h1>üß± TETRIS</h1>
    <p>Stack the blocks and clear lines! Rotate with UP, move with ARROWS.</p>
    <button id="startBtn">‚ñ∂Ô∏è PLAY</button>
  </div>

  <div id="gameScreen">
    <div id="scoreDisplay">Score: 0</div>
    <canvas id="gameCanvas"></canvas>
  </div>

  <div id="endScreen" class="screen">
    <h1>üí• GAME OVER</h1>
    <p id="finalScore">Score: 0</p>
    <button id="restartBtn">üîÑ PLAY AGAIN</button>
  </div>

  <div id="controls">
    <div class="btn" id="leftBtn">‚¨ÖÔ∏è</div>
    <div class="btn" id="downBtn">‚¨áÔ∏è</div>
    <div class="btn" id="rightBtn">‚û°Ô∏è</div>
    <div class="btn" id="upBtn">üîÑ</div>
  </div>

  <script>
    var canvas = document.getElementById('gameCanvas');
    var ctx = canvas.getContext('2d');
    var scoreDisplay = document.getElementById('scoreDisplay');
    var finalScoreDisplay = document.getElementById('finalScore');
    var introScreen = document.getElementById('introScreen');
    var gameScreen = document.getElementById('gameScreen');
    var endScreen = document.getElementById('endScreen');
    var startBtn = document.getElementById('startBtn');
    var restartBtn = document.getElementById('restartBtn');
    var leftBtn = document.getElementById('leftBtn');
    var rightBtn = document.getElementById('rightBtn');
    var downBtn = document.getElementById('downBtn');
    var upBtn = document.getElementById('upBtn');

    var controlsHeight = 120;
    var COLS = 10;
    var ROWS = 20;
    var blockSize;
    var grid;
    var score = 0;
    var currentPiece;
    var dropCounter = 0;
    var dropInterval = 1000;
    var lastTime = 0;
    var gameOver = false;

    var colors = [
      null,
      '#FF0D72', // I
      '#0DC2FF', // J
      '#0DFF72', // L
      '#F538FF', // O
      '#FF8E0D', // S
      '#FFE138', // T
      '#3877FF'  // Z
    ];

    var pieces = [
      { shape: [[0,0,0,0], [1,1,1,1], [0,0,0,0], [0,0,0,0]], color: 1 }, // I
      { shape: [[1,0,0], [1,1,1], [0,0,0]], color: 2 }, // J
      { shape: [[0,0,1], [1,1,1], [0,0,0]], color: 3 }, // L
      { shape: [[1,1], [1,1]], color: 4 }, // O
      { shape: [[0,1,1], [1,1,0], [0,0,0]], color: 5 }, // S
      { shape: [[0,1,0], [1,1,1], [0,0,0]], color: 6 }, // T
      { shape: [[1,1,0], [0,1,1], [0,0,0]], color: 7 }  // Z
    ];

    function createGrid() {
      return Array.from(Array(ROWS), function() { return Array(COLS).fill(0); });
    }

    function drawMatrix(matrix, offset) {
      matrix.forEach(function(row, y) {
        row.forEach(function(value, x) {
          if (value !== 0) {
            ctx.fillStyle = colors[value];
            ctx.fillRect((x + offset.x) * blockSize, (y + offset.y) * blockSize, blockSize, blockSize);
            ctx.strokeStyle = '#000';
            ctx.strokeRect((x + offset.x) * blockSize, (y + offset.y) * blockSize, blockSize, blockSize);
          }
        });
      });
    }

    function draw() {
      ctx.fillStyle = '#0f3460';
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      drawMatrix(grid, {x: 0, y: 0});
      drawMatrix(currentPiece.shape, currentPiece.pos);
    }

    function merge(grid, piece) {
      piece.shape.forEach(function(row, y) {
        row.forEach(function(value, x) {
          if (value !== 0) {
            grid[y + piece.pos.y][x + piece.pos.x] = piece.color;
          }
        });
      });
    }

    function rotate(matrix) {
      var rotated = [];
      for (var i = 0; i < matrix[0].length; i++) {
        rotated.push([]);
        for (var j = matrix.length - 1; j >= 0; j--) {
          rotated[i].push(matrix[j][i]);
        }
      }
      return rotated;
    }

    function collide(grid, piece) {
      var shape = piece.shape;
      var pos = piece.pos;
      for (var y = 0; y < shape.length; y++) {
        for (var x = 0; x < shape[y].length; x++) {
          if (shape[y][x] !== 0 &&
             (grid[y + pos.y] &&
              grid[y + pos.y][x + pos.x]) !== 0) {
            return true;
          }
        }
      }
      return false;
    }

    function sweep() {
      var lineCount = 0;
      outer: for (var y = grid.length - 1; y >= 0; y--) {
        for (var x = 0; x < grid[y].length; x++) {
          if (grid[y][x] === 0) {
            continue outer;
          }
        }
        var row = grid.splice(y, 1)[0].fill(0);
        grid.unshift(row);
        lineCount++;
        y++;
      }
      if (lineCount > 0) {
        score += lineCount * 100;
        if (score % 500 === 0) {
          dropInterval = Math.max(100, dropInterval - 100);
        }
        scoreDisplay.textContent = 'Score: ' + score;
      }
    }

    function playerReset() {
      var rand = Math.floor(Math.random() * pieces.length);
      currentPiece = {
        pos: {x: Math.floor(COLS/2) - 1, y: 0},
        shape: pieces[rand].shape,
        color: pieces[rand].color
      };
      if (collide(grid, currentPiece)) {
        gameOver = true;
        endScreen.style.display = 'flex';
        finalScoreDisplay.textContent = 'Score: ' + score;
      }
    }

    function playerMove(dir) {
      currentPiece.pos.x += dir;
      if (collide(grid, currentPiece)) {
        currentPiece.pos.x -= dir;
      }
    }

    function playerDrop() {
      currentPiece.pos.y++;
      if (collide(grid, currentPiece)) {
        currentPiece.pos.y--;
        merge(grid, currentPiece);
        sweep();
        playerReset();
      }
      dropCounter = 0;
    }

    function playerRotate() {
      var originalShape = currentPiece.shape;
      currentPiece.shape = rotate(currentPiece.shape);
      if (collide(grid, currentPiece)) {
        currentPiece.shape = originalShape;
      }
    }

    function update(time) {
      if (gameOver) return;
      var deltaTime = time - lastTime;
      lastTime = time;
      dropCounter += deltaTime;
      if (dropCounter > dropInterval) {
        playerDrop();
      }
      draw();
      requestAnimationFrame(update);
    }

    function init() {
      var dpr = window.devicePixelRatio || 1;
      var width = window.innerWidth;
      var height = window.innerHeight - controlsHeight;
      canvas.width = width * dpr;
      canvas.height = height * dpr;
      canvas.style.width = width + 'px';
      canvas.style.height = height + 'px';
      ctx.scale(dpr, dpr);
      blockSize = Math.min(width / COLS, height / ROWS);
      grid = createGrid();
      score = 0;
      dropInterval = 1000;
      scoreDisplay.textContent = 'Score: 0';
      playerReset();
      lastTime = 0;
      gameOver = false;
    }

    startBtn.addEventListener('click', function() {
      introScreen.style.display = 'none';
      gameScreen.style.display = 'block';
      init();
      requestAnimationFrame(update);
    });

    restartBtn.addEventListener('click', function() {
      endScreen.style.display = 'none';
      gameScreen.style.display = 'block';
      init();
      requestAnimationFrame(update);
    });

    document.addEventListener('keydown', function(event) {
      if (gameOver) return;
      if (event.keyCode === 37) { // left
        playerMove(-1);
      } else if (event.keyCode === 39) { // right
        playerMove(1);
      } else if (event.keyCode === 40) { // down
        playerDrop();
      } else if (event.keyCode === 38) { // up
        playerRotate();
      }
    });

    leftBtn.addEventListener('touchstart', function(e) { e.preventDefault(); playerMove(-1); });
    rightBtn.addEventListener('touchstart', function(e) { e.preventDefault(); playerMove(1); });
    downBtn.addEventListener('touchstart', function(e) { e.preventDefault(); playerDrop(); });
    upBtn.addEventListener('touchstart', function(e) { e.preventDefault(); playerRotate(); });

    leftBtn.addEventListener('mousedown', function() { playerMove(-1); });
    rightBtn.addEventListener('mousedown', function() { playerMove(1); });
    downBtn.addEventListener('mousedown', function() { playerDrop(); });
    upBtn.addEventListener('mousedown', function() { playerRotate(); });
  </script>
</body>
</html>
```