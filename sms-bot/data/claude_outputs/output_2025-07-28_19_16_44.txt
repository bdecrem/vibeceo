```html
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, user-scalable=no">
  <title>PONG</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: linear-gradient(to right, #1a1a2e, #16213e);
      font-family: monospace;
      touch-action: none;
      overflow: hidden;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
      color: white;
    }
    canvas {
      display: block;
      background: #0f3460;
    }
    #controls {
      position: fixed;
      bottom: 0;
      width: 100%;
      height: 120px;
      background: rgba(0,0,0,0.5);
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0 20px;
      box-sizing: border-box;
    }
    .button {
      width: 60px;
      height: 60px;
      background: rgba(255,255,255,0.2);
      border: 2px solid white;
      border-radius: 10px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 24px;
      user-select: none;
    }
    #screen {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      background: rgba(15, 52, 96, 0.9);
      z-index: 2000;
    }
    #screen h1 {
      font-size: 48px;
      margin: 0;
      text-shadow: 0 0 10px #00eeff;
    }
    #screen p {
      font-size: 20px;
      max-width: 80%;
      text-align: center;
      margin: 10px 0 30px;
    }
    #startBtn, #restartBtn {
      background: #00eeff;
      color: #0f3460;
      border: none;
      padding: 15px 30px;
      font-size: 20px;
      font-family: monospace;
      border-radius: 10px;
      cursor: pointer;
      font-weight: bold;
    }
    #scoreDisplay {
      position: absolute;
      top: 20px;
      left: 0;
      width: 100%;
      text-align: center;
      font-size: 24px;
      font-weight: bold;
      text-shadow: 0 0 5px white;
    }
  </style>
</head>
<body>
  <div id="scoreDisplay">0 - 0</div>
  <canvas id="gameCanvas"></canvas>
  <div id="controls">
    <div class="button" id="upBtn">‚¨ÜÔ∏è</div>
    <div class="button" id="downBtn">‚¨áÔ∏è</div>
  </div>
  
  <div id="screen">
    <h1>PONG</h1>
    <p>Bounce the ball past your opponent! First to 5 points wins üèÜ</p>
    <button id="startBtn">START GAME</button>
  </div>

  <script>
    var canvas = document.getElementById('gameCanvas');
    var ctx = canvas.getContext('2d');
    var scoreDisplay = document.getElementById('scoreDisplay');
    var screen = document.getElementById('screen');
    var startBtn = document.getElementById('startBtn');
    var restartBtn = document.createElement('button');
    restartBtn.id = 'restartBtn';
    restartBtn.textContent = 'PLAY AGAIN';
    
    var dpr = window.devicePixelRatio || 1;
    var controlsHeight = 120;
    var gameWidth = window.innerWidth;
    var gameHeight = window.innerHeight - controlsHeight;
    
    canvas.width = gameWidth * dpr;
    canvas.height = gameHeight * dpr;
    canvas.style.width = gameWidth + 'px';
    canvas.style.height = gameHeight + 'px';
    ctx.scale(dpr, dpr);
    
    var gamePhase = 'intro'; // intro, playing, gameOver
    var playerScore = 0;
    var aiScore = 0;
    var winScore = 5;
    
    // Game objects
    var paddleWidth = 15;
    var paddleHeight = 100;
    var ballSize = 15;
    var playerPaddle = {
      x: 20,
      y: gameHeight / 2 - paddleHeight / 2,
      width: paddleWidth,
      height: paddleHeight,
      speed: 300,
      dy: 0
    };
    var aiPaddle = {
      x: gameWidth - 20 - paddleWidth,
      y: gameHeight / 2 - paddleHeight / 2,
      width: paddleWidth,
      height: paddleHeight,
      speed: 200
    };
    var ball = {
      x: gameWidth / 2,
      y: gameHeight / 2,
      size: ballSize,
      speed: 300,
      dx: 0,
      dy: 0
    };
    
    var lastTime = 0;
    var keys = {};
    
    function resetBall() {
      ball.x = gameWidth / 2;
      ball.y = gameHeight / 2;
      
      // Random direction
      var angle = (Math.random() * Math.PI / 2) - Math.PI / 4;
      var direction = Math.random() > 0.5 ? 1 : -1;
      
      ball.dx = Math.cos(angle) * ball.speed * direction;
      ball.dy = Math.sin(angle) * ball.speed;
    }
    
    function updateScore() {
      scoreDisplay.textContent = aiScore + ' - ' + playerScore;
    }
    
    function startGame() {
      gamePhase = 'playing';
      playerScore = 0;
      aiScore = 0;
      updateScore();
      resetBall();
      screen.style.display = 'none';
    }
    
    function endGame() {
      gamePhase = 'gameOver';
      screen.innerHTML = '';
      var title = document.createElement('h1');
      title.textContent = playerScore >= winScore ? 'YOU WIN! üéâ' : 'YOU LOSE! üò¢';
      var score = document.createElement('p');
      score.textContent = 'Final Score: ' + aiScore + ' - ' + playerScore;
      screen.appendChild(title);
      screen.appendChild(score);
      screen.appendChild(restartBtn);
      screen.style.display = 'flex';
    }
    
    function update(deltaTime) {
      if (gamePhase !== 'playing') return;
      
      // Move player paddle
      if (keys['ArrowUp'] || keys['up']) {
        playerPaddle.dy = -playerPaddle.speed;
      } else if (keys['ArrowDown'] || keys['down']) {
        playerPaddle.dy = playerPaddle.speed;
      } else {
        playerPaddle.dy = 0;
      }
      
      playerPaddle.y += playerPaddle.dy * deltaTime;
      
      // Keep player paddle on screen
      if (playerPaddle.y < 0) {
        playerPaddle.y = 0;
      } else if (playerPaddle.y + playerPaddle.height > gameHeight) {
        playerPaddle.y = gameHeight - playerPaddle.height;
      }
      
      // Move AI paddle (simple follow)
      var targetY = ball.y - aiPaddle.height / 2;
      if (aiPaddle.y + aiPaddle.height/2 < targetY) {
        aiPaddle.y += aiPaddle.speed * deltaTime;
      } else if (aiPaddle.y + aiPaddle.height/2 > targetY) {
        aiPaddle.y -= aiPaddle.speed * deltaTime;
      }
      
      // Keep AI paddle on screen
      if (aiPaddle.y < 0) {
        aiPaddle.y = 0;
      } else if (aiPaddle.y + aiPaddle.height > gameHeight) {
        aiPaddle.y = gameHeight - aiPaddle.height;
      }
      
      // Move ball
      ball.x += ball.dx * deltaTime;
      ball.y += ball.dy * deltaTime;
      
      // Ball collision with top and bottom walls
      if (ball.y < 0) {
        ball.y = 0;
        ball.dy = Math.abs(ball.dy);
      } else if (ball.y + ball.size > gameHeight) {
        ball.y = gameHeight - ball.size;
        ball.dy = -Math.abs(ball.dy);
      }
      
      // Ball collision with paddles
      // Player paddle
      if (ball.dx < 0 && 
          ball.x < playerPaddle.x + playerPaddle.width &&
          ball.x + ball.size > playerPaddle.x &&
          ball.y < playerPaddle.y + playerPaddle.height &&
          ball.y + ball.size > playerPaddle.y) {
        
        var hitPosition = (ball.y + ball.size/2 - playerPaddle.y) / playerPaddle.height;
        var angle = (hitPosition - 0.5) * Math.PI/1.5; // -75 to 75 degrees
        
        ball.dx = Math.abs(ball.dx);
        ball.dy = Math.sin(angle) * ball.speed;
      }
      
      // AI paddle
      if (ball.dx > 0 && 
          ball.x + ball.size > aiPaddle.x &&
          ball.x < aiPaddle.x + aiPaddle.width &&
          ball.y < aiPaddle.y + aiPaddle.height &&
          ball.y + ball.size > aiPaddle.y) {
        
        var hitPosition = (ball.y + ball.size/2 - aiPaddle.y) / aiPaddle.height;
        var angle = (hitPosition - 0.5) * Math.PI/1.5; // -75 to 75 degrees
        
        ball.dx = -Math.abs(ball.dx);
        ball.dy = Math.sin(angle) * ball.speed;
      }
      
      // Scoring
      if (ball.x < 0) {
        playerScore++;
        updateScore();
        if (playerScore >= winScore) {
          endGame();
        } else {
          resetBall();
        }
      } else if (ball.x > gameWidth) {
        aiScore++;
        updateScore();
        if (aiScore >= winScore) {
          endGame();
        } else {
          resetBall();
        }
      }
    }
    
    function draw() {
      // Clear canvas
      ctx.fillStyle = '#0f3460';
      ctx.fillRect(0, 0, gameWidth, gameHeight);
      
      // Draw center line
      ctx.setLineDash([10, 15]);
      ctx.beginPath();
      ctx.moveTo(gameWidth/2, 0);
      ctx.lineTo(gameWidth/2, gameHeight);
      ctx.strokeStyle = 'rgba(255, 255, 255, 0.3)';
      ctx.lineWidth = 4;
      ctx.stroke();
      ctx.setLineDash([]);
      
      // Draw paddles
      ctx.fillStyle = '#00eeff';
      ctx.fillRect(playerPaddle.x, playerPaddle.y, playerPaddle.width, playerPaddle.height);
      ctx.fillRect(aiPaddle.x, aiPaddle.y, aiPaddle.width, aiPaddle.height);
      
      // Draw ball
      ctx.fillStyle = '#ffffff';
      ctx.beginPath();
      ctx.arc(ball.x + ball.size/2, ball.y + ball.size/2, ball.size/2, 0, Math.PI * 2);
      ctx.fill();
    }
    
    function gameLoop(timestamp) {
      var deltaTime = (timestamp - lastTime) / 1000;
      lastTime = timestamp;
      
      update(deltaTime);
      draw();
      
      requestAnimationFrame(gameLoop);
    }
    
    // Event listeners
    window.addEventListener('keydown', function(e) {
      keys[e.key] = true;
    });
    
    window.addEventListener('keyup', function(e) {
      keys[e.key] = false;
    });
    
    document.getElementById('upBtn').addEventListener('touchstart', function(e) {
      e.preventDefault();
      keys['up'] = true;
    });
    
    document.getElementById('upBtn').addEventListener('touchend', function(e) {
      e.preventDefault();
      keys['up'] = false;
    });
    
    document.getElementById('downBtn').addEventListener('touchstart', function(e) {
      e.preventDefault();
      keys['down'] = true;
    });
    
    document.getElementById('downBtn').addEventListener('touchend', function(e) {
      e.preventDefault();
      keys['down'] = false;
    });
    
    startBtn.addEventListener('click', startGame);
    restartBtn.addEventListener('click', startGame);
    
    // Prevent scrolling
    document.body.addEventListener('touchstart', function(e) {
      if (e.target === canvas) e.preventDefault();
    }, { passive: false });
    
    document.body.addEventListener('touchmove', function(e) {
      if (e.target === canvas) e.preventDefault();
    }, { passive: false });
    
    // Start the game loop
    requestAnimationFrame(gameLoop);
  </script>
</body>
</html>
```