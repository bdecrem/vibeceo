<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>THREE THINGS ✨</title>
    <script src="https://unpkg.com/@supabase/supabase-js@2"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=Inter:wght@400;600&display=swap');

        body { 
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #3F88FF 0%, #6E7FFF 50%, #ABF7FF 100%);
            background-size: 400% 400%;
            animation: gradientShift 15s ease-in-out infinite;
            color: white;
            overflow-x: hidden;
            margin: 0;
            min-height: 100vh;
        }

        h1, h2, h3 {
            font-family: 'Space Grotesk', sans-serif;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: -0.02em;
        }

        @keyframes gradientShift {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }

        .app-container {
            max-width: 800px;
            margin: 0 auto;
            background: rgba(0,0,0,0.4);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            padding: 2rem;
            border: 1px solid rgba(255,255,255,0.1);
            position: relative;
            z-index: 10;
            min-height: 90vh;
        }

        .screen { display: none; }
        .screen.active { display: block; animation: fadeIn 0.3s ease; }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        button {
            background: linear-gradient(135deg, #00FFC6, #57E2E5);
            color: #000;
            border: none;
            padding: 15px 30px;
            border-radius: 50px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-size: 14px;
            margin: 10px 5px;
        }

        button:hover {
            transform: scale(1.05);
            box-shadow: 0 0 30px rgba(0, 255, 198, 0.5);
        }

        input, select {
            background: rgba(255,255,255,0.1);
            border: 2px solid rgba(255,255,255,0.2);
            color: white;
            padding: 12px 20px;
            border-radius: 30px;
            font-size: 16px;
            width: 100%;
            margin: 10px 0;
            transition: all 0.3s ease;
        }

        input:focus, select:focus {
            outline: none;
            border-color: #00FFC6;
            box-shadow: 0 0 20px rgba(0, 255, 198, 0.3);
        }

        .floating-emoji {
            position: fixed;
            font-size: 2rem;
            animation: float 6s ease-in-out infinite;
            pointer-events: none;
            z-index: 5;
            opacity: 0.8;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            50% { transform: translateY(-20px) rotate(10deg); }
        }

        h1 {
            position: relative;
            animation: glitch 3s ease-in-out infinite;
        }

        @keyframes glitch {
            0%, 100% { text-shadow: 2px 2px 0 #FF2E93, -2px -2px 0 #00FFC6; }
            25% { text-shadow: -2px 2px 0 #3F88FF, 2px -2px 0 #FF2E93; }
            50% { text-shadow: 2px -2px 0 #00FFC6, -2px 2px 0 #7C3AED; }
            75% { text-shadow: -2px -2px 0 #FF2E93, 2px 2px 0 #3F88FF; }
        }

        /* Goal Setup Styles */
        .goal-input {
            margin-bottom: 20px;
        }

        /* Checkbox Styles */
        .goal-checkbox {
            display: flex;
            align-items: center;
            margin: 20px 0;
            padding: 20px;
            background: rgba(255,255,255,0.1);
            border-radius: 15px;
            transition: all 0.3s ease;
        }

        .goal-checkbox:hover {
            transform: translateX(10px);
            background: rgba(255,255,255,0.2);
        }

        .goal-checkbox input[type="checkbox"] {
            width: 30px;
            height: 30px;
            margin-right: 15px;
            cursor: pointer;
        }

        .goal-label {
            font-size: 1.2em;
            font-weight: 600;
        }

        /* Progress Bar */
        .progress-bar {
            width: 100%;
            height: 20px;
            background: rgba(255,255,255,0.1);
            border-radius: 10px;
            margin: 20px 0;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #00FFC6, #57E2E5);
            transition: width 0.3s ease;
        }

        /* Celebration Animation */
        @keyframes celebrate {
            0% { transform: translateY(0) scale(1); }
            50% { transform: translateY(-20px) scale(1.2); }
            100% { transform: translateY(0) scale(1); }
        }

        .celebration {
            position: absolute;
            animation: celebrate 0.5s ease-out;
        }

        /* Emoji Rain */
        @keyframes rain {
            0% {
                transform: translateY(-100vh);
            }
            100% {
                transform: translateY(100vh);
            }
        }

        .rain-emoji {
            position: fixed;
            animation: rain linear forwards;
            z-index: 1000;
        }

        #date-display {
            font-size: 1.5em;
            margin: 20px 0;
            text-align: center;
            font-weight: bold;
            color: #00FFC6;
        }

        #streak-display {
            text-align: center;
            font-size: 1.2em;
            margin-top: 20px;
            padding: 10px;
            background: rgba(255,255,255,0.1);
            border-radius: 10px;
        }

    </style>
</head>
<body>
    <div class="floating-emoji" style="top: 5%; left: 2%;" data-value="2">✨</div>
    <div class="floating-emoji" style="top: 5%; right: 2%;" data-value="3">🌟</div>
    <div class="floating-emoji" style="bottom: 5%; left: 2%;" data-value="1">💫</div>
    <div class="floating-emoji" style="bottom: 5%; right: 2%;" data-value="4">⚡</div>

    <div class="app-container">
        <div id="welcome-screen" class="screen active">
            <h1>THREE THINGS ✨</h1>
            <p>TRACK YOUR DAILY WINS IN THE MOST EXTRA WAY POSSIBLE! 🚀</p>
            <button onclick="showNewUserScreen()">New User</button>
            <button onclick="showReturningUserScreen()">Returning User</button>
        </div>
        
        <div id="new-user-screen" class="screen">
            <h1>New User</h1>
            <div id="new-user-info"></div>
            <div id="goal-setup" style="display: none;">
                <h2>SET YOUR 3 DAILY GOALS 🎯</h2>
                <input type="text" id="goal1" placeholder="Goal 1 (e.g., Drink water)" class="goal-input">
                <input type="text" id="goal2" placeholder="Goal 2 (e.g., Exercise)" class="goal-input">
                <input type="text" id="goal3" placeholder="Goal 3 (e.g., Read)" class="goal-input">
                <button onclick="saveGoals()">LOCK IN MY GOALS 🔒</button>
            </div>
            <button onclick="registerNewUser()">Register & Enter App</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="returning-user-screen" class="screen">
            <h1>Returning User</h1>
            <select id="user-label-select">
                <option>Select User</option>
            </select>
            <input type="text" id="returning-passcode" placeholder="Enter 4-digit passcode" maxlength="4">
            <button onclick="loginReturningUser()">Login</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="main-screen" class="screen">
            <h1>THREE THINGS ✨</h1>
            <div id="user-status">Welcome, <span id="current-user-label"></span>!</div>
            
            <div id="app-content">
                <div id="date-display"></div>
                <div id="goals-container"></div>
                <div id="streak-display"></div>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: 0%"></div>
                </div>
            </div>
            
            <button onclick="showScreen('welcome-screen')">Leave App</button>
        </div>
    </div>

    <script>
        const supabase = window.supabase.createClient(
            'https://tqniseocczttrfwtpbdr.supabase.co', 
            'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRxbmlzZW9jY3p0dHJmd3RwYmRyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg4ODI5MjIsImV4cCI6MjA2NDQ1ODkyMn0.mwb33p0xIEXy5F7ZoLc1j9-4ZNk3FuT4zrR0aTdm350'
        );

        const APP_ID = 'three_things_v1';
        const USER_LABELS = ['tracker1🎯', 'tracker2⚡', 'tracker3🌟', 'tracker4🔥', 'tracker5💎'];
        const CELEBRATION_EMOJIS = ['🎉', '⭐', '🌟', '💪', '🔥', '🌈'];
        let currentUser = null;
        let userGoals = [];

        // Authentication functions
        let currentUser = null;

        async function generateNewUser() {
            const { data: existingUsers } = await supabase
                .from('wtaf_zero_admin_collaborative')
                .select('participant_data')
                .eq('app_id', APP_ID)
                .eq('action_type', 'join');
            
            const usedLabels = existingUsers?.map(u => u.participant_data?.userLabel).filter(Boolean) || [];
            
            if (usedLabels.length >= 5) {
                alert('SQUAD\'S FULL, TRY ANOTHER DIMENSION 🚫');
                return false;
            }
            
            const availableLabel = USER_LABELS.find(label => !usedLabels.includes(label));
            if (!availableLabel) {
                alert('NO MORE ROOM IN THIS CHAOS REALM 🌀');
                return false;
            }
            
            const code = Math.floor(1000 + Math.random() * 9000).toString();
            currentUser = {
                userLabel: availableLabel,
                passcode: code,
                participantId: availableLabel + '_' + code
            };
            
            document.getElementById('new-user-info').innerHTML = 
                `<strong>YOUR LABEL:</strong> ${currentUser.userLabel}<br><strong>SECRET DIGITS:</strong> ${currentUser.passcode}<br><em>SCREENSHOT THIS OR CRY LATER 📸</em>`;
            
            document.getElementById('goal-setup').style.display = 'block';
            return true;
        }

        async function registerNewUser() {
            if (!currentUser) {
                alert('GENERATE YOUR IDENTITY FIRST, CHAOS AGENT 🎭');
                return;
            }
            
            const goals = [
                document.getElementById('goal1').value,
                document.getElementById('goal2').value,
                document.getElementById('goal3').value
            ];

            if (goals.some(g => !g)) {
                alert('ALL THREE GOALS REQUIRED FOR MAXIMUM CHAOS! 🎯');
                return;
            }
            
            try {
                await supabase.from('wtaf_zero_admin_collaborative').insert({
                    app_id: APP_ID,
                    participant_id: currentUser.participantId,
                    action_type: 'join',
                    participant_data: {
                        userLabel: currentUser.userLabel,
                        passcode: currentUser.passcode,
                        join_time: Date.now(),
                        goals: goals
                    },
                    content_data: { 
                        message: 'Joined the app',
                        timestamp: Date.now(),
                        streak: 0,
                        lastCheck: null
                    }
                });
                
                userGoals = goals;
                enterMainScreen();
            } catch (error) {
                console.error('Registration error:', error);
                alert('REGISTRATION EXPLODED, TRY AGAIN 💥');
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            const success = await generateNewUser();
            if (!success) {
                showScreen('welcome-screen');
            }
        }

        async function loginReturningUser() {
            const selectedLabel = document.getElementById('user-label-select').value;
            const enteredPasscode = document.getElementById('returning-passcode').value.trim();
            
            if (!selectedLabel || selectedLabel === 'Select User') {
                alert('PICK YOUR IDENTITY, PHANTOM 👻');
                return;
            }
            
            if (!enteredPasscode || enteredPasscode.length !== 4) {
                alert('4 DIGITS OF CHAOS REQUIRED 🔢');
                return;
            }
            
            try {
                const { data: joinRecords } = await supabase
                    .from('wtaf_zero_admin_collaborative')
                    .select('*')
                    .eq('app_id', APP_ID)
                    .eq('action_type', 'join');
                
                const userRecord = joinRecords?.find(record => 
                    record.participant_data?.userLabel === selectedLabel && 
                    record.participant_data?.passcode === enteredPasscode
                );
                
                if (userRecord) {
                    currentUser = {
                        userLabel: selectedLabel,
                        passcode: enteredPasscode,
                        participantId: userRecord.participant_id
                    };
                    userGoals = userRecord.participant_data.goals;
                    enterMainScreen();
                } else {
                    alert('NICE TRY, WRONG VIBES ❌');
                }
            } catch (error) {
                console.error('Login error:', error);
                alert('LOGIN MALFUNCTION, REALITY GLITCHING 🌀');
            }
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(screen => 
                screen.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            
            if (screenId !== 'main-screen') {
                stopPolling();
            }
        }

        function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const userSelect = document.getElementById('user-label-select');
            userSelect.innerHTML = '<option>Select User</option>';
            USER_LABELS.forEach(label => {
                const option = document.createElement('option');
                option.value = label;
                option.textContent = label;
                userSelect.appendChild(option);
            });
        }

        let pollingInterval;

        function startPolling() {
            pollingInterval = setInterval(async () => {
                await loadLatestData();
            }, 2000);
        }

        function stopPolling() {
            if (pollingInterval) {
                clearInterval(pollingInterval);
                pollingInterval = null;
            }
        }

        async function loadLatestData() {
            if (!currentUser) return;

            const { data: userData } = await supabase
                .from('wtaf_zero_admin_collaborative')
                .select('*')
                .eq('app_id', APP_ID)
                .eq('participant_id', currentUser.participantId)
                .eq('action_type', 'join')
                .single();

            if (userData) {
                updateUI(userData);
            }
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            startPolling();
            loadLatestData();
            renderGoals();
            updateDateDisplay();
        }

        function updateDateDisplay() {
            const today = new Date();
            document.getElementById('date-display').textContent = 
                today.toLocaleDateString('en-US', { 
                    weekday: 'long', 
                    year: 'numeric', 
                    month: 'long', 
                    day: 'numeric' 
                });
        }

        function renderGoals() {
            const container = document.getElementById('goals-container');
            container.innerHTML = '';
            
            userGoals.forEach((goal, index) => {
                const div = document.createElement('div');
                div.className = 'goal-checkbox';
                div.innerHTML = `
                    <input type="checkbox" id="goal${index}" onchange="handleGoalCheck(${index})">
                    <label for="goal${index}" class="goal-label">${goal}</label>
                `;
                container.appendChild(div);
            });
        }

        async function handleGoalCheck(goalIndex) {
            const checkbox = document.getElementById(`goal${goalIndex}`);
            if (checkbox.checked) {
                createCelebrationEmoji(checkbox);
            }
            
            await updateProgress();
        }

        function createCelebrationEmoji(element) {
            const emoji = CELEBRATION_EMOJIS[Math.floor(Math.random() * CELEBRATION_EMOJIS.length)];
            const span = document.createElement('span');
            span.textContent = emoji;
            span.className = 'celebration';
            span.style.position = 'absolute';
            
            const rect = element.getBoundingClientRect();
            span.style.left = `${rect.left}px`;
            span.style.top = `${rect.top}px`;
            
            document.body.appendChild(span);
            
            setTimeout(() => span.remove(), 500);
        }

        async function updateProgress() {
            const checkboxes = document.querySelectorAll('.goal-checkbox input[type="checkbox"]');
            const completed = Array.from(checkboxes).filter(cb => cb.checked).length;
            const progress = (completed / checkboxes.length) * 100;
            
            document.querySelector('.progress-fill').style.width = `${progress}%`;
            
            const today = new Date().toISOString().split('T')[0];
            
            try {
                const { data: existingRecord } = await supabase
                    .from('wtaf_zero_admin_collaborative')
                    .select('*')
                    .eq('app_id', APP_ID)
                    .eq('participant_id', currentUser.participantId)
                    .eq('action_type', 'join')
                    .single();

                if (existingRecord) {
                    const content_data = {
                        ...existingRecord.content_data,
                        lastCheck: today,
                        completedGoals: completed,
                        totalGoals: checkboxes.length
                    };

                    if (today !== existingRecord.content_data?.lastCheck) {
                        // New day
                        if (completed === checkboxes.length) {
                            content_data.streak = (existingRecord.content_data?.streak || 0) + 1;
                        } else {
                            content_data.streak = 0;
                        }
                    }

                    await supabase
                        .from('wtaf_zero_admin_collaborative')
                        .update({ content_data })
                        .eq('id', existingRecord.id);

                    updateStreakDisplay(content_data.streak);

                    // Check if it's Sunday and all goals are completed
                    if (new Date().getDay() === 0 && completed === checkboxes.length) {
                        triggerEmojiRain();
                    }
                }
            } catch (error) {
                console.error('Error updating progress:', error);
            }
        }

        function updateStreakDisplay(streak) {
            const display = document.getElementById('streak-display');
            display.textContent = `Current Streak: ${streak} days 🔥`;
        }

        function triggerEmojiRain() {
            const emojis = '🎉⭐🌟💫✨🌈🎨🎭🎪🎢🎡🎠🎮🎲🎯🎳🎰🎪🎨🎭🎪🎢🎡';
            for (let i = 0; i < 50; i++) {
                const emoji = emojis[Math.floor(Math.random() * emojis.length)];
                const span = document.createElement('span');
                span.className = 'rain-emoji';
                span.textContent = emoji;
                span.style.left = `${Math.random() * 100}vw`;
                span.style.animationDuration = `${Math.random() * 2 + 1}s`;
                span.style.fontSize = `${Math.random() * 20 + 20}px`;
                document.body.appendChild(span);
                
                setTimeout(() => span.remove(), 3000);
            }
        }

        function updateUI(userData) {
            if (!userData) return;
            
            const { content_data, participant_data } = userData;
            
            // Update goals if they exist
            if (participant_data?.goals) {
                userGoals = participant_data.goals;
                renderGoals();
            }
            
            // Update streak display
            if (content_data?.streak !== undefined) {
                updateStreakDisplay(content_data.streak);
            }
            
            // Update progress bar if there's completion data
            if (content_data?.completedGoals !== undefined && content_data?.totalGoals) {
                const progress = (content_data.completedGoals / content_data.totalGoals) * 100;
                document.querySelector('.progress-fill').style.width = `${progress}%`;
            }
        }

        // Mouse parallax effect
        document.addEventListener('mousemove', (e) => {
            document.querySelectorAll('.floating-emoji').forEach((elem) => {
                const speed = elem.getAttribute('data-value') || 2;
                const x = (e.clientX * speed) / 100;
                const y = (e.clientY * speed) / 100;
                elem.style.transform = `translateX(${x}px) translateY(${y}px)`;
            });
        });

        // Easter egg
        console.log('🔥 Welcome to the WTAF dimension! Type wtaf() in console for secrets...');
        window.wtaf = function() {
            document.body.style.animation = 'rainbow 1s infinite';
            setTimeout(() => {
                document.body.style.animation = '';
                alert('🎉 WTAF MASTER MODE UNLOCKED! You found the secret!');
            }, 3000);
        };
    </script>
</body>
</html>