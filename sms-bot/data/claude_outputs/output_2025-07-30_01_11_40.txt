Here's a nostalgic MacPaint-style public painting app with shared gallery wall:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>WTAF Paint</title>
    <style>
        :root {
            --bg: #fefef5;
            --border: #FFD63D;
            --shadow: #C9C2F9;
            --heading: #FF4B4B;
            --button: #6ECBFF;
            --input-border: #6ECBFF;
        }

        * {
            box-sizing: border-box;
            font-family: system-ui, -apple-system, sans-serif;
        }

        body {
            margin: 0;
            padding: 20px;
            background: var(--bg);
            min-height: 100vh;
            font-size: 16px;
        }

        .app-container {
            max-width: 800px;
            margin: 0 auto;
        }

        h1 {
            color: var(--heading);
            text-align: center;
            text-transform: uppercase;
            font-size: 24px;
            margin-bottom: 20px;
        }

        #user-status {
            text-align: center;
            margin-bottom: 20px;
            font-size: 16px;
        }

        .toolbar {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-bottom: 20px;
            justify-content: center;
        }

        button {
            background: var(--button);
            border: none;
            border-radius: 20px;
            color: white;
            padding: 12px 20px;
            font-size: 16px;
            height: 44px;
            cursor: pointer;
            min-width: 44px;
        }

        .color-picker {
            height: 44px;
            width: 44px;
            padding: 0;
            border: 2px solid var(--input-border);
            border-radius: 8px;
        }

        .thickness-picker {
            height: 44px;
            width: 80px;
            padding: 0 10px;
            border: 2px solid var(--input-border);
            border-radius: 8px;
            font-size: 16px;
        }

        .canvas-container {
            width: 100%;
            max-width: 400px;
            margin: 0 auto 20px;
            border: 2px solid var(--border);
            border-radius: 12px;
            box-shadow: 4px 4px 0 var(--shadow);
            overflow: hidden;
            background: white;
        }

        #canvas {
            width: 100%;
            height: 400px;
            display: block;
            touch-action: none;
        }

        .gallery {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 20px;
            margin-top: 40px;
        }

        .gallery-item {
            border: 2px solid var(--border);
            border-radius: 12px;
            padding: 10px;
            background: white;
            box-shadow: 4px 4px 0 var(--shadow);
        }

        .gallery-item img {
            width: 100%;
            border-radius: 8px;
            margin-bottom: 10px;
        }

        .gallery-item p {
            margin: 0;
            font-size: 14px;
            text-align: center;
        }

        .active {
            background: #FF4B4B !important;
        }

        @media (min-width: 768px) {
            .toolbar {
                justify-content: center;
            }
            
            button {
                width: auto;
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <h1>WTAF Paint üé®</h1>
        <div id="user-status">Anonymous Artist: <span id="current-user-label"></span></div>

        <div class="toolbar">
            <button id="pencil" class="active">‚úèÔ∏è Pencil</button>
            <button id="brush">üñåÔ∏è Brush</button>
            <input type="color" class="color-picker" id="color" value="#000000">
            <select class="thickness-picker" id="thickness">
                <option value="1">1px</option>
                <option value="3">3px</option>
                <option value="5" selected>5px</option>
                <option value="10">10px</option>
                <option value="15">15px</option>
            </select>
            <button id="clear">üóëÔ∏è Clear</button>
            <button id="save">üíæ Save</button>
        </div>

        <div class="canvas-container">
            <canvas id="canvas"></canvas>
        </div>

        <h1>Gallery Wall</h1>
        <div id="gallery" class="gallery"></div>
    </div>

    <script>
        let currentUser = null;
        let isDrawing = false;
        let currentTool = 'pencil';
        
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');
        const pencilBtn = document.getElementById('pencil');
        const brushBtn = document.getElementById('brush');
        const colorPicker = document.getElementById('color');
        const thicknessPicker = document.getElementById('thickness');
        const clearBtn = document.getElementById('clear');
        const saveBtn = document.getElementById('save');

        // Set canvas size
        function resizeCanvas() {
            const container = canvas.parentElement;
            canvas.width = container.clientWidth;
            canvas.height = container.clientWidth;
        }
        resizeCanvas();
        window.addEventListener('resize', resizeCanvas);

        // Drawing setup
        ctx.lineCap = 'round';
        ctx.lineJoin = 'round';

        // Tool selection
        pencilBtn.onclick = () => {
            currentTool = 'pencil';
            pencilBtn.classList.add('active');
            brushBtn.classList.remove('active');
        };

        brushBtn.onclick = () => {
            currentTool = 'brush';
            brushBtn.classList.add('active');
            pencilBtn.classList.remove('active');
        };

        // Drawing functions
        function startDrawing(e) {
            isDrawing = true;
            draw(e);
        }

        function stopDrawing() {
            isDrawing = false;
            ctx.beginPath();
        }

        function draw(e) {
            if (!isDrawing) return;

            const rect = canvas.getBoundingClientRect();
            const x = (e.clientX || e.touches[0].clientX) - rect.left;
            const y = (e.clientY || e.touches[0].clientY) - rect.top;

            ctx.strokeStyle = colorPicker.value;
            ctx.lineWidth = thicknessPicker.value;

            if (currentTool === 'brush') {
                ctx.globalAlpha = 0.1;
                for (let i = 0; i < 3; i++) {
                    ctx.lineTo(x, y);
                    ctx.stroke();
                }
            } else {
                ctx.globalAlpha = 1;
                ctx.lineTo(x, y);
                ctx.stroke();
            }

            ctx.beginPath();
            ctx.moveTo(x, y);
        }

        // Event listeners
        canvas.addEventListener('mousedown', startDrawing);
        canvas.addEventListener('mousemove', draw);
        canvas.addEventListener('mouseup', stopDrawing);
        canvas.addEventListener('mouseleave', stopDrawing);

        canvas.addEventListener('touchstart', startDrawing);
        canvas.addEventListener('touchmove', draw);
        canvas.addEventListener('touchend', stopDrawing);

        // Clear canvas
        clearBtn.onclick = () => {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
        };

        // Save drawing
        saveBtn.onclick = async () => {
            const imageData = canvas.toDataURL('image/png');
            await save('painting', {
                image: imageData,
                created_at: new Date().toISOString()
            });
            clearBtn.click();
            await loadLatestData();
        };

        // Load gallery
        async function loadLatestData() {
            const paintings = await load('painting');
            const gallery = document.getElementById('gallery');
            gallery.innerHTML = '';

            paintings.sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
                .slice(0, 12)
                .forEach(painting => {
                    const item = document.createElement('div');
                    item.className = 'gallery-item';
                    item.innerHTML = `
                        <img src="${painting.image}" alt="Painting">
                        <p>by ${painting.author}</p>
                    `;
                    gallery.appendChild(item);
                });
        }

        // Initialize public mode
        async function initPublicMode() {
            currentUser = await generateAnonymousUser();
            if (currentUser?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                document.getElementById('current-user-label').textContent = currentUser.userLabel;
                startPolling();
                loadLatestData();
            }
        }

        let pollingInterval;
        function startPolling() {
            pollingInterval = setInterval(() => loadLatestData(), 2000);
        }

        // Initialize
        initPublicMode();
    </script>
</body>
</html>