<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>Dream Buildings Gallery</title>
    <style>
        * { box-sizing: border-box; }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: #0a0a0a;
            color: #fff;
            margin: 0;
            padding: 10px;
            font-size: 16px;
            line-height: 1.5;
        }

        .app-container {
            max-width: 800px;
            margin: 0 auto;
            background: #1a1a1a;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 0 40px rgba(0,0,0,0.5);
        }

        h1 {
            font-size: 24px;
            margin: 0 0 20px 0;
            text-align: center;
        }

        button {
            background: #ff0066;
            color: white;
            border: none;
            padding: 16px 24px;
            border-radius: 6px;
            font-weight: bold;
            cursor: pointer;
            margin: 8px 0;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-size: 16px;
            width: 100%;
            min-height: 44px;
            display: block;
        }

        button:hover { background: #ff3388; }
        button:active { transform: scale(0.98); }

        input, select, textarea {
            background: #2a2a2a;
            border: 1px solid #444;
            color: white;
            padding: 16px;
            border-radius: 6px;
            width: 100%;
            margin: 10px 0;
            font-size: 16px;
            min-height: 44px;
        }

        textarea {
            min-height: 100px;
            resize: vertical;
        }

        .screen { display: none; }
        .screen.active { display: block; }

        .building-grid {
            display: grid;
            grid-template-columns: 1fr;
            gap: 20px;
            margin: 20px 0;
        }

        .building-card {
            background: #2a2a2a;
            border-radius: 8px;
            padding: 16px;
            position: relative;
        }

        .building-image {
            width: 100%;
            border-radius: 4px;
            margin-bottom: 10px;
            aspect-ratio: 1;
            object-fit: cover;
        }

        .building-meta {
            font-size: 14px;
            color: #888;
            margin-top: 8px;
        }

        .loading {
            text-align: center;
            padding: 20px;
            font-style: italic;
            color: #888;
        }

        .prompt-tips {
            background: #2a2a2a;
            padding: 15px;
            border-radius: 6px;
            margin: 15px 0;
            font-size: 14px;
        }

        @media (min-width: 600px) {
            body { padding: 20px; }
            .app-container { padding: 30px; }
            
            button {
                width: auto;
                display: inline-block;
                margin: 5px;
            }

            .building-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Auth Screens -->
        <div id="welcome-screen" class="screen active">
            <h1>Dream Buildings Gallery</h1>
            <p>Create imaginative buildings for our shared cityscape!</p>
            <button onclick="showNewUserScreen()">New User</button>
            <button onclick="showReturningUserScreen()">Returning User</button>
        </div>
        
        <div id="new-user-screen" class="screen">
            <h1>New User</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Register & Enter</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="returning-user-screen" class="screen">
            <h1>Returning User</h1>
            <select id="user-label-select"></select>
            <input type="text" id="returning-passcode" placeholder="4-digit code" maxlength="4">
            <button onclick="loginReturningUser()">Login</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <!-- Main App Screen -->
        <div id="main-screen" class="screen">
            <h1>Dream Buildings Gallery</h1>
            <div id="user-status">Architect: <span id="current-user-label"></span></div>

            <div id="create-form">
                <textarea id="building-description" placeholder="Describe your building... (e.g., 'A towering art deco skyscraper with golden geometric patterns and hanging gardens')"></textarea>
                
                <div class="prompt-tips">
                    <strong>Tips for consistent results:</strong><br>
                    - Describe the building's style and main features<br>
                    - Mention colors and materials<br>
                    - Building should fill the frame<br>
                    - Front-facing view only
                </div>

                <button onclick="createBuilding()">Generate Building</button>
            </div>

            <div id="building-grid" class="building-grid">
                <!-- Buildings will be displayed here -->
            </div>

            <button onclick="showScreen('welcome-screen')">Leave Gallery</button>
        </div>
    </div>

    <script>
        let currentUser = null;
        let isGenerating = false;

        // Auth Code
        async function generateNewUser() {
            const slots = await checkAvailableSlots();
            if (slots.isFull) {
                alert('Gallery is full!');
                return false;
            }
            
            const user = await generateUser();
            if (user?.success) {
                currentUser = user;
                document.getElementById('new-user-info').innerHTML = 
                    `Your ID: ${user.userLabel}<br>Code: ${user.passcode}<br>Save these!`;
                return true;
            }
            return false;
        }

        async function registerNewUser() {
            if (!currentUser) return;
            
            const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
            if (result?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                enterMainScreen();
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            await generateNewUser();
        }

        async function loginReturningUser() {
            const label = document.getElementById('user-label-select').value;
            const passcode = document.getElementById('returning-passcode').value;
            
            const result = await authenticateUser(label, passcode);
            if (result?.success) {
                currentUser = { userLabel: label, passcode, participantId: result.user.participantId };
                updateZadAuth(label, result.user.participantId);
                enterMainScreen();
            } else {
                alert('Wrong code!');
            }
        }

        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const slots = await checkAvailableSlots();
            const select = document.getElementById('user-label-select');
            select.innerHTML = '<option>Select User</option>';
            slots.usedLabels.forEach(label => {
                select.innerHTML += `<option>${label}</option>`;
            });
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            if (screenId !== 'main-screen') stopPolling();
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            startPolling();
            loadLatestData();
        }

        // Building Generation
        async function createBuilding() {
            if (isGenerating) return;
            
            const description = document.getElementById('building-description').value.trim();
            if (!description) {
                alert('Please describe your building!');
                return;
            }

            isGenerating = true;
            const prompt = `Front view of a building: ${description}. Straight-on architectural view, consistent lighting, editorial illustration style, minimalist background, centered composition.`;
            
            try {
                const imageUrl = await generateImage(prompt, 'architectural');
                await save('building', {
                    description,
                    imageUrl,
                    created_at: new Date().toISOString()
                });
                
                document.getElementById('building-description').value = '';
                await loadLatestData();
            } catch (error) {
                alert('Failed to generate building. Please try again.');
            } finally {
                isGenerating = false;
            }
        }

        // Data Management
        let pollingInterval;

        function startPolling() {
            pollingInterval = setInterval(() => loadLatestData(), 2000);
        }

        function stopPolling() {
            if (pollingInterval) clearInterval(pollingInterval);
        }

        async function loadLatestData() {
            const buildings = await load('building');
            const grid = document.getElementById('building-grid');
            
            // Sort by newest first
            buildings.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
            
            grid.innerHTML = buildings.map(building => `
                <div class="building-card">
                    <img src="${building.imageUrl}" class="building-image" alt="Generated building">
                    <p>${building.description}</p>
                    <div class="building-meta">
                        Created by ${building.author}
                    </div>
                </div>
            `).join('');
        }

        initAuth();
    </script>
</body>
</html>