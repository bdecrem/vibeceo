I'll help you create a chat app with full authentication. This will allow users to sign up, log in, and chat with other users in a shared space.

```html
<!DOCTYPE html>
<html>
<head>
    <title>Cosmic Chat</title>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            margin: 0; 
            padding: 0;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        
        /* Auth Screen Styles */
        #auth-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: inherit;
            z-index: 1000;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .auth-screen { 
            display: none; 
            background: rgba(0,0,0,0.8);
            padding: 40px;
            border-radius: 20px;
            text-align: center;
            max-width: 500px;
            border: 2px solid rgba(255,255,255,0.2);
            backdrop-filter: blur(20px);
            color: white;
        }
        
        .auth-screen.active { display: block; }
        
        .auth-btn {
            background: linear-gradient(135deg, #00FFC6, #57E2E5);
            color: #000;
            border: none;
            padding: 15px 30px;
            margin: 10px;
            border-radius: 50px;
            font-weight: 600;
            cursor: pointer;
            text-transform: uppercase;
            transition: all 0.3s ease;
        }
        
        .auth-btn:hover {
            transform: scale(1.05);
            box-shadow: 0 0 30px rgba(0, 255, 198, 0.5);
        }
        
        .auth-input {
            background: rgba(255,255,255,0.1);
            border: 2px solid rgba(255,255,255,0.2);
            color: white;
            padding: 12px 20px;
            margin: 10px;
            border-radius: 30px;
            width: 250px;
            text-align: center;
        }
        
        .auth-input:focus {
            outline: none;
            border-color: #00FFC6;
            box-shadow: 0 0 20px rgba(0, 255, 198, 0.3);
        }
        
        #new-user-info {
            margin: 20px; 
            padding: 20px; 
            background: rgba(255,255,255,0.1); 
            border-radius: 10px;
            border: 2px solid rgba(0, 255, 198, 0.3);
        }
        
        /* Chat App Styles */
        #app-container {
            display: none;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            color: white;
        }
        
        #app-container.active {
            display: block;
        }
        
        .chat-container {
            background: rgba(255,255,255,0.1);
            padding: 20px;
            border-radius: 15px;
            margin: 20px 0;
            height: 60vh;
            display: flex;
            flex-direction: column;
        }
        
        #messages {
            flex-grow: 1;
            overflow-y: auto;
            padding: 10px;
            margin-bottom: 20px;
        }
        
        .message {
            margin: 10px 0;
            padding: 10px 15px;
            border-radius: 15px;
            max-width: 70%;
            word-wrap: break-word;
        }
        
        .message.sent {
            background: rgba(0, 255, 198, 0.3);
            margin-left: auto;
        }
        
        .message.received {
            background: rgba(255, 255, 255, 0.2);
        }
        
        .message .user {
            font-size: 0.8em;
            opacity: 0.8;
            margin-bottom: 5px;
        }
        
        .message .time {
            font-size: 0.7em;
            opacity: 0.6;
            margin-top: 5px;
        }
        
        .chat-input-container {
            display: flex;
            gap: 10px;
        }
        
        #message-input {
            flex-grow: 1;
            padding: 15px;
            border-radius: 25px;
            border: none;
            background: rgba(255,255,255,0.2);
            color: white;
        }
        
        #message-input:focus {
            outline: none;
            background: rgba(255,255,255,0.3);
        }
        
        #send-btn {
            padding: 15px 30px;
            border-radius: 25px;
            border: none;
            background: linear-gradient(135deg, #00FFC6, #57E2E5);
            color: black;
            cursor: pointer;
            font-weight: bold;
        }
        
        #user-status {
            background: rgba(255,255,255,0.1);
            padding: 10px 20px;
            border-radius: 25px;
            margin-bottom: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
    </style>
</head>
<body>
    <!-- 4-Screen Authentication System -->
    <div id="auth-container">
        <!-- Screen 1: Welcome -->
        <div class="auth-screen active" id="welcome-screen">
            <h2>Welcome to Cosmic Chat</h2>
            <p>Join the cosmic conversation!</p>
            <div id="slot-info"></div>
            <button class="auth-btn" onclick="showNewUserScreen()">New User</button>
            <button class="auth-btn" onclick="showReturningUserScreen()">Returning User</button>
        </div>
        
        <!-- Screen 2: New User -->
        <div class="auth-screen" id="new-user-screen">
            <h2>New User</h2>
            <div id="new-user-info"></div>
            <button class="auth-btn" onclick="registerNewUser()">Register & Enter</button>
            <button class="auth-btn" onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <!-- Screen 3: Returning User -->
        <div class="auth-screen" id="returning-user-screen">
            <h2>Returning User</h2>
            <select class="auth-input" id="user-label-select">
                <option>Select User</option>
            </select>
            <br>
            <input type="text" class="auth-input" id="returning-passcode" placeholder="4-digit code" maxlength="4">
            <br>
            <button class="auth-btn" onclick="loginReturningUser()">Login</button>
            <button class="auth-btn" onclick="showScreen('welcome-screen')">Back</button>
        </div>
    </div>

    <!-- Main Chat App -->
    <div id="app-container">
        <div id="user-status">
            <span>Welcome, <span id="current-user-label"></span>!</span>
            <button class="auth-btn" onclick="logout()">Logout</button>
        </div>
        
        <div class="chat-container">
            <div id="messages"></div>
            <div class="chat-input-container">
                <input type="text" id="message-input" placeholder="Type your message..." onkeypress="handleKeyPress(event)">
                <button id="send-btn" onclick="sendMessage()">Send</button>
            </div>
        </div>
    </div>

    <script>
        // Initialize authentication
        initAuth();
        
        // Global state
        let currentUser = null;
        let messageUpdateInterval = null;
        
        // Initialize and show available slots
        async function initializeApp() {
            const slots = await checkAvailableSlots();
            document.getElementById('slot-info').innerHTML = 
                `<p>Available slots: ${slots.availableSlots} / ${slots.totalSlots}</p>`;
        }
        
        // Screen Navigation
        function showScreen(screenId) {
            document.querySelectorAll('.auth-screen').forEach(screen => 
                screen.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
        }
        
        // New User Flow
        async function showNewUserScreen() {
            showScreen('new-user-screen');
            const user = await generateUser();
            if (user && user.success) {
                document.getElementById('new-user-info').innerHTML = 
                    `<strong>YOUR LABEL:</strong> ${user.userLabel}<br>
                     <strong>SECRET DIGITS:</strong> ${user.passcode}<br>
                     <em>SCREENSHOT THIS OR CRY LATER ðŸ“¸</em>`;
                currentUser = user;
            } else {
                alert('Failed to generate user - app might be full!');
                showScreen('welcome-screen');
            }
        }
        
        async function registerNewUser() {
            if (!currentUser) {
                alert('Generate user first!');
                return;
            }
            
            const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
            if (result && result.success) {
                enterMainApp();
            } else {
                alert('Registration failed!');
            }
        }
        
        // Returning User Flow
        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            
            const slots = await checkAvailableSlots();
            const userSelect = document.getElementById('user-label-select');
            userSelect.innerHTML = '<option>Select User</option>';
            
            slots.usedLabels.forEach(label => {
                const option = document.createElement('option');
                option.value = label;
                option.textContent = label;
                userSelect.appendChild(option);
            });
        }
        
        async function loginReturningUser() {
            const selectedLabel = document.getElementById('user-label-select').value;
            const enteredPasscode = document.getElementById('returning-passcode').value.trim();
            
            if (!selectedLabel || selectedLabel === 'Select User') {
                alert('Pick your identity!');
                return;
            }
            
            if (!enteredPasscode || enteredPasscode.length !== 4) {
                alert('4 digits required!');
                return;
            }
            
            const result = await authenticateUser(selectedLabel, enteredPasscode);
            if (result && result.success) {
                currentUser = result.user;
                enterMainApp();
            } else {
                alert('Invalid credentials!');
            }
        }
        
        // Main App Entry
        function enterMainApp() {
            document.getElementById('auth-container').style.display = 'none';
            document.getElementById('app-container').classList.add('active');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            
            loadMessages();
            startMessageUpdates();
        }
        
        function logout() {
            currentUser = null;
            stopMessageUpdates();
            document.getElementById('auth-container').style.display = 'flex';
            document.getElementById('app-container').classList.remove('active');
            showScreen('welcome-screen');
        }
        
        // Chat Functions
        async function loadMessages() {
            const messages = await load('messages') || [];
            displayMessages(messages);
        }
        
        function displayMessages(messages) {
            const messagesDiv = document.getElementById('messages');
            messagesDiv.innerHTML = '';
            
            messages.forEach(msg => {
                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${msg.user === currentUser.userLabel ? 'sent' : 'received'}`;
                
                messageDiv.innerHTML = `
                    <div class="user">${msg.user}</div>
                    <div class="content">${msg.text}</div>
                    <div class="time">${new Date(msg.timestamp).toLocaleTimeString()}</div>
                `;
                
                messagesDiv.appendChild(messageDiv);
            });
            
            // Auto scroll to bottom
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }
        
        async function sendMessage() {
            const input = document.getElementById('message-input');
            const text = input.value.trim();
            
            if (!text) return;
            
            const message = {
                user: currentUser.userLabel,
                text: text,
                timestamp: Date.now()
            };
            
            const messages = await load('messages') || [];
            messages.push(message);
            
            // Keep only last 100 messages
            if (messages.length > 100) {
                messages.shift();
            }
            
            await save('messages', messages);
            displayMessages(messages);
            
            input.value = '';
        }
        
        function handleKeyPress(event) {
            if (event.key === 'Enter') {
                sendMessage();
            }
        }
        
        function startMessageUpdates() {
            // Update messages every 2 seconds
            messageUpdateInterval = setInterval(loadMessages, 2000);
        }
        
        function stopMessageUpdates() {
            if (messageUpdateInterval) {
                clearInterval(messageUpdateInterval);
                messageUpdateInterval = null;
            }
        }
        
        // Initialize the app
        initializeApp();
    </script>
</body>
</html>
```

This chat app includes:

1. Full 4-screen authentication:
   - Welcome screen
   - New user registration
   - Returning user login
   - Main chat screen

2. Chat features:
   - Real-time message updates (every 2 seconds)
   - Message history
   - Auto-scrolling to latest messages
   - User-specific message styling (sent vs received)
   - Timestamps on messages
   - Enter key support for sending messages

3. UI features:
   - Responsive design
   - Modern gradient background
   - Glass-morphism effects
   - User status display
   - Logout functionality
   - Message input with send button

4. Data management:
   - Messages stored in database
   - Limited to last 100 messages
   - Automatic loading/updating
   - User authentication state management

To use the app:

1. New users:
   - Click "New User"
   - Save their generated credentials
   - Click "Register & Enter"

2. Returning users:
   - Click "Returning User"
   - Select their user label
   - Enter their 4-digit code
   - Click "Login"

3. Chat:
   - Type messages in the input field
   - Press Enter or click Send
   - Messages appear in the chat window
   - Sent messages appear on the right
   - Received messages appear on the left

The app automatically updates every 2 seconds to show new messages from other users, and all data is persisted using the provided helper functions.