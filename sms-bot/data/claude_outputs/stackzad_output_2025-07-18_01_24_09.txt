I'll help create an admin interface for managing paintings with deletion capabilities. Based on the requirements, I'll create a mobile-friendly admin panel that connects to the shared data.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>Paintings Admin Panel</title>
    <style>
        * {
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: #0a0a0a;
            color: #fff;
            margin: 0;
            padding: 10px;
            font-size: 16px;
        }

        .app-container {
            max-width: 800px;
            margin: 0 auto;
            background: #1a1a1a;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 0 40px rgba(0,0,0,0.5);
        }

        h1 {
            font-size: 24px;
            margin: 0 0 20px 0;
            background: linear-gradient(45deg, #ff0066, #00ffff);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        button {
            background: linear-gradient(45deg, #ff0066, #ff00ff);
            color: white;
            border: none;
            padding: 16px 24px;
            border-radius: 6px;
            font-weight: bold;
            cursor: pointer;
            margin: 8px 0;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-size: 16px;
            width: 100%;
            min-height: 44px;
            display: block;
            transform: skew(-5deg);
            box-shadow: 4px 4px 0 #ff00ff;
        }

        button:hover {
            background: linear-gradient(45deg, #ff3388, #ff33ff);
        }

        button:active {
            transform: skew(-5deg) scale(0.98);
        }

        .screen { display: none; }
        .screen.active { display: block; }

        .painting-grid {
            display: grid;
            grid-template-columns: 1fr;
            gap: 20px;
            margin-top: 20px;
        }

        .painting-card {
            background: #2a2a2a;
            border-radius: 12px;
            padding: 20px;
            position: relative;
            overflow: hidden;
        }

        .painting-card img {
            width: 100%;
            height: 200px;
            object-fit: cover;
            border-radius: 8px;
            margin-bottom: 15px;
        }

        .painting-info {
            margin-bottom: 15px;
        }

        .painting-actions {
            display: flex;
            gap: 10px;
        }

        .painting-actions button {
            flex: 1;
        }

        .delete-btn {
            background: linear-gradient(45deg, #ff0000, #ff3300);
        }

        .stats {
            background: #2a2a2a;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            display: flex;
            justify-content: space-around;
            text-align: center;
        }

        .stat-item {
            flex: 1;
        }

        .stat-number {
            font-size: 24px;
            font-weight: bold;
            color: #ff0066;
        }

        .stat-label {
            font-size: 14px;
            opacity: 0.7;
        }

        @media (min-width: 600px) {
            body { padding: 20px; }
            .app-container { padding: 30px; }
            .painting-grid { grid-template-columns: repeat(2, 1fr); }
            
            button {
                width: auto;
                display: inline-block;
                margin: 5px;
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <div id="welcome-screen" class="screen active">
            <h1>Paintings Admin Panel</h1>
            <p>Manage and curate the painting collection</p>
            <button onclick="showNewUserScreen()">New Admin</button>
            <button onclick="showReturningUserScreen()">Returning Admin</button>
        </div>
        
        <div id="new-user-screen" class="screen">
            <h1>New Admin Registration</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Register & Enter</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="returning-user-screen" class="screen">
            <h1>Admin Login</h1>
            <select id="user-label-select"></select>
            <input type="text" id="returning-passcode" placeholder="4-digit code" maxlength="4">
            <button onclick="loginReturningUser()">Login</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="main-screen" class="screen">
            <h1>Paintings Admin</h1>
            <div id="user-status">Admin: <span id="current-user-label"></span></div>
            
            <div class="stats">
                <div class="stat-item">
                    <div class="stat-number" id="total-paintings">0</div>
                    <div class="stat-label">Total Paintings</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number" id="deleted-count">0</div>
                    <div class="stat-label">Deleted Today</div>
                </div>
            </div>
            
            <div id="paintings-container" class="painting-grid">
                <!-- Paintings will be loaded here -->
            </div>
            
            <button onclick="showScreen('welcome-screen')">Logout</button>
        </div>
    </div>

    <script>
        let currentUser = null;
        let deletedToday = 0;

        // Authentication setup
        async function generateNewUser() {
            const slots = await checkAvailableSlots();
            if (slots.isFull) {
                alert('Admin panel is full!');
                return false;
            }
            
            const user = await generateUser();
            if (user?.success) {
                currentUser = user;
                document.getElementById('new-user-info').innerHTML = 
                    `Your Admin ID: ${user.userLabel}<br>Code: ${user.passcode}<br>Save these!`;
                return true;
            }
            return false;
        }

        async function registerNewUser() {
            if (!currentUser) return;
            
            const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
            if (result?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                enterMainScreen();
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            await generateNewUser();
        }

        async function loginReturningUser() {
            const label = document.getElementById('user-label-select').value;
            const passcode = document.getElementById('returning-passcode').value;
            
            const result = await authenticateUser(label, passcode);
            if (result?.success) {
                currentUser = { userLabel: label, passcode, participantId: result.user.participantId };
                updateZadAuth(label, result.user.participantId);
                enterMainScreen();
            } else {
                alert('Invalid admin credentials!');
            }
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            if (screenId !== 'main-screen') stopPolling();
        }

        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const slots = await checkAvailableSlots();
            const select = document.getElementById('user-label-select');
            select.innerHTML = '<option>Select Admin ID</option>';
            slots.usedLabels.forEach(label => {
                select.innerHTML += `<option>${label}</option>`;
            });
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            startPolling();
            loadLatestData();
        }

        // Polling setup
        let pollingInterval;

        function startPolling() {
            loadLatestData();
            pollingInterval = setInterval(loadLatestData, 2000);
        }

        function stopPolling() {
            if (pollingInterval) clearInterval(pollingInterval);
        }

        // Data management
        async function loadLatestData() {
            const paintings = await load('join');
            updateUI(paintings);
        }

        async function deletePainting(id) {
            if (confirm('Are you sure you want to delete this painting?')) {
                await save('delete', { recordId: id });
                deletedToday++;
                document.getElementById('deleted-count').textContent = deletedToday;
                loadLatestData();
            }
        }

        function updateUI(paintings) {
            const container = document.getElementById('paintings-container');
            document.getElementById('total-paintings').textContent = paintings.length;
            
            container.innerHTML = paintings.map(painting => `
                <div class="painting-card">
                    <div class="painting-info">
                        <strong>Created by:</strong> ${painting.author}<br>
                        <strong>Date:</strong> ${new Date(painting.created_at).toLocaleDateString()}<br>
                        <strong>ID:</strong> ${painting.id}
                    </div>
                    <div class="painting-actions">
                        <button class="delete-btn" onclick="deletePainting(${painting.id})">
                            Delete Painting
                        </button>
                    </div>
                </div>
            `).join('');
        }

        // Initialize
        initAuth();
    </script>
</body>
</html>