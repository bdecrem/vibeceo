Here's a ZAD-powered public paint app with mobile support and retro MacPaint vibes:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>ZAD Paint</title>
    <style>
        * {
            box-sizing: border-box;
            user-select: none;
            -webkit-user-select: none;
            -webkit-tap-highlight-color: transparent;
        }

        body {
            font-family: "Chicago", Monaco, monospace;
            background: #222;
            color: white;
            margin: 0;
            padding: 10px;
            font-size: 16px;
            touch-action: none;
        }

        .app-container {
            max-width: 800px;
            margin: 0 auto;
            background: #000;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 0 40px rgba(0,0,0,0.5);
        }

        h1 {
            font-size: 24px;
            margin: 0 0 20px 0;
            text-align: center;
            font-family: "Chicago", Monaco, monospace;
            color: #fff;
            text-transform: uppercase;
            letter-spacing: 2px;
        }

        .toolbar {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            margin-bottom: 10px;
            background: #333;
            padding: 10px;
            border-radius: 8px;
        }

        .canvas-container {
            position: relative;
            width: 100%;
            background: #fff;
            border-radius: 8px;
            overflow: hidden;
        }

        canvas {
            width: 100%;
            height: 100%;
            background: white;
            touch-action: none;
        }

        button {
            background: #666;
            color: white;
            border: 2px solid #999;
            padding: 12px 20px;
            border-radius: 6px;
            font-weight: bold;
            cursor: pointer;
            font-family: "Chicago", Monaco, monospace;
            text-transform: uppercase;
            min-height: 44px;
            min-width: 44px;
            font-size: 16px;
        }

        button:active {
            background: #444;
            transform: translateY(1px);
        }

        button.active {
            background: #ff0066;
            border-color: #ff3388;
        }

        input[type="color"] {
            width: 44px;
            height: 44px;
            padding: 0;
            border: none;
            border-radius: 6px;
        }

        .gallery {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 10px;
            margin-top: 20px;
        }

        .gallery-item {
            background: #333;
            padding: 10px;
            border-radius: 8px;
            text-align: center;
        }

        .gallery-item img {
            width: 100%;
            border-radius: 4px;
            margin-bottom: 10px;
        }

        #user-status {
            background: #333;
            padding: 8px 12px;
            border-radius: 4px;
            margin: 10px 0;
            font-size: 14px;
            text-align: center;
            opacity: 0.8;
        }

        .tools {
            display: flex;
            gap: 5px;
            flex-wrap: wrap;
        }

        .size-label {
            color: #fff;
            margin: 0 10px;
            line-height: 44px;
        }

        input[type="range"] {
            width: 100px;
            margin: auto 0;
        }

        @media (max-width: 600px) {
            .toolbar {
                justify-content: center;
            }
            
            button {
                padding: 8px 12px;
                font-size: 14px;
            }
            
            .size-label {
                display: none;
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <h1>ZAD Paint</h1>
        <div id="user-status">Anonymous User: <span id="current-user-label"></span></div>

        <div class="toolbar">
            <div class="tools">
                <button id="pencilBtn" class="active">‚úèÔ∏è</button>
                <button id="brushBtn">üñåÔ∏è</button>
                <input type="color" id="colorPicker" value="#000000">
                <span class="size-label">Size:</span>
                <input type="range" id="sizeSlider" min="1" max="50" value="5">
            </div>
            <button id="undoBtn">‚Ü©Ô∏è Undo</button>
            <button id="saveBtn">üíæ Save</button>
            <button id="clearBtn">üóëÔ∏è Clear</button>
        </div>

        <div class="canvas-container">
            <canvas id="canvas"></canvas>
        </div>

        <h2>Gallery</h2>
        <div id="gallery" class="gallery"></div>
    </div>

    <script>
        let currentUser = null;
        let isDrawing = false;
        let lastX = 0;
        let lastY = 0;
        let tool = 'pencil';
        let drawingHistory = [];
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');
        
        // Set canvas size
        function resizeCanvas() {
            const container = canvas.parentElement;
            canvas.width = container.clientWidth;
            canvas.height = container.clientWidth * 0.75; // 4:3 aspect ratio
        }

        window.addEventListener('resize', resizeCanvas);
        resizeCanvas();

        // Drawing functions
        function startDrawing(e) {
            isDrawing = true;
            [lastX, lastY] = getCoords(e);
            saveCanvasState();
        }

        function draw(e) {
            if (!isDrawing) return;
            e.preventDefault();
            
            const [x, y] = getCoords(e);
            ctx.beginPath();
            ctx.moveTo(lastX, lastY);
            ctx.lineTo(x, y);
            
            ctx.strokeStyle = document.getElementById('colorPicker').value;
            ctx.lineWidth = document.getElementById('sizeSlider').value;
            
            if (tool === 'brush') {
                ctx.lineCap = 'round';
                ctx.lineJoin = 'round';
            } else {
                ctx.lineCap = 'square';
                ctx.lineJoin = 'miter';
            }
            
            ctx.stroke();
            [lastX, lastY] = [x, y];
        }

        function stopDrawing() {
            isDrawing = false;
        }

        function getCoords(e) {
            const rect = canvas.getBoundingClientRect();
            const x = (e.clientX || e.touches[0].clientX) - rect.left;
            const y = (e.clientY || e.touches[0].clientY) - rect.top;
            return [x, y];
        }

        function saveCanvasState() {
            drawingHistory.push(canvas.toDataURL());
            if (drawingHistory.length > 10) drawingHistory.shift();
        }

        function undo() {
            if (drawingHistory.length > 0) {
                const img = new Image();
                img.src = drawingHistory.pop();
                img.onload = () => {
                    ctx.clearRect(0, 0, canvas.width, canvas.height);
                    ctx.drawImage(img, 0, 0);
                };
            }
        }

        // Event listeners
        canvas.addEventListener('mousedown', startDrawing);
        canvas.addEventListener('mousemove', draw);
        canvas.addEventListener('mouseup', stopDrawing);
        canvas.addEventListener('mouseout', stopDrawing);

        canvas.addEventListener('touchstart', startDrawing);
        canvas.addEventListener('touchmove', draw);
        canvas.addEventListener('touchend', stopDrawing);

        document.getElementById('pencilBtn').addEventListener('click', () => {
            tool = 'pencil';
            document.getElementById('pencilBtn').classList.add('active');
            document.getElementById('brushBtn').classList.remove('active');
        });

        document.getElementById('brushBtn').addEventListener('click', () => {
            tool = 'brush';
            document.getElementById('brushBtn').classList.add('active');
            document.getElementById('pencilBtn').classList.remove('active');
        });

        document.getElementById('undoBtn').addEventListener('click', undo);

        document.getElementById('clearBtn').addEventListener('click', () => {
            saveCanvasState();
            ctx.clearRect(0, 0, canvas.width, canvas.height);
        });

        // ZAD Integration
        async function initPublicMode() {
            currentUser = await generateAnonymousUser();
            if (currentUser?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                document.getElementById('current-user-label').textContent = currentUser.userLabel;
                startPolling();
                loadLatestData();
            }
        }

        document.getElementById('saveBtn').addEventListener('click', async () => {
            const imageData = canvas.toDataURL('image/png');
            await save('painting', {
                image: imageData,
                created_at: new Date().toISOString()
            });
            loadLatestData();
        });

        async function loadLatestData() {
            const paintings = await load('painting');
            const gallery = document.getElementById('gallery');
            gallery.innerHTML = '';
            
            paintings.sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
                    .slice(0, 12)
                    .forEach(painting => {
                const div = document.createElement('div');
                div.className = 'gallery-item';
                div.innerHTML = `
                    <img src="${painting.image}" alt="Painting">
                    <div>by ${painting.author}</div>
                `;
                gallery.appendChild(div);
            });
        }

        let pollingInterval;
        function startPolling() {
            pollingInterval = setInterval(() => loadLatestData(), 2000);
        }

        // Initialize
        initPublicMode();
    </script>
</body>
</html>