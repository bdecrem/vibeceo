Here's a mobile-friendly Wordle implementation as a single HTML file:

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Wordle Mobile</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            user-select: none;
        }

        body {
            font-family: Arial, sans-serif;
            background: #121213;
            color: white;
            display: flex;
            flex-direction: column;
            height: 100vh;
            touch-action: manipulation;
        }

        .header {
            text-align: center;
            padding: 10px;
            border-bottom: 1px solid #3a3a3c;
        }

        .game-board {
            display: grid;
            grid-template-rows: repeat(6, 1fr);
            gap: 5px;
            padding: 10px;
            margin: auto;
            width: 100%;
            max-width: 350px;
        }

        .row {
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            gap: 5px;
        }

        .tile {
            aspect-ratio: 1;
            border: 2px solid #3a3a3c;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 2em;
            font-weight: bold;
            text-transform: uppercase;
        }

        .keyboard {
            display: grid;
            grid-template-rows: repeat(3, 1fr);
            gap: 8px;
            padding: 10px;
            margin-top: auto;
        }

        .keyboard-row {
            display: flex;
            justify-content: center;
            gap: 6px;
        }

        .key {
            background: #818384;
            border: none;
            border-radius: 4px;
            color: white;
            font-weight: bold;
            padding: 15px;
            min-width: 30px;
            touch-action: manipulation;
        }

        .key.wide {
            min-width: 65px;
        }

        .correct {
            background: #538d4e !important;
            border-color: #538d4e !important;
        }

        .present {
            background: #b59f3b !important;
            border-color: #b59f3b !important;
        }

        .absent {
            background: #3a3a3c !important;
            border-color: #3a3a3c !important;
        }

        .shake {
            animation: shake 0.5s;
        }

        .pop {
            animation: pop 0.1s;
        }

        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(5px); }
            75% { transform: translateX(-5px); }
        }

        @keyframes pop {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.1); }
        }

        .message {
            position: fixed;
            top: 20%;
            left: 50%;
            transform: translateX(-50%);
            background: white;
            color: black;
            padding: 20px;
            border-radius: 5px;
            display: none;
            text-align: center;
        }
    </style>
</head>
<body>
    <div class="header">WORDLE</div>
    <div class="game-board"></div>
    <div class="keyboard"></div>
    <div class="message"></div>

    <script>
        const WORDS = ['APPLE', 'BEACH', 'CHAIR', 'DANCE', 'EAGLE', 'FLAME', 'GRAPE', 'HOUSE', 'IMAGE', 'JUICE', 'KNIFE', 'LEMON', 'MOUSE', 'NIGHT', 'OCEAN', 'PIANO', 'QUEEN', 'RADIO', 'SNAKE', 'TABLE'];
        
        const gameState = {
            targetWord: '',
            currentRow: 0,
            currentTile: 0,
            isGameOver: false,
            guesses: Array(6).fill(''),
        };

        const board = document.querySelector('.game-board');
        const keyboard = document.querySelector('.keyboard');
        const messageEl = document.querySelector('.message');

        // Initialize game
        function initGame() {
            gameState.targetWord = WORDS[Math.floor(Math.random() * WORDS.length)];
            createBoard();
            createKeyboard();
        }

        function createBoard() {
            for (let i = 0; i < 6; i++) {
                const row = document.createElement('div');
                row.className = 'row';
                for (let j = 0; j < 5; j++) {
                    const tile = document.createElement('div');
                    tile.className = 'tile';
                    row.appendChild(tile);
                }
                board.appendChild(row);
            }
        }

        function createKeyboard() {
            const layout = [
                ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'],
                ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'],
                ['ENTER', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', '←']
            ];

            layout.forEach(row => {
                const keyboardRow = document.createElement('div');
                keyboardRow.className = 'keyboard-row';
                
                row.forEach(key => {
                    const button = document.createElement('button');
                    button.textContent = key;
                    button.className = 'key';
                    if (key === 'ENTER' || key === '←') button.className += ' wide';
                    button.addEventListener('click', () => handleInput(key));
                    keyboardRow.appendChild(button);
                });
                
                keyboard.appendChild(keyboardRow);
            });
        }

        function handleInput(key) {
            if (gameState.isGameOver) return;

            if (key === '←') {
                if (gameState.currentTile > 0) {
                    gameState.currentTile--;
                    gameState.guesses[gameState.currentRow] = 
                        gameState.guesses[gameState.currentRow].slice(0, -1);
                    updateBoard();
                }
            } else if (key === 'ENTER') {
                if (gameState.currentTile === 5) {
                    submitGuess();
                }
            } else if (gameState.currentTile < 5) {
                gameState.guesses[gameState.currentRow] += key;
                gameState.currentTile++;
                updateBoard();
            }
        }

        function updateBoard() {
            const tiles = document.querySelectorAll('.row')[gameState.currentRow].children;
            const guess = gameState.guesses[gameState.currentRow];
            
            for (let i = 0; i < 5; i++) {
                tiles[i].textContent = guess[i] || '';
                if (guess[i]) {
                    tiles[i].classList.add('pop');
                    setTimeout(() => tiles[i].classList.remove('pop'), 100);
                }
            }
        }

        function submitGuess() {
            const guess = gameState.guesses[gameState.currentRow];
            if (!WORDS.includes(guess)) {
                showMessage('Not in word list');
                shakeRow();
                return;
            }

            const tiles = document.querySelectorAll('.row')[gameState.currentRow].children;
            const keyButtons = document.querySelectorAll('.key');
            
            // Check letters
            for (let i = 0; i < 5; i++) {
                const letter = guess[i];
                if (letter === gameState.targetWord[i]) {
                    tiles[i].classList.add('correct');
                    keyButtons.forEach(button => {
                        if (button.textContent === letter) {
                            button.classList.add('correct');
                        }
                    });
                } else if (gameState.targetWord.includes(letter)) {
                    tiles[i].classList.add('present');
                    keyButtons.forEach(button => {
                        if (button.textContent === letter && !button.classList.contains('correct')) {
                            button.classList.add('present');
                        }
                    });
                } else {
                    tiles[i].classList.add('absent');
                    keyButtons.forEach(button => {
                        if (button.textContent === letter) {
                            button.classList.add('absent');
                        }
                    });
                }
            }

            if (guess === gameState.targetWord) {
                gameState.isGameOver = true;
                showMessage('Brilliant!');
                return;
            }

            if (gameState.currentRow === 5) {
                gameState.isGameOver = true;
                showMessage(gameState.targetWord);
                return;
            }

            gameState.currentRow++;
            gameState.currentTile = 0;
        }

        function showMessage(text) {
            messageEl.textContent = text;
            messageEl.style.display = 'block';
            setTimeout(() => {
                messageEl.style.display = 'none';
            }, 2000);
        }

        function shakeRow() {
            const row = document.querySelectorAll('.row')[gameState.currentRow];
            row.classList.add('shake');
            setTimeout(() => row.classList.remove('shake'), 500);
        }

        // Handle physical keyboard
        document.addEventListener('keydown', (e) => {
            const key = e.key.toUpperCase();
            if (key === 'BACKSPACE') {
                handleInput('←');
            } else if (key === 'ENTER') {
                handleInput('ENTER');
            } else if (/^[A-Z]$/.test(key)) {
                handleInput(key);
            }
        });

        // Initialize the game
        initGame();
    </script>
</body>
</html>
```

This implementation includes:

1. A fully responsive design that works well on mobile devices
2. Touch-friendly keyboard with visual feedback
3. Animations for tile placement and incorrect guesses
4. Color-coded feedback for correct/incorrect letters
5. Support for both touch and physical keyboard input
6. Visual feedback for invalid words
7. Game over states for both winning and losing

Key features:
- The game board automatically scales to fit the screen
- The virtual keyboard is sized appropriately for touch input
- Animations provide feedback for user actions
- The game includes a small dictionary of common 5-letter words
- Color coding matches the original Wordle game
- Messages appear for game events (invalid words, winning, etc.)

To play:
1. Tap letters on the virtual keyboard to enter your guess
2. Use the backspace (←) to delete letters
3. Press ENTER to submit your guess
4. Green tiles indicate correct letters in correct positions
5. Yellow tiles indicate correct letters in wrong positions
6. Gray tiles indicate letters not in the word
7. You have 6 attempts to guess the word

The game is completely self-contained and requires no external resources. It will work offline and can be saved as a single HTML file.