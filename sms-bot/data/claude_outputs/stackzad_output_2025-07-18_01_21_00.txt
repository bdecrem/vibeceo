I'll help create an admin interface for managing paintings. Let's build a clean, functional admin panel that displays paintings with delete functionality.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>Painting Admin Panel</title>
    <style>
        * {
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: #0a0a0a;
            color: #fff;
            margin: 0;
            padding: 10px;
            font-size: 16px;
        }

        .app-container {
            max-width: 1200px;
            margin: 0 auto;
            background: #1a1a1a;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 0 40px rgba(0,0,0,0.5);
        }

        h1 {
            font-size: 24px;
            margin: 0 0 20px 0;
            color: #ff0066;
        }

        button {
            background: #ff0066;
            color: white;
            border: none;
            padding: 16px 24px;
            border-radius: 6px;
            font-weight: bold;
            cursor: pointer;
            margin: 8px 0;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-size: 16px;
            min-height: 44px;
        }

        button:hover {
            background: #ff3388;
        }

        button:active {
            transform: scale(0.98);
        }

        .delete-btn {
            background: #ff3333;
            padding: 8px 16px;
        }

        .delete-btn:hover {
            background: #ff5555;
        }

        input, select {
            background: #2a2a2a;
            border: 1px solid #444;
            color: white;
            padding: 16px;
            border-radius: 6px;
            width: 100%;
            margin: 10px 0;
            font-size: 16px;
            min-height: 44px;
        }

        .screen { display: none; }
        .screen.active { display: block; }

        .paintings-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .painting-card {
            background: #2a2a2a;
            border-radius: 8px;
            padding: 16px;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .painting-info {
            flex-grow: 1;
        }

        .painting-meta {
            font-size: 14px;
            color: #888;
        }

        .status-bar {
            background: #2a2a2a;
            padding: 10px;
            border-radius: 6px;
            margin-bottom: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .filters {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .filter-btn {
            background: #333;
            padding: 8px 16px;
        }

        .filter-btn.active {
            background: #ff0066;
        }

        @media (min-width: 600px) {
            body { padding: 20px; }
            .app-container { padding: 30px; }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <div id="welcome-screen" class="screen active">
            <h1>Painting Admin Panel</h1>
            <p>Manage and curate the painting collection</p>
            <button onclick="showNewUserScreen()">New Admin</button>
            <button onclick="showReturningUserScreen()">Returning Admin</button>
        </div>
        
        <div id="new-user-screen" class="screen">
            <h1>New Admin Registration</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Register & Enter</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="returning-user-screen" class="screen">
            <h1>Returning Admin</h1>
            <select id="user-label-select"></select>
            <input type="text" id="returning-passcode" placeholder="4-digit code" maxlength="4">
            <button onclick="loginReturningUser()">Login</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="main-screen" class="screen">
            <div class="status-bar">
                <h1>Painting Admin Panel</h1>
                <div id="user-status">Admin: <span id="current-user-label"></span></div>
            </div>

            <div class="filters">
                <button class="filter-btn active" onclick="setFilter('all')">All</button>
                <button class="filter-btn" onclick="setFilter('recent')">Recent</button>
                <button class="filter-btn" onclick="setFilter('oldest')">Oldest</button>
            </div>

            <div id="paintings-container" class="paintings-grid">
                <!-- Paintings will be loaded here -->
            </div>
            
            <button onclick="showScreen('welcome-screen')">Logout</button>
        </div>
    </div>

    <script>
        let currentUser = null;
        let currentFilter = 'all';

        // Authentication Functions
        async function generateNewUser() {
            const slots = await checkAvailableSlots();
            if (slots.isFull) {
                alert('App is full!');
                return false;
            }
            
            const user = await generateUser();
            if (user?.success) {
                currentUser = user;
                document.getElementById('new-user-info').innerHTML = 
                    `Your Admin ID: ${user.userLabel}<br>Code: ${user.passcode}<br>Save these!`;
                return true;
            }
            return false;
        }

        async function registerNewUser() {
            if (!currentUser) return;
            
            const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
            if (result?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                enterMainScreen();
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            await generateNewUser();
        }

        async function loginReturningUser() {
            const label = document.getElementById('user-label-select').value;
            const passcode = document.getElementById('returning-passcode').value;
            
            const result = await authenticateUser(label, passcode);
            if (result?.success) {
                currentUser = { userLabel: label, passcode, participantId: result.user.participantId };
                updateZadAuth(label, result.user.participantId);
                enterMainScreen();
            } else {
                alert('Wrong code!');
            }
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            if (screenId !== 'main-screen') stopPolling();
        }

        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const slots = await checkAvailableSlots();
            const select = document.getElementById('user-label-select');
            select.innerHTML = '<option>Select Admin</option>';
            slots.usedLabels.forEach(label => {
                select.innerHTML += `<option>${label}</option>`;
            });
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            startPolling();
            loadLatestData();
        }

        // Painting Management Functions
        async function loadLatestData() {
            const paintings = await load('join');
            updatePaintingsDisplay(paintings);
        }

        function updatePaintingsDisplay(paintings) {
            let filtered = [...paintings];
            
            switch(currentFilter) {
                case 'recent':
                    filtered.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
                    break;
                case 'oldest':
                    filtered.sort((a, b) => new Date(a.created_at) - new Date(b.created_at));
                    break;
            }

            const container = document.getElementById('paintings-container');
            container.innerHTML = filtered.map(painting => `
                <div class="painting-card">
                    <div class="painting-info">
                        <h3>${painting.message || 'Untitled'}</h3>
                        <div class="painting-meta">
                            <div>Created by: ${painting.author}</div>
                            <div>Date: ${new Date(painting.created_at).toLocaleDateString()}</div>
                        </div>
                    </div>
                    <button class="delete-btn" onclick="deletePainting(${painting.id})">
                        Delete Painting
                    </button>
                </div>
            `).join('');
        }

        async function deletePainting(id) {
            if (confirm('Are you sure you want to delete this painting?')) {
                await save('delete', { recordId: id });
                loadLatestData();
            }
        }

        function setFilter(filter) {
            currentFilter = filter;
            document.querySelectorAll('.filter-btn').forEach(btn => {
                btn.classList.toggle('active', btn.textContent.toLowerCase() === filter);
            });
            loadLatestData();
        }

        // Polling Setup
        let pollingInterval;

        function startPolling() {
            pollingInterval = setInterval(() => loadLatestData(), 2000);
        }

        function stopPolling() {
            if (pollingInterval) clearInterval(pollingInterval);
        }

        // Initialize
        initAuth();
    </script>
</body>
</html>