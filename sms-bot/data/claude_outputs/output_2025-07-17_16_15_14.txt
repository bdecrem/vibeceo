<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WTAF CONTACTS TRACKER</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=Inter:wght@400;600&display=swap');

        body { 
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #FF2E93 0%, #7C3AED 50%, #3F88FF 100%);
            background-size: 400% 400%;
            animation: gradientShift 15s ease-in-out infinite;
            color: white;
            overflow-x: hidden;
            margin: 0;
            min-height: 100vh;
        }

        h1, h2, h3 {
            font-family: 'Space Grotesk', sans-serif;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: -0.02em;
        }

        @keyframes gradientShift {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }

        .app-container {
            max-width: 800px;
            margin: 0 auto;
            background: rgba(0,0,0,0.4);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            padding: 2rem;
            border: 1px solid rgba(255,255,255,0.1);
            position: relative;
            z-index: 10;
            min-height: 90vh;
        }

        .screen { display: none; }
        .screen.active { display: block; animation: fadeIn 0.3s ease; }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        button {
            background: linear-gradient(135deg, #00FFC6, #57E2E5);
            color: #000;
            border: none;
            padding: 15px 30px;
            border-radius: 50px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-size: 14px;
            margin: 10px 5px;
        }

        button:hover {
            transform: scale(1.05);
            box-shadow: 0 0 30px rgba(0, 255, 198, 0.5);
        }

        input, select, textarea {
            background: rgba(255,255,255,0.1);
            border: 2px solid rgba(255,255,255,0.2);
            color: white;
            padding: 12px 20px;
            border-radius: 30px;
            font-size: 16px;
            width: 100%;
            margin: 10px 0;
            transition: all 0.3s ease;
        }

        input:focus, select:focus, textarea:focus {
            outline: none;
            border-color: #00FFC6;
            box-shadow: 0 0 20px rgba(0, 255, 198, 0.3);
        }

        .contact-card {
            background: rgba(255,255,255,0.1);
            border-radius: 15px;
            padding: 20px;
            margin: 15px 0;
            border: 1px solid rgba(255,255,255,0.2);
            position: relative;
            overflow: hidden;
        }

        .contact-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(45deg, transparent, rgba(255,255,255,0.1));
            pointer-events: none;
        }

        .contact-actions {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }

        .contacted-btn {
            background: linear-gradient(135deg, #FF2E93, #7C3AED);
        }

        .note-btn {
            background: linear-gradient(135deg, #3F88FF, #00FFC6);
        }

        .filter-buttons {
            display: flex;
            gap: 10px;
            margin: 20px 0;
            flex-wrap: wrap;
        }

        .notes-area {
            display: none;
            margin-top: 15px;
        }

        .notes-area.active {
            display: block;
            animation: slideDown 0.3s ease;
        }

        @keyframes slideDown {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .status-badge {
            position: absolute;
            top: 10px;
            right: 10px;
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 12px;
            text-transform: uppercase;
            font-weight: bold;
        }

        .status-badge.contacted {
            background: #00FFC6;
            color: black;
        }

        .status-badge.pending {
            background: #FF2E93;
            color: white;
        }

        @keyframes glitch {
            0%, 100% { text-shadow: 2px 2px 0 #FF2E93, -2px -2px 0 #00FFC6; }
            25% { text-shadow: -2px 2px 0 #3F88FF, 2px -2px 0 #FF2E93; }
            50% { text-shadow: 2px -2px 0 #00FFC6, -2px 2px 0 #7C3AED; }
            75% { text-shadow: -2px -2px 0 #FF2E93, 2px 2px 0 #3F88FF; }
        }

        .floating-emoji {
            position: fixed;
            font-size: 2rem;
            animation: float 6s ease-in-out infinite;
            pointer-events: none;
            z-index: 5;
            opacity: 0.8;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            50% { transform: translateY(-20px) rotate(10deg); }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <div id="welcome-screen" class="screen active">
            <h1>WTAF CONTACTS TRACKER</h1>
            <p>Track who you've shown WTAF.me to and what they thought! 🎯</p>
            <button onclick="showNewUserScreen()">New User</button>
            <button onclick="showReturningUserScreen()">Returning User</button>
        </div>
        
        <div id="new-user-screen" class="screen">
            <h1>New User</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Register & Enter App</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="returning-user-screen" class="screen">
            <h1>Returning User</h1>
            <select id="user-label-select">
                <option>Select User</option>
            </select>
            <input type="text" id="returning-passcode" placeholder="Enter 4-digit passcode" maxlength="4">
            <button onclick="loginReturningUser()">Login</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="main-screen" class="screen">
            <h1>WTAF CONTACTS</h1>
            <div id="user-status">Welcome, <span id="current-user-label"></span>!</div>
            
            <div id="app-content">
                <div class="add-contact">
                    <input type="text" id="new-contact-name" placeholder="Enter contact name">
                    <button onclick="addContact()">ADD TO THE LIST 🎯</button>
                </div>

                <div class="filter-buttons">
                    <button onclick="filterContacts('all')">SHOW ALL 👥</button>
                    <button onclick="filterContacts('contacted')">CONTACTED ✅</button>
                    <button onclick="filterContacts('pending')">STILL TO GO 🎯</button>
                </div>

                <div id="contacts-list"></div>
            </div>
            
            <button onclick="showScreen('welcome-screen')">Leave App</button>
        </div>
    </div>

    <script>
        const APP_ID = 'test1';
        const USER_LABELS = ['user1🎯', 'user2⚡', 'user3🌟', 'user4🔥', 'user5💎'];
        let currentUser = null;
        let pollingInterval;

        async function addContact() {
            const name = document.getElementById('new-contact-name').value.trim();
            if (!name) return;

            await save('contact', {
                name: name,
                contacted: false,
                notes: '',
                timestamp: Date.now()
            });

            document.getElementById('new-contact-name').value = '';
            await loadLatestData();
        }

        async function toggleContacted(contactId) {
            const contacts = await load('contact');
            const contact = contacts.find(c => c.id === contactId);
            
            await save('update_task', {
                taskId: contactId,
                updates: {
                    contacted: !contact.contacted
                }
            });

            await loadLatestData();
        }

        async function saveNote(contactId) {
            const noteArea = document.getElementById(`notes-${contactId}`);
            const newNote = noteArea.value.trim();

            await save('update_task', {
                taskId: contactId,
                updates: {
                    notes: newNote
                }
            });

            await loadLatestData();
        }

        function toggleNotes(contactId) {
            const notesArea = document.getElementById(`notes-container-${contactId}`);
            notesArea.classList.toggle('active');
        }

        async function filterContacts(filter) {
            const contacts = await load('contact');
            const contactsList = document.getElementById('contacts-list');
            contactsList.innerHTML = '';

            contacts
                .filter(contact => {
                    if (filter === 'all') return true;
                    if (filter === 'contacted') return contact.contacted;
                    if (filter === 'pending') return !contact.contacted;
                    return true;
                })
                .sort((a, b) => b.timestamp - a.timestamp)
                .forEach(contact => {
                    const card = document.createElement('div');
                    card.className = 'contact-card';
                    card.innerHTML = `
                        <div class="status-badge ${contact.contacted ? 'contacted' : 'pending'}">
                            ${contact.contacted ? 'CONTACTED' : 'PENDING'}
                        </div>
                        <h3>${contact.name}</h3>
                        <div class="contact-actions">
                            <button class="contacted-btn" onclick="toggleContacted('${contact.id}')">
                                ${contact.contacted ? 'UNDO CONTACT' : 'MARK CONTACTED'}
                            </button>
                            <button class="note-btn" onclick="toggleNotes('${contact.id}')">
                                ${contact.notes ? 'EDIT NOTES' : 'ADD NOTES'}
                            </button>
                        </div>
                        <div id="notes-container-${contact.id}" class="notes-area">
                            <textarea id="notes-${contact.id}" placeholder="Enter notes about the conversation...">${contact.notes || ''}</textarea>
                            <button onclick="saveNote('${contact.id}')">SAVE NOTES 📝</button>
                        </div>
                    `;
                    contactsList.appendChild(card);
                });
        }

        async function loadLatestData() {
            try {
                const contacts = await load('contact');
                await filterContacts('all');
            } catch (error) {
                console.error('Error loading contacts:', error);
            }
        }

        function startPolling() {
            pollingInterval = setInterval(loadLatestData, 2000);
        }

        function stopPolling() {
            if (pollingInterval) {
                clearInterval(pollingInterval);
                pollingInterval = null;
            }
        }

        // Initialize floating emojis
        const emojis = ["💀", "📟", "🔪", "🧃", "🚧", "🔥", "🧨", "🛠️"];
        for (let i = 0; i < emojis.length; i++) {
            const emoji = document.createElement('div');
            emoji.className = 'floating-emoji';
            emoji.innerText = emojis[i];
            emoji.style.position = 'fixed';
            
            if (Math.random() > 0.5) {
                emoji.style.top = Math.random() > 0.5 ? '5%' : '85%';
                emoji.style.left = `${Math.random() * 90 + 5}%`;
            } else {
                emoji.style.left = Math.random() > 0.5 ? '2%' : '92%';
                emoji.style.top = `${Math.random() * 90 + 5}%`;
            }
            
            emoji.setAttribute('data-value', (i % 4) + 1);
            document.body.appendChild(emoji);
        }

        // Mouse parallax effect
        document.addEventListener('mousemove', (e) => {
            document.querySelectorAll('.floating-emoji').forEach((elem) => {
                const speed = elem.getAttribute('data-value') || 2;
                const x = (e.clientX * speed) / 100;
                const y = (e.clientY * speed) / 100;
                elem.style.transform = `translateX(${x}px) translateY(${y}px)`;
            });
        });

        // Easter egg
        console.log('🔥 Welcome to the WTAF dimension! Type wtaf() in console for secrets...');
        window.wtaf = function() {
            document.body.style.animation = 'rainbow 1s infinite';
            setTimeout(() => {
                document.body.style.animation = '';
                alert('🎉 WTAF MASTER MODE UNLOCKED! You found the secret!');
            }, 3000);
        };

        // Authentication functions
        let currentUser = null;

        async function generateNewUser() {
            try {
                const slots = await checkAvailableSlots();
                
                if (slots.isFull) {
                    alert('SQUAD\'S FULL, TRY ANOTHER DIMENSION 🚫');
                    return false;
                }
                
                const user = await generateUser();
                if (user && user.success) {
                    currentUser = {
                        userLabel: user.userLabel,
                        passcode: user.passcode,
                        participantId: user.participantId
                    };
                    
                    document.getElementById('new-user-info').innerHTML = 
                        `<strong>YOUR LABEL:</strong> ${currentUser.userLabel}<br><strong>SECRET DIGITS:</strong> ${currentUser.passcode}<br><em>SCREENSHOT THIS OR CRY LATER 📸</em>`;
                    
                    return true;
                } else {
                    alert('NO MORE ROOM IN THIS CHAOS REALM 🌀');
                    return false;
                }
            } catch (error) {
                console.error('User generation error:', error);
                alert('GENERATION EXPLODED, TRY AGAIN 💥');
                return false;
            }
        }

        async function registerNewUser() {
            if (!currentUser) {
                alert('GENERATE YOUR IDENTITY FIRST, CHAOS AGENT 🎭');
                return;
            }
            
            try {
                const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
                if (result && result.success) {
                    updateZadAuth(currentUser.userLabel, currentUser.participantId);
                    enterMainScreen();
                } else {
                    alert('REGISTRATION EXPLODED, TRY AGAIN 💥');
                }
            } catch (error) {
                console.error('Registration error:', error);
                alert('REGISTRATION EXPLODED, TRY AGAIN 💥');
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            const success = await generateNewUser();
            if (!success) {
                showScreen('welcome-screen');
            }
        }

        async function loginReturningUser() {
            const selectedLabel = document.getElementById('user-label-select').value;
            const enteredPasscode = document.getElementById('returning-passcode').value.trim();
            
            if (!selectedLabel || selectedLabel === 'Select User') {
                alert('PICK YOUR IDENTITY, PHANTOM 👻');
                return;
            }
            
            if (!enteredPasscode || enteredPasscode.length !== 4) {
                alert('4 DIGITS OF CHAOS REQUIRED 🔢');
                return;
            }
            
            try {
                const result = await authenticateUser(selectedLabel, enteredPasscode);
                if (result && result.success) {
                    currentUser = {
                        userLabel: selectedLabel,
                        passcode: enteredPasscode,
                        participantId: result.user.participantId
                    };
                    updateZadAuth(currentUser.userLabel, currentUser.participantId);
                    enterMainScreen();
                } else {
                    alert('NICE TRY, WRONG VIBES ❌\n\nMake sure you\'re using the correct passcode from when you registered.');
                }
            } catch (error) {
                console.error('Login error:', error);
                alert('LOGIN MALFUNCTION, REALITY GLITCHING 🌀\n\nError: ' + error.message);
            }
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(screen => 
                screen.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            
            if (screenId !== 'main-screen') {
                stopPolling();
            }
        }

        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            
            try {
                const slots = await checkAvailableSlots();
                const userSelect = document.getElementById('user-label-select');
                userSelect.innerHTML = '<option>Select User</option>';
                
                slots.usedLabels.forEach(label => {
                    const option = document.createElement('option');
                    option.value = label;
                    option.textContent = label;
                    userSelect.appendChild(option);
                });
                
                if (slots.usedLabels.length === 0) {
                    userSelect.innerHTML = '<option>No users registered yet</option>';
                }
            } catch (error) {
                console.error('Error loading users:', error);
                const userSelect = document.getElementById('user-label-select');
                userSelect.innerHTML = '<option>Error loading users</option>';
            }
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            startPolling();
            loadLatestData();
        }

        initAuth();
    </script>
</body>
</html>