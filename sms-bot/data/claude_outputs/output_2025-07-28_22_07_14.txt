```html
<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
<title>Asteroids</title>
<style>
body {
  margin: 0;
  background: #000;
  touch-action: none;
  overflow: hidden;
}
#game {
  position: absolute;
  top: 0;
  left: 0;
}
#controls {
  position: fixed;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 120px;
  background: #111;
  display: flex;
  justify-content: space-between;
  align-items: center;
  z-index: 1000;
}
.btn {
  width: 60px;
  height: 60px;
  background: #333;
  border: none;
  border-radius: 50%;
  color: white;
  font-size: 24px;
  margin: 10px;
  touch-action: none;
}
#score {
  color: white;
  font-size: 24px;
  position: absolute;
  top: 10px;
  left: 10px;
}
#mobile { display: none; }
@media (max-width: 800px) {
  #mobile { display: flex; }
  #desktop { display: none; }
}
</style>
</head>
<body>
<canvas id="game"></canvas>
<div id="score">0</div>

<div id="controls">
  <div id="mobile">
    <button class="btn" id="left">‚¨ÖÔ∏è</button>
    <button class="btn" id="thrust">‚¨ÜÔ∏è</button>
    <button class="btn" id="right">‚û°Ô∏è</button>
    <button class="btn" id="fire">üî•</button>
  </div>
  <div id="desktop">Use arrow keys to move, space to fire</div>
</div>

<script>
const canvas = document.getElementById('game');
const ctx = canvas.getContext('2d');
const scoreEl = document.getElementById('score');

let width, height, controlsHeight = 120;
let gameState = 'intro';
let score = 0;

function resize() {
  width = window.innerWidth;
  height = window.innerHeight - controlsHeight;
  const dpr = window.devicePixelRatio || 1;
  canvas.width = width * dpr;
  canvas.height = height * dpr;
  canvas.style.width = width + 'px';
  canvas.style.height = height + 'px';
  ctx.scale(dpr, dpr);
}
window.addEventListener('resize', resize);
resize();

const keys = {};
window.addEventListener('keydown', e => keys[e.key] = true);
window.addEventListener('keyup', e => keys[e.key] = false);

const buttons = {};
['left', 'right', 'thrust', 'fire'].forEach(id => {
  const btn = document.getElementById(id);
  btn.addEventListener('touchstart', e => {
    e.preventDefault();
    buttons[id] = true;
  });
  btn.addEventListener('touchend', e => {
    e.preventDefault(); 
    buttons[id] = false;
  });
});

const ship = {
  x: width/2,
  y: height/2,
  r: 20,
  a: 0,
  dx: 0,
  dy: 0,
  thrust: false
};

let bullets = [];
let asteroids = [];
let lastShot = 0;

function spawnAsteroids() {
  for(let i = 0; i < 5; i++) {
    asteroids.push({
      x: Math.random() * width,
      y: Math.random() * height,
      r: 40 + Math.random() * 20,
      dx: (Math.random() - 0.5) * 4,
      dy: (Math.random() - 0.5) * 4,
      vertices: Math.floor(8 + Math.random() * 4)
    });
  }
}

function drawShip() {
  ctx.save();
  ctx.translate(ship.x, ship.y);
  ctx.rotate(ship.a);
  ctx.beginPath();
  ctx.moveTo(-ship.r, ship.r);
  ctx.lineTo(ship.r, 0);
  ctx.lineTo(-ship.r, -ship.r);
  ctx.closePath();
  ctx.strokeStyle = 'white';
  ctx.stroke();
  
  if(ship.thrust) {
    ctx.beginPath();
    ctx.moveTo(-ship.r, ship.r/2);
    ctx.lineTo(-ship.r-15, 0);
    ctx.lineTo(-ship.r, -ship.r/2);
    ctx.strokeStyle = '#f93';
    ctx.stroke();
  }
  ctx.restore();
}

function drawAsteroids() {
  asteroids.forEach(a => {
    ctx.beginPath();
    for(let i = 0; i < a.vertices; i++) {
      const angle = (i/a.vertices) * Math.PI * 2;
      const x = a.x + Math.cos(angle) * a.r;
      const y = a.y + Math.sin(angle) * a.r;
      if(i === 0) ctx.moveTo(x, y);
      else ctx.lineTo(x, y);
    }
    ctx.closePath();
    ctx.strokeStyle = 'white';
    ctx.stroke();
  });
}

function drawBullets() {
  bullets.forEach(b => {
    ctx.beginPath();
    ctx.arc(b.x, b.y, 2, 0, Math.PI * 2);
    ctx.fillStyle = 'white';
    ctx.fill();
  });
}

function update(dt) {
  if(gameState !== 'play') return;

  if((keys.ArrowLeft || buttons.left) && ship.a > -Math.PI*2) ship.a -= 0.1;
  if((keys.ArrowRight || buttons.right) && ship.a < Math.PI*2) ship.a += 0.1;
  
  if(keys.ArrowUp || buttons.thrust) {
    ship.thrust = true;
    ship.dx += Math.cos(ship.a) * 0.5;
    ship.dy += Math.sin(ship.a) * 0.5;
  } else {
    ship.thrust = false;
  }

  if((keys[' '] || buttons.fire) && Date.now() - lastShot > 250) {
    bullets.push({
      x: ship.x + Math.cos(ship.a) * ship.r,
      y: ship.y + Math.sin(ship.a) * ship.r,
      dx: Math.cos(ship.a) * 10,
      dy: Math.sin(ship.a) * 10
    });
    lastShot = Date.now();
  }

  ship.dx *= 0.99;
  ship.dy *= 0.99;
  
  ship.x += ship.dx;
  ship.y += ship.dy;
  
  if(ship.x < 0) ship.x = width;
  if(ship.x > width) ship.x = 0;
  if(ship.y < 0) ship.y = height;
  if(ship.y > height) ship.y = 0;

  bullets = bullets.filter(b => {
    b.x += b.dx;
    b.y += b.dy;
    return b.x > 0 && b.x < width && b.y > 0 && b.y < height;
  });

  asteroids.forEach(a => {
    a.x += a.dx;
    a.y += a.dy;
    
    if(a.x < 0) a.x = width;
    if(a.x > width) a.x = 0;
    if(a.y < 0) a.y = height;
    if(a.y > height) a.y = 0;

    const dx = ship.x - a.x;
    const dy = ship.y - a.y;
    if(Math.sqrt(dx*dx + dy*dy) < ship.r + a.r) {
      gameState = 'end';
    }
  });

  bullets.forEach(b => {
    asteroids = asteroids.filter(a => {
      const dx = b.x - a.x;
      const dy = b.y - a.y;
      const hit = Math.sqrt(dx*dx + dy*dy) < a.r;
      if(hit) score += 100;
      return !hit;
    });
  });

  if(asteroids.length === 0) {
    spawnAsteroids();
    score += 1000;
  }
}

function draw() {
  ctx.fillStyle = '#000';
  ctx.fillRect(0, 0, width, height);

  if(gameState === 'intro') {
    ctx.fillStyle = 'white';
    ctx.font = '48px monospace';
    ctx.textAlign = 'center';
    ctx.fillText('ASTEROIDS', width/2, height/2 - 50);
    ctx.font = '24px monospace';
    ctx.fillText('Click to start', width/2, height/2 + 50);
    return;
  }

  drawShip();
  drawAsteroids();
  drawBullets();
  
  if(gameState === 'end') {
    ctx.fillStyle = 'rgba(0,0,0,0.75)';
    ctx.fillRect(0, 0, width, height);
    ctx.fillStyle = 'white';
    ctx.font = '48px monospace';
    ctx.textAlign = 'center';
    ctx.fillText('GAME OVER', width/2, height/2 - 50);
    ctx.font = '24px monospace';
    ctx.fillText('Score: ' + score, width/2, height/2);
    ctx.fillText('Click to restart', width/2, height/2 + 50);
  }

  scoreEl.textContent = score;
}

let lastTime = 0;
function loop(time) {
  const dt = time - lastTime;
  lastTime = time;
  
  update(dt);
  draw();
  requestAnimationFrame(loop);
}

canvas.addEventListener('click', () => {
  if(gameState === 'intro') {
    gameState = 'play';
    spawnAsteroids();
  } else if(gameState === 'end') {
    gameState = 'play';
    score = 0;
    ship.x = width/2;
    ship.y = height/2;
    ship.dx = ship.dy = 0;
    ship.a = 0;
    bullets = [];
    asteroids = [];
    spawnAsteroids();
  }
});

requestAnimationFrame(loop);
</script>
</body>
</html>
```