<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>AI Journal Buddy</title>
    <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=JetBrains+Mono&display=swap" rel="stylesheet">
    <style>
        /* CHAOS Theme */
        :root {
            --bg: #FCFCF7;
            --border: #FFD63D;
            --shadow: #C9C2F9;
            --text: #0A0A0A;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Space Grotesk', system-ui, sans-serif;
            background: var(--bg);
            color: var(--text);
            line-height: 1.6;
            padding: 20px;
            font-size: 16px;
        }

        .screen {
            display: none;
            max-width: 666px;
            margin: 0 auto;
        }

        .screen.active {
            display: block;
        }

        h1 {
            font-size: 40px;
            text-transform: uppercase;
            transform: rotate(-1deg);
            margin-bottom: 24px;
            text-shadow: 2px 2px var(--shadow);
        }

        .card {
            background: var(--bg);
            border: 4px solid var(--border);
            padding: 20px;
            margin: 20px 0;
            box-shadow: 8px 8px var(--shadow);
            transform: rotate(1deg);
        }

        .card.entry {
            transform: rotate(-1deg);
        }

        .card.ai-suggestion {
            border-style: dashed;
            font-family: 'JetBrains Mono', monospace;
            font-size: 14px;
            background: #fff;
        }

        textarea, input {
            width: 100%;
            padding: 12px;
            font-size: 16px;
            font-family: 'Space Grotesk', system-ui, sans-serif;
            border: 3px solid var(--border);
            margin: 8px 0;
            min-height: 44px;
        }

        textarea {
            min-height: 120px;
        }

        button {
            background: var(--border);
            border: 3px solid var(--text);
            padding: 12px 24px;
            font-size: 16px;
            font-weight: bold;
            text-transform: uppercase;
            min-height: 44px;
            cursor: pointer;
            font-family: 'Space Grotesk', system-ui, sans-serif;
            transform: rotate(-1deg);
            transition: all 0.2s;
            width: 100%;
            margin: 8px 0;
        }

        button:hover {
            transform: rotate(1deg) scale(1.02);
        }

        button:active {
            transform: scale(0.98);
        }

        .entry-date {
            font-family: 'JetBrains Mono', monospace;
            font-size: 14px;
            opacity: 0.7;
        }

        .goals-display {
            font-style: italic;
            margin: 12px 0;
            padding: 12px;
            border-left: 4px solid var(--border);
        }

        @media (min-width: 768px) {
            button {
                width: auto;
            }
        }

        #ai-thinking {
            font-family: 'JetBrains Mono', monospace;
            color: var(--border);
            margin: 20px 0;
            font-weight: bold;
        }
    </style>
</head>
<body>

<div class="app-container">
    <!-- Auth Screens -->
    <div id="welcome-screen" class="screen active">
        <h1>AI Journal Buddy üìù</h1>
        <p>Your thoughtful writing companion</p>
        <button onclick="showNewUserScreen()">New User</button>
        <button onclick="showReturningUserScreen()">Returning User</button>
    </div>
    
    <div id="new-user-screen" class="screen">
        <h1>New Journal</h1>
        <div id="new-user-info"></div>
        <button onclick="registerNewUser()">Start Writing</button>
        <button onclick="showScreen('welcome-screen')">Back</button>
    </div>
    
    <div id="returning-user-screen" class="screen">
        <h1>Welcome Back</h1>
        <select id="user-label-select"></select>
        <input type="text" id="returning-passcode" placeholder="4-digit code" maxlength="4">
        <button onclick="loginReturningUser()">Open Journal</button>
        <button onclick="showScreen('welcome-screen')">Back</button>
    </div>

    <!-- Goals Screen -->
    <div id="goals-screen" class="screen">
        <h1>Set Your Goals</h1>
        <div class="card">
            <p>What are your journaling goals? What do you want to explore or achieve?</p>
            <textarea id="goals-input" placeholder="Example: I want to understand myself better, track my progress in learning piano, and document my travel experiences..."></textarea>
            <button onclick="saveGoals()">Set Goals & Start Writing</button>
        </div>
    </div>

    <!-- Main Journal Screen -->
    <div id="main-screen" class="screen">
        <h1>My Journal</h1>
        <div id="user-status">Writing as <span id="current-user-label"></span></div>
        
        <div class="goals-display" id="goals-display"></div>

        <div class="card">
            <textarea id="entry-input" placeholder="What's on your mind today?"></textarea>
            <button onclick="saveEntry()">Save Entry</button>
        </div>

        <div id="ai-suggestion" class="card ai-suggestion"></div>
        <div id="ai-thinking"></div>
        <div id="entries-container"></div>
        
        <button onclick="showScreen('welcome-screen')">Close Journal</button>
    </div>
</div>

<script>
let currentUser = null;
let pollingInterval;

// Auth Functions
async function generateNewUser() {
    const slots = await checkAvailableSlots();
    if (slots.isFull) {
        alert('Journal is full!');
        return false;
    }
    
    const user = await generateUser();
    if (user?.success) {
        currentUser = user;
        document.getElementById('new-user-info').innerHTML = 
            `Your Journal ID: ${user.userLabel}<br>Code: ${user.passcode}<br>Save these!`;
        return true;
    }
    return false;
}

async function registerNewUser() {
    if (!currentUser) return;
    
    const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
    if (result?.success) {
        updateZadAuth(currentUser.userLabel, currentUser.participantId);
        showScreen('goals-screen');
    }
}

async function showNewUserScreen() {
    showScreen('new-user-screen');
    await generateNewUser();
}

async function loginReturningUser() {
    const label = document.getElementById('user-label-select').value;
    const passcode = document.getElementById('returning-passcode').value;
    
    const result = await authenticateUser(label, passcode);
    if (result?.success) {
        currentUser = { userLabel: label, passcode, participantId: result.user.participantId };
        updateZadAuth(label, result.user.participantId);
        enterMainScreen();
    } else {
        alert('Wrong code!');
    }
}

function showScreen(screenId) {
    document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
    document.getElementById(screenId).classList.add('active');
    if (screenId === 'main-screen') {
        startPolling();
    } else {
        stopPolling();
    }
}

async function showReturningUserScreen() {
    showScreen('returning-user-screen');
    const slots = await checkAvailableSlots();
    const select = document.getElementById('user-label-select');
    select.innerHTML = '<option>Select Your Journal</option>';
    slots.usedLabels.forEach(label => {
        select.innerHTML += `<option>${label}</option>`;
    });
}

function startPolling() {
    loadLatestData();
    pollingInterval = setInterval(loadLatestData, 2000);
}

function stopPolling() {
    if (pollingInterval) clearInterval(pollingInterval);
}

// Journal Functions
async function saveGoals() {
    const goals = document.getElementById('goals-input').value.trim();
    if (!goals) {
        alert('Please write your goals first!');
        return;
    }
    
    await save('goals', { text: goals });
    enterMainScreen();
}

async function saveEntry() {
    const text = document.getElementById('entry-input').value.trim();
    if (!text) {
        alert('Please write something first!');
        return;
    }
    
    await save('entry', { text });
    document.getElementById('entry-input').value = '';
    loadLatestData();
}

function deduplicate(items, uniqueField = 'text') {
    return items.reduce((acc, item) => {
        const existing = acc.find(i => i[uniqueField] === item[uniqueField]);
        if (!existing || new Date(item.created_at) > new Date(existing.created_at)) {
            if (existing) {
                const index = acc.indexOf(existing);
                acc[index] = item;
            } else {
                acc.push(item);
            }
        }
        return acc;
    }, []);
}

async function generateNextTopic(entries, goals) {
    const thinkingEl = document.getElementById('ai-thinking');
    thinkingEl.textContent = 'ü§î Thinking of a topic...';
    
    try {
        const prompt = `Based on these journal entries: "${entries.map(e => e.text).join('" "')}
            " and these goals: "${goals.text}", suggest a thought-provoking topic for my next journal entry.
            Keep it brief (1-2 sentences) and make it personal and reflective.`;
            
        const suggestion = await generateText(prompt, {
            maxTokens: 100,
            temperature: 0.7
        });
        
        document.getElementById('ai-suggestion').innerHTML = `
            <strong>üí° Topic Suggestion:</strong><br>${suggestion}
        `;
    } catch (error) {
        document.getElementById('ai-suggestion').innerHTML = 
            'üòÖ Taking a brief break from suggestions. Write what feels right!';
    }
    
    thinkingEl.textContent = '';
}

async function loadLatestData() {
    const allGoals = await load('goals');
    const allEntries = await load('entry');
    
    // Get user's data
    const myGoals = deduplicate(
        allGoals.filter(g => g.author === getUsername())
    );
    
    const myEntries = deduplicate(
        allEntries.filter(e => e.author === getUsername())
    );

    // Display goals
    if (myGoals.length > 0) {
        document.getElementById('goals-display').textContent = 
            `üéØ Goals: ${myGoals[0].text}`;
    }

    // Generate next topic suggestion
    if (myEntries.length > 0 && myGoals.length > 0) {
        generateNextTopic(myEntries.slice(0, 3), myGoals[0]);
    }

    // Display entries in reverse chronological order
    const entriesHTML = myEntries
        .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
        .map(entry => `
            <div class="card entry">
                <div class="entry-date">
                    ${new Date(entry.created_at).toLocaleString()}
                </div>
                ${entry.text}
            </div>
        `).join('');
    
    document.getElementById('entries-container').innerHTML = entriesHTML;
}

function enterMainScreen() {
    showScreen('main-screen');
    document.getElementById('current-user-label').textContent = currentUser.userLabel;
    loadLatestData();
}

// Initialize
initAuth();
</script>
</body>
</html>