<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>Feature Ideas Board</title>
    <style>
    :root {
      --bg: #000000;
      --surface: #0a0a0a;
      --surface-light: #141414;
      --accent: #ff0066;
      --accent-hover: #ff3388;
      --accent-alt: #ffff00;
      --text: #ffffff;
      --text-dim: #666666;
      --border: #1a1a1a;
      --space-xs: 8px;
      --space-sm: 12px;
      --space-md: 16px;
      --space-lg: 24px;
      --space-xl: 32px;
    }

    * { box-sizing: border-box; margin: 0; padding: 0; }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
      background: var(--bg);
      color: var(--text);
      line-height: 1.6;
      font-size: 16px;
    }

    .app-container {
      max-width: 800px;
      margin: 0 auto;
      min-height: 100vh;
      background: var(--surface);
      position: relative;
    }

    .screen { display: none; }
    .screen.active { display: block; }

    .header {
      background: var(--surface-light);
      padding: var(--space-md);
      border-bottom: 1px solid var(--border);
    }

    .filters {
      display: flex;
      gap: var(--space-sm);
      padding: var(--space-md);
      overflow-x: auto;
      background: var(--surface-light);
      border-bottom: 1px solid var(--border);
    }

    .filter-btn {
      background: var(--surface);
      color: var(--text);
      border: 1px solid var(--border);
      padding: 8px 16px;
      border-radius: 20px;
      font-size: 14px;
      white-space: nowrap;
      cursor: pointer;
    }

    .filter-btn.active {
      background: var(--accent);
      border-color: var(--accent);
    }

    .idea-form {
      padding: var(--space-md);
      background: var(--surface-light);
      border-bottom: 1px solid var(--border);
    }

    .idea-input-group {
      display: flex;
      gap: var(--space-sm);
    }

    .idea-input {
      flex: 1;
    }

    .ideas-container {
      padding: var(--space-md);
    }

    .idea-card {
      background: var(--surface-light);
      border: 1px solid var(--border);
      border-radius: 8px;
      padding: var(--space-md);
      margin-bottom: var(--space-md);
    }

    .idea-header {
      display: flex;
      justify-content: space-between;
      margin-bottom: var(--space-sm);
      font-size: 14px;
    }

    .idea-author {
      color: var(--accent);
      font-weight: bold;
    }

    .idea-time {
      color: var(--text-dim);
    }

    .idea-category {
      display: inline-block;
      padding: 4px 8px;
      border-radius: 12px;
      font-size: 12px;
      background: var(--accent);
      margin-bottom: var(--space-sm);
    }

    .idea-text {
      margin-bottom: var(--space-md);
      font-size: 16px;
      line-height: 1.5;
    }

    .idea-actions {
      display: flex;
      gap: var(--space-md);
      align-items: center;
    }

    .reaction-btn {
      display: flex;
      align-items: center;
      gap: 4px;
      background: var(--surface);
      border: 1px solid var(--border);
      padding: 6px 12px;
      border-radius: 16px;
      cursor: pointer;
    }

    .comments-section {
      margin-top: var(--space-md);
      padding-top: var(--space-md);
      border-top: 1px solid var(--border);
    }

    .comment {
      font-size: 14px;
      margin-bottom: var(--space-sm);
      padding: var(--space-sm);
      background: var(--surface);
      border-radius: 8px;
    }

    .comment-author {
      color: var(--accent);
      font-weight: bold;
    }

    @media (max-width: 600px) {
      .idea-input-group {
        flex-direction: column;
      }
      
      button {
        width: 100%;
      }
    }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Auth Screens -->
        <div id="welcome-screen" class="screen active">
            <h1>Feature Ideas Board</h1>
            <p>Share and discuss feature ideas with the team!</p>
            <button onclick="showNewUserScreen()">New User</button>
            <button onclick="showReturningUserScreen()">Returning User</button>
        </div>

        <div id="new-user-screen" class="screen">
            <h1>New User</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Register & Enter</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <div id="returning-user-screen" class="screen">
            <h1>Returning User</h1>
            <select id="user-label-select"></select>
            <input type="text" id="returning-passcode" placeholder="4-digit code" maxlength="4">
            <button onclick="loginReturningUser()">Login</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <!-- Main App -->
        <div id="main-screen" class="screen">
            <div class="header">
                <h1>Feature Ideas Board</h1>
                <div id="user-status">Welcome, <span id="current-user-label"></span>!</div>
            </div>

            <div class="filters" id="filters">
                <button class="filter-btn active" onclick="filterIdeas('all')">All</button>
                <button class="filter-btn" onclick="filterIdeas('UI/UX')">UI/UX</button>
                <button class="filter-btn" onclick="filterIdeas('Performance')">Performance</button>
                <button class="filter-btn" onclick="filterIdeas('Security')">Security</button>
                <button class="filter-btn" onclick="filterIdeas('Feature')">Feature</button>
                <button class="filter-btn" onclick="filterIdeas('Bug Fix')">Bug Fix</button>
                <button class="filter-btn" onclick="filterIdeas('Other')">Other</button>
                <button class="filter-btn" onclick="filterIdeas('top')">ðŸ”¥ Top Ideas</button>
            </div>

            <div class="idea-form">
                <div class="idea-input-group">
                    <input type="text" id="idea-input" class="idea-input" placeholder="Share your feature idea..." maxlength="280">
                    <select id="category-select">
                        <option>UI/UX</option>
                        <option>Performance</option>
                        <option>Security</option>
                        <option>Feature</option>
                        <option>Bug Fix</option>
                        <option>Other</option>
                    </select>
                    <button onclick="submitIdea()">Share</button>
                </div>
            </div>

            <div class="ideas-container" id="ideas-container">
                <!-- Ideas will be populated here -->
            </div>
        </div>
    </div>

    <script>
    let currentUser = null;
    let currentFilter = 'all';

    // Auth Flow
    async function generateNewUser() {
        const slots = await checkAvailableSlots();
        if (slots.isFull) {
            alert('App is full!');
            return false;
        }
        const user = await generateUser();
        if (user?.success) {
            currentUser = user;
            document.getElementById('new-user-info').innerHTML = 
                `Your ID: ${user.userLabel}<br>Code: ${user.passcode}<br>Save these!`;
            return true;
        }
        return false;
    }

    async function registerNewUser() {
        if (!currentUser) return;
        const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
        if (result?.success) {
            updateZadAuth(currentUser.userLabel, currentUser.participantId);
            enterMainScreen();
        }
    }

    async function showNewUserScreen() {
        showScreen('new-user-screen');
        await generateNewUser();
    }

    async function loginReturningUser() {
        const label = document.getElementById('user-label-select').value;
        const passcode = document.getElementById('returning-passcode').value;
        const result = await authenticateUser(label, passcode);
        if (result?.success) {
            currentUser = { userLabel: label, passcode, participantId: result.user.participantId };
            updateZadAuth(label, result.user.participantId);
            enterMainScreen();
        } else {
            alert('Wrong code!');
        }
    }

    async function showReturningUserScreen() {
        showScreen('returning-user-screen');
        const slots = await checkAvailableSlots();
        const select = document.getElementById('user-label-select');
        select.innerHTML = '<option>Select User</option>';
        slots.usedLabels.forEach(label => {
            select.innerHTML += `<option>${label}</option>`;
        });
    }

    function showScreen(screenId) {
        document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
        document.getElementById(screenId).classList.add('active');
        if (screenId !== 'main-screen') stopPolling();
    }

    function enterMainScreen() {
        showScreen('main-screen');
        document.getElementById('current-user-label').textContent = currentUser.userLabel;
        startPolling();
        loadLatestData();
    }

    // App Logic
    async function submitIdea() {
        const input = document.getElementById('idea-input');
        const category = document.getElementById('category-select').value;
        
        if (!input.value.trim()) return;

        await save('idea', {
            text: input.value.trim(),
            category,
            reactions: { "ðŸ”¥": 0 },
            comments: []
        });

        input.value = '';
        await loadLatestData();
    }

    async function addReaction(ideaId) {
        const ideas = await load('idea');
        const idea = ideas.find(i => i.id === parseInt(ideaId));
        if (idea) {
            const reactions = idea.reactions || {};
            reactions["ðŸ”¥"] = (reactions["ðŸ”¥"] || 0) + 1;
            
            await save('update_task', {
                taskId: parseInt(ideaId),
                updates: { reactions }
            });
            
            await loadLatestData();
        }
    }

    async function addComment(ideaId) {
        const commentText = prompt('Add a comment:');
        if (!commentText?.trim()) return;

        const ideas = await load('idea');
        const idea = ideas.find(i => i.id === parseInt(ideaId));
        if (idea) {
            const comments = idea.comments || [];
            comments.push({
                text: commentText.trim(),
                author: getCurrentUser().userLabel,
                timestamp: new Date().toISOString()
            });
            
            await save('update_task', {
                taskId: parseInt(ideaId),
                updates: { comments }
            });
            
            await loadLatestData();
        }
    }

    function filterIdeas(filter) {
        currentFilter = filter;
        document.querySelectorAll('.filter-btn').forEach(btn => {
            btn.classList.toggle('active', btn.textContent.toLowerCase().includes(filter.toLowerCase()));
        });
        loadLatestData();
    }

    function formatTime(timestamp) {
        const date = new Date(timestamp);
        return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();
    }

    async function loadLatestData() {
        const ideas = await load('idea');
        
        let filteredIdeas = ideas;
        if (currentFilter === 'top') {
            filteredIdeas = ideas.sort((a, b) => 
                (b.reactions?.["ðŸ”¥"] || 0) - (a.reactions?.["ðŸ”¥"] || 0)
            );
        } else if (currentFilter !== 'all') {
            filteredIdeas = ideas.filter(idea => idea.category === currentFilter);
        }

        const container = document.getElementById('ideas-container');
        container.innerHTML = filteredIdeas.map(idea => `
            <div class="idea-card">
                <div class="idea-header">
                    <span class="idea-author">${idea.author}</span>
                    <span class="idea-time">${formatTime(idea.created_at)}</span>
                </div>
                <span class="idea-category">${idea.category}</span>
                <div class="idea-text">${idea.text}</div>
                <div class="idea-actions">
                    <button class="reaction-btn" onclick="addReaction(${idea.id})">
                        ðŸ”¥ ${idea.reactions?.["ðŸ”¥"] || 0}
                    </button>
                    <button onclick="addComment(${idea.id})">ðŸ’­ Comment</button>
                </div>
                ${idea.comments?.length ? `
                    <div class="comments-section">
                        ${idea.comments.map(comment => `
                            <div class="comment">
                                <span class="comment-author">${comment.author}:</span>
                                ${comment.text}
                            </div>
                        `).join('')}
                    </div>
                ` : ''}
            </div>
        `).join('');
    }

    let pollingInterval;
    function startPolling() {
        loadLatestData();
        pollingInterval = setInterval(loadLatestData, 2000);
    }

    function stopPolling() {
        if (pollingInterval) clearInterval(pollingInterval);
    }

    initAuth();
    </script>
</body>
</html>