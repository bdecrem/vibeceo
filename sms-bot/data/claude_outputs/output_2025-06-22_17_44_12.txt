```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>async.corner üåô</title>
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=Inter:wght@400;600&display=swap" rel="stylesheet">
    <style>
        :root {
            --gradient: linear-gradient(45deg, #FF2E93, #7C3AED, #00FFC6);
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: #0f0f0f;
            color: white;
            min-height: 100vh;
            overflow-x: hidden;
        }

        h1, h2, h3 {
            font-family: 'Space Grotesk', sans-serif;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 2rem;
            position: relative;
        }

        .floating-emoji {
            position: fixed;
            font-size: 2rem;
            pointer-events: none;
            transition: transform 0.1s ease;
            filter: blur(0.5px);
            opacity: 0.7;
            animation: float 6s ease-in-out infinite;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-20px); }
        }

        .onboarding {
            text-align: center;
            padding: 2rem;
            background: rgba(0,0,0,0.5);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            border: 1px solid rgba(255,255,255,0.1);
            margin-top: 4rem;
        }

        .step {
            margin: 2rem 0;
            display: none;
        }

        .step.active {
            display: block;
            animation: fadeIn 0.5s ease;
        }

        .btn {
            background: var(--gradient);
            border: none;
            padding: 1rem 2rem;
            color: white;
            font-family: 'Space Grotesk', sans-serif;
            font-size: 1.1rem;
            border-radius: 10px;
            cursor: pointer;
            margin: 0.5rem;
            transition: all 0.3s ease;
        }

        .btn:hover {
            transform: scale(1.05);
            box-shadow: 0 0 20px rgba(255,46,147,0.5);
        }

        .emoji-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(60px, 1fr));
            gap: 1rem;
            margin: 2rem 0;
        }

        .emoji-option {
            font-size: 2rem;
            padding: 1rem;
            cursor: pointer;
            border-radius: 10px;
            transition: all 0.3s ease;
        }

        .emoji-option:hover {
            background: rgba(255,255,255,0.1);
            transform: scale(1.1);
        }

        .chat-container {
            display: none;
            height: 80vh;
            background: rgba(0,0,0,0.5);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            border: 1px solid rgba(255,255,255,0.1);
            padding: 1rem;
        }

        .messages {
            height: calc(100% - 80px);
            overflow-y: auto;
            padding: 1rem;
        }

        .message {
            background: rgba(255,255,255,0.05);
            padding: 1rem;
            border-radius: 10px;
            margin: 1rem 0;
            animation: slideIn 0.3s ease;
        }

        .message-emoji {
            font-size: 1.5rem;
            margin-right: 0.5rem;
        }

        .message-time {
            font-size: 0.8rem;
            opacity: 0.7;
        }

        .input-container {
            display: flex;
            gap: 1rem;
            padding: 1rem;
        }

        input[type="text"] {
            flex: 1;
            background: rgba(255,255,255,0.1);
            border: none;
            padding: 1rem;
            color: white;
            border-radius: 10px;
            font-family: 'Inter', sans-serif;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @keyframes slideIn {
            from { opacity: 0; transform: translateX(-20px); }
            to { opacity: 1; transform: translateX(0); }
        }

        .easter-egg {
            position: fixed;
            bottom: 20px;
            left: 20px;
            font-size: 0.8rem;
            opacity: 0.5;
        }
    </style>
</head>
<body>
    <div class="floating-emoji" data-value="2" style="top: 10%; left: 10%">üåô</div>
    <div class="floating-emoji" data-value="3" style="top: 20%; right: 20%">‚ú®</div>
    <div class="floating-emoji" data-value="4" style="bottom: 30%; left: 30%">üí´</div>
    <div class="floating-emoji" data-value="5" style="bottom: 20%; right: 10%">‚≠ê</div>

    <div class="container">
        <div class="onboarding" id="onboarding">
            <h1>async.corner üåô</h1>
            <p>leave messages in the void, find them when you return</p>

            <div class="step active" id="step1">
                <h2>choose your path</h2>
                <button class="btn" onclick="showStep('new')">start new corner</button>
                <button class="btn" onclick="showStep('join')">find existing corner</button>
            </div>

            <div class="step" id="step2-new">
                <h2>pick your vibe</h2>
                <div class="emoji-grid">
                    <div class="emoji-option" onclick="selectEmoji('ü¶ã')">ü¶ã</div>
                    <div class="emoji-option" onclick="selectEmoji('üåô')">üåô</div>
                    <div class="emoji-option" onclick="selectEmoji('üåø')">üåø</div>
                    <div class="emoji-option" onclick="selectEmoji('üçÑ')">üçÑ</div>
                    <div class="emoji-option" onclick="selectEmoji('üïäÔ∏è')">üïäÔ∏è</div>
                    <div class="emoji-option" onclick="selectEmoji('ü™∑')">ü™∑</div>
                </div>
            </div>

            <div class="step" id="step2-join">
                <h2>enter the passcode</h2>
                <input type="text" id="joinPasscode" placeholder="passcode">
                <button class="btn" onclick="verifyPasscode()">enter void</button>
            </div>

            <div class="step" id="step3">
                <h2>your corner is ready</h2>
                <p>your passcode: <span id="passcodeDisplay"></span></p>
                <p>share this with your friend to let them in</p>
                <button class="btn" onclick="enterChat()">enter void</button>
            </div>
        </div>

        <div class="chat-container" id="chatContainer">
            <div class="messages" id="messages"></div>
            <div class="input-container">
                <input type="text" id="messageInput" placeholder="leave a message in the void...">
                <button class="btn" onclick="sendMessage()">send</button>
            </div>
        </div>
    </div>

    <div class="easter-egg">type "void" to see something special</div>

    <script>
        const APP_ID = 'async_corner_v1';
        const supabase = window.supabase.createClient('YOUR_SUPABASE_URL', 'YOUR_SUPABASE_ANON_KEY');

        let currentEmoji = '';
        let currentPasscode = '';

        function showStep(type) {
            document.querySelectorAll('.step').forEach(step => step.classList.remove('active'));
            if (type === 'new') {
                document.getElementById('step2-new').classList.add('active');
            } else {
                document.getElementById('step2-join').classList.add('active');
            }
        }

        async function selectEmoji(emoji) {
            currentEmoji = emoji;
            currentPasscode = Math.random().toString(36).substr(2, 6);
            document.getElementById('passcodeDisplay').textContent = currentPasscode;
            
            await saveUser(currentEmoji, currentPasscode);
            
            document.getElementById('step2-new').classList.remove('active');
            document.getElementById('step3').classList.add('active');
        }

        async function verifyPasscode() {
            const passcode = document.getElementById('joinPasscode').value;
            const { data, error } = await supabase
                .from('wtaf_zero_admin_collaborative')
                .select('*')
                .eq('app_id', APP_ID)
                .eq('passcode', passcode)
                .eq('action_type', 'join');

            if (data && data.length > 0) {
                document.getElementById('step2-join').classList.remove('active');
                document.getElementById('step2-new').classList.add('active');
                currentPasscode = passcode;
            } else {
                alert('Invalid passcode');
            }
        }

        async function saveUser(emoji, passcode) {
            const { data, error } = await supabase
                .from('wtaf_zero_admin_collaborative')
                .insert({
                    app_id: APP_ID,
                    action_type: 'join',
                    user_identifier: emoji,
                    passcode: passcode,
                    content: null
                });
        }

        async function sendMessage() {
            const content = document.getElementById('messageInput').value;
            if (!content) return;

            await saveMessage(currentEmoji, content);
            document.getElementById('messageInput').value = '';
            loadMessages();
        }

        async function saveMessage(emoji, content) {
            const { data, error } = await supabase
                .from('wtaf_zero_admin_collaborative')
                .insert({
                    app_id: APP_ID,
                    action_type: 'message',
                    user_identifier: emoji,
                    content: content,
                    passcode: currentPasscode
                });
        }

        async function loadMessages() {
            const { data, error } = await supabase
                .from('wtaf_zero_admin_collaborative')
                .select('*')
                .eq('app_id', APP_ID)
                .eq('passcode', currentPasscode)
                .eq('action_type', 'message')
                .order('created_at', { ascending: true });

            const messagesContainer = document.getElementById('messages');
            messagesContainer.innerHTML = '';

            data.forEach(msg => {
                const messageDiv = document.createElement('div');
                messageDiv.className = 'message';
                messageDiv.innerHTML = `
                    <span class="message-emoji">${msg.user_identifier}</span>
                    <span class="message-content">${msg.content}</span>
                    <div class="message-time">${new Date(msg.created_at).toLocaleString()}</div>
                `;
                messagesContainer.appendChild(messageDiv);
            });

            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        function enterChat() {
            document.getElementById('onboarding').style.display = 'none';
            document.getElementById('chatContainer').style.display = 'block';
            loadMessages();
        }

        // Parallax effect for floating emojis
        document.addEventListener('mousemove', (e) => {
            document.querySelectorAll('.floating-emoji').forEach(emoji => {
                const speed = emoji.getAttribute('data-value');
                const x = (e.clientX * speed) / 250;
                const y = (e.clientY * speed) / 250;
                emoji.style.transform = `translate(${x}px, ${y}px)`;
            });
        });

        // Easter egg
        let voidLetters = '';
        document.addEventListener('keydown', (e) => {
            voidLetters += e.key;
            if (voidLetters.includes('void')) {
                document.body.style.animation = 'fadeIn 1s infinite alternate';
                voidLetters = '';
            }
        });
    </script>
</body>
</html>
```