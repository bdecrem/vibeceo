<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>âœ¨ CHAOS TODO âœ¨</title>
    <style>
        * { box-sizing: border-box; margin: 0; padding: 0; }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
            background: #fefef5;
            font-size: 16px;
            line-height: 1.5;
            padding: 20px;
        }

        .app-container {
            max-width: 800px;
            margin: 0 auto;
        }

        .screen {
            display: none;
            text-align: center;
        }

        .screen.active {
            display: block;
        }

        h1 {
            color: #FF4B4B;
            font-size: 24px;
            margin: 20px 0;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        button {
            background: #6ECBFF;
            border: none;
            border-radius: 25px;
            color: white;
            padding: 12px 24px;
            font-size: 16px;
            margin: 10px 0;
            min-height: 44px;
            width: 100%;
            cursor: pointer;
            transition: transform 0.2s;
        }

        button:active {
            transform: scale(0.98);
        }

        input, select {
            width: 100%;
            padding: 12px;
            margin: 10px 0;
            border: 2px solid #6ECBFF;
            border-radius: 8px;
            font-size: 16px;
            min-height: 44px;
        }

        .todo-item {
            background: #B6FFB3;
            border-radius: 12px;
            padding: 15px;
            margin: 10px 0;
            display: flex;
            align-items: center;
            justify-content: space-between;
            animation: bounce-in 0.5s;
        }

        .todo-item.completed {
            opacity: 0.7;
            text-decoration: line-through;
        }

        .todo-text {
            flex-grow: 1;
            margin: 0 10px;
        }

        .todo-emoji {
            font-size: 24px;
            margin-right: 10px;
        }

        @keyframes bounce-in {
            0% { transform: scale(0.3); opacity: 0; }
            50% { transform: scale(1.05); }
            70% { transform: scale(0.9); }
            100% { transform: scale(1); opacity: 1; }
        }

        @media (min-width: 768px) {
            button {
                width: auto;
                margin-right: 10px;
            }
        }

        .empty-state {
            text-align: center;
            padding: 40px;
            color: #666;
            font-style: italic;
        }

        #todo-form {
            background: white;
            border: 2px solid #FFD63D;
            border-radius: 12px;
            padding: 20px;
            margin: 20px 0;
            box-shadow: 4px 4px 0 #C9C2F9;
        }

        #confetti {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 1000;
        }
    </style>
</head>
<body>
    <div id="confetti"></div>
    <div class="app-container">
        <div id="welcome-screen" class="screen active">
            <h1>âœ¨ CHAOS TODO âœ¨</h1>
            <p>The most chaotic way to get things done! ðŸŽ‰</p>
            <button onclick="showNewUserScreen()">New Chaos Agent</button>
            <button onclick="showReturningUserScreen()">Return to Chaos</button>
        </div>

        <div id="new-user-screen" class="screen">
            <h1>JOIN THE CHAOS</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">EMBRACE CHAOS</button>
            <button onclick="showScreen('welcome-screen')">RETREAT</button>
        </div>

        <div id="returning-user-screen" class="screen">
            <h1>WELCOME BACK</h1>
            <select id="user-label-select"></select>
            <input type="text" id="returning-passcode" placeholder="4-digit secret code" maxlength="4">
            <button onclick="loginReturningUser()">RETURN TO CHAOS</button>
            <button onclick="showScreen('welcome-screen')">ESCAPE</button>
        </div>

        <div id="main-screen" class="screen">
            <h1>CHAOS TODO</h1>
            <div id="user-status">Chaos Agent: <span id="current-user-label"></span></div>

            <form id="todo-form" onsubmit="addTodo(event)">
                <input type="text" id="todo-input" placeholder="What chaos shall we create?" required>
                <button type="submit">ADD TO THE CHAOS</button>
            </form>

            <div id="todos-container"></div>

            <button onclick="showScreen('welcome-screen')">ESCAPE THE CHAOS</button>
        </div>
    </div>

    <script>
        let currentUser = null;
        let pollingInterval;

        // Random emojis for todos
        const EMOJIS = ['ðŸŽ¨', 'ðŸš€', 'ðŸ’¥', 'âœ¨', 'ðŸŒˆ', 'ðŸŽ­', 'ðŸŽª', 'ðŸŽ¢', 'ðŸŽ¡', 'ðŸŽ®'];

        function getRandomEmoji() {
            return EMOJIS[Math.floor(Math.random() * EMOJIS.length)];
        }

        // Confetti effect
        function createConfetti() {
            const colors = ['#ff0000', '#00ff00', '#0000ff', '#ffff00', '#ff00ff'];
            const confetti = document.getElementById('confetti');
            
            for (let i = 0; i < 50; i++) {
                const particle = document.createElement('div');
                particle.style.position = 'absolute';
                particle.style.width = '10px';
                particle.style.height = '10px';
                particle.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
                particle.style.left = Math.random() * 100 + 'vw';
                particle.style.top = -10 + 'px';
                particle.style.borderRadius = '50%';
                
                confetti.appendChild(particle);

                const animation = particle.animate([
                    { transform: 'translate(0, 0)', opacity: 1 },
                    { transform: `translate(${Math.random() * 200 - 100}px, ${window.innerHeight}px)`, opacity: 0 }
                ], {
                    duration: 1000 + Math.random() * 1000,
                    easing: 'cubic-bezier(0.25, 0.46, 0.45, 0.94)'
                });

                animation.onfinish = () => particle.remove();
            }
        }

        async function addTodo(event) {
            event.preventDefault();
            const input = document.getElementById('todo-input');
            const text = input.value.trim();
            
            if (text) {
                await save('todo', {
                    text,
                    completed: false,
                    emoji: getRandomEmoji(),
                    created_at: new Date().toISOString()
                });
                
                input.value = '';
                createConfetti();
                await loadLatestData();
            }
        }

        async function toggleTodo(todoId) {
            const todos = await load('todo');
            const todo = todos.find(t => t.id === todoId);
            
            if (todo) {
                await save('todo', {
                    ...todo,
                    completed: !todo.completed
                });
                
                if (!todo.completed) createConfetti();
                await loadLatestData();
            }
        }

        function startPolling() {
            pollingInterval = setInterval(() => loadLatestData(), 2000);
        }

        function stopPolling() {
            if (pollingInterval) clearInterval(pollingInterval);
        }

        async function loadLatestData() {
            const todos = await load('todo');
            const myTodos = todos
                .filter(todo => todo.author === getUsername())
                .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));

            const container = document.getElementById('todos-container');
            
            if (myTodos.length === 0) {
                container.innerHTML = '<div class="empty-state">No chaos yet! Add some todos!</div>';
                return;
            }

            container.innerHTML = myTodos.map(todo => `
                <div class="todo-item ${todo.completed ? 'completed' : ''}" onclick="toggleTodo(${todo.id})">
                    <span class="todo-emoji">${todo.emoji}</span>
                    <span class="todo-text">${todo.text}</span>
                    <span>${todo.completed ? 'âœ…' : 'â­•'}</span>
                </div>
            `).join('');
        }

        // Authentication boilerplate
        async function generateNewUser() {
            const slots = await checkAvailableSlots();
            if (slots.isFull) {
                alert('Too much chaos! App is full!');
                return false;
            }
            
            const user = await generateUser();
            if (user?.success) {
                currentUser = user;
                document.getElementById('new-user-info').innerHTML = 
                    `Your Chaos ID: ${user.userLabel}<br>Secret Code: ${user.passcode}<br>Save these!`;
                return true;
            }
            return false;
        }

        async function registerNewUser() {
            if (!currentUser) return;
            
            const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
            if (result?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                enterMainScreen();
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            await generateNewUser();
        }

        async function loginReturningUser() {
            const label = document.getElementById('user-label-select').value;
            const passcode = document.getElementById('returning-passcode').value;
            
            const result = await authenticateUser(label, passcode);
            if (result?.success) {
                currentUser = { userLabel: label, passcode, participantId: result.user.participantId };
                updateZadAuth(label, result.user.participantId);
                enterMainScreen();
            } else {
                alert('Wrong code!');
            }
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            if (screenId !== 'main-screen') stopPolling();
        }

        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const slots = await checkAvailableSlots();
            const select = document.getElementById('user-label-select');
            select.innerHTML = '<option>Select Your Chaos ID</option>';
            slots.usedLabels.forEach(label => {
                select.innerHTML += `<option>${label}</option>`;
            });
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            startPolling();
            loadLatestData();
        }

        initAuth();
    </script>
</body>
</html>