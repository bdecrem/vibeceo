```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Flappy Flight</title>
    <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=Inter:wght@400;600&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            -webkit-tap-highlight-color: transparent;
        }

        body {
            font-family: 'Inter', sans-serif;
            overflow: hidden;
            touch-action: none;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 25%, #f093fb 50%, #4facfe 75%, #667eea 100%);
            background-size: 400% 400%;
            animation: gradient 15s ease infinite;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        @keyframes gradient {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        .container {
            width: 100%;
            max-width: 400px;
            height: 100vh;
            position: relative;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

        .game-wrapper {
            width: 100%;
            height: 100%;
            position: relative;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            overflow: hidden;
        }

        canvas {
            width: 100%;
            height: 100%;
            display: block;
            cursor: pointer;
        }

        .screen {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(20px);
            opacity: 0;
            transition: opacity 0.3s ease;
            pointer-events: none;
        }

        .screen.active {
            opacity: 1;
            pointer-events: all;
        }

        h1 {
            font-family: 'Space Grotesk', sans-serif;
            font-size: 3rem;
            font-weight: 700;
            color: white;
            text-align: center;
            margin-bottom: 2rem;
            animation: fadeInUp 0.6s ease;
        }

        .score-display {
            font-family: 'Space Grotesk', sans-serif;
            font-size: 2rem;
            color: white;
            margin-bottom: 1rem;
            animation: fadeInUp 0.6s ease 0.1s both;
        }

        .button {
            background: rgba(255, 255, 255, 0.2);
            backdrop-filter: blur(10px);
            border: 2px solid rgba(255, 255, 255, 0.3);
            color: white;
            font-family: 'Inter', sans-serif;
            font-size: 1.2rem;
            font-weight: 600;
            padding: 1rem 3rem;
            border-radius: 50px;
            cursor: pointer;
            transition: all 0.3s ease;
            animation: fadeInUp 0.6s ease 0.2s both;
            min-width: 200px;
            text-align: center;
        }

        .button:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
        }

        .button:active {
            transform: translateY(0);
        }

        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .floating-emoji {
            position: absolute;
            font-size: 2rem;
            pointer-events: none;
            animation: float 6s ease-in-out infinite;
        }

        .emoji-1 {
            top: 10%;
            left: 10%;
            animation-delay: 0s;
        }

        .emoji-2 {
            top: 70%;
            right: 15%;
            animation-delay: 2s;
        }

        .emoji-3 {
            bottom: 20%;
            left: 20%;
            animation-delay: 4s;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0) rotate(0deg); }
            50% { transform: translateY(-20px) rotate(10deg); }
        }

        @media (max-width: 768px) {
            h1 { font-size: 2.5rem; }
            .button { font-size: 1rem; padding: 0.8rem 2rem; }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="game-wrapper">
            <canvas id="gameCanvas"></canvas>
            
            <div id="introScreen" class="screen active">
                <div class="floating-emoji emoji-1">üê¶</div>
                <div class="floating-emoji emoji-2">‚òÅÔ∏è</div>
                <div class="floating-emoji emoji-3">‚ú®</div>
                <h1>Flappy Flight</h1>
                <button class="button" onclick="startGame()">Tap to Fly</button>
            </div>

            <div id="endScreen" class="screen">
                <div class="floating-emoji emoji-1">üê¶</div>
                <div class="floating-emoji emoji-2">üí´</div>
                <div class="floating-emoji emoji-3">üéÆ</div>
                <h1>Nice Flight!</h1>
                <div class="score-display" id="finalScore">Score: 0</div>
                <button class="button" onclick="restartGame()">Fly Again</button>
            </div>
        </div>
    </div>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const introScreen = document.getElementById('introScreen');
        const endScreen = document.getElementById('endScreen');
        const finalScore = document.getElementById('finalScore');

        let gameState = 'intro';
        let score = 0;
        let animationId;
        let pipes = [];
        let bird;
        let lastTime = 0;
        let pipeTimer = 0;

        const dpr = window.devicePixelRatio || 1;
        
        function resizeCanvas() {
            const rect = canvas.getBoundingClientRect();
            canvas.width = rect.width * dpr;
            canvas.height = rect.height * dpr;
            ctx.scale(dpr, dpr);
        }

        class Bird {
            constructor() {
                this.x = canvas.width / (4 * dpr);
                this.y = canvas.height / (2 * dpr);
                this.velocity = 0;
                this.gravity = 0.5;
                this.jumpPower = -8;
                this.size = 30;
                this.angle = 0;
            }

            update() {
                this.velocity += this.gravity;
                this.y += this.velocity;
                this.angle = Math.min(Math.max(this.velocity * 3, -30), 90);
            }

            jump() {
                this.velocity = this.jumpPower;
            }

            draw() {
                ctx.save();
                ctx.translate(this.x, this.y);
                ctx.rotate(this.angle * Math.PI / 180);
                ctx.font = `${this.size}px Arial`;
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                ctx.fillText('üê¶', 0, 0);
                ctx.restore();
            }

            checkCollision() {
                const canvasHeight = canvas.height / dpr;
                if (this.y - this.size/2 < 0 || this.y + this.size/2 > canvasHeight) {
                    return true;
                }
                
                for (let pipe of pipes) {
                    if (this.x + this.size/2 > pipe.x && 
                        this.x - this.size/2 < pipe.x + pipe.width) {
                        if (this.y - this.size/2 < pipe.topHeight || 
                            this.y + this.size/2 > pipe.topHeight + pipe.gap) {
                            return true;
                        }
                    }
                }
                return false;
            }
        }

        class Pipe {
            constructor() {
                this.width = 60;
                this.gap = 150;
                this.x = canvas.width / dpr;
                this.speed = 3;
                this.topHeight = Math.random() * (canvas.height / dpr - this.gap - 100) + 50;
                this.passed = false;
            }

            update() {
                this.x -= this.speed;
                
                if (!this.passed && bird.x > this.x + this.width) {
                    this.passed = true;
                    score++;
                }
            }

            draw() {
                const canvasHeight = canvas.height / dpr;
                
                ctx.fillStyle = 'rgba(255, 255, 255, 0.2)';
                ctx.fillRect(this.x, 0, this.width, this.topHeight);
                ctx.fillRect(this.x, this.topHeight + this.gap, this.width, canvasHeight - this.topHeight - this.gap);
                
                ctx.strokeStyle = 'rgba(255, 255, 255, 0.4)';
                ctx.lineWidth = 2;
                ctx.strokeRect(this.x, 0, this.width, this.topHeight);
                ctx.strokeRect(this.x, this.topHeight + this.gap, this.width, canvasHeight - this.topHeight - this.gap);
            }
        }

        function startGame() {
            introScreen.classList.remove('active');
            gameState = 'playing';
            score = 0;
            pipes = [];
            bird = new Bird();
            pipeTimer = 0;
            lastTime = performance.now();
            gameLoop();
        }

        function endGame() {
            gameState = 'end';
            cancelAnimationFrame(animationId);
            finalScore.textContent = `Score: ${score}`;
            setTimeout(() => {
                endScreen.classList.add('active');
            }, 500);
        }

        function restartGame() {
            endScreen.classList.remove('active');
            setTimeout(() => {
                startGame();
            }, 300);
        }

        function gameLoop(currentTime) {
            if (gameState !== 'playing') return;
            
            animationId = requestAnimationFrame(gameLoop);
            
            const deltaTime = currentTime - lastTime;
            lastTime = currentTime;
            
            ctx.clearRect(0, 0, canvas.width / dpr, canvas.height / dpr);
            
            pipeTimer += deltaTime;
            if (pipeTimer > 1500) {
                pipes.push(new Pipe());
                pipeTimer = 0;
            }
            
            bird.update();
            
            pipes = pipes.filter(pipe => pipe.x + pipe.width > 0);
            pipes.forEach(pipe => {
                pipe.update();
                pipe.draw();
            });
            
            bird.draw();
            
            ctx.fillStyle = 'white';
            ctx.font = 'bold 24px Space Grotesk';
            ctx.fillText(score, canvas.width / (2 * dpr), 50);
            
            if (bird.checkCollision()) {
                endGame();
            }
        }

        canvas.addEventListener('click', (e) => {
            e.preventDefault();
            if (gameState === 'playing') {
                bird.jump();
            }
        });

        canvas.addEventListener('touchstart', (e) => {
            e.preventDefault();
            if (gameState === 'playing') {
                bird.jump();
            }
        });

        document.addEventListener('keydown', (e) => {
            if (e.code === 'Space' && gameState === 'playing') {
                e.preventDefault();
                bird.jump();
            }
        });

        document.addEventListener('mousemove', (e) => {
            const emojis = document.querySelectorAll('.floating-emoji');
            const x = e.clientX / window.innerWidth;
            const y = e.clientY / window.innerHeight;
            
            emojis.forEach((emoji, index) => {
                const offsetX = (x - 0.5) * 20 * (index + 1);
                const offsetY = (y - 0.5) * 20 * (index + 1);
                emoji.style.transform = `translate(${offsetX}px, ${offsetY}px)`;
            });
        });

        window.addEventListener('resize', resizeCanvas);
        resizeCanvas();
    </script>
</body>
</html>
```