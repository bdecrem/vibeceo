```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Paddle Clash</title>
    <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@700&family=Inter:wght@400;600&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            -webkit-tap-highlight-color: transparent;
        }

        body {
            font-family: 'Inter', sans-serif;
            overflow: hidden;
            position: relative;
            height: 100vh;
            background: linear-gradient(135deg, #0a0a0a 0%, #1a0033 25%, #330066 50%, #1a0033 75%, #0a0a0a 100%);
            background-size: 400% 400%;
            animation: gradientShift 15s ease infinite;
            color: #fff;
            user-select: none;
            -webkit-user-select: none;
        }

        @keyframes gradientShift {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        .floating-emoji {
            position: absolute;
            font-size: 2rem;
            pointer-events: none;
            opacity: 0.3;
            transition: transform 0.3s ease-out;
        }

        .emoji-1 {
            top: 10%;
            left: 10%;
            animation: float1 20s infinite ease-in-out;
        }

        .emoji-2 {
            top: 70%;
            right: 15%;
            animation: float2 25s infinite ease-in-out;
        }

        .emoji-3 {
            bottom: 20%;
            left: 20%;
            animation: float3 18s infinite ease-in-out;
        }

        @keyframes float1 {
            0%, 100% { transform: translate(0, 0) rotate(0deg); }
            33% { transform: translate(30px, -20px) rotate(120deg); }
            66% { transform: translate(-20px, 10px) rotate(240deg); }
        }

        @keyframes float2 {
            0%, 100% { transform: translate(0, 0) rotate(0deg); }
            50% { transform: translate(-40px, 30px) rotate(180deg); }
        }

        @keyframes float3 {
            0%, 100% { transform: translate(0, 0) rotate(0deg); }
            25% { transform: translate(20px, -30px) rotate(90deg); }
            75% { transform: translate(-30px, 20px) rotate(270deg); }
        }

        .screen {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.5s ease;
        }

        .screen.active {
            opacity: 1;
            pointer-events: all;
        }

        .glass-container {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            padding: 3rem;
            text-align: center;
            max-width: 90%;
            animation: slideUp 0.6s ease-out;
        }

        @keyframes slideUp {
            from {
                transform: translateY(30px);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        h1 {
            font-family: 'Space Grotesk', sans-serif;
            font-size: 3rem;
            margin-bottom: 1rem;
            background: linear-gradient(45deg, #ff00ff, #00ffff, #ff00ff);
            background-size: 200% 200%;
            -webkit-background-clip: text;
            background-clip: text;
            -webkit-text-fill-color: transparent;
            animation: neonPulse 3s ease-in-out infinite;
        }

        @keyframes neonPulse {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }

        .subtitle {
            font-size: 1.2rem;
            color: rgba(255, 255, 255, 0.8);
            margin-bottom: 2rem;
        }

        .btn {
            background: linear-gradient(135deg, #ff00ff, #00ffff);
            border: none;
            padding: 1rem 3rem;
            font-size: 1.1rem;
            font-weight: 600;
            color: #000;
            border-radius: 50px;
            cursor: pointer;
            transition: all 0.3s ease;
            margin: 0.5rem;
            min-height: 44px;
            position: relative;
            overflow: hidden;
        }

        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: rgba(255, 255, 255, 0.3);
            transition: left 0.3s ease;
        }

        .btn:hover::before,
        .btn:active::before {
            left: 100%;
        }

        .btn:active {
            transform: scale(0.95);
        }

        #gameCanvas {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            touch-action: none;
        }

        .score-display {
            position: absolute;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            font-family: 'Space Grotesk', sans-serif;
            font-size: 2rem;
            text-shadow: 0 0 20px rgba(255, 0, 255, 0.8);
            z-index: 10;
        }

        .touch-controls {
            position: absolute;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 20px;
            z-index: 10;
        }

        .touch-btn {
            width: 60px;
            height: 60px;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            transition: all 0.2s ease;
        }

        .touch-btn:active {
            transform: scale(0.9);
            background: rgba(255, 255, 255, 0.2);
        }

        @media (min-width: 768px) {
            .touch-controls {
                display: none;
            }
        }
    </style>
</head>
<body>
    <div class="floating-emoji emoji-1">üéÆ</div>
    <div class="floating-emoji emoji-2">‚ö°</div>
    <div class="floating-emoji emoji-3">üèì</div>

    <div id="introScreen" class="screen active">
        <div class="glass-container">
            <h1>PADDLE CLASH</h1>
            <p class="subtitle">Neon dreams, pixel screams</p>
            <button class="btn" onclick="startGame()">TAP TO CLASH</button>
        </div>
    </div>

    <div id="gameScreen" class="screen">
        <canvas id="gameCanvas"></canvas>
        <div class="score-display" id="scoreDisplay">0 - 0</div>
        <div class="touch-controls">
            <div class="touch-btn" id="upBtn">‚Üë</div>
            <div class="touch-btn" id="downBtn">‚Üì</div>
        </div>
    </div>

    <div id="endScreen" class="screen">
        <div class="glass-container">
            <h1>GAME OVER</h1>
            <p class="subtitle" id="endMessage"></p>
            <p class="subtitle" id="finalScore"></p>
            <button class="btn" onclick="restartGame()">CLASH AGAIN</button>
        </div>
    </div>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const dpr = window.devicePixelRatio || 1;
        
        let gameRunning = false;
        let animationId;
        let playerScore = 0;
        let aiScore = 0;
        
        const game = {
            paddleWidth: 15,
            paddleHeight: 80,
            ballSize: 12,
            paddleSpeed: 5,
            ballSpeed: 4,
            maxBallSpeed: 8,
            aiSpeed: 3.5
        };
        
        let player = {
            x: 30,
            y: 0,
            dy: 0
        };
        
        let ai = {
            x: 0,
            y: 0,
            dy: 0
        };
        
        let ball = {
            x: 0,
            y: 0,
            dx: game.ballSpeed,
            dy: game.ballSpeed * 0.5
        };
        
        let touchUp = false;
        let touchDown = false;
        
        function resizeCanvas() {
            canvas.width = window.innerWidth * dpr;
            canvas.height = window.innerHeight * dpr;
            canvas.style.width = window.innerWidth + 'px';
            canvas.style.height = window.innerHeight + 'px';
            ctx.scale(dpr, dpr);
            
            ai.x = window.innerWidth - 30 - game.paddleWidth;
            resetPositions();
        }
        
        function resetPositions() {
            player.y = (window.innerHeight - game.paddleHeight) / 2;
            ai.y = (window.innerHeight - game.paddleHeight) / 2;
            ball.x = window.innerWidth / 2;
            ball.y = window.innerHeight / 2;
            ball.dx = game.ballSpeed * (Math.random() > 0.5 ? 1 : -1);
            ball.dy = game.ballSpeed * (Math.random() - 0.5);
        }
        
        function startGame() {
            document.getElementById('introScreen').classList.remove('active');
            document.getElementById('gameScreen').classList.add('active');
            
            resizeCanvas();
            gameRunning = true;
            playerScore = 0;
            aiScore = 0;
            updateScore();
            gameLoop();
        }
        
        function restartGame() {
            document.getElementById('endScreen').classList.remove('active');
            startGame();
        }
        
        function endGame() {
            gameRunning = false;
            cancelAnimationFrame(animationId);
            
            document.getElementById('gameScreen').classList.remove('active');
            document.getElementById('endScreen').classList.add('active');
            
            const won = playerScore > aiScore;
            document.getElementById('endMessage').textContent = won ? 'You crushed it! üèÜ' : 'AI dominance ü§ñ';
            document.getElementById('finalScore').textContent = `${playerScore} - ${aiScore}`;
        }
        
        function updateScore() {
            document.getElementById('scoreDisplay').textContent = `${playerScore} - ${aiScore}`;
            
            if (playerScore >= 5 || aiScore >= 5) {
                endGame();
            }
        }
        
        function updatePlayer() {
            if (touchUp || keys.ArrowUp) {
                player.dy = -game.paddleSpeed;
            } else if (touchDown || keys.ArrowDown) {
                player.dy = game.paddleSpeed;
            } else {
                player.dy *= 0.8;
            }
            
            player.y += player.dy;
            player.y = Math.max(0, Math.min(window.innerHeight - game.paddleHeight, player.y));
        }
        
        function updateAI() {
            const aiCenter = ai.y + game.paddleHeight / 2;
            const ballCenter = ball.y;
            const diff = ballCenter - aiCenter;
            
            if (Math.abs(diff) > 5) {
                ai.dy = diff > 0 ? game.aiSpeed : -game.aiSpeed;
            } else {
                ai.dy *= 0.8;
            }
            
            ai.y += ai.dy;
            ai.y = Math.max(0, Math.min(window.innerHeight - game.paddleHeight, ai.y));
        }
        
        function updateBall() {
            ball.x += ball.dx;
            ball.y += ball.dy;
            
            if (ball.y <= game.ballSize / 2 || ball.y >= window.innerHeight - game.ballSize / 2) {
                ball.dy = -ball.dy;
                createParticles(ball.x, ball.y, '#00ffff');
            }
            
            if (ball.x - game.ballSize / 2 <= player.x + game.paddleWidth &&
                ball.x + game.ballSize / 2 >= player.x &&
                ball.y >= player.y &&
                ball.y <= player.y + game.paddleHeight &&
                ball.dx < 0) {
                
                ball.dx = -ball.dx * 1.05;
                ball.dx = Math.min(ball.dx, game.maxBallSpeed);
                
                const relativeIntersectY = (player.y + game.paddleHeight / 2) - ball.y;
                const normalizedRelativeIntersectionY = relativeIntersectY / (game.paddleHeight / 2);
                ball.dy = -normalizedRelativeIntersectionY * game.ballSpeed;
                
                createParticles(ball.x, ball.y, '#ff00ff');
            }
            
            if (ball.x + game.ballSize / 2 >= ai.x &&
                ball.x - game.ballSize / 2 <= ai.x + game.paddleWidth &&
                ball.y >= ai.y &&
                ball.y <= ai.y + game.paddleHeight &&
                ball.dx > 0) {
                
                ball.dx = -ball.dx * 1.05;
                ball.dx = Math.max(ball.dx, -game.maxBallSpeed);
                
                const relativeIntersectY = (ai.y + game.paddleHeight / 2) - ball.y;
                const normalizedRelativeIntersectionY = relativeIntersectY / (game.paddleHeight / 2);
                ball.dy = -normalizedRelativeIntersectionY * game.ballSpeed;
                
                createParticles(ball.x, ball.y, '#00ff00');
            }
            
            if (ball.x < -game.ballSize) {
                aiScore++;
                updateScore();
                resetPositions();
                createParticles(window.innerWidth / 2, window.innerHeight / 2, '#ff0000');
            }
            
            if (ball.x > window.innerWidth + game.ballSize) {
                playerScore++;
                updateScore();
                resetPositions();
                createParticles(window.innerWidth / 2, window.innerHeight / 2, '#00ff00');
            }
        }
        
        const particles = [];
        
        function createParticles(x, y, color) {
            for (let i = 0; i < 10; i++) {
                particles.push({
                    x: x,
                    y: y,
                    vx: (Math.random() - 0.5) * 4,
                    vy: (Math.random() - 0.5) * 4,
                    life: 1,
                    color: color
                });
            }
        }
        
        function updateParticles() {
            for (let i = particles.length - 1; i >= 0; i--) {
                const p = particles[i];
                p.x += p.vx;
                p.y += p.vy;
                p.life -= 0.02;
                
                if (p.life <= 0) {
                    particles.splice(i, 1);
                }
            }
        }
        
        function render() {
            ctx.clearRect(0, 0, window.innerWidth, window.innerHeight);
            
            ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';
            ctx.lineWidth = 2;
            ctx.setLineDash([10, 10]);
            ctx.beginPath();
            ctx.moveTo(window.innerWidth / 2, 0);
            ctx.lineTo(window.innerWidth / 2, window.innerHeight);
            ctx.stroke();
            ctx.setLineDash([]);
            
            ctx.fillStyle = '#ff00ff';
            ctx.shadowBlur = 20;
            ctx.shadowColor = '#ff00ff';
            ctx.fillRect(player.x, player.y, game.paddleWidth, game.paddleHeight);
            
            ctx.fillStyle = '#00ffff';
            ctx.shadowColor = '#00ffff';
            ctx.fillRect(ai.x, ai.y, game.paddleWidth, game.paddleHeight);
            
            ctx.fillStyle = '#ffffff';
            ctx.shadowColor = '#ffffff';
            ctx.beginPath();
            ctx.arc(ball.x, ball.y, game.ballSize / 2, 0, Math.PI * 2);
            ctx.fill();
            
            ctx.shadowBlur = 0;
            
            particles.forEach(p => {
                ctx.fillStyle = p.color;
                ctx.globalAlpha = p.life;
                ctx.fillRect(p.x - 2, p.y - 2, 4, 4);
            });
            ctx.globalAlpha = 1;
        }
        
        function gameLoop() {
            if (!gameRunning) return;
            
            updatePlayer();
            updateAI();
            updateBall();
            updateParticles();
            render();
            
            animationId = requestAnimationFrame(gameLoop);
        }
        
        const keys = {};
        
        window.addEventListener('keydown', (e) => {
            keys[e.key] = true;
        });
        
        window.addEventListener('keyup', (e) => {
            keys[e.key] = false;
        });
        
        document.getElementById('upBtn').addEventListener('touchstart', (e) => {
            e.preventDefault();
            touchUp = true;
        });
        
        document.getElementById('upBtn').addEventListener('touchend', (e) => {
            e.preventDefault();
            touchUp = false;
        });
        
        document.getElementById('downBtn').addEventListener('touchstart', (e) => {
            e.preventDefault();
            touchDown = true;
        });
        
        document.getElementById('downBtn').addEventListener('touchend', (e) => {
            e.preventDefault();
            touchDown = false;
        });
        
        window.addEventListener('resize', resizeCanvas);
        
        document.addEventListener('mousemove', (e) => {
            const emojis = document.querySelectorAll('.floating-emoji');
            emojis.forEach((emoji, index) => {
                const speed = (index + 1) * 0.02;
                const x = (e.clientX - window.innerWidth / 2) * speed;
                const y = (e.clientY - window.innerHeight / 2) * speed;
                emoji.style.transform = `translate(${x}px, ${y}px)`;
            });
        });
        
        document.addEventListener('touchmove', (e) => {
            e.preventDefault();
        }, { passive: false });
    </script>
</body>
</html>
```