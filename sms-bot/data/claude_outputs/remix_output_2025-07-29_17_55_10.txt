I'll create a pink-themed chat app using the VAPOR style from Webtoys (pink background, hot pink borders, purple shadows). It will support up to 5 users and auto-refresh messages every 2 seconds.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>âœ¨ Vapor Chat</title>
    <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=JetBrains+Mono&display=swap" rel="stylesheet">
    <style>
        :root {
            --bg: #FFE0F7;
            --border: #FF006E;
            --shadow: #3700B3;
            --text: #1a1a1a;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Space Grotesk', system-ui, sans-serif;
            background: var(--bg);
            color: var(--text);
            line-height: 1.6;
            font-size: 16px;
        }

        .app-container {
            min-height: 100vh;
            padding: 20px;
            max-width: 666px;
            margin: 0 auto;
        }

        .screen {
            display: none;
            animation: fadeIn 0.3s ease;
        }

        .screen.active {
            display: block;
        }

        h1 {
            font-size: 40px;
            text-transform: uppercase;
            transform: rotate(-2deg);
            margin-bottom: 20px;
            color: var(--border);
            text-shadow: 2px 2px var(--shadow);
        }

        button {
            background: var(--border);
            border: 3px solid var(--shadow);
            color: white;
            padding: 12px 24px;
            font-size: 16px;
            font-family: 'Space Grotesk', system-ui, sans-serif;
            font-weight: bold;
            cursor: pointer;
            text-transform: uppercase;
            min-height: 44px;
            margin: 8px 0;
            width: 100%;
            transform: rotate(-1deg);
            box-shadow: 3px 3px var(--shadow);
            transition: all 0.2s ease;
        }

        button:hover {
            transform: rotate(1deg) scale(1.02);
        }

        button:active {
            transform: scale(0.98);
        }

        input, select {
            width: 100%;
            padding: 12px;
            font-size: 16px;
            font-family: 'JetBrains Mono', monospace;
            border: 3px solid var(--border);
            background: white;
            margin: 8px 0;
            min-height: 44px;
        }

        .chat-container {
            background: white;
            border: 3px solid var(--border);
            border-radius: 8px;
            height: 60vh;
            overflow-y: auto;
            margin: 20px 0;
            padding: 16px;
            box-shadow: 4px 4px var(--shadow);
        }

        .message {
            margin: 8px 0;
            padding: 8px 12px;
            border-radius: 8px;
            max-width: 80%;
            word-wrap: break-word;
        }

        .message.mine {
            background: var(--border);
            color: white;
            margin-left: auto;
            transform: rotate(1deg);
        }

        .message.others {
            background: var(--shadow);
            color: white;
            transform: rotate(-1deg);
        }

        .message .author {
            font-size: 12px;
            opacity: 0.8;
            margin-bottom: 4px;
        }

        #message-input {
            border-radius: 8px;
        }

        .floating-emoji {
            position: fixed;
            bottom: 20px;
            right: 20px;
            font-size: 32px;
            cursor: pointer;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        @keyframes emojiRain {
            0% { transform: translateY(-100vh); }
            100% { transform: translateY(100vh); }
        }

        .emoji-rain {
            position: fixed;
            pointer-events: none;
            z-index: 1000;
            animation: emojiRain 1s linear forwards;
        }
    </style>
</head>
<body>
    <div class="app-container">
        <div id="welcome-screen" class="screen active">
            <h1>âœ¨ Vapor Chat</h1>
            <p>Chat with up to 5 friends in this vaporwave paradise!</p>
            <button onclick="showNewUserScreen()">New User</button>
            <button onclick="showReturningUserScreen()">Returning User</button>
        </div>

        <div id="new-user-screen" class="screen">
            <h1>New User</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Enter Chat</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <div id="returning-user-screen" class="screen">
            <h1>Welcome Back</h1>
            <select id="user-label-select"></select>
            <input type="text" id="returning-passcode" placeholder="Enter your 4-digit code" maxlength="4">
            <button onclick="loginReturningUser()">Enter Chat</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <div id="main-screen" class="screen">
            <h1>Vapor Chat</h1>
            <div id="user-status">Chatting as <span id="current-user-label"></span></div>
            
            <div class="chat-container" id="messages"></div>
            
            <input type="text" id="message-input" placeholder="Type something vaporwave..." maxlength="280"
                onkeypress="if(event.key === 'Enter') sendMessage()">
            <button onclick="sendMessage()">Send Message</button>
            <button onclick="showScreen('welcome-screen')">Leave Chat</button>
        </div>
    </div>

    <div class="floating-emoji" onclick="triggerEmojiRain()">ðŸ’–</div>

    <script>
        let currentUser = null;
        let pollingInterval;

        function triggerEmojiRain() {
            const emojis = ['ðŸ’–', 'âœ¨', 'ðŸŒ¸', 'ðŸ’•', 'ðŸŽ€'];
            for(let i = 0; i < 20; i++) {
                const emoji = document.createElement('div');
                emoji.className = 'emoji-rain';
                emoji.style.left = Math.random() * 100 + 'vw';
                emoji.textContent = emojis[Math.floor(Math.random() * emojis.length)];
                document.body.appendChild(emoji);
                setTimeout(() => emoji.remove(), 1000);
            }
        }

        async function generateNewUser() {
            const slots = await checkAvailableSlots();
            if (slots.isFull) {
                alert('Chat is full! (max 5 users)');
                return false;
            }
            
            const user = await generateUser();
            if (user?.success) {
                currentUser = user;
                document.getElementById('new-user-info').innerHTML = 
                    `Your ID: ${user.userLabel}<br>Code: ${user.passcode}<br>Save these!`;
                return true;
            }
            return false;
        }

        async function registerNewUser() {
            if (!currentUser) return;
            
            const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
            if (result?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                enterMainScreen();
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            await generateNewUser();
        }

        async function loginReturningUser() {
            const label = document.getElementById('user-label-select').value;
            const passcode = document.getElementById('returning-passcode').value;
            
            const result = await authenticateUser(label, passcode);
            if (result?.success) {
                currentUser = { userLabel: label, passcode, participantId: result.user.participantId };
                updateZadAuth(label, result.user.participantId);
                enterMainScreen();
            } else {
                alert('Wrong code!');
            }
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            if (screenId !== 'main-screen') stopPolling();
        }

        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const slots = await checkAvailableSlots();
            const select = document.getElementById('user-label-select');
            select.innerHTML = '<option value="">Select Your ID</option>';
            slots.usedLabels.forEach(label => {
                select.innerHTML += `<option value="${label}">${label}</option>`;
            });
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            startPolling();
            loadLatestData();
        }

        function startPolling() {
            loadLatestData();
            pollingInterval = setInterval(loadLatestData, 2000);
        }

        function stopPolling() {
            if (pollingInterval) clearInterval(pollingInterval);
        }

        async function sendMessage() {
            const input = document.getElementById('message-input');
            const text = input.value.trim();
            
            if (text) {
                await save('message', { text });
                input.value = '';
                await loadLatestData();
            }
        }

        function deduplicate(items, uniqueField = 'text') {
            return items.reduce((acc, item) => {
                const existing = acc.find(i => 
                    i[uniqueField] === item[uniqueField] && 
                    i.author === item.author
                );
                if (!existing || new Date(item.created_at) > new Date(existing.created_at)) {
                    if (existing) {
                        const index = acc.indexOf(existing);
                        acc[index] = item;
                    } else {
                        acc.push(item);
                    }
                }
                return acc;
            }, []);
        }

        async function loadLatestData() {
            const messages = await load('message');
            const uniqueMessages = deduplicate(messages)
                .sort((a, b) => new Date(a.created_at) - new Date(b.created_at));

            const container = document.getElementById('messages');
            container.innerHTML = uniqueMessages.map(msg => `
                <div class="message ${msg.author === getUsername() ? 'mine' : 'others'}">
                    <div class="author">${msg.author}</div>
                    ${msg.text}
                </div>
            `).join('');
            
            container.scrollTop = container.scrollHeight;
        }

        initAuth();
    </script>
</body>
</html>