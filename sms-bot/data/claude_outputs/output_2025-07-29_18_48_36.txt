```html
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, user-scalable=no">
    <title>üêç SLITHER üêç</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            background: linear-gradient(135deg, #1a1a2e, #16213e);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            font-family: Arial, sans-serif;
            color: white;
            overflow: hidden;
            touch-action: none;
        }
        #gameCanvas {
            background: #0f3460;
            display: block;
        }
        #controls {
            position: fixed;
            bottom: 0;
            width: 100%;
            height: 120px;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        .d-pad {
            display: grid;
            grid-template-columns: repeat(3, 60px);
            grid-template-rows: repeat(3, 60px);
            grid-gap: 5px;
        }
        .d-btn {
            width: 60px;
            height: 60px;
            background: rgba(255, 255, 255, 0.2);
            border: 2px solid white;
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            color: white;
            user-select: none;
        }
        .up { grid-column: 2; grid-row: 1; }
        .left { grid-column: 1; grid-row: 2; }
        .right { grid-column: 3; grid-row: 2; }
        .down { grid-column: 2; grid-row: 3; }
        .screen {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: calc(100% - 120px);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            text-align: center;
            background: rgba(15, 52, 96, 0.9);
            z-index: 500;
        }
        #introScreen h1 {
            font-size: 3em;
            margin: 0;
            color: #4ecca3;
        }
        #introScreen p {
            font-size: 1.2em;
            max-width: 80%;
            margin: 10px 0 20px;
        }
        #endScreen h2 {
            font-size: 2.5em;
            margin: 0;
            color: #f95959;
        }
        .btn {
            background: #4ecca3;
            color: #1a1a2e;
            border: none;
            padding: 15px 30px;
            font-size: 1.2em;
            border-radius: 30px;
            cursor: pointer;
            font-weight: bold;
            margin-top: 20px;
        }
        .score-display {
            position: absolute;
            top: 20px;
            left: 0;
            width: 100%;
            text-align: center;
            font-size: 1.5em;
            font-weight: bold;
            color: #4ecca3;
        }
    </style>
</head>
<body>
    <div id="introScreen" class="screen">
        <h1>üêç SLITHER üêç</h1>
        <p>Guide the snake to eat food and grow. Avoid walls and yourself!</p>
        <button id="startBtn" class="btn">START GAME</button>
    </div>

    <div id="gameScreen" style="display:none;">
        <div class="score-display">LENGTH: <span id="score">1</span></div>
        <canvas id="gameCanvas"></canvas>
    </div>

    <div id="endScreen" class="screen" style="display:none;">
        <h2>GAME OVER!</h2>
        <p>Your snake reached length <span id="finalScore">1</span></p>
        <button id="restartBtn" class="btn">PLAY AGAIN</button>
    </div>

    <div id="controls">
        <div class="d-pad">
            <div class="d-btn up">‚¨ÜÔ∏è</div>
            <div class="d-btn left">‚¨ÖÔ∏è</div>
            <div class="d-btn right">‚û°Ô∏è</div>
            <div class="d-btn down">‚¨áÔ∏è</div>
        </div>
    </div>

    <script>
        var canvas = document.getElementById('gameCanvas');
        var ctx = canvas.getContext('2d');
        var introScreen = document.getElementById('introScreen');
        var gameScreen = document.getElementById('gameScreen');
        var endScreen = document.getElementById('endScreen');
        var startBtn = document.getElementById('startBtn');
        var restartBtn = document.getElementById('restartBtn');
        var scoreElement = document.getElementById('score');
        var finalScoreElement = document.getElementById('finalScore');

        var dpr = window.devicePixelRatio || 1;
        var controlsHeight = 120;
        var gridUnit = 20;
        var gridWidth = Math.floor(window.innerWidth / gridUnit);
        var gridHeight = Math.floor((window.innerHeight - controlsHeight) / gridUnit);
        
        canvas.width = gridWidth * gridUnit * dpr;
        canvas.height = gridHeight * gridUnit * dpr;
        canvas.style.width = gridWidth * gridUnit + 'px';
        canvas.style.height = gridHeight * gridUnit + 'px';
        ctx.scale(dpr, dpr);

        var snake = [];
        var food = {};
        var direction = 'right';
        var nextDirection = 'right';
        var score = 1;
        var gameRunning = false;
        var lastUpdateTime = 0;
        var moveInterval = 150;

        function initGame() {
            snake = [
                {x: Math.floor(gridWidth/2), y: Math.floor(gridHeight/2)}
            ];
            generateFood();
            direction = 'right';
            nextDirection = 'right';
            score = 1;
            scoreElement.textContent = score;
            gameRunning = true;
        }

        function generateFood() {
            var newFood;
            var overlapping;
            do {
                overlapping = false;
                newFood = {
                    x: Math.floor(Math.random() * gridWidth),
                    y: Math.floor(Math.random() * gridHeight)
                };
                for (var i = 0; i < snake.length; i++) {
                    if (snake[i].x === newFood.x && snake[i].y === newFood.y) {
                        overlapping = true;
                        break;
                    }
                }
            } while (overlapping);
            food = newFood;
        }

        function update(timestamp) {
            if (!gameRunning) return;
            
            if (timestamp - lastUpdateTime > moveInterval) {
                lastUpdateTime = timestamp;
                direction = nextDirection;
                
                var head = {x: snake[0].x, y: snake[0].y};
                
                if (direction === 'up') head.y--;
                else if (direction === 'down') head.y++;
                else if (direction === 'left') head.x--;
                else if (direction === 'right') head.x++;
                
                if (head.x < 0 || head.x >= gridWidth || head.y < 0 || head.y >= gridHeight) {
                    gameOver();
                    return;
                }
                
                for (var i = 0; i < snake.length; i++) {
                    if (snake[i].x === head.x && snake[i].y === head.y) {
                        gameOver();
                        return;
                    }
                }
                
                snake.unshift(head);
                
                if (head.x === food.x && head.y === food.y) {
                    score++;
                    scoreElement.textContent = score;
                    generateFood();
                } else {
                    snake.pop();
                }
            }
            
            draw();
            requestAnimationFrame(update);
        }

        function draw() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Draw snake
            ctx.fillStyle = '#4ecca3';
            for (var i = 0; i < snake.length; i++) {
                ctx.fillRect(
                    snake[i].x * gridUnit,
                    snake[i].y * gridUnit,
                    gridUnit - 1,
                    gridUnit - 1
                );
            }
            
            // Draw food
            ctx.fillStyle = '#f95959';
            ctx.fillRect(
                food.x * gridUnit,
                food.y * gridUnit,
                gridUnit - 1,
                gridUnit - 1
            );
        }

        function gameOver() {
            gameRunning = false;
            finalScoreElement.textContent = score;
            endScreen.style.display = 'flex';
        }

        function changeDirection(newDirection) {
            if (
                (direction === 'up' && newDirection === 'down') ||
                (direction === 'down' && newDirection === 'up') ||
                (direction === 'left' && newDirection === 'right') ||
                (direction === 'right' && newDirection === 'left')
            ) {
                return;
            }
            nextDirection = newDirection;
        }

        // Control event listeners
        document.querySelector('.up').addEventListener('click', function() { changeDirection('up'); });
        document.querySelector('.down').addEventListener('click', function() { changeDirection('down'); });
        document.querySelector('.left').addEventListener('click', function() { changeDirection('left'); });
        document.querySelector('.right').addEventListener('click', function() { changeDirection('right'); });

        document.addEventListener('keydown', function(e) {
            if (e.key === 'ArrowUp') changeDirection('up');
            else if (e.key === 'ArrowDown') changeDirection('down');
            else if (e.key === 'ArrowLeft') changeDirection('left');
            else if (e.key === 'ArrowRight') changeDirection('right');
        });

        startBtn.addEventListener('click', function() {
            introScreen.style.display = 'none';
            gameScreen.style.display = 'block';
            initGame();
            requestAnimationFrame(update);
        });

        restartBtn.addEventListener('click', function() {
            endScreen.style.display = 'none';
            initGame();
            requestAnimationFrame(update);
        });
    </script>
</body>
</html>
```