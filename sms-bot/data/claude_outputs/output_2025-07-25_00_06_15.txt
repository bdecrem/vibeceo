<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>3 Daily Goals</title>
    <style>
        * {
            box-sizing: border-box;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
        }

        body {
            margin: 0;
            padding: 0;
            background: #fefef5;
            font-size: 16px;
            line-height: 1.5;
        }

        .app-container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }

        .screen {
            display: none;
        }

        .screen.active {
            display: block;
        }

        h1, h2 {
            color: #FF4B4B;
            text-transform: uppercase;
            text-align: center;
            margin-bottom: 20px;
        }

        button {
            background: #6ECBFF;
            color: white;
            border: none;
            border-radius: 25px;
            padding: 12px 24px;
            font-size: 16px;
            cursor: pointer;
            width: 100%;
            min-height: 44px;
            margin-bottom: 10px;
        }

        input, select {
            width: 100%;
            padding: 12px;
            margin-bottom: 10px;
            border: 2px solid #6ECBFF;
            border-radius: 8px;
            font-size: 16px;
            min-height: 44px;
        }

        .habit-card {
            background: white;
            border: 2px solid #FFD63D;
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 4px 4px 0 #C9C2F9;
        }

        .habit {
            background: #B6FFB3;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .habit-name {
            font-weight: bold;
            flex-grow: 1;
        }

        .streak {
            background: #FFEB63;
            padding: 5px 10px;
            border-radius: 15px;
            margin-left: 10px;
            font-weight: bold;
        }

        @media (min-width: 768px) {
            button {
                width: auto;
                display: inline-block;
                margin-right: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <div id="welcome-screen" class="screen active">
            <h1>3 Daily Goals ðŸŽ¯</h1>
            <p>Track up to three daily habits and build your streak! ðŸ’ª</p>
            <button onclick="showNewUserScreen()">New User</button>
            <button onclick="showReturningUserScreen()">Returning User</button>
        </div>

        <div id="new-user-screen" class="screen">
            <h1>New User</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Register & Enter</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <div id="returning-user-screen" class="screen">
            <h1>Returning User</h1>
            <select id="user-label-select"></select>
            <input type="text" id="returning-passcode" placeholder="4-digit code" maxlength="4">
            <button onclick="loginReturningUser()">Login</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <div id="main-screen" class="screen">
            <h1>Daily Goals</h1>
            <div id="user-status">Welcome, <span id="current-user-label"></span>!</div>

            <div class="habit-card">
                <div id="habits-list">
                    <!-- Habits will be loaded here -->
                </div>

                <div id="add-habit-form" style="display: none;">
                    <input type="text" id="habit-name" placeholder="What's your goal?" maxlength="50">
                    <button onclick="addHabit()">Add Goal</button>
                </div>

                <button id="add-habit-button" onclick="showAddHabitForm()">Add New Goal</button>
            </div>

            <button onclick="showScreen('welcome-screen')">Leave</button>
        </div>
    </div>

    <script>
        let currentUser = null;
        let pollingInterval;

        // Authentication boilerplate
        async function generateNewUser() {
            const slots = await checkAvailableSlots();
            if (slots.isFull) {
                alert('App is full!');
                return false;
            }
            
            const user = await generateUser();
            if (user?.success) {
                currentUser = user;
                document.getElementById('new-user-info').innerHTML = 
                    `Your ID: ${user.userLabel}<br>Code: ${user.passcode}<br>Save these!`;
                return true;
            }
            return false;
        }

        async function registerNewUser() {
            if (!currentUser) return;
            
            const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
            if (result?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                enterMainScreen();
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            await generateNewUser();
        }

        async function loginReturningUser() {
            const label = document.getElementById('user-label-select').value;
            const passcode = document.getElementById('returning-passcode').value;
            
            const result = await authenticateUser(label, passcode);
            if (result?.success) {
                currentUser = { userLabel: label, passcode, participantId: result.user.participantId };
                updateZadAuth(label, result.user.participantId);
                enterMainScreen();
            } else {
                alert('Wrong code!');
            }
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            if (screenId !== 'main-screen') stopPolling();
        }

        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const slots = await checkAvailableSlots();
            const select = document.getElementById('user-label-select');
            select.innerHTML = '<option>Select User</option>';
            slots.usedLabels.forEach(label => {
                select.innerHTML += `<option>${label}</option>`;
            });
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            startPolling();
            loadLatestData();
        }

        // Polling
        function startPolling() {
            pollingInterval = setInterval(() => loadLatestData(), 2000);
        }

        function stopPolling() {
            if (pollingInterval) clearInterval(pollingInterval);
        }

        // Habit tracking functions
        async function loadLatestData() {
            const habits = await load('habit');
            const myHabits = habits
                .filter(h => h.author === getUsername())
                .reduce((acc, habit) => {
                    const existing = acc.find(h => h.name === habit.name);
                    if (!existing || new Date(habit.created_at) > new Date(existing.created_at)) {
                        if (existing) {
                            const index = acc.indexOf(existing);
                            acc[index] = habit;
                        } else {
                            acc.push(habit);
                        }
                    }
                    return acc;
                }, []);

            updateUI(myHabits);
        }

        function updateUI(habits) {
            const list = document.getElementById('habits-list');
            list.innerHTML = '';

            habits.forEach(habit => {
                list.innerHTML += `
                    <div class="habit">
                        <span class="habit-name">${habit.name}</span>
                        <span class="streak">ðŸ”¥ ${habit.streak || 0}</span>
                        <button onclick="toggleHabit('${habit.name}')">${habit.completed ? 'âœ… Done' : 'â­• Mark Done'}</button>
                    </div>
                `;
            });

            const addButton = document.getElementById('add-habit-button');
            addButton.style.display = habits.length >= 3 ? 'none' : 'block';
        }

        function showAddHabitForm() {
            document.getElementById('add-habit-form').style.display = 'block';
            document.getElementById('add-habit-button').style.display = 'none';
        }

        async function addHabit() {
            const name = document.getElementById('habit-name').value.trim();
            if (!name) return;

            await save('habit', {
                name,
                streak: 0,
                completed: false
            });

            document.getElementById('habit-name').value = '';
            document.getElementById('add-habit-form').style.display = 'none';
            document.getElementById('add-habit-button').style.display = 'block';
            await loadLatestData();
        }

        async function toggleHabit(habitName) {
            const habits = await load('habit');
            const currentHabit = habits
                .filter(h => h.name === habitName && h.author === getUsername())
                .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))[0];

            if (currentHabit) {
                await save('habit', {
                    ...currentHabit,
                    completed: !currentHabit.completed,
                    streak: currentHabit.completed ? currentHabit.streak - 1 : currentHabit.streak + 1
                });
                
                await loadLatestData();
            }
        }

        // Initialize
        initAuth();
    </script>
</body>
</html>