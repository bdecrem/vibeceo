```html
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Sudoku</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; touch-action: none; }
        body { background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%); font-family: sans-serif; height: 100vh; display: flex; flex-direction: column; }
        #gameCanvas { display: block; width: 100%; height: calc(100vh - 120px); }
        #controls { position: fixed; bottom: 0; width: 100%; height: 120px; background: rgba(0,0,0,0.7); display: flex; justify-content: center; align-items: center; }
        .number-btn { width: 60px; height: 60px; margin: 5px; background: #fff; border: none; border-radius: 10px; font-size: 24px; font-weight: bold; cursor: pointer; }
        .action-btn { width: 60px; height: 60px; margin: 5px; background: #ff3366; color: white; border: none; border-radius: 10px; font-size: 18px; font-weight: bold; cursor: pointer; }
        .screen { position: absolute; top: 0; left: 0; width: 100%; height: calc(100vh - 120px); display: flex; flex-direction: column; justify-content: center; align-items: center; background: rgba(0,0,0,0.85); color: white; text-align: center; z-index: 2000; }
        #introScreen h1 { font-size: 48px; margin-bottom: 20px; color: #ffcc00; }
        #introScreen p { font-size: 20px; margin-bottom: 30px; max-width: 80%; }
        #endScreen h2 { font-size: 48px; margin-bottom: 20px; color: #ffcc00; }
        #endScreen p { font-size: 24px; margin-bottom: 30px; }
        .start-btn, .restart-btn { padding: 15px 30px; font-size: 24px; background: #00cc99; color: white; border: none; border-radius: 10px; cursor: pointer; font-weight: bold; }
    </style>
</head>
<body>
    <div id="introScreen" class="screen">
        <h1>üî¢ Sudoku</h1>
        <p>Fill the grid so every row, column, and 3x3 box contains 1-9</p>
        <button class="start-btn">‚ñ∂Ô∏è Play</button>
    </div>

    <canvas id="gameCanvas"></canvas>

    <div id="controls">
        <button class="number-btn" data-num="1">1</button>
        <button class="number-btn" data-num="2">2</button>
        <button class="number-btn" data-num="3">3</button>
        <button class="number-btn" data-num="4">4</button>
        <button class="number-btn" data-num="5">5</button>
        <button class="number-btn" data-num="6">6</button>
        <button class="number-btn" data-num="7">7</button>
        <button class="number-btn" data-num="8">8</button>
        <button class="number-btn" data-num="9">9</button>
        <button class="action-btn" id="clearBtn">‚ùå</button>
    </div>

    <div id="endScreen" class="screen" style="display:none;">
        <h2>üéâ Complete!</h2>
        <p>You solved the puzzle!</p>
        <button class="restart-btn">üîÑ Play Again</button>
    </div>

    <script>
        var canvas = document.getElementById('gameCanvas');
        var ctx = canvas.getContext('2d');
        var dpr = window.devicePixelRatio || 1;

        function resizeCanvas() {
            var width = window.innerWidth;
            var height = window.innerHeight - 120;
            canvas.width = width * dpr;
            canvas.height = height * dpr;
            canvas.style.width = width + 'px';
            canvas.style.height = height + 'px';
            ctx.scale(dpr, dpr);
        }

        window.addEventListener('resize', resizeCanvas);
        resizeCanvas();

        var gridSize = Math.min(canvas.width, canvas.height) / dpr;
        var cellSize = gridSize / 9;
        var board = [];
        var solution = [];
        var selected = { row: -1, col: -1 };
        var startTime = 0;
        var gameState = 'intro'; // intro, playing, end

        function initializeBoard() {
            board = Array(9).fill().map(function() { return Array(9).fill(0); });
            solution = [
                [5,3,4,6,7,8,9,1,2],
                [6,7,2,1,9,5,3,4,8],
                [1,9,8,3,4,2,5,6,7],
                [8,5,9,7,6,1,4,2,3],
                [4,2,6,8,5,3,7,9,1],
                [7,1,3,9,2,4,8,5,6],
                [9,6,1,5,3,7,2,8,4],
                [2,8,7,4,1,9,6,3,5],
                [3,4,5,2,8,6,1,7,9]
            ];
            
            // Create puzzle by removing numbers
            for (var i = 0; i < 9; i++) {
                for (var j = 0; j < 9; j++) {
                    if (Math.random() > 0.6) {
                        board[i][j] = solution[i][j];
                    }
                }
            }
        }

        function drawBoard() {
            ctx.clearRect(0, 0, gridSize, gridSize);
            
            // Draw background
            ctx.fillStyle = '#ffffff';
            ctx.fillRect(0, 0, gridSize, gridSize);
            
            // Draw numbers
            ctx.font = (cellSize * 0.6) + 'px sans-serif';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            
            for (var row = 0; row < 9; row++) {
                for (var col = 0; col < 9; col++) {
                    var x = col * cellSize + cellSize / 2;
                    var y = row * cellSize + cellSize / 2;
                    
                    // Highlight selected cell
                    if (selected.row === row && selected.col === col) {
                        ctx.fillStyle = '#cce5ff';
                        ctx.fillRect(col * cellSize, row * cellSize, cellSize, cellSize);
                    }
                    
                    // Draw number
                    if (board[row][col] !== 0) {
                        ctx.fillStyle = '#333333';
                        ctx.fillText(board[row][col].toString(), x, y);
                    }
                }
            }
            
            // Draw grid lines
            ctx.strokeStyle = '#333333';
            ctx.lineWidth = 2;
            
            for (var i = 0; i <= 9; i++) {
                // Thicker lines for 3x3 boxes
                ctx.lineWidth = (i % 3 === 0) ? 4 : 2;
                
                // Vertical lines
                ctx.beginPath();
                ctx.moveTo(i * cellSize, 0);
                ctx.lineTo(i * cellSize, gridSize);
                ctx.stroke();
                
                // Horizontal lines
                ctx.beginPath();
                ctx.moveTo(0, i * cellSize);
                ctx.lineTo(gridSize, i * cellSize);
                ctx.stroke();
            }
        }

        function getCellFromPosition(x, y) {
            var rect = canvas.getBoundingClientRect();
            var canvasX = (x - rect.left) * (canvas.width / rect.width) / dpr;
            var canvasY = (y - rect.top) * (canvas.height / rect.height) / dpr;
            
            var col = Math.floor(canvasX / cellSize);
            var row = Math.floor(canvasY / cellSize);
            
            if (row >= 0 && row < 9 && col >= 0 && col < 9) {
                return { row: row, col: col };
            }
            return null;
        }

        function isMoveValid(row, col, num) {
            // Check row
            for (var i = 0; i < 9; i++) {
                if (board[row][i] === num) return false;
            }
            
            // Check column
            for (var i = 0; i < 9; i++) {
                if (board[i][col] === num) return false;
            }
            
            // Check 3x3 box
            var boxRow = Math.floor(row / 3) * 3;
            var boxCol = Math.floor(col / 3) * 3;
            
            for (var i = 0; i < 3; i++) {
                for (var j = 0; j < 3; j++) {
                    if (board[boxRow + i][boxCol + j] === num) return false;
                }
            }
            
            return true;
        }

        function isBoardComplete() {
            for (var row = 0; row < 9; row++) {
                for (var col = 0; col < 9; col++) {
                    if (board[row][col] !== solution[row][col]) {
                        return false;
                    }
                }
            }
            return true;
        }

        function handleCanvasClick(e) {
            if (gameState !== 'playing') return;
            
            var pos = getCellFromPosition(e.clientX, e.clientY);
            if (pos) {
                selected = pos;
                drawBoard();
            }
        }

        function handleNumberInput(num) {
            if (gameState !== 'playing' || selected.row === -1) return;
            
            var row = selected.row;
            var col = selected.col;
            
            // Only allow input in empty cells
            if (board[row][col] === 0) {
                if (isMoveValid(row, col, num)) {
                    board[row][col] = num;
                    drawBoard();
                    
                    if (isBoardComplete()) {
                        gameState = 'end';
                        document.getElementById('endScreen').style.display = 'flex';
                    }
                }
            }
        }

        function handleClear() {
            if (gameState !== 'playing' || selected.row === -1) return;
            
            var row = selected.row;
            var col = selected.col;
            
            // Only clear user-placed numbers (original cells are non-zero)
            if (board[row][col] !== 0 && solution[row][col] === 0) {
                board[row][col] = 0;
                drawBoard();
            }
        }

        canvas.addEventListener('click', handleCanvasClick);
        canvas.addEventListener('touchstart', function(e) {
            e.preventDefault();
            handleCanvasClick(e.touches[0]);
        });

        document.querySelectorAll('.number-btn').forEach(function(btn) {
            btn.addEventListener('click', function() {
                handleNumberInput(parseInt(this.getAttribute('data-num')));
            });
        });

        document.getElementById('clearBtn').addEventListener('click', handleClear);

        document.querySelector('.start-btn').addEventListener('click', function() {
            document.getElementById('introScreen').style.display = 'none';
            gameState = 'playing';
            initializeBoard();
            drawBoard();
            startTime = Date.now();
        });

        document.querySelector('.restart-btn').addEventListener('click', function() {
            document.getElementById('endScreen').style.display = 'none';
            gameState = 'playing';
            initializeBoard();
            selected = { row: -1, col: -1 };
            drawBoard();
            startTime = Date.now();
        });

        // Initial draw
        drawBoard();
    </script>
</body>
</html>
```