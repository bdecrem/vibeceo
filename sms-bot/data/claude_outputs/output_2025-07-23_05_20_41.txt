I'll create a collaborative city builder where users can add buildings, see each other's contributions, and watch the city grow together. It will use a simple grid layout and track building placement.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>Collaborative City Builder</title>
    <style>
        * {
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: #0a0a0a;
            color: #fff;
            margin: 0;
            padding: 10px;
            font-size: 16px;
        }

        .app-container {
            max-width: 800px;
            margin: 0 auto;
            background: #1a1a1a;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 0 40px rgba(0,0,0,0.5);
        }

        h1 {
            font-size: 24px;
            margin: 0 0 20px 0;
        }

        button {
            background: #ff0066;
            color: white;
            border: none;
            padding: 16px 24px;
            border-radius: 6px;
            font-weight: bold;
            cursor: pointer;
            margin: 8px 0;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-size: 16px;
            width: 100%;
            min-height: 44px;
            display: block;
        }

        button:hover {
            background: #ff3388;
        }

        button:active {
            transform: scale(0.98);
        }

        input, select {
            background: #2a2a2a;
            border: 1px solid #444;
            color: white;
            padding: 16px;
            border-radius: 6px;
            width: 100%;
            margin: 10px 0;
            font-size: 16px;
            min-height: 44px;
        }

        .screen { display: none; }
        .screen.active { display: block; }

        /* City Grid Styles */
        .city-grid {
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            gap: 8px;
            margin: 20px 0;
        }

        .grid-cell {
            aspect-ratio: 1;
            background: #2a2a2a;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            cursor: pointer;
            transition: all 0.3s;
        }

        .grid-cell:hover {
            background: #3a3a3a;
        }

        .building-selector {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            margin: 20px 0;
        }

        .building-option {
            padding: 10px;
            background: #2a2a2a;
            border-radius: 8px;
            cursor: pointer;
            min-width: 44px;
            min-height: 44px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .building-option.selected {
            background: #ff0066;
        }

        .stats {
            background: #2a2a2a;
            padding: 16px;
            border-radius: 8px;
            margin: 20px 0;
        }

        @media (min-width: 600px) {
            body { padding: 20px; }
            .app-container { padding: 30px; }
            
            button {
                width: auto;
                display: inline-block;
                margin: 5px;
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <div id="welcome-screen" class="screen active">
            <h1>Collaborative City Builder</h1>
            <p>Build a city together! Place buildings, watch it grow.</p>
            <button onclick="showNewUserScreen()">New User</button>
            <button onclick="showReturningUserScreen()">Returning User</button>
        </div>
        
        <div id="new-user-screen" class="screen">
            <h1>New User</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Register & Enter</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="returning-user-screen" class="screen">
            <h1>Returning User</h1>
            <select id="user-label-select"></select>
            <input type="text" id="returning-passcode" placeholder="4-digit code" maxlength="4">
            <button onclick="loginReturningUser()">Login</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="main-screen" class="screen">
            <h1>City Builder</h1>
            <div id="user-status">Mayor: <span id="current-user-label"></span></div>
            
            <div class="stats">
                <div>Buildings: <span id="building-count">0</span></div>
                <div>Contributors: <span id="contributor-count">0</span></div>
            </div>

            <div class="building-selector">
                <div class="building-option" onclick="selectBuilding('üè†')" data-building="üè†">üè†</div>
                <div class="building-option" onclick="selectBuilding('üè¢')" data-building="üè¢">üè¢</div>
                <div class="building-option" onclick="selectBuilding('üè´')" data-building="üè´">üè´</div>
                <div class="building-option" onclick="selectBuilding('üè≠')" data-building="üè≠">üè≠</div>
                <div class="building-option" onclick="selectBuilding('üè™')" data-building="üè™">üè™</div>
            </div>

            <div class="city-grid" id="city-grid"></div>
            
            <button onclick="showScreen('welcome-screen')">Leave City</button>
        </div>
    </div>

    <script>
        let currentUser = null;
        let selectedBuilding = 'üè†';
        const GRID_SIZE = 25; // 5x5 grid

        // Authentication Functions
        async function generateNewUser() {
            const slots = await checkAvailableSlots();
            if (slots.isFull) {
                alert('City is full!');
                return false;
            }
            
            const user = await generateUser();
            if (user?.success) {
                currentUser = user;
                document.getElementById('new-user-info').innerHTML = 
                    `Your ID: ${user.userLabel}<br>Code: ${user.passcode}<br>Save these!`;
                return true;
            }
            return false;
        }

        async function registerNewUser() {
            if (!currentUser) return;
            
            const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
            if (result?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                enterMainScreen();
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            await generateNewUser();
        }

        async function loginReturningUser() {
            const label = document.getElementById('user-label-select').value;
            const passcode = document.getElementById('returning-passcode').value;
            
            const result = await authenticateUser(label, passcode);
            if (result?.success) {
                currentUser = { userLabel: label, passcode, participantId: result.user.participantId };
                updateZadAuth(label, result.user.participantId);
                enterMainScreen();
            } else {
                alert('Wrong code!');
            }
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            if (screenId !== 'main-screen') stopPolling();
        }

        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const slots = await checkAvailableSlots();
            const select = document.getElementById('user-label-select');
            select.innerHTML = '<option>Select User</option>';
            slots.usedLabels.forEach(label => {
                select.innerHTML += `<option>${label}</option>`;
            });
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            initializeGrid();
            startPolling();
            loadLatestData();
        }

        // City Building Functions
        function initializeGrid() {
            const grid = document.getElementById('city-grid');
            grid.innerHTML = '';
            
            for (let i = 0; i < GRID_SIZE; i++) {
                const cell = document.createElement('div');
                cell.className = 'grid-cell';
                cell.dataset.position = i;
                cell.onclick = () => placeBuilding(i);
                grid.appendChild(cell);
            }
        }

        function selectBuilding(building) {
            selectedBuilding = building;
            document.querySelectorAll('.building-option').forEach(opt => {
                opt.classList.toggle('selected', opt.dataset.building === building);
            });
        }

        async function placeBuilding(position) {
            await save('building', {
                position,
                type: selectedBuilding
            });
            
            await loadLatestData();
        }

        async function loadLatestData() {
            const buildings = await load('building');
            
            // Clear grid
            document.querySelectorAll('.grid-cell').forEach(cell => {
                cell.textContent = '';
            });
            
            // Get latest building for each position
            const latestBuildings = buildings.reduce((acc, building) => {
                const existing = acc.find(b => b.position === building.position);
                if (!existing || new Date(building.created_at) > new Date(existing.created_at)) {
                    if (existing) {
                        const index = acc.indexOf(existing);
                        acc[index] = building;
                    } else {
                        acc.push(building);
                    }
                }
                return acc;
            }, []);

            // Update grid
            latestBuildings.forEach(building => {
                const cell = document.querySelector(`.grid-cell[data-position="${building.position}"]`);
                if (cell) {
                    cell.textContent = building.type;
                }
            });

            // Update stats
            document.getElementById('building-count').textContent = latestBuildings.length;
            const uniqueContributors = [...new Set(buildings.map(b => b.author))].length;
            document.getElementById('contributor-count').textContent = uniqueContributors;
        }

        // Polling
        let pollingInterval;

        function startPolling() {
            loadLatestData();
            pollingInterval = setInterval(() => loadLatestData(), 2000);
        }

        function stopPolling() {
            if (pollingInterval) clearInterval(pollingInterval);
        }

        // Required helper functions
        async function checkAvailableSlots() {
            return await save('check_slots', {});
        }

        async function generateUser() {
            return await save('generate_user', {});
        }

        async function registerUser(userLabel, passcode, participantId) {
            return await save('register_user', { userLabel, passcode, participantId });
        }

        async function authenticateUser(userLabel, passcode) {
            return await save('authenticate_user', { userLabel, passcode });
        }

        function updateZadAuth(userLabel, participantId) {
            window.currentUserLabel = userLabel;
            window.currentParticipantId = participantId;
        }

        initAuth();
    </script>
</body>
</html>