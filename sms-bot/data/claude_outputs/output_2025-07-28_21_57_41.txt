```html
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>-block- ðŸ§±</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            touch-action: none;
            user-select: none;
        }
        
        body {
            background: linear-gradient(135deg, #1a1a2e, #16213e);
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            height: 100vh;
            overflow: hidden;
            display: flex;
            flex-direction: column;
            color: white;
        }
        
        #gameContainer {
            position: relative;
            flex: 1;
            display: flex;
            flex-direction: column;
        }
        
        #gameCanvas {
            display: block;
            background: #0f3460;
            width: 100%;
            height: calc(100vh - 120px);
        }
        
        .screen {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: calc(100vh - 120px);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background: rgba(15, 52, 96, 0.9);
            z-index: 10;
            text-align: center;
            padding: 20px;
        }
        
        .hidden {
            display: none;
        }
        
        h1 {
            font-size: 3rem;
            margin-bottom: 20px;
            color: #e94560;
            text-shadow: 0 0 10px rgba(233, 69, 96, 0.5);
        }
        
        h2 {
            font-size: 2rem;
            margin-bottom: 20px;
            color: #e94560;
        }
        
        p {
            font-size: 1.2rem;
            margin-bottom: 30px;
            max-width: 80%;
            line-height: 1.6;
        }
        
        .score-display {
            font-size: 1.5rem;
            margin: 20px 0;
            color: #4cc9f0;
        }
        
        .btn {
            background: #e94560;
            color: white;
            border: none;
            padding: 15px 30px;
            font-size: 1.2rem;
            border-radius: 50px;
            cursor: pointer;
            margin: 10px;
            font-weight: bold;
            box-shadow: 0 4px 0 #b02e4a;
            transition: all 0.1s;
        }
        
        .btn:active {
            transform: translateY(4px);
            box-shadow: none;
        }
        
        .controls {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            height: 120px;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 20px;
            padding: 10px;
            z-index: 1000;
        }
        
        .control-btn {
            width: 60px;
            height: 60px;
            background: rgba(255, 255, 255, 0.2);
            border: 2px solid rgba(255, 255, 255, 0.4);
            border-radius: 12px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 24px;
            color: white;
            cursor: pointer;
            user-select: none;
        }
        
        .control-btn:active {
            background: rgba(255, 255, 255, 0.4);
        }
        
        .dpad {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            grid-template-rows: repeat(3, 1fr);
            gap: 5px;
            width: 180px;
            height: 180px;
        }
        
        .dpad-btn {
            display: flex;
            justify-content: center;
            align-items: center;
            background: rgba(255, 255, 255, 0.2);
            border: 2px solid rgba(255, 255, 255, 0.4);
            border-radius: 8px;
            font-size: 20px;
            color: white;
            cursor: pointer;
        }
        
        .dpad-btn:active {
            background: rgba(255, 255, 255, 0.4);
        }
        
        .up { grid-column: 2; grid-row: 1; }
        .left { grid-column: 1; grid-row: 2; }
        .right { grid-column: 3; grid-row: 2; }
        .down { grid-column: 2; grid-row: 3; }
        
        .action-btn {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            background: #4cc9f0;
            border: 3px solid white;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 24px;
            color: white;
            font-weight: bold;
        }
        
        .action-btn:active {
            background: #3aa5d0;
            transform: scale(0.95);
        }
    </style>
</head>
<body>
    <div id="gameContainer">
        <canvas id="gameCanvas"></canvas>
        
        <div id="startScreen" class="screen">
            <h1>ðŸ§± -block-</h1>
            <p>Stack blocks. Clear lines. Don't crash.</p>
            <button id="startBtn" class="btn">DROP BLOCKS â–¼</button>
        </div>
        
        <div id="endScreen" class="screen hidden">
            <h2>GAME OVER ðŸ’¥</h2>
            <div class="score-display">Score: <span id="finalScore">0</span></div>
            <p>You stacked 'em high, but gravity won.</p>
            <button id="restartBtn" class="btn">PLAY AGAIN</button>
        </div>
    </div>
    
    <div class="controls">
        <div class="dpad">
            <div class="dpad-btn up">â–²</div>
            <div class="dpad-btn left">â—€</div>
            <div class="dpad-btn right">â–¶</div>
            <div class="dpad-btn down">â–¼</div>
        </div>
        <div class="action-btn">â†»</div>
    </div>

    <script>
        // Game constants
        const COLS = 10;
        const ROWS = 20;
        const BLOCK_SIZE = 30;
        const COLORS = [
            null,
            '#FF0D72', // I
            '#0DC2FF', // J
            '#0DFF72', // L
            '#F538FF', // O
            '#FF8E0D', // S
            '#FFE138', // T
            '#3877FF'  // Z
        ];
        
        // Tetromino shapes
        const SHAPES = [
            [],
            [[0,0,0,0], [1,1,1,1], [0,0,0,0], [0,0,0,0]], // I
            [[2,0,0], [2,2,2], [0,0,0]],                   // J
            [[0,0,3], [3,3,3], [0,0,0]],                   // L
            [[4,4], [4,4]],                                // O
            [[0,5,5], [5,5,0], [0,0,0]],                   // S
            [[0,6,0], [6,6,6], [0,0,0]],                   // T
            [[7,7,0], [0,7,7], [0,0,0]]                    // Z
        ];
        
        // Game variables
        let canvas, ctx;
        let board = [];
        let score = 0;
        let gameOver = false;
        let dropCounter = 0;
        let dropInterval = 1000;
        let lastTime = 0;
        
        // Player object
        const player = {
            pos: {x: 0, y: 0},
            matrix: null,
            score: 0
        };
        
        // Initialize game
        function init() {
            canvas = document.getElementById('gameCanvas');
            ctx = canvas.getContext('2d', { alpha: false });
            
            // Set canvas size
            resizeCanvas();
            window.addEventListener('resize', resizeCanvas);
            
            // Initialize board
            createBoard();
            
            // Reset player
            resetPlayer();
            
            // Event listeners
            setupEventListeners();
            
            // Start game loop
            requestAnimationFrame(gameLoop);
        }
        
        function resizeCanvas() {
            const controlsHeight = 120;
            canvas.width = window.innerWidth * window.devicePixelRatio;
            canvas.height = (window.innerHeight - controlsHeight) * window.devicePixelRatio;
            canvas.style.width = window.innerWidth + 'px';
            canvas.style.height = (window.innerHeight - controlsHeight) + 'px';
            ctx.scale(window.devicePixelRatio, window.devicePixelRatio);
        }
        
        function createBoard() {
            board = [];
            for (let y = 0; y < ROWS; y++) {
                board.push(Array(COLS).fill(0));
            }
        }
        
        function resetPlayer() {
            const pieces = 'ILJOTSZ';
            player.matrix = createPiece(pieces[pieces.length * Math.random() | 0]);
            player.pos.y = 0;
            player.pos.x = (COLS / 2 | 0) - (player.matrix[0].length / 2 | 0);
            
            // Game over check
            if (collide()) {
                gameOver = true;
                document.getElementById('finalScore').textContent = score;
                document.getElementById('endScreen').classList.remove('hidden');
            }
        }
        
        function createPiece(type) {
            if (type === 'I') return SHAPES[1];
            if (type === 'J') return SHAPES[2];
            if (type === 'L') return SHAPES[3];
            if (type === 'O') return SHAPES[4];
            if (type === 'S') return SHAPES[5];
            if (type === 'T') return SHAPES[6];
            if (type === 'Z') return SHAPES[7];
        }
        
        function draw() {
            // Clear canvas
            ctx.fillStyle = '#0f3460';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // Draw board
            drawMatrix(board, {x: 0, y: 0});
            
            // Draw player
            drawMatrix(player.matrix, player.pos);
        }
        
        function drawMatrix(matrix, offset) {
            matrix.forEach((row, y) => {
                row.forEach((value, x) => {
                    if (value !== 0) {
                        ctx.fillStyle = COLORS[value];
                        ctx.fillRect(x + offset.x, y + offset.y, 1, 1);
                        ctx.strokeStyle = 'rgba(0,0,0,0.3)';
                        ctx.lineWidth = 0.05;
                        ctx.strokeRect(x + offset.x, y + offset.y, 1, 1);
                    }
                });
            });
        }
        
        function merge() {
            player.matrix.forEach((row, y) => {
                row.forEach((value, x) => {
                    if (value !== 0) {
                        board[y + player.pos.y][x + player.pos.x] = value;
                    }
                });
            });
        }
        
        function rotate(matrix, dir) {
            for (let y = 0; y < matrix.length; ++y) {
                for (let x = 0; x < y; ++x) {
                    [matrix[x][y], matrix[y][x]] = [matrix[y][x], matrix[x][y]];
                }
            }
            
            if (dir > 0) {
                matrix.forEach(row => row.reverse());
            } else {
                matrix.reverse();
            }
        }
        
        function playerRotate(dir) {
            const pos = player.pos.x;
            let offset = 1;
            rotate(player.matrix, dir);
            
            while (collide()) {
                player.pos.x += offset;
                offset = -(offset + (offset > 0 ? 1 : -1));
                if (offset > player.matrix[0].length) {
                    rotate(player.matrix, -dir);
                    player.pos.x = pos;
                    return;
                }
            }
        }
        
        function playerDrop() {
            player.pos.y++;
            if (collide()) {
                player.pos.y--;
                merge();
                resetPlayer();
                clearLines();
                updateScore();
            }
            dropCounter = 0;
        }
        
        function playerMove(dir) {
            player.pos.x += dir;
            if (collide()) {
                player.pos.x -= dir;
            }
        }
        
        function collide() {
            const [m, o] = [player.matrix, player.pos];
            for (let y = 0; y < m.length; ++y) {
                for (let x = 0; x < m[y].length; ++x) {
                    if (m[y][x] !== 0 &&
                        (board[y + o.y] &&
                        board[y + o.y][x + o.x]) !== 0) {
                        return true;
                    }
                }
            }
            return false;
        }
        
        function clearLines() {
            let rowCount = 0;
            outer: for (let y = ROWS - 1; y >= 0; --y) {
                for (let x = 0; x < COLS; ++x) {
                    if (board[y][x] === 0) {
                        continue outer;
                    }
                }
                
                const row = board.splice(y, 1)[0].fill(0);
                board.unshift(row);
                ++y;
                
                rowCount++;
            }
            
            // Update score
            if (rowCount > 0) {
                score += rowCount * 10;
                // Increase speed slightly with each line cleared
                dropInterval = Math.max(100, 1000 - score);
            }
        }
        
        function updateScore() {
            // Score is updated in clearLines
        }
        
        function gameLoop(time = 0) {
            const deltaTime = time - lastTime;
            lastTime = time;
            
            if (!gameOver) {
                dropCounter += deltaTime;
                if (dropCounter > dropInterval) {
                    playerDrop();
                }
                
                draw();
                requestAnimationFrame(gameLoop);
            }
        }
        
        function setupEventListeners() {
            // Keyboard controls
            document.addEventListener('keydown', event => {
                if (gameOver) return;
                
                if (event.keyCode === 37) { // Left arrow
                    playerMove(-1);
                } else if (event.keyCode === 39) { // Right arrow
                    playerMove(1);
                } else if (event.keyCode === 40) { // Down arrow
                    playerDrop();
                } else if (event.keyCode === 81) { // Q
                    playerRotate(-1);
                } else if (event.keyCode === 87) { // W
                    playerRotate(1);
                }
            });
            
            // Touch controls
            document.querySelector('.left').addEventListener('click', () => {
                if (!gameOver) playerMove(-1);
            });
            
            document.querySelector('.right').addEventListener('click', () => {
                if (!gameOver) playerMove(1);
            });
            
            document.querySelector('.down').addEventListener('click', () => {
                if (!gameOver) playerDrop();
            });
            
            document.querySelector('.up').addEventListener('click', () => {
                if (!gameOver) playerRotate(1);
            });
            
            document.querySelector('.action-btn').addEventListener('click', () => {
                if (!gameOver) playerRotate(1);
            });
            
            // Start button
            document.getElementById('startBtn').addEventListener('click', () => {
                document.getElementById('startScreen').classList.add('hidden');
                gameOver = false;
                score = 0;
                createBoard();
                resetPlayer();
                lastTime = 0;
                requestAnimationFrame(gameLoop);
            });
            
            // Restart button
            document.getElementById('restartBtn').addEventListener('click', () => {
                document.getElementById('endScreen').classList.add('hidden');
                gameOver = false;
                score = 0;
                createBoard();
                resetPlayer();
                lastTime = 0;
                requestAnimationFrame(gameLoop);
            });
        }
        
        // Initialize game when page loads
        window.addEventListener('load', init);
    </script>
</body>
</html>
```