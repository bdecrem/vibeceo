<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WEBTOYS MUSIC MAKER</title>
    <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --cream: #FEFEF5;
            --yellow: #FFD63D;
            --blue: #6ECBFF;
            --purple: #C9C2F9;
            --red: #FF4B4B;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Space Grotesk', system-ui;
        }

        body {
            background: var(--cream);
            min-height: 100vh;
            padding: 2rem;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
        }

        h1 {
            font-size: 3rem;
            color: var(--red);
            text-transform: uppercase;
            margin-bottom: 2rem;
            transform: rotate(-2deg);
            text-align: center;
        }

        .prompt-card {
            background: white;
            border: 4px solid var(--yellow);
            border-radius: 1rem;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: 8px 8px 0 var(--purple);
            transform: rotate(1deg);
        }

        textarea {
            width: 100%;
            padding: 1rem;
            border: 3px solid var(--yellow);
            border-radius: 0.5rem;
            font-size: 1.2rem;
            margin-bottom: 1rem;
            min-height: 100px;
            font-family: inherit;
        }

        .controls {
            display: flex;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        button {
            background: var(--blue);
            border: none;
            padding: 1rem 2rem;
            border-radius: 2rem;
            color: white;
            font-weight: bold;
            cursor: pointer;
            font-size: 1.1rem;
            text-transform: uppercase;
            letter-spacing: 1px;
            transition: transform 0.2s;
        }

        button:hover {
            transform: translateY(-2px);
        }

        button:active {
            transform: scale(0.98);
        }

        .player-card {
            background: white;
            border: 4px solid var(--yellow);
            border-radius: 1rem;
            padding: 2rem;
            box-shadow: 8px 8px 0 var(--purple);
            transform: rotate(-1deg);
            margin-top: 2rem;
        }

        audio {
            width: 100%;
            margin-top: 1rem;
        }

        .status {
            text-align: center;
            font-size: 1.2rem;
            margin: 1rem 0;
            color: var(--blue);
        }

        .instrumental-toggle {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        .generating {
            animation: pulse 1.5s infinite;
        }

        @media (max-width: 768px) {
            h1 {
                font-size: 2rem;
            }

            .controls {
                flex-direction: column;
            }

            button {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>âœ¨ Song Creator âœ¨</h1>
        
        <div class="prompt-card">
            <textarea placeholder="Describe your dream song... (e.g. 'A chill lofi beat with jazzy piano and soft rain sounds')"></textarea>
            
            <div class="instrumental-toggle">
                <input type="checkbox" id="instrumental" checked>
                <label for="instrumental">Instrumental Only (No Vocals)</label>
            </div>
            
            <div class="controls">
                <button onclick="generateSong()">ðŸŽµ Create Music</button>
            </div>
            
            <div class="status"></div>
        </div>

        <div class="player-card">
            <h2>Your Creation</h2>
            <audio id="audioPlayer" controls></audio>
        </div>
    </div>

    <script>
        async function generateSong() {
            const prompt = document.querySelector('textarea').value;
            const instrumental = document.querySelector('#instrumental').checked;
            const status = document.querySelector('.status');
            const button = document.querySelector('button');

            if (!prompt) {
                status.textContent = "Please describe your song first! ðŸŽµ";
                return;
            }

            try {
                button.disabled = true;
                status.textContent = "âœ¨ Creating your musical masterpiece...";
                status.classList.add('generating');

                const finalPrompt = instrumental ? `${prompt}, instrumental, no vocals` : prompt;
                const result = await generateMusic(finalPrompt);

                if (result.success) {
                    status.textContent = "ðŸŽ‰ Your song is ready!";
                    status.classList.remove('generating');
                    const audio = document.getElementById('audioPlayer');
                    audio.src = result.audioUrl;
                    audio.play();
                } else {
                    status.textContent = "ðŸ˜” Something went wrong. Please try again!";
                    status.classList.remove('generating');
                }
            } catch (error) {
                status.textContent = "ðŸš¨ Oops! There was an error. Please try again!";
                status.classList.remove('generating');
            } finally {
                button.disabled = false;
            }
        }

        async function generateMusic(prompt) {
            try {
                const response = await fetch('/api/sonauto', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ prompt })
                });

                const data = await response.json();
                return await pollForCompletion(data.task_id);
            } catch (error) {
                console.error('Generation failed:', error);
                return { success: false };
            }
        }

        async function pollForCompletion(taskId) {
            const maxAttempts = 60;
            let attempts = 0;

            while (attempts < maxAttempts) {
                try {
                    const response = await fetch(`/api/sonauto?taskId=${taskId}`);
                    const result = await response.json();
                    
                    const status = typeof result === 'string' ? result : result.status;
                    
                    if (status === 'SUCCESS' || status === 'COMPLETED') {
                        const audioUrl = result.song_paths?.[0] || result.url;
                        return { success: true, audioUrl };
                    }
                    
                    if (status === 'FAILED') {
                        return { success: false };
                    }
                    
                    await new Promise(resolve => setTimeout(resolve, 2000));
                    attempts++;
                } catch (error) {
                    console.error('Polling error:', error);
                    attempts++;
                }
            }
            
            return { success: false };
        }
    </script>
</body>
</html>