Here's a nostalgic MacPaint-style collaborative drawing app with public sharing and special features:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>WTAF Paint</title>
    <style>
        :root {
            --bg: #fefef5;
            --border: #FFD63D;
            --shadow: #C9C2F9;
            --heading: #FF4B4B;
            --button: #6ECBFF;
            --input: #6ECBFF;
        }

        body {
            font-family: system-ui, -apple-system, sans-serif;
            background: var(--bg);
            margin: 0;
            padding: 20px;
            min-height: 100vh;
            font-size: 16px;
        }

        .app-container {
            max-width: 800px;
            margin: 0 auto;
            text-align: center;
        }

        h1 {
            color: var(--heading);
            text-transform: uppercase;
            font-size: 24px;
            margin-bottom: 20px;
        }

        .canvas-container {
            position: relative;
            width: 320px;
            height: 320px;
            margin: 0 auto 20px;
            border: 2px solid var(--border);
            border-radius: 12px;
            box-shadow: 4px 4px 0 var(--shadow);
            overflow: hidden;
            background: white;
        }

        canvas {
            position: absolute;
            top: 0;
            left: 0;
            touch-action: none;
        }

        .toolbar {
            display: flex;
            gap: 10px;
            justify-content: center;
            flex-wrap: wrap;
            margin-bottom: 20px;
            padding: 10px;
        }

        button {
            background: var(--button);
            color: white;
            border: none;
            border-radius: 20px;
            padding: 10px 20px;
            height: 44px;
            font-size: 16px;
            cursor: pointer;
            min-width: 44px;
        }

        input[type="color"] {
            width: 44px;
            height: 44px;
            padding: 0;
            border: 2px solid var(--input);
            border-radius: 8px;
        }

        input[type="range"] {
            height: 44px;
            min-width: 100px;
        }

        .gallery {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 20px;
            padding: 20px 0;
        }

        .gallery-item {
            background: white;
            border: 2px solid var(--border);
            border-radius: 12px;
            padding: 10px;
            box-shadow: 4px 4px 0 var(--shadow);
        }

        .gallery-item img {
            width: 100%;
            border-radius: 8px;
        }

        .gallery-item p {
            margin: 10px 0 0;
            font-size: 14px;
        }

        @media (min-width: 768px) {
            .canvas-container {
                width: 500px;
                height: 500px;
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <h1>WTAF Paint üé®</h1>
        <div id="user-status">Anonymous User: <span id="current-user-label"></span></div>
        
        <div class="canvas-container">
            <canvas id="canvas"></canvas>
        </div>

        <div class="toolbar">
            <button id="pencil">‚úèÔ∏è</button>
            <button id="brush">üñåÔ∏è</button>
            <input type="color" id="color" value="#000000">
            <input type="range" id="size" min="1" max="50" value="5">
            <button id="undo">‚Ü©Ô∏è</button>
            <button id="mystery">üé≤</button>
            <button id="save">üíæ</button>
        </div>

        <div class="gallery" id="gallery"></div>
    </div>

    <script>
        let currentUser = null;
        let isDrawing = false;
        let tool = 'pencil';
        let mysteryMode = '';
        
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');
        const history = [];
        
        function resizeCanvas() {
            const container = canvas.parentElement;
            canvas.width = container.offsetWidth;
            canvas.height = container.offsetHeight;
            ctx.fillStyle = 'white';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
        }

        resizeCanvas();
        window.addEventListener('resize', resizeCanvas);

        const mysteryFeatures = [
            'rainbow',
            'neon',
            'sparkle',
            'shadow',
            'glow'
        ];

        function initDraw() {
            ctx.lineCap = 'round';
            ctx.lineJoin = 'round';
        }

        function draw(e) {
            if (!isDrawing) return;
            
            const rect = canvas.getBoundingClientRect();
            const x = (e.clientX || e.touches[0].clientX) - rect.left;
            const y = (e.clientY || e.touches[0].clientY) - rect.top;

            ctx.lineWidth = document.getElementById('size').value;
            
            if (mysteryMode === 'rainbow') {
                ctx.strokeStyle = `hsl(${Math.random() * 360}, 100%, 50%)`;
            } else if (mysteryMode === 'neon') {
                ctx.strokeStyle = `#${Math.floor(Math.random()*16777215).toString(16)}`;
                ctx.shadowBlur = 15;
                ctx.shadowColor = ctx.strokeStyle;
            } else {
                ctx.strokeStyle = document.getElementById('color').value;
                ctx.shadowBlur = 0;
            }

            if (tool === 'brush') {
                ctx.lineWidth *= 2;
                ctx.globalAlpha = 0.7;
            } else {
                ctx.globalAlpha = 1;
            }

            ctx.lineTo(x, y);
            ctx.stroke();
            ctx.beginPath();
            ctx.moveTo(x, y);
        }

        function startDraw(e) {
            isDrawing = true;
            history.push(ctx.getImageData(0, 0, canvas.width, canvas.height));
            draw(e);
        }

        function stopDraw() {
            isDrawing = false;
            ctx.beginPath();
        }

        canvas.addEventListener('mousedown', startDraw);
        canvas.addEventListener('mousemove', draw);
        canvas.addEventListener('mouseup', stopDraw);
        canvas.addEventListener('mouseout', stopDraw);

        canvas.addEventListener('touchstart', startDraw);
        canvas.addEventListener('touchmove', draw);
        canvas.addEventListener('touchend', stopDraw);

        document.getElementById('pencil').onclick = () => tool = 'pencil';
        document.getElementById('brush').onclick = () => tool = 'brush';
        
        document.getElementById('undo').onclick = () => {
            if (history.length > 0) {
                ctx.putImageData(history.pop(), 0, 0);
            }
        };

        document.getElementById('mystery').onclick = () => {
            const feature = mysteryFeatures[Math.floor(Math.random() * mysteryFeatures.length)];
            mysteryMode = mysteryMode === feature ? '' : feature;
        };

        document.getElementById('save').onclick = async () => {
            const dataUrl = canvas.toDataURL();
            const name = prompt("Name your masterpiece:");
            if (name) {
                await save('painting', {
                    image: dataUrl,
                    title: name
                });
                loadLatestData();
                
                // Reset canvas
                ctx.fillStyle = 'white';
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                history.length = 0;
            }
        };

        async function loadLatestData() {
            const paintings = await load('painting');
            const gallery = document.getElementById('gallery');
            gallery.innerHTML = '';
            
            paintings.reverse().forEach(painting => {
                const div = document.createElement('div');
                div.className = 'gallery-item';
                div.innerHTML = `
                    <img src="${painting.image}" alt="${painting.title}">
                    <p>"${painting.title}" by ${painting.author}</p>
                `;
                gallery.appendChild(div);
            });
        }

        let pollingInterval;
        function startPolling() {
            pollingInterval = setInterval(() => loadLatestData(), 2000);
        }

        async function initPublicMode() {
            currentUser = await generateAnonymousUser();
            if (currentUser?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                document.getElementById('current-user-label').textContent = currentUser.userLabel;
                startPolling();
                loadLatestData();
            }
        }

        initDraw();
        initPublicMode();
    </script>
</body>
</html>