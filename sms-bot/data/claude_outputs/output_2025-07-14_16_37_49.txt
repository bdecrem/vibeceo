I'll help you create a collaborative todo app with authentication. Here's the implementation:

```html
<!DOCTYPE html>
<html>
<head>
    <title>Collaborative Todo App</title>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            max-width: 600px; 
            margin: 0 auto; 
            padding: 20px;
            background: #f5f5f5;
        }
        .container {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .auth-section, .todo-section {
            display: none;
        }
        .todo-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            margin: 5px 0;
            background: #f8f8f8;
            border-radius: 4px;
        }
        button {
            padding: 8px 16px;
            background: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin: 5px;
        }
        button:hover {
            background: #45a049;
        }
        input[type="text"] {
            padding: 8px;
            margin: 5px;
            width: 70%;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        .error {
            color: red;
            margin: 10px 0;
        }
        .success {
            color: green;
            margin: 10px 0;
        }
        #greeting {
            margin-bottom: 20px;
            color: #666;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Collaborative Todo App</h1>
        <div id="greeting"></div>
        
        <!-- Authentication Section -->
        <div id="authSection" class="auth-section">
            <div id="slotInfo"></div>
            <button onclick="startSignup()">Sign Up</button>
            <button onclick="showLoginForm()">Login</button>
            
            <div id="signupForm" style="display:none;">
                <h2>Sign Up</h2>
                <div id="generatedCredentials"></div>
                <button onclick="confirmSignup()">Confirm Signup</button>
            </div>
            
            <div id="loginForm" style="display:none;">
                <h2>Login</h2>
                <input type="text" id="userLabel" placeholder="User Label">
                <input type="text" id="passcode" placeholder="Passcode">
                <button onclick="login()">Login</button>
            </div>
            
            <div id="authMessage" class="error"></div>
        </div>

        <!-- Todo Section -->
        <div id="todoSection" class="todo-section">
            <h2>Shared Todo List</h2>
            <div class="add-todo">
                <input type="text" id="newTodo" placeholder="Add a new todo">
                <button onclick="addTodo()">Add</button>
            </div>
            <div id="todoList"></div>
            <button onclick="logout()">Logout</button>
        </div>
    </div>

    <script>
        // Global variables
        let currentUser = null;
        let generatedUserData = null;

        // Initialize authentication when page loads
        window.onload = async function() {
            await initAuth();
            checkAuthState();
            updateSlotInfo();
        }

        // Check authentication state
        async function checkAuthState() {
            const authSection = document.getElementById('authSection');
            const todoSection = document.getElementById('todoSection');
            
            if (currentUser) {
                authSection.style.display = 'none';
                todoSection.style.display = 'block';
                updateGreeting();
                loadTodos();
            } else {
                authSection.style.display = 'block';
                todoSection.style.display = 'none';
            }
        }

        // Update available slots information
        async function updateSlotInfo() {
            const slots = await checkAvailableSlots();
            document.getElementById('slotInfo').innerHTML = 
                `Available slots: ${slots.availableSlots} of ${slots.totalSlots}`;
        }

        // Start signup process
        async function startSignup() {
            const slots = await checkAvailableSlots();
            if (slots.isFull) {
                document.getElementById('authMessage').innerHTML = "Sorry, no slots available!";
                return;
            }

            generatedUserData = await generateUser();
            if (generatedUserData.success) {
                document.getElementById('signupForm').style.display = 'block';
                document.getElementById('generatedCredentials').innerHTML = 
                    `Your Label: ${generatedUserData.userLabel}<br>
                     Your Passcode: ${generatedUserData.passcode}<br>
                     Save these credentials!`;
            }
        }

        // Confirm signup
        async function confirmSignup() {
            if (!generatedUserData) return;

            const result = await registerUser(
                generatedUserData.userLabel,
                generatedUserData.passcode,
                generatedUserData.participantId
            );

            if (result.success) {
                currentUser = result;
                document.getElementById('authMessage').className = 'success';
                document.getElementById('authMessage').innerHTML = "Registration successful!";
                checkAuthState();
            }
        }

        // Show login form
        function showLoginForm() {
            document.getElementById('loginForm').style.display = 'block';
            document.getElementById('signupForm').style.display = 'none';
        }

        // Login
        async function login() {
            const userLabel = document.getElementById('userLabel').value;
            const passcode = document.getElementById('passcode').value;

            const result = await authenticateUser(userLabel, passcode);
            if (result.success) {
                currentUser = result.user;
                document.getElementById('authMessage').className = 'success';
                document.getElementById('authMessage').innerHTML = "Login successful!";
                checkAuthState();
            } else {
                document.getElementById('authMessage').className = 'error';
                document.getElementById('authMessage').innerHTML = "Login failed!";
            }
        }

        // Logout
        function logout() {
            currentUser = null;
            checkAuthState();
        }

        // Update greeting
        async function updateGreeting() {
            if (!currentUser) return;
            const greeting = await greet(currentUser.userLabel);
            document.getElementById('greeting').innerHTML = greeting;
        }

        // Load todos
        async function loadTodos() {
            const todos = await load('todos') || [];
            displayTodos(todos);
        }

        // Add todo
        async function addTodo() {
            if (!currentUser) return;

            const todoInput = document.getElementById('newTodo');
            const todoText = todoInput.value.trim();
            if (!todoText) return;

            const todos = await load('todos') || [];
            const newTodo = {
                id: Date.now(),
                text: todoText,
                createdBy: currentUser.userLabel,
                createdAt: new Date().toISOString()
            };

            todos.push(newTodo);
            await save('todos', todos);
            todoInput.value = '';
            displayTodos(todos);
        }

        // Delete todo
        async function deleteTodo(id) {
            const todos = await load('todos') || [];
            const updatedTodos = todos.filter(todo => todo.id !== id);
            await save('todos', updatedTodos);
            displayTodos(updatedTodos);
        }

        // Display todos
        function displayTodos(todos) {
            const todoList = document.getElementById('todoList');
            todoList.innerHTML = todos.map(todo => `
                <div class="todo-item">
                    <span>${todo.text} (by ${todo.createdBy})</span>
                    <button onclick="deleteTodo(${todo.id})">Delete</button>
                </div>
            `).join('');
        }
    </script>
</body>
</html>
```

This implementation includes:

1. **Authentication System**:
- Sign up flow using generated credentials
- Login system with user label and passcode
- Slot availability checking
- Logout functionality

2. **Todo Management**:
- Shared todo list visible to all authenticated users
- Add new todos with user attribution
- Delete todos
- Persistent storage using the save/load helpers

3. **UI Features**:
- Clean, responsive design
- Clear feedback messages
- Personalized greetings
- Available slots display

4. **Security**:
- Authentication required to access todos
- User session management
- Backend-handled authentication

To use the app:

1. Click "Sign Up" to get credentials
2. Save the generated credentials
3. Confirm signup to register
4. Or use "Login" with existing credentials
5. Add/delete todos once authenticated
6. Todos are shared between all users
7. Logout when done

The app uses all the provided helper functions:
- `initAuth()` for authentication setup
- `save()/load()` for todo storage
- `greet()` for personalized messages
- `checkAvailableSlots()` for signup availability
- `generateUser()` for new user credentials
- `registerUser()` for signup completion
- `authenticateUser()` for login

The todos are stored with user attribution and timestamps, making it a true collaborative experience. The UI is clean and intuitive, with clear feedback for all actions.