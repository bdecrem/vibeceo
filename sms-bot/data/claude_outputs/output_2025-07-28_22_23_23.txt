```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0">
  <title>WTAF Pac-Man</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: #111;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: flex-start;
      height: 100vh;
      overflow: hidden;
      font-family: sans-serif;
      color: #fff;
      touch-action: none;
    }
    canvas {
      display: block;
      background: #000;
    }
    #controls {
      position: fixed;
      bottom: 0;
      width: 100%;
      height: 120px;
      background: #222;
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
    }
    .d-pad {
      display: grid;
      grid-template-columns: 60px 60px 60px;
      grid-template-rows: 60px 60px 60px;
      gap: 10px;
    }
    .d-btn {
      width: 60px;
      height: 60px;
      background: #444;
      border: none;
      border-radius: 10px;
      color: #fff;
      font-size: 24px;
      display: flex;
      align-items: center;
      justify-content: center;
      user-select: none;
    }
    .up { grid-column: 2; grid-row: 1; }
    .left { grid-column: 1; grid-row: 2; }
    .right { grid-column: 3; grid-row: 2; }
    .down { grid-column: 2; grid-row: 3; }
    .screen {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: calc(100% - 120px);
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      background: #000;
      text-align: center;
      z-index: 500;
    }
    button {
      margin-top: 20px;
      padding: 12px 24px;
      font-size: 18px;
      background: #f00;
      border: none;
      border-radius: 8px;
      color: #fff;
      cursor: pointer;
    }
    h1 { color: #ff0; font-size: 40px; margin: 0 0 10px; }
    p { max-width: 80%; line-height: 1.5; }
  </style>
</head>
<body>
  <canvas id="game"></canvas>

  <div id="intro" class="screen">
    <h1>üëª PAC-MAN üëª</h1>
    <p>Eat all the dots! Avoid the ghosts! Use arrow keys or D-pad to move.</p>
    <button id="startBtn">START GAME</button>
  </div>

  <div id="end" class="screen" style="display:none;">
    <h1>GAME OVER</h1>
    <p id="finalScore">Score: 0</p>
    <button id="restartBtn">PLAY AGAIN</button>
  </div>

  <div id="controls">
    <div class="d-pad">
      <div class="d-btn up">‚Üë</div>
      <div class="d-btn left">‚Üê</div>
      <div class="d-btn right">‚Üí</div>
      <div class="d-btn down">‚Üì</div>
    </div>
  </div>

  <script>
    var canvas = document.getElementById('game');
    var ctx = canvas.getContext('2d');
    var introScreen = document.getElementById('intro');
    var endScreen = document.getElementById('end');
    var startBtn = document.getElementById('startBtn');
    var restartBtn = document.getElementById('restartBtn');
    var finalScoreEl = document.getElementById('finalScore');

    var dpr = window.devicePixelRatio || 1;
    var controlsHeight = 120;
    var screenWidth = window.innerWidth;
    var screenHeight = window.innerHeight - controlsHeight;
    canvas.width = screenWidth * dpr;
    canvas.height = screenHeight * dpr;
    canvas.style.width = screenWidth + 'px';
    canvas.style.height = screenHeight + 'px';
    ctx.scale(dpr, dpr);

    var blockSize = Math.min(screenWidth / 19, screenHeight / 21);
    var cols = 19;
    var rows = 21;
    var score = 0;
    var dotsRemaining = 0;

    var maze = [
      [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
      [1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1],
      [1,0,1,1,0,1,1,1,0,1,0,1,1,1,0,1,1,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,1,1,0,1,0,1,1,1,1,1,0,1,0,1,1,0,1],
      [1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1],
      [1,1,1,1,0,1,1,1,2,1,2,1,1,1,0,1,1,1,1],
      [2,2,2,1,0,1,2,2,2,2,2,2,2,1,0,1,2,2,2],
      [1,1,1,1,0,1,2,1,1,2,1,1,2,1,0,1,1,1,1],
      [2,2,2,2,0,2,2,1,2,2,2,1,2,2,0,2,2,2,2],
      [1,1,1,1,0,1,2,1,1,1,1,1,2,1,0,1,1,1,1],
      [2,2,2,1,0,1,2,2,2,2,2,2,2,1,0,1,2,2,2],
      [1,1,1,1,0,1,1,1,2,1,2,1,1,1,0,1,1,1,1],
      [1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1],
      [1,0,1,1,0,1,1,1,0,1,0,1,1,1,0,1,1,0,1],
      [1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1],
      [1,1,0,1,0,1,0,1,1,1,1,1,0,1,0,1,0,1,1],
      [1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1],
      [1,0,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
    ];

    var player = { x: 9, y: 15, dir: 'right', nextDir: 'right' };
    var ghosts = [
      { x: 9, y: 9, dir: 'up', color: '#f00' },
      { x: 8, y: 9, dir: 'left', color: '#ffb8ff' },
      { x: 10, y: 9, dir: 'right', color: '#0ff' },
      { x: 9, y: 10, dir: 'down', color: '#ffb852' }
    ];

    function isValidPosition(x, y) {
      if (x < 0 || x >= cols || y < 0 || y >= rows) return false;
      return maze[Math.floor(y)][Math.floor(x)] !== 1;
    }

    function resetGame() {
      score = 0;
      dotsRemaining = 0;
      player = { x: 9, y: 15, dir: 'right', nextDir: 'right' };
      ghosts = [
        { x: 9, y: 9, dir: 'up', color: '#f00' },
        { x: 8, y: 9, dir: 'left', color: '#ffb8ff' },
        { x: 10, y: 9, dir: 'right', color: '#0ff' },
        { x: 9, y: 10, dir: 'down', color: '#ffb852' }
      ];

      for (var y = 0; y < rows; y++) {
        for (var x = 0; x < cols; x++) {
          if (maze[y][x] === 2) {
            maze[y][x] = 0;
            dotsRemaining++;
          }
        }
      }
    }

    function drawMaze() {
      for (var y = 0; y < rows; y++) {
        for (var x = 0; x < cols; x++) {
          var cell = maze[y][x];
          if (cell === 1) {
            ctx.fillStyle = '#22f';
            ctx.fillRect(x * blockSize, y * blockSize, blockSize, blockSize);
          } else if (cell === 0) {
            ctx.fillStyle = '#000';
            ctx.fillRect(x * blockSize, y * blockSize, blockSize, blockSize);
            ctx.fillStyle = '#ff0';
            ctx.beginPath();
            ctx.arc((x + 0.5) * blockSize, (y + 0.5) * blockSize, blockSize * 0.1, 0, Math.PI * 2);
            ctx.fill();
          } else if (cell === 2) {
            ctx.fillStyle = '#000';
            ctx.fillRect(x * blockSize, y * blockSize, blockSize, blockSize);
          }
        }
      }
    }

    function drawPlayer() {
      ctx.fillStyle = '#ff0';
      ctx.beginPath();
      var angle = 0;
      if (player.dir === 'right') angle = 0;
      if (player.dir === 'down') angle = Math.PI * 0.5;
      if (player.dir === 'left') angle = Math.PI;
      if (player.dir === 'up') angle = Math.PI * 1.5;
      ctx.arc(
        (player.x + 0.5) * blockSize,
        (player.y + 0.5) * blockSize,
        blockSize * 0.4,
        angle + Math.PI * 0.2,
        angle + Math.PI * 1.8
      );
      ctx.lineTo((player.x + 0.5) * blockSize, (player.y + 0.5) * blockSize);
      ctx.closePath();
      ctx.fill();
    }

    function drawGhosts() {
      for (var i = 0; i < ghosts.length; i++) {
        var g = ghosts[i];
        ctx.fillStyle = g.color;
        ctx.beginPath();
        ctx.arc(
          (g.x + 0.5) * blockSize,
          (g.y + 0.5) * blockSize,
          blockSize * 0.4,
          Math.PI,
          0,
          false
        );
        ctx.lineTo((g.x + 0.9) * blockSize, (g.y + 0.5) * blockSize);
        ctx.lineTo((g.x + 0.9) * blockSize, (g.y + 0.9) * blockSize);
        ctx.lineTo((g.x + 0.7) * blockSize, (g.y + 0.7) * blockSize);
        ctx.lineTo((g.x + 0.5) * blockSize, (g.y + 0.9) * blockSize);
        ctx.lineTo((g.x + 0.3) * blockSize, (g.y + 0.7) * blockSize);
        ctx.lineTo((g.x + 0.1) * blockSize, (g.y + 0.9) * blockSize);
        ctx.lineTo((g.x + 0.1) * blockSize, (g.y + 0.5) * blockSize);
        ctx.closePath();
        ctx.fill();
      }
    }

    function drawScore() {
      ctx.fillStyle = '#fff';
      ctx.font = '20px sans-serif';
      ctx.fillText('Score: ' + score, 10, 30);
    }

    function movePlayer() {
      var nextX = player.x;
      var nextY = player.y;

      if (player.nextDir === 'left' && isValidPosition(player.x - 0.1, player.y)) {
        player.dir = 'left';
      } else if (player.nextDir === 'right' && isValidPosition(player.x + 0.1, player.y)) {
        player.dir = 'right';
      } else if (player.nextDir === 'up' && isValidPosition(player.x, player.y - 0.1)) {
        player.dir = 'up';
      } else if (player.nextDir === 'down' && isValidPosition(player.x, player.y + 0.1)) {
        player.dir = 'down';
      }

      if (player.dir === 'left') nextX -= 0.05;
      if (player.dir === 'right') nextX += 0.05;
      if (player.dir === 'up') nextY -= 0.05;
      if (player.dir === 'down') nextY += 0.05;

      if (isValidPosition(nextX, nextY)) {
        player.x = nextX;
        player.y = nextY;
      }

      var gridX = Math.floor(player.x);
      var gridY = Math.floor(player.y);

      if (maze[gridY][gridX] === 0) {
        maze[gridY][gridX] = 2;
        score += 10;
        dotsRemaining--;
        if (dotsRemaining <= 0) {
          endGame(true);
        }
      }
    }

    function moveGhosts() {
      for (var i = 0; i < ghosts.length; i++) {
        var g = ghosts[i];
        var directions = ['left', 'right', 'up', 'down'];
        var validDirs = [];

        for (var j = 0; j < directions.length; j++) {
          var dir = directions[j];
          var testX = g.x;
          var testY = g.y;

          if (dir === 'left') testX -= 0.05;
          if (dir === 'right') testX += 0.05;
          if (dir === 'up') testY -= 0.05;
          if (dir === 'down') testY += 0.05;

          if (isValidPosition(testX, testY)) {
            validDirs.push(dir);
          }
        }

        if (validDirs.length > 0) {
          var newDir = validDirs[Math.floor(Math.random() * validDirs.length)];
          g.dir = newDir;

          if (newDir === 'left') g.x -= 0.05;
          if (newDir === 'right') g.x += 0.05;
          if (newDir === 'up') g.y -= 0.05;
          if (newDir === 'down') g.y += 0.05;

          if (Math.abs(g.x - player.x) < 0.7 && Math.abs(g.y - player.y) < 0.7) {
            endGame(false);
          }
        }
      }
    }

    function update() {
      movePlayer();
      moveGhosts();
    }

    function draw() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      drawMaze();
      drawPlayer();
      drawGhosts();
      drawScore();
    }

    var lastTime = 0;
    var gameInterval = 1000 / 30;

    function gameLoop(timestamp) {
      var deltaTime = timestamp - lastTime;

      if (deltaTime > gameInterval) {
        update();
        draw();
        lastTime = timestamp;
      }
      requestAnimationFrame(gameLoop);
    }

    function startGame() {
      introScreen.style.display = 'none';
      endScreen.style.display = 'none';
      resetGame();
      requestAnimationFrame(gameLoop);
    }

    function endGame(win) {
      finalScoreEl.textContent = win ? 'You Win! Score: ' + score : 'Game Over! Score: ' + score;
      endScreen.style.display = 'flex';
    }

    startBtn.addEventListener('click', startGame);
    restartBtn.addEventListener('click', startGame);

    document.addEventListener('keydown', function(e) {
      if (e.key === 'ArrowLeft') player.nextDir = 'left';
      if (e.key === 'ArrowRight') player.nextDir = 'right';
      if (e.key === 'ArrowUp') player.nextDir = 'up';
      if (e.key === 'ArrowDown') player.nextDir = 'down';
    });

    var dUp = document.querySelector('.up');
    var dDown = document.querySelector('.down');
    var dLeft = document.querySelector('.left');
    var dRight = document.querySelector('.right');

    dUp.addEventListener('touchstart', function(e) { e.preventDefault(); player.nextDir = 'up'; });
    dDown.addEventListener('touchstart', function(e) { e.preventDefault(); player.nextDir = 'down'; });
    dLeft.addEventListener('touchstart', function(e) { e.preventDefault(); player.nextDir = 'left'; });
    dRight.addEventListener('touchstart', function(e) { e.preventDefault(); player.nextDir = 'right'; });

    dUp.addEventListener('mousedown', function() { player.nextDir = 'up'; });
    dDown.addEventListener('mousedown', function() { player.nextDir = 'down'; });
    dLeft.addEventListener('mousedown', function() { player.nextDir = 'left'; });
    dRight.addEventListener('mousedown', function() { player.nextDir = 'right'; });
  </script>
</body>
</html>
```