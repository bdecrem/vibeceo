I'll help you create a collaborative todo app with authentication using the provided helper functions. Here's the implementation:

```html
<!DOCTYPE html>
<html>
<head>
    <title>Collaborative Todo App</title>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            max-width: 800px; 
            margin: 0 auto; 
            padding: 20px;
            background: #f5f5f5;
        }
        .container {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .auth-section, .todo-section {
            margin: 20px 0;
        }
        .todo-item {
            display: flex;
            align-items: center;
            padding: 10px;
            margin: 5px 0;
            background: #f9f9f9;
            border-radius: 4px;
        }
        .todo-item span {
            flex-grow: 1;
            margin: 0 10px;
        }
        button {
            padding: 8px 16px;
            margin: 5px;
            border: none;
            border-radius: 4px;
            background: #4CAF50;
            color: white;
            cursor: pointer;
        }
        button:hover {
            background: #45a049;
        }
        input {
            padding: 8px;
            margin: 5px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        .error {
            color: red;
            margin: 10px 0;
        }
        .success {
            color: green;
            margin: 10px 0;
        }
        .greeting {
            font-style: italic;
            color: #666;
            margin: 10px 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Collaborative Todo App</h1>
        <div id="greeting"></div>
        
        <!-- Auth Section -->
        <div id="auth-section" class="auth-section">
            <div id="slots-info"></div>
            <div id="signup-section">
                <h2>Sign Up</h2>
                <button onclick="generateNewUser()">Generate New User</button>
                <div id="signup-result"></div>
            </div>
            <div id="login-section">
                <h2>Login</h2>
                <input type="text" id="login-label" placeholder="User Label">
                <input type="password" id="login-passcode" placeholder="Passcode">
                <button onclick="login()">Login</button>
                <div id="login-result"></div>
            </div>
        </div>

        <!-- Todo Section (hidden until logged in) -->
        <div id="todo-section" class="todo-section" style="display: none;">
            <h2>Todos</h2>
            <div>
                <input type="text" id="new-todo" placeholder="Add new todo">
                <button onclick="addTodo()">Add Todo</button>
            </div>
            <div id="todo-list"></div>
        </div>
    </div>

    <script>
        // Global state
        let currentUser = null;

        // Initialize authentication when page loads
        window.onload = async function() {
            await initAuth();
            updateSlotsInfo();
        };

        // Update available slots information
        async function updateSlotsInfo() {
            const slots = await checkAvailableSlots();
            document.getElementById('slots-info').innerHTML = `
                <p>Available Slots: ${slots.availableSlots} of ${slots.totalSlots}</p>
                ${slots.availableLabels.length > 0 ? `<p>Available Labels: ${slots.availableLabels.join(', ')}</p>` : ''}
            `;
        }

        // Generate new user credentials
        async function generateNewUser() {
            const user = await generateUser();
            if (user.success) {
                const signupResult = document.getElementById('signup-result');
                signupResult.innerHTML = `
                    <p class="success">Your credentials:</p>
                    <p>Label: ${user.userLabel}</p>
                    <p>Passcode: ${user.passcode}</p>
                    <p>Save these credentials!</p>
                    <button onclick="registerNewUser('${user.userLabel}', '${user.passcode}', '${user.participantId}')">
                        Complete Registration
                    </button>
                `;
            }
        }

        // Register new user
        async function registerNewUser(userLabel, passcode, participantId) {
            const result = await registerUser(userLabel, passcode, participantId);
            if (result.success) {
                document.getElementById('signup-result').innerHTML = `
                    <p class="success">${result.message}</p>
                    <p>Please login with your credentials.</p>
                `;
                updateSlotsInfo();
            }
        }

        // Login user
        async function login() {
            const userLabel = document.getElementById('login-label').value;
            const passcode = document.getElementById('login-passcode').value;
            
            const result = await authenticateUser(userLabel, passcode);
            if (result.success) {
                currentUser = result.user;
                document.getElementById('login-result').innerHTML = `
                    <p class="success">${result.message}</p>
                `;
                showTodoSection();
            } else {
                document.getElementById('login-result').innerHTML = `
                    <p class="error">Login failed. Please try again.</p>
                `;
            }
        }

        // Show todo section and load todos
        async function showTodoSection() {
            document.getElementById('auth-section').style.display = 'none';
            document.getElementById('todo-section').style.display = 'block';
            
            // Show greeting
            const greeting = await greet(currentUser.userLabel);
            document.getElementById('greeting').innerHTML = `<p class="greeting">${greeting}</p>`;
            
            // Load and display todos
            await loadTodos();
        }

        // Add new todo
        async function addTodo() {
            const todoInput = document.getElementById('new-todo');
            const todoText = todoInput.value.trim();
            
            if (todoText) {
                const todo = {
                    text: todoText,
                    completed: false,
                    createdBy: currentUser.userLabel,
                    createdAt: new Date().toISOString()
                };
                
                await save('todos', todo);
                todoInput.value = '';
                await loadTodos();
            }
        }

        // Load and display todos
        async function loadTodos() {
            const todos = await load('todos') || [];
            const todoList = document.getElementById('todo-list');
            
            todoList.innerHTML = todos.map(todo => `
                <div class="todo-item">
                    <input type="checkbox" 
                           ${todo.completed ? 'checked' : ''} 
                           onchange="toggleTodo('${todo.createdAt}')">
                    <span style="${todo.completed ? 'text-decoration: line-through' : ''}">${todo.text}</span>
                    <small>by ${todo.createdBy}</small>
                    <button onclick="deleteTodo('${todo.createdAt}')">Delete</button>
                </div>
            `).join('');
        }

        // Toggle todo completion
        async function toggleTodo(createdAt) {
            const todos = await load('todos') || [];
            const todoIndex = todos.findIndex(t => t.createdAt === createdAt);
            
            if (todoIndex !== -1) {
                todos[todoIndex].completed = !todos[todoIndex].completed;
                await save('todos', todos[todoIndex]);
                await loadTodos();
            }
        }

        // Delete todo
        async function deleteTodo(createdAt) {
            const todos = await load('todos') || [];
            const todoIndex = todos.findIndex(t => t.createdAt === createdAt);
            
            if (todoIndex !== -1) {
                todos.splice(todoIndex, 1);
                await save('todos', todos[todoIndex]);
                await loadTodos();
            }
        }
    </script>
</body>
</html>
```

This collaborative todo app includes:

1. **Authentication System**:
   - Shows available user slots
   - Generates new user credentials
   - Handles user registration
   - Provides login functionality

2. **Todo Management**:
   - Add new todos
   - Toggle todo completion
   - Delete todos
   - Shows who created each todo
   - Real-time updates

3. **User Experience**:
   - Clean and responsive design
   - Success/error messages
   - Personalized greetings
   - Intuitive interface

4. **Features**:
   - Shared todo list visible to all users
   - Tracks who created each todo
   - Persistence using the save/load helpers
   - Full authentication flow

To use the app:

1. First-time users click "Generate New User" to get credentials
2. Complete registration with the generated credentials
3. Login with the user label and passcode
4. Start adding and managing todos
5. All todos are shared between users

The app uses all the provided helper functions appropriately and maintains a simple but functional interface. The todos are stored in the database and shared among all users, making it truly collaborative.