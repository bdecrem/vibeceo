```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>Paddle Clash</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;600;700&family=Inter:wght@400;500&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            -webkit-tap-highlight-color: transparent;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(45deg, #ff00ff, #00ffff, #ff0080, #8000ff);
            background-size: 400% 400%;
            animation: gradientShift 15s ease infinite;
            overflow: hidden;
            height: 100vh;
            position: relative;
        }

        @keyframes gradientShift {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        .floating-emoji {
            position: absolute;
            font-size: 2rem;
            pointer-events: none;
            opacity: 0.7;
            animation: float 6s ease-in-out infinite;
        }

        .emoji-1 { top: 10%; left: 10%; animation-delay: 0s; }
        .emoji-2 { top: 20%; right: 15%; animation-delay: 2s; }
        .emoji-3 { bottom: 15%; left: 20%; animation-delay: 4s; }

        @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            50% { transform: translateY(-20px) rotate(5deg); }
        }

        .container {
            width: 100%;
            height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            backdrop-filter: blur(10px);
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            position: relative;
        }

        .screen {
            display: none;
            text-align: center;
            padding: 2rem;
            width: 100%;
            max-width: 400px;
        }

        .screen.active {
            display: block;
            animation: fadeIn 0.5s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        h1 {
            font-family: 'Space Grotesk', sans-serif;
            font-weight: 700;
            font-size: 3rem;
            color: #fff;
            text-shadow: 0 0 20px #ff00ff;
            margin-bottom: 1rem;
            letter-spacing: -2px;
        }

        h2 {
            font-family: 'Space Grotesk', sans-serif;
            font-weight: 600;
            font-size: 1.5rem;
            color: #fff;
            margin-bottom: 2rem;
        }

        .btn {
            background: linear-gradient(135deg, #ff00ff, #00ffff);
            border: none;
            padding: 1rem 2rem;
            border-radius: 50px;
            color: #fff;
            font-family: 'Space Grotesk', sans-serif;
            font-weight: 600;
            font-size: 1.1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 20px rgba(255, 0, 255, 0.3);
            min-height: 44px;
            min-width: 120px;
        }

        .btn:hover, .btn:active {
            transform: translateY(-2px);
            box-shadow: 0 6px 25px rgba(255, 0, 255, 0.5);
        }

        #gameCanvas {
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 10px;
            background: rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(5px);
            touch-action: none;
        }

        .score {
            color: #fff;
            font-family: 'Space Grotesk', sans-serif;
            font-weight: 600;
            font-size: 1.2rem;
            margin: 1rem 0;
            text-shadow: 0 0 10px #00ffff;
        }

        .controls {
            color: rgba(255, 255, 255, 0.8);
            font-size: 0.9rem;
            margin-top: 1rem;
            line-height: 1.5;
        }

        @media (max-width: 480px) {
            h1 { font-size: 2.5rem; }
            .container { padding: 1rem; }
            #gameCanvas { 
                width: 100%;
                max-width: 350px;
            }
        }
    </style>
</head>
<body>
    <div class="floating-emoji emoji-1">üèì</div>
    <div class="floating-emoji emoji-2">‚ö°</div>
    <div class="floating-emoji emoji-3">üéÆ</div>

    <div class="container">
        <div id="startScreen" class="screen active">
            <h1>PADDLE CLASH</h1>
            <h2>Neon Arena Awaits</h2>
            <button class="btn" onclick="startGame()">Enter Battle</button>
            <div class="controls">
                Tap left/right sides to move paddle<br>
                Survive the chaos
            </div>
        </div>

        <div id="gameScreen" class="screen">
            <canvas id="gameCanvas" width="350" height="500"></canvas>
            <div class="score" id="gameScore">Score: 0</div>
        </div>

        <div id="endScreen" class="screen">
            <h2>Battle Complete</h2>
            <div class="score" id="finalScore">Score: 0</div>
            <div style="color: rgba(255,255,255,0.8); margin: 1rem 0;">
                <span id="scoreMessage">Not bad, warrior</span>
            </div>
            <button class="btn" onclick="restartGame()">Clash Again</button>
        </div>
    </div>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        
        // Handle device pixel ratio
        const dpr = window.devicePixelRatio || 1;
        const rect = canvas.getBoundingClientRect();
        canvas.width = rect.width * dpr;
        canvas.height = rect.height * dpr;
        ctx.scale(dpr, dpr);
        canvas.style.width = rect.width + 'px';
        canvas.style.height = rect.height + 'px';

        let game = {
            paddle: { x: 175, y: 450, width: 80, height: 12, speed: 8 },
            ball: { x: 175, y: 250, vx: 4, vy: -4, radius: 8 },
            score: 0,
            running: false,
            touchX: null
        };

        function resetGame() {
            game.paddle.x = 175;
            game.ball.x = 175;
            game.ball.y = 250;
            game.ball.vx = (Math.random() > 0.5 ? 1 : -1) * (3 + Math.random() * 2);
            game.ball.vy = -4;
            game.score = 0;
            updateScore();
        }

        function startGame() {
            document.getElementById('startScreen').classList.remove('active');
            document.getElementById('gameScreen').classList.add('active');
            resetGame();
            game.running = true;
            gameLoop();
        }

        function endGame() {
            game.running = false;
            document.getElementById('gameScreen').classList.remove('active');
            document.getElementById('endScreen').classList.add('active');
            document.getElementById('finalScore').textContent = `Score: ${game.score}`;
            
            const messages = [
                'Pixel warrior!', 'Neon legend!', 'Retro master!', 
                'Arcade champion!', 'Clash survivor!', 'Digital gladiator!'
            ];
            document.getElementById('scoreMessage').textContent = 
                messages[Math.floor(Math.random() * messages.length)];
        }

        function restartGame() {
            document.getElementById('endScreen').classList.remove('active');
            startGame();
        }

        function updateScore() {
            document.getElementById('gameScore').textContent = `Score: ${game.score}`;
        }

        // Touch controls
        canvas.addEventListener('touchstart', (e) => {
            e.preventDefault();
            const touch = e.touches[0];
            const rect = canvas.getBoundingClientRect();
            game.touchX = touch.clientX - rect.left;
        });

        canvas.addEventListener('touchmove', (e) => {
            e.preventDefault();
            const touch = e.touches[0];
            const rect = canvas.getBoundingClientRect();
            game.touchX = touch.clientX - rect.left;
        });

        canvas.addEventListener('touchend', (e) => {
            e.preventDefault();
            game.touchX = null;
        });

        // Mouse controls for desktop
        canvas.addEventListener('mousemove', (e) => {
            const rect = canvas.getBoundingClientRect();
            game.touchX = e.clientX - rect.left;
        });

        function updatePaddle() {
            if (game.touchX !== null) {
                game.paddle.x = Math.max(0, Math.min(350 - game.paddle.width, game.touchX - game.paddle.width / 2));
            }
        }

        function updateBall() {
            game.ball.x += game.ball.vx;
            game.ball.y += game.ball.vy;

            // Wall collisions
            if (game.ball.x <= game.ball.radius || game.ball.x >= 350 - game.ball.radius) {
                game.ball.vx = -game.ball.vx;
            }
            if (game.ball.y <= game.ball.radius) {
                game.ball.vy = -game.ball.vy;
            }

            // Paddle collision
            if (game.ball.y + game.ball.radius >= game.paddle.y &&
                game.ball.x >= game.paddle.x &&
                game.ball.x <= game.paddle.x + game.paddle.width &&
                game.ball.vy > 0) {
                
                game.ball.vy = -game.ball.vy;
                game.score += 10;
                updateScore();
                
                // Speed increase
                game.ball.vx *= 1.02;
                game.ball.vy *= 1.02;
            }

            // Game over
            if (game.ball.y > 500) {
                endGame();
            }
        }

        function draw() {
            // Clear canvas
            ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';
            ctx.fillRect(0, 0, 350, 500);

            // Draw paddle with glow
            ctx.shadowColor = '#00ffff';
            ctx.shadowBlur = 20;
            ctx.fillStyle = '#00ffff';
            ctx.fillRect(game.paddle.x, game.paddle.y, game.paddle.width, game.paddle.height);

            // Draw ball with glow
            ctx.shadowColor = '#ff00ff';
            ctx.shadowBlur = 15;
            ctx.fillStyle = '#ff00ff';
            ctx.beginPath();
            ctx.arc(game.ball.x, game.ball.y, game.ball.radius, 0, Math.PI * 2);
            ctx.fill();

            // Reset shadow
            ctx.shadowBlur = 0;
        }

        function gameLoop() {
            if (!game.running) return;

            updatePaddle();
            updateBall();
            draw();

            requestAnimationFrame(gameLoop);
        }

        // Parallax effect for floating emojis
        document.addEventListener('mousemove', (e) => {
            const emojis = document.querySelectorAll('.floating-emoji');
            const mouseX = e.clientX / window.innerWidth;
            const mouseY = e.clientY / window.innerHeight;

            emojis.forEach((emoji, index) => {
                const speed = (index + 1) * 0.5;
                const x = (mouseX - 0.5) * speed * 10;
                const y = (mouseY - 0.5) * speed * 10;
                emoji.style.transform = `translate(${x}px, ${y}px)`;
            });
        });
    </script>
</body>
</html>
```