<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>ASCII Critter Wall</title>
    <style>
        * { box-sizing: border-box; }

        body {
            font-family: 'Courier New', monospace;
            background: #0a0a0a;
            color: #fff;
            margin: 0;
            padding: 10px;
            font-size: 16px;
        }

        .app-container {
            max-width: 800px;
            margin: 0 auto;
            background: #1a1a1a;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 0 40px rgba(0,0,0,0.5);
        }

        h1 {
            font-size: 24px;
            margin: 0 0 20px 0;
            text-align: center;
        }

        .public-notice {
            background: #2a4a2a;
            border: 1px solid #4a6a4a;
            color: #8fbc8f;
            padding: 12px;
            border-radius: 6px;
            margin: 10px 0;
            text-align: center;
            font-weight: bold;
        }

        button {
            background: #ff0066;
            color: white;
            border: none;
            padding: 16px 24px;
            border-radius: 6px;
            font-weight: bold;
            cursor: pointer;
            margin: 8px 0;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-size: 16px;
            width: 100%;
            min-height: 44px;
        }

        textarea {
            background: #2a2a2a;
            border: 1px solid #444;
            color: white;
            padding: 16px;
            border-radius: 6px;
            width: 100%;
            margin: 10px 0;
            font-size: 16px;
            min-height: 120px;
            font-family: 'Courier New', monospace;
        }

        .critter-wall {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .critter-card {
            background: #2a2a2a;
            padding: 16px;
            border-radius: 8px;
            white-space: pre;
            font-size: 14px;
            position: relative;
        }

        .critter-meta {
            font-size: 12px;
            color: #888;
            margin-top: 10px;
            border-top: 1px solid #444;
            padding-top: 10px;
        }

        #user-status {
            background: #333;
            padding: 8px 12px;
            border-radius: 4px;
            margin: 10px 0;
            font-size: 14px;
            text-align: center;
            opacity: 0.8;
        }

        .screen { display: none; }
        .screen.active { display: block; }

        @media (min-width: 600px) {
            body { padding: 20px; }
            .app-container { padding: 30px; }
            button { width: auto; display: inline-block; margin: 5px; }
        }

        .example-critters {
            background: #2a2a2a;
            padding: 15px;
            border-radius: 6px;
            margin: 10px 0;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <div class="app-container">
        <div id="main-screen" class="screen active">
            <h1>ASCII Critter Wall üêæ</h1>
            <div id="user-status">Anonymous User: <span id="current-user-label"></span></div>
            <p class="public-notice">üì¢ Add your ASCII art critter to our growing collection!</p>

            <div class="example-critters">
                Example critters:
                <pre>^..^   /\___/\   =(^o.o^)=
(‚à™ ‚à™)  (=^.^=)   (ÔΩ°‚óï‚Äø‚óïÔΩ°)</pre>
            </div>

            <textarea id="critter-input" placeholder="Paste or type your ASCII critter here...
Examples:
^..^
(‚à™ ‚à™)

/\___/\
(=^.^=)

=(^o.o^)="></textarea>
            <button onclick="submitCritter()">Add Critter to Wall</button>

            <div class="critter-wall" id="critter-display"></div>
        </div>
    </div>

    <script>
        let currentUser = null;

        async function initPublicMode() {
            currentUser = await generateAnonymousUser();
            if (currentUser?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                document.getElementById('current-user-label').textContent = currentUser.userLabel;
                startPolling();
                loadLatestData();
            }
        }

        let pollingInterval;
        function startPolling() {
            pollingInterval = setInterval(() => loadLatestData(), 2000);
        }

        function stopPolling() {
            if (pollingInterval) clearInterval(pollingInterval);
        }

        async function loadLatestData() {
            const critters = await load('critter');
            updateCritterWall(critters);
        }

        function updateCritterWall(critters) {
            const wall = document.getElementById('critter-display');
            wall.innerHTML = '';

            // Sort by newest first
            critters.sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
                .forEach(critter => {
                    const card = document.createElement('div');
                    card.className = 'critter-card';
                    card.innerHTML = `${critter.art}
<div class="critter-meta">Posted by ${critter.author} on ${new Date(critter.created_at).toLocaleDateString()}</div>`;
                    wall.appendChild(card);
                });
        }

        async function submitCritter() {
            const art = document.getElementById('critter-input').value.trim();
            if (!art) {
                alert('Please add some ASCII art first!');
                return;
            }

            if (art.length > 500) {
                alert('Critter too big! Please keep it under 500 characters.');
                return;
            }

            await save('critter', { art });
            document.getElementById('critter-input').value = '';
            await loadLatestData();
        }

        // Initialize on load
        initPublicMode();
    </script>
</body>
</html>