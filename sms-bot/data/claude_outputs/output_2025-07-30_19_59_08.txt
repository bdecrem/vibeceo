<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>REBEL BLOG ⚡</title>
    <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=JetBrains+Mono&display=swap" rel="stylesheet">
    <style>
        /* CHAOS Theme */
        :root {
            --bg: #FCFCF7;
            --border: #FFD63D;
            --shadow: #C9C2F9;
            --text: #0A0A0A;
            --font-primary: 'Space Grotesk', system-ui, sans-serif;
            --font-mono: 'JetBrains Mono', monospace;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            background: var(--bg);
            color: var(--text);
            font-family: var(--font-primary);
            font-size: 16px;
            line-height: 1.6;
            padding: 20px;
        }

        .screen {
            display: none;
            max-width: 800px;
            margin: 0 auto;
        }

        .screen.active {
            display: block;
        }

        h1, h2 {
            font-weight: bold;
            text-transform: uppercase;
            transform: rotate(-1deg);
            margin: 1rem 0;
        }

        h1 { font-size: 40px; }
        h2 { font-size: 28px; }

        button {
            background: var(--border);
            border: 3px solid var(--text);
            box-shadow: 4px 4px var(--shadow);
            color: var(--text);
            cursor: pointer;
            font-family: var(--font-primary);
            font-size: 16px;
            font-weight: bold;
            margin: 10px 0;
            min-height: 44px;
            padding: 8px 16px;
            text-transform: uppercase;
            transform: rotate(-1deg);
            transition: all 0.2s;
            width: 100%;
            max-width: 300px;
        }

        button:hover {
            transform: rotate(1deg) scale(1.02);
        }

        button:active {
            transform: scale(0.98);
            box-shadow: 2px 2px var(--shadow);
        }

        input, textarea, select {
            background: var(--bg);
            border: 3px solid var(--text);
            font-family: var(--font-mono);
            font-size: 16px;
            margin: 10px 0;
            padding: 12px;
            width: 100%;
            min-height: 44px;
        }

        .blog-post {
            background: var(--bg);
            border: 4px solid var(--border);
            box-shadow: 8px 8px var(--shadow);
            margin: 20px 0;
            padding: 20px;
            transform: rotate(-1deg);
        }

        .blog-post:nth-child(even) {
            transform: rotate(1deg);
        }

        .toolbar {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            margin: 10px 0;
        }

        .toolbar button {
            width: auto;
            min-width: 44px;
            padding: 8px;
        }

        #floating-emoji {
            position: fixed;
            bottom: 20px;
            right: 20px;
            font-size: 40px;
            cursor: pointer;
            animation: pulse 2s infinite;
            user-select: none;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }

        @media (min-width: 768px) {
            button {
                width: auto;
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Auth Screens -->
        <div id="welcome-screen" class="screen active">
            <h1>REBEL BLOG ⚡</h1>
            <p>Write whatever you want. Break the rules.</p>
            <button onclick="showNewUserScreen()">New Blogger</button>
            <button onclick="showReturningUserScreen()">Returning Rebel</button>
        </div>

        <div id="new-user-screen" class="screen">
            <h1>New Blogger</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Start Writing</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <div id="returning-user-screen" class="screen">
            <h1>Welcome Back</h1>
            <select id="user-label-select"></select>
            <input type="text" id="returning-passcode" placeholder="4-digit code" maxlength="4">
            <button onclick="loginReturningUser()">Enter</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <!-- Main App Screen -->
        <div id="main-screen" class="screen">
            <h1>REBEL BLOG ⚡</h1>
            <div id="user-status">Logged in as <span id="current-user-label"></span></div>

            <!-- Editor -->
            <div id="editor">
                <input type="text" id="post-title" placeholder="Post Title">
                <div class="toolbar">
                    <button onclick="formatText('h1')">H1</button>
                    <button onclick="formatText('h2')">H2</button>
                    <button onclick="formatText('p')">P</button>
                    <button onclick="formatText('ul')">List</button>
                </div>
                <textarea id="post-content" rows="10" placeholder="Write your rebellious thoughts..."></textarea>
                <button onclick="savePost()">Publish Post</button>
            </div>

            <!-- Posts Display -->
            <div id="posts-container"></div>

            <button onclick="showScreen('welcome-screen')">Leave</button>
        </div>
    </div>

    <div id="floating-emoji" onclick="triggerEmojiRain()">✍️</div>

    <script>
        // Auth Code
        let currentUser = null;
        let editingPostId = null;

        async function generateNewUser() {
            const slots = await checkAvailableSlots();
            if (slots.isFull) {
                alert('Blog is full!');
                return false;
            }
            const user = await generateUser();
            if (user?.success) {
                currentUser = user;
                document.getElementById('new-user-info').innerHTML = 
                    `Your ID: ${user.userLabel}<br>Code: ${user.passcode}<br>Save these!`;
                return true;
            }
            return false;
        }

        async function registerNewUser() {
            if (!currentUser) return;
            const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
            if (result?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                enterMainScreen();
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            await generateNewUser();
        }

        async function loginReturningUser() {
            const label = document.getElementById('user-label-select').value;
            const passcode = document.getElementById('returning-passcode').value;
            const result = await authenticateUser(label, passcode);
            if (result?.success) {
                currentUser = { userLabel: label, passcode, participantId: result.user.participantId };
                updateZadAuth(label, result.user.participantId);
                enterMainScreen();
            } else {
                alert('Wrong code!');
            }
        }

        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const slots = await checkAvailableSlots();
            const select = document.getElementById('user-label-select');
            select.innerHTML = '<option>Select User</option>';
            slots.usedLabels.forEach(label => {
                select.innerHTML += `<option>${label}</option>`;
            });
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            if (screenId !== 'main-screen') stopPolling();
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            startPolling();
            loadLatestData();
        }

        // Blog Functionality
        async function savePost() {
            const title = document.getElementById('post-title').value;
            const content = document.getElementById('post-content').value;

            if (!title || !content) {
                alert('Title and content required!');
                return;
            }

            await save('blog_post', {
                id: editingPostId || Date.now(),
                title,
                content
            });

            // Reset form
            document.getElementById('post-title').value = '';
            document.getElementById('post-content').value = '';
            editingPostId = null;

            await loadLatestData();
        }

        async function deletePost(postId) {
            if (!confirm('Delete this post?')) return;
            
            await save('blog_post', {
                id: postId,
                deleted: true
            });

            await loadLatestData();
        }

        function editPost(post) {
            editingPostId = post.id;
            document.getElementById('post-title').value = post.title;
            document.getElementById('post-content').value = post.content;
            document.getElementById('post-title').focus();
        }

        function formatText(tag) {
            const textarea = document.getElementById('post-content');
            const start = textarea.selectionStart;
            const end = textarea.selectionEnd;
            const selectedText = textarea.value.substring(start, end);
            
            let formattedText = '';
            switch(tag) {
                case 'h1':
                    formattedText = `<h1>${selectedText}</h1>`;
                    break;
                case 'h2':
                    formattedText = `<h2>${selectedText}</h2>`;
                    break;
                case 'p':
                    formattedText = `<p>${selectedText}</p>`;
                    break;
                case 'ul':
                    formattedText = `<ul><li>${selectedText}</li></ul>`;
                    break;
            }

            textarea.value = textarea.value.substring(0, start) + formattedText + textarea.value.substring(end);
        }

        // Data Loading
        let pollingInterval;

        function startPolling() {
            pollingInterval = setInterval(() => loadLatestData(), 2000);
        }

        function stopPolling() {
            if (pollingInterval) clearInterval(pollingInterval);
        }

        function deduplicate(items) {
            return items.reduce((acc, item) => {
                const existing = acc.find(i => i.id === item.id);
                if (!existing || new Date(item.created_at) > new Date(existing.created_at)) {
                    if (existing) {
                        const index = acc.indexOf(existing);
                        acc[index] = item;
                    } else {
                        acc.push(item);
                    }
                }
                return acc;
            }, []);
        }

        async function loadLatestData() {
            const posts = await load('blog_post');
            const myPosts = posts.filter(p => p.author === getUsername());
            const uniquePosts = deduplicate(myPosts);
            const activePosts = uniquePosts.filter(p => !p.deleted);

            document.getElementById('posts-container').innerHTML = activePosts
                .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
                .map(post => `
                    <div class="blog-post">
                        <h2>${post.title}</h2>
                        <div>${post.content}</div>
                        <button onclick="editPost(${JSON.stringify(post).replace(/"/g, '&quot;')})">Edit</button>
                        <button onclick="deletePost(${post.id})">Delete</button>
                    </div>
                `).join('');
        }

        // Emoji Rain Easter Egg
        function triggerEmojiRain() {
            const emojis = ['✍️', '📝', '📖', '⚡', '💫'];
            for (let i = 0; i < 20; i++) {
                const emoji = document.createElement('div');
                emoji.style.position = 'fixed';
                emoji.style.left = `${Math.random() * 100}vw`;
                emoji.style.top = '-20px';
                emoji.style.fontSize = '24px';
                emoji.textContent = emojis[Math.floor(Math.random() * emojis.length)];
                emoji.style.zIndex = '1000';
                emoji.style.pointerEvents = 'none';
                document.body.appendChild(emoji);

                const animation = emoji.animate([
                    { transform: 'translateY(0)', opacity: 1 },
                    { transform: `translateY(${window.innerHeight + 20}px)`, opacity: 0 }
                ], {
                    duration: 1500 + Math.random() * 1000,
                    easing: 'linear'
                });

                animation.onfinish = () => emoji.remove();
            }
        }

        initAuth();
    </script>
</body>
</html>