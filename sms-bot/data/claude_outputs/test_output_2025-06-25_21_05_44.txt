```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no">
  <title>Snake Game</title>
  <style>
    body, html {
      margin: 0;
      padding: 0;
      background: black;
      font-family: 'Courier New', monospace;
      overflow: hidden;
      color: #0ff;
    }
    #game-container {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
    }
    #game-wrapper {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    #game-canvas {
      background: #111;
      box-shadow: 0 0 20px lime;
    }
    #controls {
      margin-top: 10px;
      text-align: center;
    }
    .mobile-controls {
      display: none;
      margin-top: 10px;
    }
    .mobile-controls button {
      background: transparent;
      border: 2px solid #0ff;
      color: #0ff;
      padding: 10px;
      margin: 2px;
      font-size: 16px;
      box-shadow: 0 0 10px #0ff;
    }
    @media (max-width: 768px) {
      .mobile-controls {
        display: block;
      }
    }
    @media (min-width: 769px) {
      .mobile-controls {
        display: none;
      }
    }
  </style>
</head>
<body>
  <div id="game-container">
    <div id="game-wrapper">
      <canvas id="game-canvas" width="400" height="400"></canvas>
      <div id="controls">
        <div>Controls: Arrow keys to move, SPACE to pause, R to reset</div>
        <div class="mobile-controls">
          <button onclick="move('ArrowUp')">Up</button>
          <button onclick="move('ArrowLeft')">Left</button>
          <button onclick="move('ArrowDown')">Down</button>
          <button onclick="move('ArrowRight')">Right</button>
          <button onclick="togglePause()">Pause</button>
          <button onclick="resetGame()">Reset</button>
        </div>
      </div>
      <div id="score">Score: 0</div>
    </div>
  </div>
  <script>
    const canvas = document.getElementById('game-canvas');
    const ctx = canvas.getContext('2d');
    const box = 20;
    const scoreElement = document.getElementById('score');
    let gameRunning = false;
    let snake = [{x: 9 * box, y: 10 * box}];
    let direction = 'RIGHT';
    let food = {x: Math.floor(Math.random()*19+1) * box, y: Math.floor(Math.random()*19+1) * box};
    let score = 0;
    let gameInterval;

    document.addEventListener('keydown', directionControl);

    function directionControl(event) {
      const key = event.key;
      if (key === 'ArrowUp' && direction !== 'DOWN') direction = 'UP';
      if (key === 'ArrowDown' && direction !== 'UP') direction = 'DOWN';
      if (key === 'ArrowLeft' && direction !== 'RIGHT') direction = 'LEFT';
      if (key === 'ArrowRight' && direction !== 'LEFT') direction = 'RIGHT';
      if (key === ' ') togglePause();
      if (key === 'r') resetGame();
    }

    function move(dir) {
      if (dir === 'ArrowUp' && direction !== 'DOWN') direction = 'UP';
      if (dir === 'ArrowDown' && direction !== 'UP') direction = 'DOWN';
      if (dir === 'ArrowLeft' && direction !== 'RIGHT') direction = 'LEFT';
      if (dir === 'ArrowRight' && direction !== 'LEFT') direction = 'RIGHT';
    }

    function togglePause() {
      if (gameRunning) {
        clearInterval(gameInterval);
      } else {
        gameInterval = setInterval(draw, 150);
      }
      gameRunning = !gameRunning;
    }

    function resetGame() {
      snake = [{x: 9 * box, y: 10 * box}];
      direction = 'RIGHT';
      score = 0;
      gameRunning = false;
      clearInterval(gameInterval);
      draw();
    }

    function collision(head, array) {
      for (let i = 0; i < array.length; i++) {
        if (head.x === array[i].x && head.y === array[i].y) {
          return true;
        }
      }
      return false;
    }

    function draw() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      for (let i = 0; i < snake.length; i++) {
        ctx.fillStyle = (i === 0) ? 'lime' : 'white';
        ctx.fillRect(snake[i].x, snake[i].y, box, box);
        ctx.strokeRect(snake[i].x, snake[i].y, box, box);
      }
      ctx.fillStyle = 'red';
      ctx.fillRect(food.x, food.y, box, box);
      let snakeX = snake[0].x;
      let snakeY = snake[0].y;

      if (direction == 'LEFT') snakeX -= box;
      if (direction == 'UP') snakeY -= box;
      if (direction == 'RIGHT') snakeX += box;
      if (direction == 'DOWN') snakeY += box;

      if (snakeX == food.x && snakeY == food.y) {
        score++;
        food = {x: Math.floor(Math.random()*19+1) * box, y: Math.floor(Math.random()*19+1) * box};
      } else {
        snake.pop();
      }

      const newHead = {x: snakeX, y: snakeY};

      if (snakeX < 0 || snakeY < 0 || snakeX >= canvas.width || snakeY >= canvas.height || collision(newHead, snake)) {
        clearInterval(gameInterval);
        gameRunning = false;
        return;
      }

      snake.unshift(newHead);

      scoreElement.innerHTML = `Score: ${score}`;
      localStorage.setItem('highscore', score);
    }

    draw();
  </script>
</body>
</html>
```