```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Pac-Man</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            background: #000;
            touch-action: none;
            overflow: hidden;
            font-family: sans-serif;
            color: white;
        }
        #gameCanvas {
            display: block;
            background: #000;
        }
        #controls {
            position: fixed;
            bottom: 0;
            width: 100%;
            height: 120px;
            background: #222;
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        .d-pad {
            display: grid;
            grid-template-columns: repeat(3, 60px);
            grid-template-rows: repeat(3, 60px);
            gap: 5px;
        }
        .d-btn {
            width: 60px;
            height: 60px;
            background: #444;
            border: none;
            border-radius: 10px;
            color: white;
            font-size: 24px;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        .d-btn:active {
            background: #666;
        }
        .screen {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: calc(100% - 120px);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background: #000;
            z-index: 500;
        }
        #introScreen, #endScreen {
            text-align: center;
        }
        button {
            background: #ff0;
            color: #000;
            border: none;
            padding: 15px 30px;
            font-size: 20px;
            border-radius: 30px;
            margin-top: 20px;
            cursor: pointer;
            font-weight: bold;
        }
        button:active {
            background: #cc0;
        }
        h1 {
            color: #ff0;
            font-size: 40px;
            margin-bottom: 10px;
        }
        p {
            font-size: 20px;
            max-width: 80%;
            line-height: 1.5;
        }
        #scoreDisplay {
            position: absolute;
            top: 20px;
            left: 20px;
            font-size: 24px;
            color: #ff0;
            z-index: 100;
        }
    </style>
</head>
<body>
    <div id="scoreDisplay">Score: 0</div>
    
    <div id="introScreen" class="screen">
        <h1>PAC-MAN</h1>
        <p>üéµ Eat all the dots, avoid the ghosts! üéµ</p>
        <p>Use arrow keys or D-pad to move</p>
        <button id="startButton">START GAME</button>
    </div>

    <canvas id="gameCanvas"></canvas>

    <div id="controls">
        <div class="d-pad">
            <div></div>
            <button class="d-btn" id="upBtn">‚Üë</button>
            <div></div>
            <button class="d-btn" id="leftBtn">‚Üê</button>
            <div></div>
            <button class="d-btn" id="rightBtn">‚Üí</button>
            <div></div>
            <button class="d-btn" id="downBtn">‚Üì</button>
            <div></div>
        </div>
    </div>

    <div id="endScreen" class="screen" style="display: none;">
        <h1>GAME OVER</h1>
        <p id="finalScore">Score: 0</p>
        <button id="restartButton">PLAY AGAIN</button>
    </div>

    <script>
        var canvas = document.getElementById('gameCanvas');
        var ctx = canvas.getContext('2d');
        var scoreDisplay = document.getElementById('scoreDisplay');
        var introScreen = document.getElementById('introScreen');
        var endScreen = document.getElementById('endScreen');
        var finalScore = document.getElementById('finalScore');
        var startButton = document.getElementById('startButton');
        var restartButton = document.getElementById('restartButton');
        
        var upBtn = document.getElementById('upBtn');
        var downBtn = document.getElementById('downBtn');
        var leftBtn = document.getElementById('leftBtn');
        var rightBtn = document.getElementById('rightBtn');

        var dpr = window.devicePixelRatio || 1;
        var controlsHeight = 120;
        var gameWidth = window.innerWidth;
        var gameHeight = window.innerHeight - controlsHeight;
        
        canvas.width = gameWidth * dpr;
        canvas.height = gameHeight * dpr;
        canvas.style.width = gameWidth + 'px';
        canvas.style.height = gameHeight + 'px';
        ctx.scale(dpr, dpr);

        var CELL_SIZE = Math.min(gameWidth, gameHeight) / 19;
        var COLS = Math.floor(gameWidth / CELL_SIZE);
        var ROWS = Math.floor(gameHeight / CELL_SIZE);

        var maze = [
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1],
            [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1],
            [1, 1, 1, 1, 0, 1, 1, 1, 2, 1, 2, 1, 1, 1, 0, 1, 1, 1, 1],
            [2, 2, 2, 1, 0, 1, 2, 2, 2, 2, 2, 2, 2, 1, 0, 1, 2, 2, 2],
            [1, 1, 1, 1, 0, 1, 2, 1, 1, 2, 1, 1, 2, 1, 0, 1, 1, 1, 1],
            [2, 2, 2, 2, 0, 2, 2, 1, 2, 2, 2, 1, 2, 2, 0, 2, 2, 2, 2],
            [1, 1, 1, 1, 0, 1, 2, 1, 1, 1, 1, 1, 2, 1, 0, 1, 1, 1, 1],
            [2, 2, 2, 1, 0, 1, 2, 2, 2, 2, 2, 2, 2, 1, 0, 1, 2, 2, 2],
            [1, 1, 1, 1, 0, 1, 2, 1, 1, 1, 1, 1, 2, 1, 0, 1, 1, 1, 1],
            [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],
            [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1],
            [1, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 1],
            [1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1],
            [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1],
            [1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1],
            [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        ];

        var pacman = {
            x: 9,
            y: 15,
            direction: 'right',
            nextDirection: 'right',
            mouthOpen: true,
            mouthAngle: 0
        };

        var ghosts = [
            { x: 9, y: 9, color: '#ff0000', direction: 'up', speed: 0.03 },
            { x: 8, y: 9, color: '#ff88ff', direction: 'down', speed: 0.025 },
            { x: 10, y: 9, color: '#00ffff', direction: 'left', speed: 0.028 },
            { x: 9, y: 8, color: '#ffb84d', direction: 'right', speed: 0.032 }
        ];

        var score = 0;
        var dots = [];
        var gameRunning = false;
        var lastTime = 0;
        var ghostMoveTimer = 0;

        function initDots() {
            dots = [];
            for (var y = 0; y < maze.length; y++) {
                for (var x = 0; x < maze[y].length; x++) {
                    if (maze[y][x] === 0) {
                        dots.push({ x: x, y: y });
                    }
                }
            }
        }

        function isValidPosition(x, y) {
            if (x < 0 || x >= COLS || y < 0 || y >= ROWS) return false;
            return maze[Math.floor(y)][Math.floor(x)] !== 1;
        }

        function drawMaze() {
            for (var y = 0; y < maze.length; y++) {
                for (var x = 0; x < maze[y].length; x++) {
                    if (maze[y][x] === 1) {
                        ctx.fillStyle = '#0000ff';
                        ctx.fillRect(x * CELL_SIZE, y * CELL_SIZE, CELL_SIZE, CELL_SIZE);
                    } else if (maze[y][x] === 2) {
                        ctx.fillStyle = '#000';
                        ctx.fillRect(x * CELL_SIZE, y * CELL_SIZE, CELL_SIZE, CELL_SIZE);
                    } else {
                        ctx.fillStyle = '#000';
                        ctx.fillRect(x * CELL_SIZE, y * CELL_SIZE, CELL_SIZE, CELL_SIZE);
                    }
                }
            }
        }

        function drawDots() {
            ctx.fillStyle = '#ffffff';
            for (var i = 0; i < dots.length; i++) {
                var dot = dots[i];
                ctx.beginPath();
                ctx.arc(
                    dot.x * CELL_SIZE + CELL_SIZE/2,
                    dot.y * CELL_SIZE + CELL_SIZE/2,
                    CELL_SIZE/8,
                    0,
                    Math.PI * 2
                );
                ctx.fill();
            }
        }

        function drawPacman() {
            ctx.save();
            ctx.translate(
                pacman.x * CELL_SIZE + CELL_SIZE/2,
                pacman.y * CELL_SIZE + CELL_SIZE/2
            );
            
            if (pacman.direction === 'right') ctx.rotate(0);
            if (pacman.direction === 'down') ctx.rotate(Math.PI/2);
            if (pacman.direction === 'left') ctx.rotate(Math.PI);
            if (pacman.direction === 'up') ctx.rotate(Math.PI*1.5);
            
            ctx.fillStyle = '#ffff00';
            ctx.beginPath();
            
            if (pacman.mouthOpen) {
                ctx.moveTo(0, 0);
                ctx.arc(0, 0, CELL_SIZE/2, Math.PI/6, Math.PI*11/6);
            } else {
                ctx.arc(0, 0, CELL_SIZE/2, 0, Math.PI*2);
            }
            
            ctx.fill();
            ctx.restore();
        }

        function drawGhosts() {
            for (var i = 0; i < ghosts.length; i++) {
                var ghost = ghosts[i];
                ctx.fillStyle = ghost.color;
                ctx.beginPath();
                ctx.arc(
                    ghost.x * CELL_SIZE + CELL_SIZE/2,
                    ghost.y * CELL_SIZE + CELL_SIZE/2,
                    CELL_SIZE/2,
                    Math.PI,
                    0,
                    false
                );
                ctx.lineTo(ghost.x * CELL_SIZE + CELL_SIZE, ghost.y * CELL_SIZE + CELL_SIZE);
                ctx.lineTo(ghost.x * CELL_SIZE, ghost.y * CELL_SIZE + CELL_SIZE);
                ctx.fill();
                
                // Eyes
                ctx.fillStyle = '#fff';
                ctx.beginPath();
                ctx.arc(
                    ghost.x * CELL_SIZE + CELL_SIZE/3,
                    ghost.y * CELL_SIZE + CELL_SIZE/3,
                    CELL_SIZE/6,
                    0,
                    Math.PI*2
                );
                ctx.arc(
                    ghost.x * CELL_SIZE + 2*CELL_SIZE/3,
                    ghost.y * CELL_SIZE + CELL_SIZE/3,
                    CELL_SIZE/6,
                    0,
                    Math.PI*2
                );
                ctx.fill();
                
                ctx.fillStyle = '#000';
                ctx.beginPath();
                ctx.arc(
                    ghost.x * CELL_SIZE + CELL_SIZE/3 + (ghost.direction === 'right' ? CELL_SIZE/12 : ghost.direction === 'left' ? -CELL_SIZE/12 : 0),
                    ghost.y * CELL_SIZE + CELL_SIZE/3 + (ghost.direction === 'down' ? CELL_SIZE/12 : ghost.direction === 'up' ? -CELL_SIZE/12 : 0),
                    CELL_SIZE/10,
                    0,
                    Math.PI*2
                );
                ctx.arc(
                    ghost.x * CELL_SIZE + 2*CELL_SIZE/3 + (ghost.direction === 'right' ? CELL_SIZE/12 : ghost.direction === 'left' ? -CELL_SIZE/12 : 0),
                    ghost.y * CELL_SIZE + CELL_SIZE/3 + (ghost.direction === 'down' ? CELL_SIZE/12 : ghost.direction === 'up' ? -CELL_SIZE/12 : 0),
                    CELL_SIZE/10,
                    0,
                    Math.PI*2
                );
                ctx.fill();
            }
        }

        function updatePacman() {
            // Try to change direction if requested
            var nextX = Math.floor(pacman.x);
            var nextY = Math.floor(pacman.y);
            
            if (pacman.nextDirection === 'left') nextX = Math.floor(pacman.x - 0.1);
            if (pacman.nextDirection === 'right') nextX = Math.floor(pacman.x + 0.1);
            if (pacman.nextDirection === 'up') nextY = Math.floor(pacman.y - 0.1);
            if (pacman.nextDirection === 'down') nextY = Math.floor(pacman.y + 0.1);
            
            if (isValidPosition(nextX, nextY)) {
                pacman.direction = pacman.nextDirection;
            }
            
            // Move in current direction
            var moveX = 0;
            var moveY = 0;
            
            if (pacman.direction === 'left') moveX = -0.1;
            if (pacman.direction === 'right') moveX = 0.1;
            if (pacman.direction === 'up') moveY = -0.1;
            if (pacman.direction === 'down') moveY = 0.1;
            
            var newX = pacman.x + moveX;
            var newY = pacman.y + moveY;
            
            if (isValidPosition(Math.floor(newX), Math.floor(newY))) {
                pacman.x = newX;
                pacman.y = newY;
            }
            
            // Animate mouth
            pacman.mouthAngle += 0.2;
            pacman.mouthOpen = Math.sin(pacman.mouthAngle) > 0;
            
            // Wrap around tunnel
            if (pacman.x < -0.5) pacman.x = COLS - 0.5;
            if (pacman.x > COLS - 0.5) pacman.x = -0.5;
            
            // Check dot collection
            var pacCol = Math.floor(pacman.x);
            var pacRow = Math.floor(pacman.y);
            
            for (var i = 0; i < dots.length; i++) {
                if (dots[i].x === pacCol && dots[i].y === pacRow) {
                    dots.splice(i, 1);
                    score += 10;
                    scoreDisplay.textContent = 'Score: ' + score;
                    break;
                }
            }
        }

        function updateGhosts(deltaTime) {
            ghostMoveTimer += deltaTime;
            if (ghostMoveTimer < 200) return;
            ghostMoveTimer = 0;
            
            for (var i = 0; i < ghosts.length; i++) {
                var ghost = ghosts[i];
                
                // Simple AI: 70% chance to continue, 30% to change direction
                if (Math.random() < 0.3) {
                    var directions = ['up', 'down', 'left', 'right'];
                    var validDirections = [];
                    
                    for (var j = 0; j < directions.length; j++) {
                        var dir = directions[j];
                        var testX = Math.floor(ghost.x);
                        var testY = Math.floor(ghost.y);
                        
                        if (dir === 'left') testX--;
                        if (dir === 'right') testX++;
                        if (dir === 'up') testY--;
                        if (dir === 'down') testY++;
                        
                        if (isValidPosition(testX, testY) && dir !== oppositeDirection(ghost.direction)) {
                            validDirections.push(dir);
                        }
                    }
                    
                    if (validDirections.length > 0) {
                        ghost.direction = validDirections[Math.floor(Math.random() * validDirections.length)];
                    }
                }
                
                // Move ghost
                var moveX = 0;
                var moveY = 0;
                
                if (ghost.direction === 'left') moveX = -ghost.speed;
                if (ghost.direction === 'right') moveX = ghost.speed;
                if (ghost.direction === 'up') moveY = -ghost.speed;
                if (ghost.direction === 'down') moveY = ghost.speed;
                
                var newX = ghost.x + moveX;
                var newY = ghost.y + moveY;
                
                if (isValidPosition(Math.floor(newX), Math.floor(newY))) {
                    ghost.x = newX;
                    ghost.y = newY;
                }
                
                // Wrap around tunnel
                if (ghost.x < -0.5) ghost.x = COLS - 0.5;
                if (ghost.x > COLS - 0.5) ghost.x = -0.5;
                
                // Check collision with Pac-Man
                var dist = Math.sqrt(Math.pow(ghost.x - pacman.x, 2) + Math.pow(ghost.y - pacman.y, 2));
                if (dist < 1) {
                    endGame();
                }
            }
        }

        function oppositeDirection(dir) {
            if (dir === 'left') return 'right';
            if (dir === 'right') return 'left';
            if (dir === 'up') return 'down';
            if (dir === 'down') return 'up';
            return '';
        }

        function update(deltaTime) {
            if (!gameRunning) return;
            
            updatePacman();
            updateGhosts(deltaTime);
            
            // Check win condition
            if (dots.length === 0) {
                endGame(true);
            }
        }

        function draw() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            drawMaze();
            drawDots();
            drawPacman();
            drawGhosts();
        }

        function gameLoop(timestamp) {
            var deltaTime = timestamp - lastTime;
            lastTime = timestamp;
            
            update(deltaTime);
            draw();
            
            requestAnimationFrame(gameLoop);
        }

        function startGame() {
            introScreen.style.display = 'none';
            endScreen.style.display = 'none';
            gameRunning = true;
            score = 0;
            scoreDisplay.textContent = 'Score: 0';
            
            // Reset Pacman
            pacman.x = 9;
            pacman.y = 15;
            pacman.direction = 'right';
            pacman.nextDirection = 'right';
            
            // Reset ghosts
            ghosts[0].x = 9; ghosts[0].y = 9;
            ghosts[1].x = 8; ghosts[1].y = 9;
            ghosts[2].x = 10; ghosts[2].y = 9;
            ghosts[3].x = 9; ghosts[3].y = 8;
            
            initDots();
        }

        function endGame(win) {
            gameRunning = false;
            finalScore.textContent = win ? 'You Win! Score: ' + score : 'Game Over! Score: ' + score;
            endScreen.style.display = 'flex';
        }

        // Controls
        function move(direction) {
            if (gameRunning) {
                pacman.nextDirection = direction;
            }
        }

        // Keyboard controls
        document.addEventListener('keydown', function(e) {
            if (e.key === 'ArrowUp') move('up');
            if (e.key === 'ArrowDown') move('down');
            if (e.key === 'ArrowLeft') move('left');
            if (e.key === 'ArrowRight') move('right');
        });

        // Touch controls
        upBtn.addEventListener('touchstart', function(e) { e.preventDefault(); move('up'); });
        downBtn.addEventListener('touchstart', function(e) { e.preventDefault(); move('down'); });
        leftBtn.addEventListener('touchstart', function(e) { e.preventDefault(); move('left'); });
        rightBtn.addEventListener('touchstart', function(e) { e.preventDefault(); move('right'); });
        
        // Mouse controls for desktop
        upBtn.addEventListener('mousedown', function() { move('up'); });
        downBtn.addEventListener('mousedown', function() { move('down'); });
        leftBtn.addEventListener('mousedown', function() { move('left'); });
        rightBtn.addEventListener('mousedown', function() { move('right'); });

        startButton.addEventListener('click', startGame);
        restartButton.addEventListener('click', startGame);

        // Initialize
        initDots();
        requestAnimationFrame(gameLoop);
    </script>
</body>
</html>
```