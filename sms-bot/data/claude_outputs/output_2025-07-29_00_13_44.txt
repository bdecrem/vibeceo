```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WTAF Tetris</title>
    <style>
        :root {
            --wtaf-primary: #ff6b6b;
            --wtaf-secondary: #4ecdc4;
            --wtaf-dark: #1a1a2e;
            --wtaf-light: #f8f9fa;
            --wtaf-accent: #ffe66d;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, var(--wtaf-dark), #16213e);
            color: var(--wtaf-light);
            min-height: calc(100vh - 120px);
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
        }
        
        header {
            text-align: center;
            margin-bottom: 20px;
            width: 100%;
            max-width: 800px;
        }
        
        h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            color: var(--wtaf-accent);
            text-shadow: 0 0 10px rgba(255, 230, 109, 0.5);
        }
        
        .game-container {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 20px;
            max-width: 800px;
            width: 100%;
        }
        
        .game-board {
            position: relative;
            width: 300px;
            height: 600px;
            background-color: rgba(0, 0, 0, 0.3);
            border: 2px solid var(--wtaf-primary);
            box-shadow: 0 0 20px rgba(255, 107, 107, 0.3);
        }
        
        canvas {
            display: block;
        }
        
        .side-panel {
            display: flex;
            flex-direction: column;
            gap: 20px;
            min-width: 200px;
        }
        
        .panel {
            background: rgba(26, 26, 46, 0.7);
            border: 1px solid var(--wtaf-secondary);
            border-radius: 10px;
            padding: 15px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }
        
        .panel h2 {
            color: var(--wtaf-accent);
            margin-bottom: 10px;
            font-size: 1.3rem;
        }
        
        .stats {
            font-size: 1.2rem;
        }
        
        .stats div {
            margin: 8px 0;
        }
        
        .next-piece {
            height: 150px;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        
        .controls {
            margin-top: 20px;
            text-align: center;
        }
        
        .controls p {
            margin: 5px 0;
            font-size: 0.9rem;
        }
        
        .key {
            display: inline-block;
            background: rgba(255, 255, 255, 0.1);
            padding: 2px 8px;
            border-radius: 4px;
            margin: 0 2px;
        }
        
        button {
            background: var(--wtaf-primary);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            font-size: 1rem;
            cursor: pointer;
            margin: 5px;
            transition: all 0.3s;
            font-weight: bold;
        }
        
        button:hover {
            background: #ff5252;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(255, 82, 82, 0.4);
        }
        
        .game-over {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 10;
            display: none;
        }
        
        .game-over h2 {
            font-size: 2.5rem;
            color: var(--wtaf-primary);
            margin-bottom: 20px;
        }
        
        footer {
            margin-top: 30px;
            text-align: center;
            font-size: 0.9rem;
            color: #aaa;
        }
        
        @media (max-width: 600px) {
            .game-container {
                flex-direction: column;
                align-items: center;
            }
            
            .side-panel {
                width: 300px;
            }
        }
    </style>
</head>
<body>
    <header>
        <h1>WTAF TETRIS</h1>
        <p>Classic puzzle game with a WTAF twist!</p>
    </header>
    
    <div class="game-container">
        <div class="game-board">
            <canvas id="tetris" width="300" height="600"></canvas>
            <div class="game-over" id="gameOver">
                <h2>GAME OVER</h2>
                <button id="restartButton">Play Again</button>
            </div>
        </div>
        
        <div class="side-panel">
            <div class="panel">
                <h2>STATS</h2>
                <div class="stats">
                    <div>Score: <span id="score">0</span></div>
                    <div>Lines: <span id="lines">0</span></div>
                    <div>Level: <span id="level">1</span></div>
                </div>
            </div>
            
            <div class="panel">
                <h2>NEXT PIECE</h2>
                <div class="next-piece">
                    <canvas id="nextPiece" width="120" height="120"></canvas>
                </div>
            </div>
            
            <div class="panel">
                <h2>CONTROLS</h2>
                <div class="controls">
                    <p><span class="key">←</span> <span class="key">→</span> Move</p>
                    <p><span class="key">↑</span> Rotate</p>
                    <p><span class="key">↓</span> Soft Drop</p>
                    <p><span class="key">Space</span> Hard Drop</p>
                    <p><span class="key">P</span> Pause</p>
                </div>
            </div>
            
            <div class="panel">
                <button id="startButton">Start Game</button>
                <button id="pauseButton">Pause</button>
            </div>
        </div>
    </div>
    
    <footer>
        <p>WTAF Tetris Game | Use arrow keys to play</p>
    </footer>

    <script>
        // Game constants
        const COLS = 10;
        const ROWS = 20;
        const BLOCK_SIZE = 30;
        const COLORS = [
            null,
            '#FF0D72', // I
            '#0DC2FF', // J
            '#0DFF72', // L
            '#F538FF', // O
            '#FF8E0D', // S
            '#FFE138', // T
            '#3877FF'  // Z
        ];

        // Tetromino shapes
        const SHAPES = [
            [],
            [[0,0,0,0], [1,1,1,1], [0,0,0,0], [0,0,0,0]], // I
            [[2,0,0], [2,2,2], [0,0,0]],                   // J
            [[0,0,3], [3,3,3], [0,0,0]],                   // L
            [[4,4], [4,4]],                                // O
            [[0,5,5], [5,5,0], [0,0,0]],                   // S
            [[0,6,0], [6,6,6], [0,0,0]],                   // T
            [[7,7,0], [0,7,7], [0,0,0]]                    // Z
        ];

        // Game variables
        let canvas = document.getElementById('tetris');
        let nextCanvas = document.getElementById('nextPiece');
        let ctx = canvas.getContext('2d');
        let nextCtx = nextCanvas.getContext('2d');
        let board = createMatrix(COLS, ROWS);
        let player = {
            pos: {x: 0, y: 0},
            matrix: null,
            score: 0,
            lines: 0,
            level: 1,
            nextPiece: null
        };
        let dropCounter = 0;
        let dropInterval = 1000;
        let lastTime = 0;
        let gameActive = false;
        let gameAnimation = null;

        // Scale canvases
        ctx.scale(BLOCK_SIZE, BLOCK_SIZE);
        nextCtx.scale(BLOCK_SIZE/2, BLOCK_SIZE/2);

        // Create matrix
        function createMatrix(w, h) {
            const matrix = [];
            while (h--) {
                matrix.push(new Array(w).fill(0));
            }
            return matrix;
        }

        // Create a piece
        function createPiece(type) {
            return SHAPES[type].map(row => [...row]);
        }

        // Draw a matrix
        function drawMatrix(matrix, offset) {
            matrix.forEach((row, y) => {
                row.forEach((value, x) => {
                    if (value !== 0) {
                        ctx.fillStyle = COLORS[value];
                        ctx.fillRect(x + offset.x, y + offset.y, 1, 1);
                        ctx.strokeStyle = 'rgba(0, 0, 0, 0.3)';
                        ctx.strokeRect(x + offset.x, y + offset.y, 1, 1);
                    }
                });
            });
        }

        // Draw next piece
        function drawNextPiece() {
            nextCtx.fillStyle = 'rgba(0, 0, 0, 0.3)';
            nextCtx.fillRect(0, 0, nextCanvas.width, nextCanvas.height);
            
            if (player.nextPiece) {
                const matrix = createPiece(player.nextPiece);
                const offsetX = (4 - matrix[0].length) / 2;
                const offsetY = (4 - matrix.length) / 2;
                
                matrix.forEach((row, y) => {
                    row.forEach((value, x) => {
                        if (value !== 0) {
                            nextCtx.fillStyle = COLORS[value];
                            nextCtx.fillRect(x + offsetX, y + offsetY, 1, 1);
                            nextCtx.strokeStyle = 'rgba(0, 0, 0, 0.3)';
                            nextCtx.strokeRect(x + offsetX, y + offsetY, 1, 1);
                        }
                    });
                });
            }
        }

        // Draw the board
        function drawBoard() {
            ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            board.forEach((row, y) => {
                row.forEach((value, x) => {
                    if (value !== 0) {
                        ctx.fillStyle = COLORS[value];
                        ctx.fillRect(x, y, 1, 1);
                        ctx.strokeStyle = 'rgba(0, 0, 0, 0.3)';
                        ctx.strokeRect(x, y, 1, 1);
                    }
                });
            });
        }

        // Draw everything
        function draw() {
            drawBoard();
            drawMatrix(player.matrix, player.pos);
            drawNextPiece();
        }

        // Merge player with board
        function merge(board, player) {
            player.matrix.forEach((row, y) => {
                row.forEach((value, x) => {
                    if (value !== 0) {
                        board[y + player.pos.y][x + player.pos.x] = value;
                    }
                });
            });
        }

        // Rotate matrix
        function rotate(matrix, dir) {
            for (let y = 0; y < matrix.length; ++y) {
                for (let x = 0; x < y; ++x) {
                    [matrix[x][y], matrix[y][x]] = [matrix[y][x], matrix[x][y]];
                }
            }

            if (dir > 0) {
                matrix.forEach(row => row.reverse());
            } else {
                matrix.reverse();
            }
        }

        // Collision detection
        function collide(board, player) {
            const [m, o] = [player.matrix, player.pos];
            for (let y = 0; y < m.length; ++y) {
                for (let x = 0; x < m[y].length; ++x) {
                    if (m[y][x] !== 0 &&
                        (board[y + o.y] &&
                        board[y + o.y][x + o.x]) !== 0) {
                        return true;
                    }
                }
            }
            return false;
        }

        // Player movement
        function playerDrop() {
            player.pos.y++;
            if (collide(board, player)) {
                player.pos.y--;
                merge(board, player);
                playerReset();
                sweepRows();
                updateScore();
            }
            dropCounter = 0;
        }

        function playerMove(dir) {
            player.pos.x += dir;
            if (collide(board, player)) {
                player.pos.x -= dir;
            }
        }

        function playerRotate(dir) {
            const pos = player.pos.x;
            let offset = 1;
            rotate(player.matrix, dir);
            while (collide(board, player)) {
                player.pos.x += offset;
                offset = -(offset + (offset > 0 ? 1 : -1));
                if (offset > player.matrix[0].length) {
                    rotate(player.matrix, -dir);
                    player.pos.x = pos;
                    return;
                }
            }
        }

        function playerHardDrop() {
            while (!collide(board, player)) {
                player.pos.y++;
            }
            player.pos.y--;
            playerDrop();
        }

        // Reset player position
        function playerReset() {
            const pieces = 'ILJOTSZ';
            player.matrix = player.nextPiece ? 
                createPiece(player.nextPiece) : 
                createPiece(pieces.charCodeAt(Math.floor(Math.random() * pieces.length)) - 64);
            
            player.nextPiece = pieces.charCodeAt(Math.floor(Math.random() * pieces.length)) - 64;
            player.pos.y = 0;
            player.pos.x = Math.floor(COLS / 2) - Math.floor(player.matrix[0].length / 2);
            
            if (collide(board, player)) {
                gameOver();
            }
        }

        // Sweep completed rows
        function sweepRows() {
            let rowCount = 0;
            outer: for (let y = board.length - 1; y >= 0; --y) {
                for (let x = 0; x < board[y].length; ++x) {
                    if (board[y][x] === 0) {
                        continue outer;
                    }
                }

                const row = board.splice(y, 1)[0].fill(0);
                board.unshift(row);
                ++y;
                rowCount++;
            }
            
            if (rowCount > 0) {
                player.lines += rowCount;
                player.score += rowCount * 100 * player.level;
                
                // Level up every 10 lines
                player.level = Math.floor(player.lines / 10) + 1;
                dropInterval = 1000 - (player.level - 1) * 100;
                if (dropInterval < 100) dropInterval = 100;
            }
        }

        // Update score display
        function updateScore() {
            document.getElementById('score').textContent = player.score;
            document.getElementById('lines').textContent = player.lines;
            document.getElementById('level').textContent = player.level;
        }

        // Game over
        function gameOver() {
            gameActive = false;
            cancelAnimationFrame(gameAnimation);
            document.getElementById('gameOver').style.display = 'flex';
        }

        // Game loop
        function update(time = 0) {
            if (!gameActive) return;
            
            const deltaTime = time - lastTime;
            lastTime = time;
            
            dropCounter += deltaTime;
            if (dropCounter > dropInterval) {
                playerDrop();
            }
            
            draw();
            gameAnimation = requestAnimationFrame(update);
        }

        // Start game
        function startGame() {
            if (gameActive) return;
            
            // Reset game state
            board = createMatrix(COLS, ROWS);
            player.score = 0;
            player.lines = 0;
            player.level = 1;
            player.nextPiece = null;
            dropInterval = 1000;
            
            updateScore();
            playerReset();
            document.getElementById('gameOver').style.display = 'none';
            
            gameActive = true;
            lastTime = 0;
            dropCounter = 0;
            
            gameAnimation = requestAnimationFrame(update);
        }

        // Pause game
        function pauseGame() {
            if (!gameActive) return;
            gameActive = false;
            cancelAnimationFrame(gameAnimation);
        }

        // Event listeners
        document.addEventListener('keydown', event => {
            if (!gameActive) return;
            
            switch (event.keyCode) {
                case 37: // Left arrow
                    playerMove(-1);
                    break;
                case 39: // Right arrow
                    playerMove(1);
                    break;
                case 40: // Down arrow
                    playerDrop();
                    break;
                case 38: // Up arrow
                    playerRotate(1);
                    break;
                case 32: // Space
                    playerHardDrop();
                    break;
                case 80: // P
                    if (gameActive) {
                        pauseGame();
                    } else {
                        gameActive = true;
                        gameAnimation = requestAnimationFrame(update);
                    }
                    break;
            }
        });

        document.getElementById('startButton').addEventListener('click', startGame);
        document.getElementById('pauseButton').addEventListener('click', pauseGame);
        document.getElementById('restartButton').addEventListener('click', startGame);

        // Initialize
        drawBoard();
        drawNextPiece();
    </script>

    <div id="controls" style="position: fixed; bottom: 0; width: 100%; height: 120px; background: rgba(0, 0, 0, 0.5); display: flex; justify-content: center; align-items: center; z-index: 1000;">
        <div class="btn" id="leftBtn" style="width: 60px; height: 60px; margin: 0 5px; background: rgba(255, 255, 255, 0.2); border: 2px solid white; border-radius: 10px; display: flex; justify-content: center; align-items: center; font-size: 24px; color: white; cursor: pointer;">←</div>
        <div class="btn" id="rotateBtn" style="width: 60px; height: 60px; margin: 0 5px; background: rgba(255, 255, 255, 0.2); border: 2px solid white; border-radius: 10px; display: flex; justify-content: center; align-items: center; font-size: 24px; color: white; cursor: pointer;">↻</div>
        <div class="btn" id="rightBtn" style="width: 60px; height: 60px; margin: 0 5px; background: rgba(255, 255, 255, 0.2); border: 2px solid white; border-radius: 10px; display: flex; justify-content: center; align-items: center; font-size: 24px; color: white; cursor: pointer;">→</div>
        <div class="btn" id="downBtn" style="width: 60px; height: 60px; margin: 0 5px; background: rgba(255, 255, 255, 0.2); border: 2px solid white; border-radius: 10px; display: flex; justify-content: center; align-items: center; font-size: 24px; color: white; cursor: pointer;">↓</div>
    </div>
    <script>
    (function() {
        // Add touch event handlers for mobile controls
        var leftBtn = document.getElementById('leftBtn');
        var rightBtn = document.getElementById('rightBtn');
        var upBtn = document.getElementById('upBtn');
        var downBtn = document.getElementById('downBtn');
        var rotateBtn = document.getElementById('rotateBtn');
        var actionBtn = document.getElementById('actionBtn');
        
        function simulateKeyPress(keyCode) {
            var event = new KeyboardEvent('keydown', {
                keyCode: keyCode,
                which: keyCode,
                bubbles: true
            });
            document.dispatchEvent(event);
        }
        
        if (leftBtn) {
            leftBtn.addEventListener('touchstart', function(e) {
                e.preventDefault();
                simulateKeyPress(37); // Left arrow
            });
            leftBtn.addEventListener('click', function() {
                simulateKeyPress(37);
            });
        }
        
        if (rightBtn) {
            rightBtn.addEventListener('touchstart', function(e) {
                e.preventDefault();
                simulateKeyPress(39); // Right arrow
            });
            rightBtn.addEventListener('click', function() {
                simulateKeyPress(39);
            });
        }
        
        if (upBtn) {
            upBtn.addEventListener('touchstart', function(e) {
                e.preventDefault();
                simulateKeyPress(38); // Up arrow
            });
            upBtn.addEventListener('click', function() {
                simulateKeyPress(38);
            });
        }
        
        if (downBtn) {
            downBtn.addEventListener('touchstart', function(e) {
                e.preventDefault();
                simulateKeyPress(40); // Down arrow
            });
            downBtn.addEventListener('click', function() {
                simulateKeyPress(40);
            });
        }
        
        if (rotateBtn) {
            rotateBtn.addEventListener('touchstart', function(e) {
                e.preventDefault();
                simulateKeyPress(38); // Up arrow for rotate
            });
            rotateBtn.addEventListener('click', function() {
                simulateKeyPress(38);
            });
        }
        
        if (actionBtn) {
            actionBtn.addEventListener('touchstart', function(e) {
                e.preventDefault();
                simulateKeyPress(32); // Space bar
            });
            actionBtn.addEventListener('click', function() {
                simulateKeyPress(32);
            });
        }
    })();
    </script></body>
</html>
```