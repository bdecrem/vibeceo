Here's a complete mobile-friendly Flappy Bird clone in a single HTML file:

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Flappy Bird</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            overflow: hidden;
            touch-action: none;
            background-color: #4EC0CA;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }
        
        #gameCanvas {
            touch-action: none;
            background-color: #4EC0CA;
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas"></canvas>
    
    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        
        // Game constants
        const GRAVITY = 0.5;
        const FLAP_FORCE = -8;
        const PIPE_SPEED = 3;
        const PIPE_SPAWN_INTERVAL = 1500;
        const PIPE_GAP = 150;
        const BIRD_SIZE = 30;
        
        // Game state
        const game = {
            bird: {
                x: 0,
                y: 0,
                velocity: 0
            },
            pipes: [],
            score: 0,
            highScore: parseInt(localStorage.getItem('highScore')) || 0,
            isPlaying: false,
            isPaused: false
        };
        
        // Responsive canvas sizing
        function resizeCanvas() {
            const scale = window.devicePixelRatio || 1;
            const width = Math.min(window.innerWidth, 400);
            const height = Math.min(window.innerHeight, 600);
            
            canvas.width = width * scale;
            canvas.height = height * scale;
            canvas.style.width = width + 'px';
            canvas.style.height = height + 'px';
            
            ctx.scale(scale, scale);
            
            // Reset bird position on resize
            game.bird.x = width / 3;
            game.bird.y = height / 2;
        }
        
        window.addEventListener('resize', resizeCanvas);
        resizeCanvas();
        
        // Input handling
        function handleInput(e) {
            e.preventDefault();
            
            if (!game.isPlaying) {
                startGame();
                return;
            }
            
            game.bird.velocity = FLAP_FORCE;
            playFlapSound();
        }
        
        canvas.addEventListener('touchstart', handleInput, { passive: false });
        canvas.addEventListener('click', handleInput);
        
        // Sound effects
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        
        function playFlapSound() {
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();
            
            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);
            
            oscillator.type = 'sine';
            oscillator.frequency.setValueAtTime(400, audioContext.currentTime);
            gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
            
            oscillator.start();
            oscillator.stop(audioContext.currentTime + 0.1);
        }
        
        function playScoreSound() {
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();
            
            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);
            
            oscillator.type = 'sine';
            oscillator.frequency.setValueAtTime(600, audioContext.currentTime);
            gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
            
            oscillator.start();
            oscillator.stop(audioContext.currentTime + 0.1);
        }
        
        // Game functions
        function startGame() {
            game.isPlaying = true;
            game.bird.y = canvas.height / 2;
            game.bird.velocity = 0;
            game.pipes = [];
            game.score = 0;
            spawnPipe();
        }
        
        function spawnPipe() {
            const pipeGapPos = Math.random() * (canvas.height - PIPE_GAP - 100) + 50;
            
            game.pipes.push({
                x: canvas.width,
                gapY: pipeGapPos,
                passed: false
            });
        }
        
        function update() {
            if (!game.isPlaying) return;
            
            // Update bird
            game.bird.velocity += GRAVITY;
            game.bird.y += game.bird.velocity;
            
            // Update pipes
            game.pipes.forEach(pipe => {
                pipe.x -= PIPE_SPEED;
                
                // Score when passing pipe
                if (!pipe.passed && pipe.x + 50 < game.bird.x) {
                    pipe.passed = true;
                    game.score++;
                    playScoreSound();
                    
                    // Update high score
                    if (game.score > game.highScore) {
                        game.highScore = game.score;
                        localStorage.setItem('highScore', game.highScore);
                    }
                }
                
                // Check collision
                const birdBox = {
                    left: game.bird.x - BIRD_SIZE/2,
                    right: game.bird.x + BIRD_SIZE/2,
                    top: game.bird.y - BIRD_SIZE/2,
                    bottom: game.bird.y + BIRD_SIZE/2
                };
                
                const hitPipe = (
                    birdBox.right > pipe.x &&
                    birdBox.left < pipe.x + 50 &&
                    (birdBox.top < pipe.gapY || birdBox.bottom > pipe.gapY + PIPE_GAP)
                );
                
                if (hitPipe) {
                    game.isPlaying = false;
                }
            });
            
            // Remove off-screen pipes
            game.pipes = game.pipes.filter(pipe => pipe.x > -50);
            
            // Check boundaries
            if (game.bird.y > canvas.height || game.bird.y < 0) {
                game.isPlaying = false;
            }
            
            // Spawn new pipes
            if (game.pipes.length === 0 || canvas.width - game.pipes[game.pipes.length - 1].x > PIPE_SPAWN_INTERVAL) {
                spawnPipe();
            }
        }
        
        function render() {
            // Clear canvas
            ctx.fillStyle = '#4EC0CA';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // Draw pipes
            ctx.fillStyle = '#74BF2E';
            game.pipes.forEach(pipe => {
                // Top pipe
                ctx.fillRect(pipe.x, 0, 50, pipe.gapY);
                // Bottom pipe
                ctx.fillRect(pipe.x, pipe.gapY + PIPE_GAP, 50, canvas.height - (pipe.gapY + PIPE_GAP));
            });
            
            // Draw bird
            ctx.fillStyle = '#F7E453';
            ctx.beginPath();
            ctx.arc(game.bird.x, game.bird.y, BIRD_SIZE/2, 0, Math.PI * 2);
            ctx.fill();
            
            // Draw score
            ctx.fillStyle = 'white';
            ctx.font = '30px Arial';
            ctx.textAlign = 'center';
            ctx.fillText(game.score, canvas.width/2, 50);
            
            // Draw high score
            ctx.font = '20px Arial';
            ctx.fillText(`High Score: ${game.highScore}`, canvas.width/2, 80);
            
            // Draw start message
            if (!game.isPlaying) {
                ctx.fillStyle = 'white';
                ctx.font = '25px Arial';
                ctx.fillText('Tap to Start', canvas.width/2, canvas.height/2);
            }
        }
        
        // Game loop
        function gameLoop() {
            update();
            render();
            requestAnimationFrame(gameLoop);
        }
        
        // Start game loop
        gameLoop();
    </script>
</body>
</html>
```

This implementation includes:

1. Responsive canvas that works on all mobile devices
2. Touch and click controls
3. Simple physics with gravity and flapping
4. Pipe obstacles that spawn regularly
5. Score tracking with high score persistence
6. Sound effects for flapping and scoring
7. Clean visual style with simple shapes
8. Game over detection with collision
9. Restart functionality

Key features:
- The bird automatically falls with gravity
- Tap anywhere to make the bird flap upward
- Navigate through pipes to score points
- High score is saved in localStorage
- Simple sound effects using Web Audio API
- Responsive design that works on any screen size
- Smooth 60fps gameplay

To play:
1. Tap/click to start the game
2. Tap/click to make the bird flap upward
3. Navigate through the gaps in the pipes
4. Try to beat your high score
5. When you crash, tap/click to start a new game

The game is optimized for mobile devices with:
- Proper viewport settings
- Touch event handling
- Prevented default scrolling
- Responsive canvas sizing
- Simple one-touch controls