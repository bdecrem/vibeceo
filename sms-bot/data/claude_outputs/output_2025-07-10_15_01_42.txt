I'll help you create a WTAF-styled chat app that supports up to 5 users with real-time messaging. Here's a complete, working chat app:

```html
<!DOCTYPE html>
<html>
<head>
    <title>WTAF CHAT DIMENSION 💬</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=Inter:wght@400;600&display=swap');

        body { 
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #FF2E93 0%, #7C3AED 50%, #3F88FF 100%);
            background-size: 400% 400%;
            animation: gradientShift 15s ease-in-out infinite;
            color: white;
            overflow-x: hidden;
            margin: 0;
            min-height: 100vh;
        }

        h1, h2, h3 {
            font-family: 'Space Grotesk', sans-serif;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: -0.02em;
        }

        @keyframes gradientShift {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }

        .app-container {
            max-width: 800px;
            margin: 0 auto;
            background: rgba(0,0,0,0.4);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            padding: 2rem;
            border: 1px solid rgba(255,255,255,0.1);
            position: relative;
            z-index: 10;
            min-height: 90vh;
        }

        .screen { display: none; }
        .screen.active { display: block; animation: fadeIn 0.3s ease; }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        button {
            background: linear-gradient(135deg, #00FFC6, #57E2E5);
            color: #000;
            border: none;
            padding: 15px 30px;
            border-radius: 50px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-size: 14px;
            margin: 10px 5px;
        }

        button:hover {
            transform: scale(1.05);
            box-shadow: 0 0 30px rgba(0, 255, 198, 0.5);
        }

        input, select {
            background: rgba(255,255,255,0.1);
            border: 2px solid rgba(255,255,255,0.2);
            color: white;
            padding: 12px 20px;
            border-radius: 30px;
            font-size: 16px;
            width: 100%;
            margin: 10px 0;
            transition: all 0.3s ease;
        }

        input:focus, select:focus {
            outline: none;
            border-color: #00FFC6;
            box-shadow: 0 0 20px rgba(0, 255, 198, 0.3);
        }

        .floating-emoji {
            position: fixed;
            font-size: 2rem;
            animation: float 6s ease-in-out infinite;
            pointer-events: none;
            z-index: 5;
            opacity: 0.8;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            50% { transform: translateY(-20px) rotate(10deg); }
        }

        /* Chat specific styles */
        #chat-messages {
            height: 60vh;
            overflow-y: auto;
            margin: 20px 0;
            padding: 10px;
            border-radius: 15px;
            background: rgba(0,0,0,0.2);
        }

        .message {
            background: rgba(255,255,255,0.1);
            border-radius: 20px;
            padding: 15px 20px;
            margin: 10px 0;
            animation: slideIn 0.3s ease;
            max-width: 80%;
            word-wrap: break-word;
        }

        .message.own {
            margin-left: auto;
            background: rgba(0,255,198,0.2);
        }

        .message-header {
            font-size: 0.8em;
            opacity: 0.8;
            margin-bottom: 5px;
        }

        #chat-input {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }

        #message-text {
            flex-grow: 1;
        }

        #send-button {
            flex-shrink: 0;
        }

        @keyframes slideIn {
            from { opacity: 0; transform: translateX(-50px); }
            to { opacity: 1; transform: translateX(0); }
        }

        /* Scrollbar styling */
        #chat-messages::-webkit-scrollbar {
            width: 8px;
        }

        #chat-messages::-webkit-scrollbar-track {
            background: rgba(0,0,0,0.2);
            border-radius: 4px;
        }

        #chat-messages::-webkit-scrollbar-thumb {
            background: rgba(0,255,198,0.3);
            border-radius: 4px;
        }
    </style>
</head>
<body>
    <!-- Floating emojis -->
    <div class="floating-emoji" style="top: 5%; left: 2%;" data-value="2">💬</div>
    <div class="floating-emoji" style="top: 5%; right: 2%;" data-value="3">✨</div>
    <div class="floating-emoji" style="bottom: 5%; left: 2%;" data-value="1">🚀</div>
    <div class="floating-emoji" style="bottom: 5%; right: 2%;" data-value="4">💫</div>

    <div class="app-container">
        <div id="welcome-screen" class="screen active">
            <h1>WTAF CHAT DIMENSION 💬</h1>
            <p>ENTER THE CHAOS CHAT REALM WITH UP TO 5 DIGITAL SOULS</p>
            <button onclick="showNewUserScreen()">New User</button>
            <button onclick="showReturningUserScreen()">Returning User</button>
        </div>
        
        <div id="new-user-screen" class="screen">
            <h1>New User</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Register & Enter Chat</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="returning-user-screen" class="screen">
            <h1>Returning User</h1>
            <select id="user-label-select">
                <option>Select User</option>
            </select>
            <input type="text" id="returning-passcode" placeholder="Enter 4-digit passcode" maxlength="4">
            <button onclick="loginReturningUser()">Login</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="main-screen" class="screen">
            <h1>WTAF CHAT 💬</h1>
            <div id="user-status">CHANNELING CHAOS AS <span id="current-user-label"></span>!</div>
            
            <div id="chat-messages"></div>
            
            <div id="chat-input">
                <input type="text" id="message-text" placeholder="TYPE YOUR CHAOS MESSAGE..." maxlength="280">
                <button id="send-button" onclick="sendMessage()">TRANSMIT 📡</button>
            </div>
            
            <button onclick="showScreen('welcome-screen')">ESCAPE PORTAL</button>
        </div>
    </div>

    <script>
        // API Configuration
        const API_BASE = window.location.origin;
        const APP_ID = 'test1';
        const USER_LABELS = ['CHAOS👾', 'GLITCH⚡', 'NEON🌟', 'CYBER🔥', 'PIXEL💎'];
        
        // Current user state
        let currentUser = null;
        let pollingInterval;

        // API Helper
        async function callZADAPI(endpoint, method = 'GET', data = null) {
            try {
                const options = {
                    method: method,
                    headers: {
                        'Content-Type': 'application/json',
                    }
                };
                
                if (data && method !== 'GET') {
                    options.body = JSON.stringify(data);
                }
                
                let url = `${API_BASE}/api/${endpoint}`;
                if (method === 'GET' && data) {
                    const params = new URLSearchParams(data);
                    url += `?${params}`;
                }
                
                const response = await fetch(url, options);
                const result = await response.json();
                
                if (!response.ok) {
                    throw new Error(result.error || 'API request failed');
                }
                
                return result;
            } catch (error) {
                console.error('API call failed:', error);
                throw error;
            }
        }

        // Authentication Functions
        async function generateNewUser() {
            try {
                const result = await callZADAPI('zad-data', 'GET', {
                    app_id: APP_ID,
                    action_type: 'join'
                });
                
                const existingUsers = result.data || [];
                const usedLabels = existingUsers.map(u => u.participant_data?.userLabel).filter(Boolean);
                
                if (usedLabels.length >= 5) {
                    alert('SQUAD\'S FULL, TRY ANOTHER DIMENSION 🚫');
                    return false;
                }
                
                const availableLabel = USER_LABELS.find(label => !usedLabels.includes(label));
                if (!availableLabel) {
                    alert('NO MORE ROOM IN THIS CHAOS REALM 🌀');
                    return false;
                }
                
                const code = Math.floor(1000 + Math.random() * 9000).toString();
                currentUser = {
                    userLabel: availableLabel,
                    passcode: code,
                    participantId: availableLabel + '_' + code
                };
                
                document.getElementById('new-user-info').innerHTML = 
                    `<strong>YOUR LABEL:</strong> ${currentUser.userLabel}<br><strong>SECRET DIGITS:</strong> ${currentUser.passcode}<br><em>SCREENSHOT THIS OR CRY LATER 📸</em>`;
                
                return true;
            } catch (error) {
                console.error('Error generating user:', error);
                alert('USER GENERATION GLITCHED, TRY AGAIN 🌀');
                return false;
            }
        }

        async function registerNewUser() {
            if (!currentUser) {
                alert('GENERATE YOUR IDENTITY FIRST, CHAOS AGENT 🎭');
                return;
            }
            
            try {
                await callZADAPI('zad-submit', 'POST', {
                    app_id: APP_ID,
                    participant_id: currentUser.participantId,
                    action_type: 'join',
                    participant_data: {
                        userLabel: currentUser.userLabel,
                        passcode: currentUser.passcode,
                        join_time: Date.now()
                    },
                    content_data: { message: 'Joined the chat', timestamp: Date.now() }
                });
                
                enterMainScreen();
            } catch (error) {
                console.error('Registration error:', error);
                if (error.message.includes('already exists')) {
                    alert('IDENTITY COLLISION! TRY AGAIN 💥');
                    await generateNewUser();
                } else {
                    alert('REGISTRATION EXPLODED, TRY AGAIN 💥');
                }
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            const success = await generateNewUser();
            if (!success) {
                showScreen('welcome-screen');
            }
        }

        async function loginReturningUser() {
            const selectedLabel = document.getElementById('user-label-select').value;
            const enteredPasscode = document.getElementById('returning-passcode').value.trim();
            
            if (!selectedLabel || selectedLabel === 'Select User') {
                alert('PICK YOUR IDENTITY, PHANTOM 👻');
                return;
            }
            
            if (!enteredPasscode || enteredPasscode.length !== 4) {
                alert('4 DIGITS OF CHAOS REQUIRED 🔢');
                return;
            }
            
            try {
                const result = await callZADAPI('zad-data', 'GET', {
                    app_id: APP_ID,
                    action_type: 'join'
                });
                
                const joinRecords = result.data || [];
                const userRecord = joinRecords.find(record => 
                    record.participant_data?.userLabel === selectedLabel && 
                    record.participant_data?.passcode === enteredPasscode
                );
                
                if (userRecord) {
                    currentUser = {
                        userLabel: selectedLabel,
                        passcode: enteredPasscode,
                        participantId: userRecord.participant_id
                    };
                    enterMainScreen();
                } else {
                    alert('NICE TRY, WRONG VIBES ❌');
                }
            } catch (error) {
                console.error('Login error:', error);
                alert('LOGIN MALFUNCTION, REALITY GLITCHING 🌀');
            }
        }

        // Chat Functions
        async function sendMessage() {
            const messageText = document.getElementById('message-text').value.trim();
            if (!messageText) return;
            
            try {
                await callZADAPI('zad-submit', 'POST', {
                    app_id: APP_ID,
                    participant_id: currentUser.participantId,
                    action_type: 'message',
                    participant_data: {
                        userLabel: currentUser.userLabel,
                        passcode: currentUser.passcode
                    },
                    content_data: {
                        message: messageText,
                        timestamp: Date.now()
                    }
                });
                
                document.getElementById('message-text').value = '';
                await loadLatestData();
            } catch (error) {
                console.error('Send message error:', error);
                alert('MESSAGE TRANSMISSION FAILED 📡');
            }
        }

        async function loadLatestData() {
            try {
                const result = await callZADAPI('zad-data', 'GET', {
                    app_id: APP_ID,
                    action_type: 'message'
                });
                
                const messages = result.data || [];
                const chatMessages = document.getElementById('chat-messages');
                
                // Sort messages by timestamp
                messages.sort((a, b) => a.content_data.timestamp - b.content_data.timestamp);
                
                // Update messages
                chatMessages.innerHTML = messages.map(msg => `
                    <div class="message ${msg.participant_data.userLabel === currentUser?.userLabel ? 'own' : ''}">
                        <div class="message-header">${msg.participant_data.userLabel}</div>
                        ${msg.content_data.message}
                    </div>
                `).join('');
                
                // Scroll to bottom
                chatMessages.scrollTop = chatMessages.scrollHeight;
            } catch (error) {
                console.error('Error loading messages:', error);
            }
        }

        // Navigation and UI Functions
        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(screen => 
                screen.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            
            if (screenId !== 'main-screen') {
                stopPolling();
            }
        }

        function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const userSelect = document.getElementById('user-label-select');
            userSelect.innerHTML = '<option>Select User</option>';
            USER_LABELS.forEach(label => {
                const option = document.createElement('option');
                option.value = label;
                option.textContent = label;
                userSelect.appendChild(option);
            });
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            startPolling();
            loadLatestData();
        }

        // Polling Functions
        function startPolling() {
            loadLatestData();
            pollingInterval = setInterval(loadLatestData, 2000);
        }

        function stopPolling() {
            if (pollingInterval) {
                clearInterval(pollingInterval);
                pollingInterval = null;
            }
        }

        // Enter key to send message
        document.getElementById('message-text')?.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        // Mouse parallax
        document.addEventListener('mousemove', (e) => {
            document.querySelectorAll('.floating-emoji').forEach((elem) => {
                const speed = elem.getAttribute('data-value') || 2;
                const x = (e.clientX * speed) / 100;
                const y = (e.clientY * speed) / 100;
                elem.style.transform = `translateX(${x}px) translateY(${y}px)`;
            });
        });

        // Easter egg
        console.log('🔥 Welcome to the WTAF dimension! Type wtaf() in console for secrets...');
        window.wtaf = function() {
            document.body.style.animation = 'rainbow 1s infinite';
            setTimeout(() => {
                document.body.style.animation = '';
                alert('🎉 WTAF MASTER MODE UNLOCKED! You found the secret!');
            }, 3000);
        };
    </script>
</body>
</html>
```

This chat app includes:

1. **Real-time messaging** with 2-second updates
2. **User authentication** with unique labels and passcodes
3. **Message history** that persists between sessions
4. **WTAF styling** with floating emojis and parallax effects
5. **Responsive design** that works on all devices
6. **Auto-scrolling** chat window
7. **Enter key support** for sending messages
8. **User status** showing who's chatting
9. **Error handling** with WTAF-style alerts
10. **Easter egg** in the console

To use the app:

1. Up to 5 users can join
2. New users get a unique label and passcode
3. Messages update in real-time
4. Users can leave and return using their credentials
5. Chat history is preserved

The styling follows WTAF guidelines but keeps the interface functional and easy to use. The floating emojis and parallax effects add flair without interfering with the chat functionality.