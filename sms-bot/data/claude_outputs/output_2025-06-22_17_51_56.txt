```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>EmotiChat | WTAF</title>
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=Inter:wght@400;600&display=swap" rel="stylesheet">
    <style>
        :root {
            --gradient-1: linear-gradient(45deg, #FF2E93, #FF61C7, #FFA5E5);
            --gradient-2: linear-gradient(135deg, #3F88FF, #6E7FFF, #ABF7FF);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Inter', sans-serif;
        }

        body {
            background: #111;
            color: #fff;
            min-height: 100vh;
            overflow-x: hidden;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 2rem;
            position: relative;
        }

        h1, h2 {
            font-family: 'Space Grotesk', sans-serif;
            background: var(--gradient-1);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 1.5rem;
        }

        .floating-emoji {
            position: fixed;
            font-size: 2rem;
            pointer-events: none;
            transition: transform 0.1s ease;
            animation: float 6s ease-in-out infinite;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-20px); }
        }

        .onboarding {
            background: rgba(0,0,0,0.8);
            backdrop-filter: blur(10px);
            padding: 2rem;
            border-radius: 1rem;
            border: 1px solid rgba(255,255,255,0.1);
        }

        .chat-container {
            display: none;
            height: 80vh;
            background: rgba(0,0,0,0.8);
            backdrop-filter: blur(10px);
            border-radius: 1rem;
            border: 1px solid rgba(255,255,255,0.1);
            display: flex;
            flex-direction: column;
        }

        .messages {
            flex: 1;
            overflow-y: auto;
            padding: 1rem;
        }

        .message {
            margin: 0.5rem 0;
            padding: 0.5rem;
            background: rgba(255,255,255,0.1);
            border-radius: 0.5rem;
            animation: messageIn 0.3s ease;
        }

        @keyframes messageIn {
            from { transform: translateX(-20px); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }

        .input-container {
            padding: 1rem;
            display: flex;
            gap: 1rem;
        }

        input, button {
            padding: 0.8rem 1.2rem;
            border: none;
            border-radius: 0.5rem;
            font-size: 1rem;
        }

        input {
            flex: 1;
            background: rgba(255,255,255,0.1);
            color: #fff;
        }

        button {
            background: var(--gradient-1);
            color: #fff;
            cursor: pointer;
            transition: transform 0.2s;
        }

        button:hover {
            transform: scale(1.05);
        }

        .emoji-picker {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 1rem;
            margin: 1rem 0;
        }

        .emoji-option {
            font-size: 2rem;
            padding: 1rem;
            background: rgba(255,255,255,0.1);
            border-radius: 0.5rem;
            cursor: pointer;
            text-align: center;
            transition: transform 0.2s;
        }

        .emoji-option:hover {
            transform: scale(1.1);
            background: rgba(255,255,255,0.2);
        }

        #wtafEasterEgg {
            position: fixed;
            bottom: 10px;
            left: 10px;
            font-size: 0.8rem;
            opacity: 0.7;
        }

        #callToText {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: var(--gradient-1);
            padding: 1rem;
            border-radius: 5px;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }
    </style>
</head>
<body>
    <div class="container">
        <div id="onboarding" class="onboarding">
            <h1>EmotiChat ðŸŽ­</h1>
            <div id="startJoin">
                <button onclick="showStartFlow()">Start New Chat</button>
                <button onclick="showJoinFlow()">Join Existing Chat</button>
            </div>
            
            <div id="startFlow" style="display:none;">
                <h2>Pick Your Emoji Identity</h2>
                <div class="emoji-picker">
                    <div class="emoji-option" onclick="selectEmoji('ðŸš€')">ðŸš€</div>
                    <div class="emoji-option" onclick="selectEmoji('ðŸŒŸ')">ðŸŒŸ</div>
                    <div class="emoji-option" onclick="selectEmoji('ðŸŽ®')">ðŸŽ®</div>
                    <div class="emoji-option" onclick="selectEmoji('ðŸŽ¨')">ðŸŽ¨</div>
                </div>
            </div>

            <div id="joinFlow" style="display:none;">
                <h2>Enter Passcode</h2>
                <input type="text" id="passcodeInput" placeholder="Enter passcode">
                <button onclick="validatePasscode()">Join Chat</button>
            </div>
        </div>

        <div id="chatInterface" class="chat-container" style="display:none;">
            <div class="messages" id="messageContainer"></div>
            <div class="input-container">
                <input type="text" id="messageInput" placeholder="Type your message...">
                <button onclick="sendMessage()">Drop it in ðŸ’¡</button>
            </div>
        </div>
    </div>

    <div id="wtafEasterEgg">Generated from user prompt: Two-person chat with emoji identity</div>
    <div id="callToText">ðŸ“± Text START to +1-866-330-0015 to get initiated</div>

    <script>
        const APP_ID = 'emoji-chat-v1';
        const supabase = window.supabase.createClient('YOUR_SUPABASE_URL', 'YOUR_SUPABASE_ANON_KEY');
        
        let currentUser = null;
        let passcode = null;

        function showStartFlow() {
            document.getElementById('startJoin').style.display = 'none';
            document.getElementById('startFlow').style.display = 'block';
        }

        function showJoinFlow() {
            document.getElementById('startJoin').style.display = 'none';
            document.getElementById('joinFlow').style.display = 'block';
        }

        async function selectEmoji(emoji) {
            currentUser = emoji;
            passcode = 'star' + Math.floor(Math.random() * 100);
            
            const saved = await saveUser(emoji, passcode);
            if(saved) {
                alert(`You are ${emoji}. Your passcode is: ${passcode}`);
                startChat();
            }
        }

        async function validatePasscode() {
            const inputPasscode = document.getElementById('passcodeInput').value;
            const { data, error } = await supabase
                .from('wtaf_zero_admin_collaborative')
                .select('*')
                .eq('app_id', APP_ID)
                .eq('action_type', 'join');

            if(error) {
                console.error('Validation error:', error);
                return;
            }

            if(data && data.length > 0) {
                const existingUser = data[0];
                if(existingUser.participant_data.passcode === inputPasscode) {
                    currentUser = 'ðŸŒŸ'; // Second user gets star
                    passcode = inputPasscode;
                    await saveUser(currentUser, passcode);
                    startChat();
                } else {
                    alert('Invalid passcode!');
                }
            }
        }

        async function saveUser(emoji, code) {
            const { data, error } = await supabase
                .from('wtaf_zero_admin_collaborative')
                .insert({
                    app_id: APP_ID,
                    action_type: 'join',
                    participant_id: emoji,
                    participant_data: { passcode: code },
                    content_data: null
                });

            if(error) {
                console.error('Error saving user:', error);
                return false;
            }
            return true;
        }

        async function sendMessage() {
            const input = document.getElementById('messageInput');
            const message = input.value;
            if(!message) return;

            const { data, error } = await supabase
                .from('wtaf_zero_admin_collaborative')
                .insert({
                    app_id: APP_ID,
                    action_type: 'message',
                    participant_id: currentUser,
                    content_data: { message, timestamp: new Date().toISOString() }
                });

            if(error) {
                console.error('Error sending message:', error);
                return;
            }

            input.value = '';
            loadMessages();
        }

        async function loadMessages() {
            const { data, error } = await supabase
                .from('wtaf_zero_admin_collaborative')
                .select('*')
                .eq('app_id', APP_ID)
                .eq('action_type', 'message')
                .order('created_at', { ascending: true });

            if(error) {
                console.error('Error loading messages:', error);
                return;
            }

            const container = document.getElementById('messageContainer');
            container.innerHTML = '';

            if(data && Array.isArray(data)) {
                data.forEach(msg => {
                    if(msg.content_data && msg.content_data.message) {
                        const messageDiv = document.createElement('div');
                        messageDiv.className = 'message';
                        messageDiv.innerHTML = `${msg.participant_id}: ${msg.content_data.message}`;
                        container.appendChild(messageDiv);
                    }
                });
                container.scrollTop = container.scrollHeight;
            }
        }

        function startChat() {
            document.getElementById('onboarding').style.display = 'none';
            document.getElementById('chatInterface').style.display = 'flex';
            loadMessages();
            setInterval(loadMessages, 3000);
        }

        // Easter egg
        let konamiCode = [];
        document.addEventListener('keydown', (e) => {
            konamiCode.push(e.key);
            if(konamiCode.slice(-4).join('') === 'WTAF') {
                document.body.style.animation = 'rainbow 1s infinite';
            }
        });

        // Floating emojis
        const emojis = ['âœ¨', 'ðŸŒ€', 'ðŸš€', 'ðŸ¦„'];
        emojis.forEach((emoji, i) => {
            const div = document.createElement('div');
            div.className = 'floating-emoji';
            div.textContent = emoji;
            div.style.left = `${Math.random() * 100}vw`;
            div.style.top = `${Math.random() * 100}vh`;
            div.setAttribute('data-value', i + 1);
            document.body.appendChild(div);
        });

        // Parallax effect
        document.addEventListener('mousemove', (e) => {
            document.querySelectorAll('.floating-emoji').forEach((elem) => {
                const speed = elem.getAttribute('data-value') || 2;
                const x = (e.clientX * speed) / 100;
                const y = (e.clientY * speed) / 100;
                elem.style.transform = `translateX(${x}px) translateY(${y}px)`;
            });
        });
    </script>
</body>
</html>
```