<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>AI Journal Buddy</title>
    <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=JetBrains+Mono&display=swap" rel="stylesheet">
    <style>
        /* CHAOS Theme */
        :root {
            --bg: #FCFCF7;
            --border: #FFD63D;
            --shadow: #C9C2F9;
            --text: #1a1a1a;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Space Grotesk', system-ui, sans-serif;
            background: var(--bg);
            color: var(--text);
            line-height: 1.6;
            font-size: 16px;
            padding: 20px;
        }

        .screen {
            display: none;
            max-width: 666px;
            margin: 0 auto;
        }

        .screen.active {
            display: block;
        }

        h1 {
            font-size: 40px;
            text-transform: uppercase;
            margin-bottom: 20px;
            transform: rotate(-2deg);
            color: var(--text);
        }

        .card {
            background: var(--bg);
            border: 4px solid var(--border);
            box-shadow: 8px 8px 0 var(--shadow);
            padding: 20px;
            margin: 20px 0;
            transform: rotate(1deg);
        }

        .card:nth-child(2n) {
            transform: rotate(-1deg);
        }

        input, textarea {
            width: 100%;
            padding: 12px;
            font-family: 'JetBrains Mono', monospace;
            border: 3px solid var(--border);
            background: var(--bg);
            font-size: 16px;
            margin: 8px 0;
            min-height: 44px;
        }

        textarea {
            min-height: 120px;
            resize: vertical;
        }

        button {
            background: var(--border);
            border: none;
            padding: 12px 24px;
            font-size: 16px;
            text-transform: uppercase;
            font-weight: bold;
            cursor: pointer;
            min-height: 44px;
            width: 100%;
            margin: 8px 0;
            box-shadow: 4px 4px 0 var(--shadow);
            transform: rotate(-1deg);
            font-family: 'Space Grotesk', system-ui, sans-serif;
        }

        button:active {
            transform: translateY(2px) rotate(-1deg);
            box-shadow: 2px 2px 0 var(--shadow);
        }

        .entry-date {
            font-family: 'JetBrains Mono', monospace;
            font-size: 14px;
            opacity: 0.8;
        }

        .ai-suggestion {
            border-left: 4px solid var(--border);
            padding-left: 16px;
            margin: 16px 0;
            font-style: italic;
        }

        #goals-display {
            font-family: 'JetBrains Mono', monospace;
            margin: 16px 0;
            padding: 16px;
            border: 2px dashed var(--border);
        }

        .loading {
            animation: pulse 1.5s infinite;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        @media (min-width: 768px) {
            button {
                width: auto;
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Auth Screens -->
        <div id="welcome-screen" class="screen active">
            <h1>üìù AI Journal Buddy</h1>
            <p>Your reflective writing companion</p>
            <button onclick="showNewUserScreen()">New User</button>
            <button onclick="showReturningUserScreen()">Returning User</button>
        </div>

        <div id="new-user-screen" class="screen">
            <h1>New Journal</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Start Journaling</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <div id="returning-user-screen" class="screen">
            <h1>Welcome Back</h1>
            <select id="user-label-select"></select>
            <input type="text" id="returning-passcode" placeholder="4-digit code" maxlength="4">
            <button onclick="loginReturningUser()">Open Journal</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <!-- Goals Screen -->
        <div id="goals-screen" class="screen">
            <h1>Set Your Goals</h1>
            <p>What do you want to achieve through journaling?</p>
            <textarea id="goals-input" placeholder="e.g., Self-reflection, Track progress, Understand emotions..."></textarea>
            <button onclick="saveGoals()">Set Goals & Start</button>
        </div>

        <!-- Main Journal Screen -->
        <div id="main-screen" class="screen">
            <h1>My Journal</h1>
            <div id="user-status">Welcome, <span id="current-user-label"></span>!</div>
            
            <div id="goals-display"></div>
            
            <div class="card">
                <textarea id="entry-input" placeholder="What's on your mind?"></textarea>
                <button onclick="saveEntry()">Save Entry</button>
            </div>

            <div class="ai-suggestion" id="next-topic"></div>
            
            <div id="entries-container"></div>
            
            <button onclick="showScreen('welcome-screen')">Exit Journal</button>
        </div>
    </div>

    <script>
        let currentUser = null;
        let aiSuggestionCache = { suggestion: null, lastEntryId: null };
        
        // Initialize authentication
        initAuth();

        async function saveGoals() {
            const goals = document.getElementById('goals-input').value.trim();
            if (!goals) {
                alert('Please enter your goals!');
                return;
            }
            
            await save('goals', { goals });
            enterMainScreen();
        }

        async function saveEntry() {
            const text = document.getElementById('entry-input').value.trim();
            if (!text) {
                alert('Please write something!');
                return;
            }
            
            await save('entry', { text });
            document.getElementById('entry-input').value = '';
            loadLatestData();
        }

        async function generateNextTopic(entries, goals) {
            const latestEntry = entries[0];
            
            // Use cache if available and nothing has changed
            if (aiSuggestionCache.suggestion && 
                aiSuggestionCache.lastEntryId === latestEntry?.id) {
                return aiSuggestionCache.suggestion;
            }
            
            const goalsText = goals?.goals || 'self-reflection';
            const prompt = `Based on the user's journal entry: "${latestEntry?.text || 'No entries yet'}"
                          and their goals: "${goalsText}",
                          suggest a thought-provoking topic for their next journal entry.
                          Keep it concise (1-2 sentences) and encouraging.`;
            
            const suggestion = await generateText(prompt, {
                maxTokens: 100,
                temperature: 0.7
            });
            
            // Cache the result
            aiSuggestionCache = {
                suggestion,
                lastEntryId: latestEntry?.id
            };
            
            return suggestion;
        }

        async function loadLatestData() {
            // Load goals
            const allGoals = await load('goals');
            const myGoals = allGoals.filter(g => g.author === getUsername());
            const latestGoals = myGoals.sort((a, b) => 
                new Date(b.created_at) - new Date(a.created_at)
            )[0];

            if (latestGoals) {
                document.getElementById('goals-display').innerHTML = 
                    `üéØ Goals: ${latestGoals.goals}`;
            }

            // Load entries
            const allEntries = await load('entry');
            const myEntries = allEntries.filter(e => e.author === getUsername());
            
            // Deduplicate entries (crucial!)
            const uniqueEntries = myEntries.reduce((acc, entry) => {
                const existing = acc.find(e => e.text === entry.text);
                if (!existing || new Date(entry.created_at) > new Date(existing.created_at)) {
                    if (existing) {
                        const index = acc.indexOf(existing);
                        acc[index] = entry;
                    } else {
                        acc.push(entry);
                    }
                }
                return acc;
            }, []);

            // Sort by newest first
            const sortedEntries = uniqueEntries.sort((a, b) => 
                new Date(b.created_at) - new Date(a.created_at)
            );

            // Generate next topic suggestion
            const nextTopic = document.getElementById('next-topic');
            nextTopic.innerHTML = 'ü§î Thinking of a topic...';
            nextTopic.classList.add('loading');
            
            const suggestion = await generateNextTopic(sortedEntries, latestGoals);
            nextTopic.innerHTML = `üí° Next Topic: ${suggestion}`;
            nextTopic.classList.remove('loading');

            // Display entries
            document.getElementById('entries-container').innerHTML = 
                sortedEntries.map(entry => `
                    <div class="card">
                        <div class="entry-date">
                            ${new Date(entry.created_at).toLocaleString()}
                        </div>
                        <p>${entry.text}</p>
                    </div>
                `).join('');
        }

        async function enterMainScreen() {
            const hasGoals = (await load('goals'))
                .some(g => g.author === getUsername());
            
            if (!hasGoals) {
                showScreen('goals-screen');
                return;
            }
            
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = 
                currentUser.userLabel;
            startPolling();
            loadLatestData();
        }

        let pollingInterval;
        function startPolling() {
            pollingInterval = setInterval(loadLatestData, 2000);
        }
        function stopPolling() {
            if (pollingInterval) clearInterval(pollingInterval);
        }

        // Authentication helper functions
        async function showNewUserScreen() {
            showScreen('new-user-screen');
            await generateNewUser();
        }

        async function registerNewUser() {
            if (!currentUser) return;
            const result = await registerUser(
                currentUser.userLabel,
                currentUser.passcode,
                currentUser.participantId
            );
            if (result?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                showScreen('goals-screen');
            }
        }

        async function loginReturningUser() {
            const label = document.getElementById('user-label-select').value;
            const passcode = document.getElementById('returning-passcode').value;
            const result = await authenticateUser(label, passcode);
            if (result?.success) {
                currentUser = {
                    userLabel: label,
                    passcode,
                    participantId: result.user.participantId
                };
                updateZadAuth(label, result.user.participantId);
                enterMainScreen();
            } else {
                alert('Wrong code!');
            }
        }

        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const slots = await checkAvailableSlots();
            const select = document.getElementById('user-label-select');
            select.innerHTML = '<option>Select User</option>';
            slots.usedLabels.forEach(label => {
                select.innerHTML += `<option>${label}</option>`;
            });
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen')
                .forEach(s => s.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            if (screenId !== 'main-screen') stopPolling();
        }
    </script>
</body>
</html>