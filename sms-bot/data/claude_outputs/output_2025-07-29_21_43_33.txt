<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
        body { margin: 0; padding: 0; overflow: hidden; background: #1a1a1a; }
        #gameContainer { width: 100vw; height: 100vh; display: flex; flex-direction: column; align-items: center; }
        #gameCanvas { background: #000; margin-top: 10px; }
        #controls { position: fixed; bottom: 20px; display: flex; gap: 10px; }
        .btn { width: 50px; height: 50px; background: rgba(255,255,255,0.2); border: none; border-radius: 8px; color: white; font-size: 20px; }
    </style>
</head>
<body>
    <div id="gameContainer">
        <canvas id="gameCanvas"></canvas>
        <div id="controls">
            <button class="btn" ontouchstart="moveLeft()" onmousedown="moveLeft()">←</button>
            <button class="btn" ontouchstart="moveRight()" onmousedown="moveRight()">→</button>
            <button class="btn" ontouchstart="rotate()" onmousedown="rotate()">↻</button>
            <button class="btn" ontouchstart="drop()" onmousedown="drop()">↓</button>
        </div>
    </div>
<script>
const COLS = 10;
const ROWS = 20;
const BLOCK_SIZE = Math.min(window.innerWidth / 12, window.innerHeight / 24);
const SHAPES = [
    [[1,1,1,1]], // I
    [[1,1,1],[0,1,0]], // T
    [[1,1,1],[1,0,0]], // L
    [[1,1,1],[0,0,1]], // J
    [[1,1],[1,1]], // O
    [[1,1,0],[0,1,1]], // S
    [[0,1,1],[1,1,0]] // Z
];
const COLORS = ['#00f0f0', '#a000f0', '#f0a000', '#0000f0', '#f0f000', '#00f000', '#f00000'];

let canvas, ctx;
let grid = Array(ROWS).fill().map(() => Array(COLS).fill(0));
let piece = { x: 0, y: 0, shape: [], color: '' };
let score = 0;
let gameOver = false;
let dropCounter = 0;
let dropInterval = 1000;

function initGame() {
    canvas = document.getElementById('gameCanvas');
    ctx = canvas.getContext('2d');
    canvas.width = BLOCK_SIZE * COLS;
    canvas.height = BLOCK_SIZE * ROWS;
    spawnPiece();
    update();
}

function spawnPiece() {
    const shapeIndex = Math.floor(Math.random() * SHAPES.length);
    piece = {
        x: Math.floor(COLS / 2) - Math.floor(SHAPES[shapeIndex][0].length / 2),
        y: 0,
        shape: SHAPES[shapeIndex],
        color: COLORS[shapeIndex]
    };
    if (checkCollision()) gameOver = true;
}

function checkCollision() {
    for (let y = 0; y < piece.shape.length; y++) {
        for (let x = 0; x < piece.shape[y].length; x++) {
            if (piece.shape[y][x]) {
                const newX = piece.x + x;
                const newY = piece.y + y;
                if (newX < 0 || newX >= COLS || newY >= ROWS) return true;
                if (newY >= 0 && grid[newY][newX]) return true;
            }
        }
    }
    return false;
}

function merge() {
    piece.shape.forEach((row, y) => {
        row.forEach((value, x) => {
            if (value) {
                grid[piece.y + y][piece.x + x] = piece.color;
            }
        });
    });
}

function clearLines() {
    let linesCleared = 0;
    for (let y = ROWS - 1; y >= 0; y--) {
        if (grid[y].every(cell => cell)) {
            grid.splice(y, 1);
            grid.unshift(Array(COLS).fill(0));
            linesCleared++;
            y++;
        }
    }
    if (linesCleared) {
        score += linesCleared * 100;
        dropInterval = Math.max(100, 1000 - (score / 100) * 10);
    }
}

function moveLeft() { piece.x--; if (checkCollision()) piece.x++; }
function moveRight() { piece.x++; if (checkCollision()) piece.x--; }
function rotate() {
    const rotated = piece.shape[0].map((_, i) => 
        piece.shape.map(row => row[i]).reverse()
    );
    const prevShape = piece.shape;
    piece.shape = rotated;
    if (checkCollision()) piece.shape = prevShape;
}

function drop() {
    piece.y++;
    if (checkCollision()) {
        piece.y--;
        merge();
        clearLines();
        spawnPiece();
    }
    dropCounter = 0;
}

function update(time = 0) {
    const deltaTime = time - (update.lastTime || 0);
    update.lastTime = time;
    
    dropCounter += deltaTime;
    if (dropCounter > dropInterval) {
        drop();
    }

    render();
    if (!gameOver) requestAnimationFrame(update);
    else {
        ctx.fillStyle = 'rgba(0,0,0,0.5)';
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        ctx.fillStyle = 'white';
        ctx.font = '20px Arial';
        ctx.textAlign = 'center';
        ctx.fillText('GAME OVER', canvas.width/2, canvas.height/2);
    }
}

function render() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    // Draw grid
    grid.forEach((row, y) => {
        row.forEach((value, x) => {
            if (value) {
                ctx.fillStyle = value;
                ctx.fillRect(x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE-1, BLOCK_SIZE-1);
            }
        });
    });
    
    // Draw current piece
    piece.shape.forEach((row, y) => {
        row.forEach((value, x) => {
            if (value) {
                ctx.fillStyle = piece.color;
                ctx.fillRect((piece.x + x) * BLOCK_SIZE, 
                           (piece.y + y) * BLOCK_SIZE, 
                           BLOCK_SIZE-1, BLOCK_SIZE-1);
            }
        });
    });
    
    // Draw score
    ctx.fillStyle = 'white';
    ctx.font = '20px Arial';
    ctx.textAlign = 'left';
    ctx.fillText(`Score: ${score}`, 10, 30);
}

document.addEventListener('DOMContentLoaded', initGame);
</script>
</body>
</html>

{"controls": ["left", "right", "rotate", "drop"], "canvasId": "gameCanvas", "gameType": "tetris"}