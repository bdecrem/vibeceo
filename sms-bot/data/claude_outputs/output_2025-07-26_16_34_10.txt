<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>AI Journal Buddy</title>
    <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=JetBrains+Mono&display=swap" rel="stylesheet">
    <style>
        /* CHAOS Theme */
        :root {
            --bg: #FCFCF7;
            --border: #FFD63D;
            --shadow: #C9C2F9;
            --text: #0A0A0A;
            --font-main: 'Space Grotesk', system-ui;
            --font-mono: 'JetBrains Mono', monospace;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            background: var(--bg);
            color: var(--text);
            font-family: var(--font-main);
            font-size: 16px;
            line-height: 1.6;
            padding: 20px;
        }

        .app-container {
            max-width: 666px;
            margin: 0 auto;
        }

        .screen {
            display: none;
        }

        .screen.active {
            display: block;
        }

        h1, h2 {
            font-weight: bold;
            text-transform: uppercase;
            transform: rotate(-1deg);
            margin-bottom: 20px;
        }

        .card {
            background: var(--bg);
            border: 4px solid var(--border);
            box-shadow: 8px 8px 0 var(--shadow);
            padding: 20px;
            margin-bottom: 30px;
            transform: rotate(1deg);
        }

        .entry-card {
            transform: rotate(-1deg);
        }

        .entry-card:nth-child(2n) {
            transform: rotate(1deg);
        }

        button {
            background: var(--border);
            border: 3px solid var(--text);
            box-shadow: 4px 4px 0 var(--shadow);
            font-family: var(--font-main);
            font-size: 16px;
            font-weight: bold;
            text-transform: uppercase;
            padding: 12px 24px;
            min-height: 44px;
            cursor: pointer;
            width: 100%;
            margin: 10px 0;
            transform: rotate(-1deg);
            transition: all 0.2s;
        }

        button:active {
            transform: translateY(4px) rotate(-1deg);
            box-shadow: 0px 0px 0 var(--shadow);
        }

        textarea, input {
            width: 100%;
            font-family: var(--font-main);
            font-size: 16px;
            padding: 12px;
            border: 3px solid var(--text);
            margin: 10px 0;
            min-height: 44px;
            background: white;
        }

        textarea {
            min-height: 120px;
        }

        .suggestion {
            font-family: var(--font-mono);
            background: var(--shadow);
            padding: 15px;
            margin: 20px 0;
            border-left: 4px solid var(--border);
        }

        .date {
            font-family: var(--font-mono);
            font-size: 14px;
            opacity: 0.8;
        }

        .floating-emoji {
            position: fixed;
            bottom: 20px;
            right: 20px;
            font-size: 40px;
            cursor: pointer;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }

        @media (min-width: 768px) {
            button {
                width: auto;
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Auth Screens -->
        <div id="welcome-screen" class="screen active">
            <h1>AI Journal Buddy üìù</h1>
            <p>Your thoughtful writing companion</p>
            <button onclick="showNewUserScreen()">New User</button>
            <button onclick="showReturningUserScreen()">Returning User</button>
        </div>

        <div id="new-user-screen" class="screen">
            <h1>New User</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Register & Enter</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <div id="returning-user-screen" class="screen">
            <h1>Welcome Back</h1>
            <select id="user-label-select"></select>
            <input type="text" id="returning-passcode" placeholder="4-digit code" maxlength="4">
            <button onclick="loginReturningUser()">Login</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <!-- Main App -->
        <div id="main-screen" class="screen">
            <div id="goals-screen" style="display: none;">
                <h1>First, What Are Your Goals? üéØ</h1>
                <textarea id="goals-input" placeholder="What do you want to achieve through journaling? What topics interest you?"></textarea>
                <button onclick="saveGoals()">SET GOALS</button>
            </div>

            <div id="journal-screen" style="display: none;">
                <h1>Your Journal</h1>
                <div id="user-status">Welcome, <span id="current-user-label"></span>!</div>
                
                <div class="card">
                    <textarea id="entry-input" placeholder="What's on your mind today?"></textarea>
                    <button onclick="saveEntry()">SAVE ENTRY</button>
                </div>

                <div id="ai-suggestion" class="suggestion"></div>
                <div id="entries-container"></div>
                
                <button onclick="showScreen('welcome-screen')">Leave</button>
            </div>
        </div>
    </div>

    <div class="floating-emoji" onclick="triggerEmojiRain()">üìù</div>

    <script>
        let currentUser = null;
        let pollingInterval;

        // Auth functions (copied from template)
        async function generateNewUser() {
            const slots = await checkAvailableSlots();
            if (slots.isFull) {
                alert('App is full!');
                return false;
            }
            const user = await generateUser();
            if (user?.success) {
                currentUser = user;
                document.getElementById('new-user-info').innerHTML = 
                    `Your ID: ${user.userLabel}<br>Code: ${user.passcode}<br>Save these!`;
                return true;
            }
            return false;
        }

        async function registerNewUser() {
            if (!currentUser) return;
            const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
            if (result?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                enterMainScreen();
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            await generateNewUser();
        }

        async function loginReturningUser() {
            const label = document.getElementById('user-label-select').value;
            const passcode = document.getElementById('returning-passcode').value;
            const result = await authenticateUser(label, passcode);
            if (result?.success) {
                currentUser = { userLabel: label, passcode, participantId: result.user.participantId };
                updateZadAuth(label, result.user.participantId);
                enterMainScreen();
            } else {
                alert('Wrong code!');
            }
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            if (screenId !== 'main-screen') stopPolling();
        }

        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const slots = await checkAvailableSlots();
            const select = document.getElementById('user-label-select');
            select.innerHTML = '<option>Select User</option>';
            slots.usedLabels.forEach(label => {
                select.innerHTML += `<option>${label}</option>`;
            });
        }

        async function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            
            // Check if user has goals
            const goals = await load('goals');
            const myGoals = goals.filter(g => g.author === getUsername());
            
            if (myGoals.length === 0) {
                document.getElementById('goals-screen').style.display = 'block';
                document.getElementById('journal-screen').style.display = 'none';
            } else {
                document.getElementById('goals-screen').style.display = 'none';
                document.getElementById('journal-screen').style.display = 'block';
                startPolling();
                loadLatestData();
            }
        }

        // Journal functions
        async function saveGoals() {
            const goals = document.getElementById('goals-input').value;
            if (!goals) {
                alert('Please enter your goals!');
                return;
            }
            await save('goals', { text: goals });
            document.getElementById('goals-screen').style.display = 'none';
            document.getElementById('journal-screen').style.display = 'block';
            startPolling();
            loadLatestData();
        }

        async function saveEntry() {
            const text = document.getElementById('entry-input').value;
            if (!text) {
                alert('Please write something!');
                return;
            }
            await save('entry', { text, timestamp: new Date().toISOString() });
            document.getElementById('entry-input').value = '';
            loadLatestData();
        }

        function deduplicate(items, uniqueField = 'timestamp') {
            return items.reduce((acc, item) => {
                const existing = acc.find(i => i[uniqueField] === item[uniqueField]);
                if (!existing || new Date(item.created_at) > new Date(existing.created_at)) {
                    if (existing) {
                        const index = acc.indexOf(existing);
                        acc[index] = item;
                    } else {
                        acc.push(item);
                    }
                }
                return acc;
            }, []);
        }

        async function generateNextTopic(entries, goals) {
            const latestEntry = entries[0]?.text || '';
            const userGoals = goals[0]?.text || '';
            
            const prompt = `Based on this person's journal entry: "${latestEntry}" 
                          and their journaling goals: "${userGoals}",
                          suggest a thoughtful topic for their next journal entry.
                          Keep it concise (max 2 sentences) and encouraging.
                          Start with "Next Topic: "`;

            try {
                const suggestion = await generateText(prompt, {
                    maxTokens: 100,
                    temperature: 0.7
                });
                return suggestion;
            } catch (error) {
                return "Next Topic: What's the most interesting thing that happened today?";
            }
        }

        async function loadLatestData() {
            const entries = await load('entry');
            const goals = await load('goals');
            
            const myEntries = entries.filter(e => e.author === getUsername());
            const myGoals = goals.filter(g => g.author === getUsername());
            
            const uniqueEntries = deduplicate(myEntries, 'timestamp')
                .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));

            // Generate AI suggestion
            const suggestion = await generateNextTopic(uniqueEntries, myGoals);
            document.getElementById('ai-suggestion').textContent = suggestion;

            // Display entries
            const container = document.getElementById('entries-container');
            container.innerHTML = uniqueEntries.map(entry => `
                <div class="card entry-card">
                    <div class="date">${new Date(entry.timestamp).toLocaleString()}</div>
                    <p>${entry.text}</p>
                </div>
            `).join('');
        }

        function startPolling() {
            pollingInterval = setInterval(() => loadLatestData(), 2000);
        }

        function stopPolling() {
            if (pollingInterval) clearInterval(pollingInterval);
        }

        // Emoji rain easter egg
        function triggerEmojiRain() {
            const emojis = ['üìù', '‚úçÔ∏è', 'üí≠', 'üí°', 'üéØ', '‚ú®'];
            for (let i = 0; i < 20; i++) {
                const emoji = document.createElement('div');
                emoji.style.position = 'fixed';
                emoji.style.left = `${Math.random() * 100}vw`;
                emoji.style.top = '-20px';
                emoji.style.fontSize = '24px';
                emoji.textContent = emojis[Math.floor(Math.random() * emojis.length)];
                emoji.style.zIndex = '1000';
                emoji.style.pointerEvents = 'none';
                emoji.style.animation = `fall ${1 + Math.random() * 2}s linear forwards`;
                document.body.appendChild(emoji);
                setTimeout(() => emoji.remove(), 3000);
            }
        }

        // Add falling animation
        const style = document.createElement('style');
        style.textContent = `
            @keyframes fall {
                to {
                    transform: translateY(100vh) rotate(360deg);
                }
            }
        `;
        document.head.appendChild(style);

        // Initialize
        initAuth();
    </script>
</body>
</html>