I'll modify the CSS colors to create a hot pink theme while keeping all functionality intact. I'll change the :root variables and a few other style properties.

```html
<!DOCTYPE html>
<html lang="en">
<head>

    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    
    <style>
        /* HOT PINK THEME */
        :root {
            --bg: #FFF0F7;
            --border: #FF1493;
            --shadow: #FF69B4;
            --text: #1A0013;
        }

        @import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=JetBrains+Mono&display=swap');

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Space Grotesk', system-ui, sans-serif;
            background: var(--bg);
            color: var(--text);
            line-height: 1.6;
            font-size: 16px;
            padding: 20px;
        }

        .screen {
            display: none;
            max-width: 666px;
            margin: 0 auto;
        }

        .screen.active {
            display: block;
        }

        h1 {
            font-size: 40px;
            text-transform: uppercase;
            transform: rotate(-2deg);
            margin-bottom: 20px;
            text-align: center;
            color: var(--border);
            text-shadow: 2px 2px var(--shadow);
        }

        button {
            background: var(--border);
            border: 3px solid var(--text);
            box-shadow: 4px 4px var(--shadow);
            padding: 12px 24px;
            font-family: inherit;
            font-size: 18px;
            text-transform: uppercase;
            cursor: pointer;
            margin: 10px 0;
            min-height: 44px;
            width: 100%;
            transform: rotate(1deg);
            transition: transform 0.2s;
            color: white;
        }

        button:active {
            transform: scale(0.98) rotate(1deg);
        }

        input, select {
            width: 100%;
            padding: 12px;
            font-size: 16px;
            border: 3px solid var(--text);
            font-family: 'JetBrains Mono', monospace;
            margin: 10px 0;
            min-height: 44px;
            background: white;
        }

        .chat-container {
            border: 3px solid var(--text);
            height: 60vh;
            overflow-y: auto;
            padding: 20px;
            margin: 20px 0;
            background: white;
            box-shadow: 4px 4px var(--shadow);
        }

        .message {
            margin: 10px 0;
            padding: 10px;
            border-radius: 4px;
            max-width: 80%;
            word-wrap: break-word;
        }

        .message.mine {
            background: var(--border);
            margin-left: auto;
            transform: rotate(1deg);
            color: white;
        }

        .message.others {
            background: var(--shadow);
            margin-right: auto;
            transform: rotate(-1deg);
            color: white;
        }

        .message .author {
            font-size: 12px;
            opacity: 0.9;
            margin-bottom: 4px;
        }

        #message-input {
            width: calc(100% - 44px);
            display: inline-block;
            margin-right: 10px;
        }

        #send-button {
            width: 44px;
            padding: 0;
            display: inline-flex;
            align-items: center;
            justify-content: center;
        }

        .floating-emoji {
            position: fixed;
            bottom: 20px;
            right: 20px;
            font-size: 32px;
            cursor: pointer;
            animation: pulse 2s infinite;
            background: var(--border);
            border-radius: 50%;
            padding: 10px;
            box-shadow: 0 0 15px var(--shadow);
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }

        @keyframes fall {
            0% { transform: translateY(-100vh) rotate(0deg); }
            100% { transform: translateY(100vh) rotate(360deg); }
        }

        .falling-emoji {
            position: fixed;
            font-size: 24px;
            pointer-events: none;
            z-index: 1000;
        }

        @media (min-width: 768px) {
            button {
                width: auto;
            }
        }
    </style>
<script>
// ZAD Helper Functions - Inline version for test apps

// SIMPLIFIED UUID INJECTION: Set window.APP_ID for backup
window.APP_ID = '8a1ec376-9574-42eb-9201-c5ba62c51e8d';
console.log('üÜî SIMPLIFIED UUID INJECTION: window.APP_ID set to:', '8a1ec376-9574-42eb-9201-c5ba62c51e8d');

console.log('üöÄ Loading ZAD Helper Functions (inline)...');

// Auth state - Use existing global currentUser or create zadCurrentUser
let zadCurrentUser = (typeof currentUser !== 'undefined') ? currentUser : null;
let authInitialized = false;

// Get app ID from window.APP_ID (set by system) - ENHANCED DEBUG VERSION
function getAppId() {
    console.log('üÜî SIMPLIFIED UUID INJECTION: window.APP_ID set to:', '8a1ec376-9574-42eb-9201-c5ba62c51e8d');
    return '8a1ec376-9574-42eb-9201-c5ba62c51e8d';
}

                // Get participant ID - return stored ID or generate temporary one
                function getParticipantId() {
                    let participantId = localStorage.getItem('zad_participant_id');
                    if (!participantId) {
                        // Check if demo mode is enabled (multiple detection methods for iframe compatibility)
                        const isDemoMode = 
                            window.location.search.includes('demo=true') ||
                            window.parent?.location?.search?.includes('demo=true') ||
                            window.top?.location?.search?.includes('demo=true') ||
                            document.referrer.includes('demo=true');
                        
                        // Clear demo mode if not detected in current session
                        if (!isDemoMode) {
                            localStorage.removeItem('demo_mode');
                            // Also clear participant_id if it was a demo ID, so user gets fresh normal ID
                            const existingId = localStorage.getItem('zad_participant_id');
                            if (existingId && existingId.startsWith('demo_')) {
                                localStorage.removeItem('zad_participant_id');
                                localStorage.removeItem('zad_username');
                            }
                        }
                        
                        if (isDemoMode) {
                            // Generate demo ID that will trigger backend demo table routing
                            participantId = 'demo_user_' + Math.random().toString(36).substr(2, 8);
                            localStorage.setItem('demo_mode', 'true');
                            localStorage.setItem('zad_username', 'Demo User');
                            console.log('üé≠ Demo mode detected - generated demo participant ID:', participantId);
                        } else {
                            // Generate temporary ID - app's authentication system will set the real one
                            participantId = 'temp_' + Math.random().toString(36).substr(2, 12);
                            localStorage.setItem('zad_username', 'Anonymous');
                        }
                        
                        localStorage.setItem('zad_participant_id', participantId);
                    }
                    return participantId;
                }

                // Get username from current session
                function getUsername() {
                    // Ensure participant ID is initialized first (which sets up localStorage)
                    getParticipantId();
                    return localStorage.getItem('zad_username') || 'Anonymous';
                }

                // Update ZAD helper functions with app's authentication state
                function updateZadAuth(userLabel, participantId) {
                    localStorage.setItem('zad_participant_id', participantId);
                    localStorage.setItem('zad_username', userLabel);
                    zadCurrentUser = {
                        username: userLabel,
                        participantId: participantId
                    };
                    console.log('üîÑ Updated ZAD auth state:', zadCurrentUser);
                }

                // Initialize authentication (simplified)
                function initAuth() {
                    console.log('üîê Initializing authentication...');
                    if (authInitialized) return;
                    authInitialized = true;
                    
                    // Don't clear localStorage or prompt during initialization
                    // Let the app's authentication system handle user setup
                    zadCurrentUser = {
                        username: getUsername(),
                        participantId: localStorage.getItem('zad_participant_id') || null
                    };
                    
                    console.log('‚úÖ Authentication ready:', zadCurrentUser);
                }

                // Get current user (compatible with zad-helpers.ts)
                function getCurrentUser() {
                    if (!zadCurrentUser) return null;
                    
                    return {
                        username: zadCurrentUser.username || getUsername(),
                        id: zadCurrentUser.participantId || getParticipantId(),
                        userLabel: zadCurrentUser.username || getUsername(),
                        participantId: zadCurrentUser.participantId || getParticipantId(),
                        passcode: zadCurrentUser.passcode || null
                    };
                }

// Save data to ZAD API
async function save(type, data) {
    try {
        const app_id = getAppId();
        const participant_id = getParticipantId();
        const username = getUsername();
        
        const zadData = {
            app_id: app_id,
            participant_id: participant_id,
            participant_data: {
                userLabel: username,
                username: username
            },
            action_type: type,
            content_data: {
                ...data,
                timestamp: data.timestamp || Date.now(),
                author: data.author || username
            }
        };
        
        console.log('üîÑ Saving to ZAD API:', { type, data: zadData });
        
        const response = await fetch('/api/zad/save', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(zadData)
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`Save failed: ${errorData.error || response.statusText}`);
        }
        
        const result = await response.json();
        console.log('‚úÖ Saved successfully:', result);
        return result;
        
    } catch (error) {
        console.error('‚ùå Save error:', error);
        alert(`Failed to save: ${error.message}`);
        throw error;
    }
}

// Phase 1 Authentication Backend Helper Functions
// These call the backend API with specific action types

// Backend Helper 1: Check Available Slots
async function checkAvailableSlots() {
    try {
        const app_id = getAppId();
        
        console.log('üîç Calling backend checkAvailableSlots for app:', app_id);
        
        const response = await fetch('/api/zad/save', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                app_id: app_id,
                action_type: 'check_slots',
                content_data: {}
            })
        });
        
        if (!response.ok) {
            throw new Error(`Check slots failed: ${response.statusText}`);
        }
        
        const result = await response.json();
        console.log('‚úÖ Backend checkAvailableSlots result:', result.slots);
        
        return result.slots;
        
    } catch (error) {
        console.error('‚ùå Check slots error:', error);
        alert(`Failed to check available slots: ${error.message}`);
        return { totalSlots: 5, usedSlots: 0, availableSlots: 5, availableLabels: [], usedLabels: [], isFull: false };
    }
}

// Backend Helper 2: Generate User Credentials
async function generateUser() {
    try {
        const app_id = getAppId();
        
        console.log('üé≤ Calling backend generateUser for app:', app_id);
        
        const response = await fetch('/api/zad/save', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                app_id: app_id,
                action_type: 'generate_user',
                content_data: {}
            })
        });
        
        if (!response.ok) {
            throw new Error(`Generate user failed: ${response.statusText}`);
        }
        
        const result = await response.json();
        console.log('‚úÖ Backend generateUser result:', result);
        
        if (!result.success) {
            alert(result.error || 'Failed to generate user');
            return null;
        }
        
        return result.user;
        
    } catch (error) {
        console.error('‚ùå Generate user error:', error);
        alert(`Failed to generate user: ${error.message}`);
        return null;
    }
}

// Backend Helper 3: Register User
async function registerUser(userLabel, passcode, participantId) {
    try {
        const app_id = getAppId();
        
        console.log('üìù Calling backend registerUser for app:', app_id, 'user:', userLabel);
        
        const response = await fetch('/api/zad/save', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                app_id: app_id,
                action_type: 'register_user',
                content_data: {
                    userLabel: userLabel,
                    passcode: passcode,
                    participantId: participantId
                }
            })
        });
        
        if (!response.ok) {
            throw new Error(`Register user failed: ${response.statusText}`);
        }
        
        const result = await response.json();
        console.log('‚úÖ Backend registerUser result:', result);
        
        if (!result.success) {
            alert(result.result?.error || 'Registration failed');
            return { success: false, error: result.result?.error };
        }
        
        return result.result;
        
    } catch (error) {
        console.error('‚ùå Register user error:', error);
        alert(`Registration failed: ${error.message}`);
        return { success: false, error: error.message };
    }
}

// Backend Helper 4: Authenticate User
async function authenticateUser(userLabel, passcode) {
    try {
        const app_id = getAppId();
        
        console.log('üîê Calling backend authenticateUser for app:', app_id, 'user:', userLabel);
        
        const response = await fetch('/api/zad/save', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                app_id: app_id,
                action_type: 'authenticate_user',
                content_data: {
                    userLabel: userLabel,
                    passcode: passcode
                }
            })
        });
        
        if (!response.ok) {
            throw new Error(`Authentication failed: ${response.statusText}`);
        }
        
        const result = await response.json();
        console.log('‚úÖ Backend authenticateUser result:', result);
        
        if (!result.success) {
            alert(result.result?.error || 'Authentication failed');
            return { success: false, error: result.result?.error };
        }
        
        return result.result;
        
    } catch (error) {
        console.error('‚ùå Authentication error:', error);
        alert(`Authentication failed: ${error.message}`);
        return { success: false, error: error.message };
    }
}

// Backend Helper Function Test: greet(name)
// This demonstrates how backend helper functions work - all logic happens on server
async function greet(name) {
    try {
        const app_id = getAppId();
        const participant_id = getParticipantId();
        const username = getUsername();
        
        console.log('ü§ñ Calling backend greet function for:', name);
        
        // Simple client call - all logic happens on backend
        const response = await fetch('/api/zad/save', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                app_id: app_id,
                participant_id: participant_id,
                participant_data: { userLabel: username, username: username },
                action_type: 'greet',
                content_data: { name: name }
            })
        });
        
        if (!response.ok) {
            throw new Error(`Greet failed: ${response.statusText}`);
        }
        
        const result = await response.json();
        console.log('‚úÖ Backend greet function result:', result);
        
        // Return the backend-generated greeting
        return result.greeting;
        
    } catch (error) {
        console.error('‚ùå Greet error:', error);
        alert(`Greet failed: ${error.message}`);
        return 'Error generating greeting';
    }
}

// Backend Helper Function: generateImage(prompt, style)
// Generate AI images from text descriptions
async function generateImage(prompt, style) {
    try {
        const app_id = getAppId();
        const participant_id = getParticipantId();
        const username = getUsername();
        
        console.log('üé® Calling backend generateImage function for:', prompt);
        
        const response = await fetch('/api/zad/save', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                app_id: app_id,
                participant_id: participant_id,
                participant_data: { userLabel: username, username: username },
                action_type: 'generate_image',
                content_data: { 
                    prompt: prompt,
                    style: style || 'realistic'
                }
            })
        });
        
        if (!response.ok) {
            throw new Error(`Image generation failed: ${response.statusText}`);
        }
        
        const result = await response.json();
        console.log('‚úÖ Backend generateImage function result:', result);
        
        return result.imageUrl;
        
    } catch (error) {
        console.error('‚ùå GenerateImage error:', error);
        alert(`Image generation failed: ${error.message}`);
        return '';
    }
}

// Backend Helper Function: generateText(prompt, options)
// Generate AI text responses
async function generateText(prompt, options = {}) {
    try {
        const app_id = getAppId();
        const participant_id = getParticipantId();
        const username = getUsername();
        
        console.log('ü§ñ Calling backend generateText function for:', prompt);
        
        const response = await fetch('/api/zad/save', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                app_id: app_id,
                participant_id: participant_id,
                participant_data: { userLabel: username, username: username },
                action_type: 'generate_text',
                content_data: { 
                    prompt: prompt,
                    maxTokens: options.maxTokens,
                    temperature: options.temperature,
                    systemPrompt: options.systemPrompt,
                    username: username
                }
            })
        });
        
        if (!response.ok) {
            throw new Error(`Text generation failed: ${response.statusText}`);
        }
        
        const result = await response.json();
        console.log('‚úÖ Backend generateText function result:', result);
        
        return result.text;
        
    } catch (error) {
        console.error('‚ùå GenerateText error:', error);
        alert(`Text generation failed: ${error.message}`);
        throw error;
    }
}

// Load data from ZAD API
async function load(type) {
    try {
        const app_id = getAppId();
        const participant_id = getParticipantId();
        
        console.log('üîÑ Loading from ZAD API:', { app_id, type, participant_id });
        
        const url = `/api/zad/load?app_id=${encodeURIComponent(app_id)}&action_type=${encodeURIComponent(type)}&participant_id=${encodeURIComponent(participant_id)}`;
        console.log('üîç ZAD load URL:', url);
        const response = await fetch(url);
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`Load failed: ${errorData.error || response.statusText}`);
        }
        
        const data = await response.json();
        console.log('‚úÖ Loaded successfully:', data);
        
        // Transform ZAD data back to simple format
        return data.map(item => ({
            id: item.id,
            ...item.content_data,
            author: item.content_data.author || item.participant_data?.username || 'Unknown',
            created_at: item.created_at
        }));
        
    } catch (error) {
        console.error('‚ùå Load error:', error);
        alert(`Failed to load: ${error.message}`);
        return [];
    }
}

// Query data from ZAD API with flexible filtering
async function query(type, options = {}) {
    try {
        const app_id = getAppId();
        
        console.log('üîç Querying ZAD API:', { app_id, type, options });
        
        const queryData = {
            app_id: app_id,
            action_type: 'query',
            content_data: {
                type: type,
                ...options
            }
        };
        
        const response = await fetch('/api/zad/save', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(queryData)
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`Query failed: ${errorData.error || response.statusText}`);
        }
        
        const result = await response.json();
        console.log('‚úÖ Query completed successfully:', result);
        
        // Transform ZAD data back to simple format
        return result.data.map(item => ({
            id: item.id,
            ...item.content_data,
            author: item.content_data.author || item.participant_data?.username || 'Unknown',
            created_at: item.created_at
        }));
        
    } catch (error) {
        console.error('‚ùå Query error:', error);
        alert(`Failed to query: ${error.message}`);
        return [];
    }
}

                // Make functions globally available
                window.initAuth = initAuth;
                window.save = save;
                window.load = load;
                window.query = query;
                window.getAppId = getAppId;
                window.getParticipantId = getParticipantId;
                window.getUsername = getUsername;
                window.getCurrentUser = getCurrentUser;
                window.updateZadAuth = updateZadAuth;
                window.greet = greet; // Add greet function to window object
                window.generateImage = generateImage; // Add generateImage function to window object
                window.generateText = generateText; // Add generateText function to window object
                window.checkAvailableSlots = checkAvailableSlots;
                window.generateUser = generateUser;
                window.registerUser = registerUser;
                window.authenticateUser = authenticateUser;

console.log('üöÄ ZAD Helper Functions loaded successfully');
                console.log('Available functions: initAuth(), save(type, data), load(type), query(type, options), updateZadAuth(userLabel, participantId), greet(name), generateImage(prompt, style), generateText(prompt, options)');
console.log('üîë Phase 1 Auth functions: checkAvailableSlots(), generateUser(), registerUser(label, code, id), authenticateUser(label, code)');

// DEMO MODE: Complete demo mode implementation with localStorage isolation
if (window.location.search.includes('demo=true')) {
    console.log('üé≠ DEMO MODE - Activating complete demo mode');
    
    // Create fake demo user credentials
    let demoUser = {
        userLabel: 'Demo User',
        participantId: 'demo-user-' + Math.random().toString(36).substr(2, 8),
        username: 'Demo User'
    };
    
    // Override ZAD helper functions to use localStorage instead of backend
    const originalSave = window.save;
    window.save = async function(type, data) {
        try {
            const demoKey = `demo_${type}_${demoUser.participantId}`;
            const existing = JSON.parse(localStorage.getItem(demoKey) || '[]');
            
            const newItem = {
                id: Date.now(),
                created_at: new Date().toISOString(),
                author: data.author || demoUser.userLabel,
                ...data
            };
            
            existing.push(newItem);
            localStorage.setItem(demoKey, JSON.stringify(existing));
            
            console.log('üé≠ Demo save:', { type, data: newItem });
            return { success: true, data: newItem };
            
        } catch (error) {
            console.error('‚ùå Demo save error:', error);
            return { success: false, error: error.message };
        }
    };
    
    const originalLoad = window.load;
    window.load = async function(type) {
        try {
            const demoKey = `demo_${type}_${demoUser.participantId}`;
            const data = JSON.parse(localStorage.getItem(demoKey) || '[]');
            
            // Transform demo data to match real ZAD API structure
            const transformedData = data.map(item => {
                // Extract metadata fields
                const { id, created_at, author, ...contentData } = item;
                
                // Return in same format as real ZAD API: content_data contains the actual data
                return {
                    id: id,
                    created_at: created_at,
                    content_data: contentData,
                    author: author || demoUser.userLabel
                };
            });
            
            console.log('üé≠ Demo load:', { type, count: transformedData.length });
            return transformedData;
            
        } catch (error) {
            console.error('‚ùå Demo load error:', error);
            return [];
        }
    };
    
    // Override authentication functions to work with demo user
    window.getCurrentUser = function() {
        return demoUser;
    };
    
    window.getUsername = function() {
        return demoUser.userLabel;
    };
    
    window.getParticipantId = function() {
        return demoUser.participantId;
    };
    
    // Set global currentUser for apps that expect it
    if (typeof window.currentUser === 'undefined') {
        window.currentUser = demoUser;
    }
    
    document.addEventListener('DOMContentLoaded', () => {
        // Hide welcome/auth screens and show main screen
        const welcomeScreen = document.getElementById('welcome-screen');
        const mainScreen = document.getElementById('main-screen');
        
        if (welcomeScreen && mainScreen) {
            welcomeScreen.style.display = 'none';
            mainScreen.style.display = 'block';
            console.log('üé≠ Auth screens bypassed for demo mode');
        }
        
        // Add demo banner if user status exists
        const userStatus = document.getElementById('user-status');
        if (userStatus) {
            userStatus.innerHTML = 'üé≠ DEMO MODE - Try it out! Data saved locally.';
        }
        
        // Update user display elements
        const userLabelElements = document.querySelectorAll('#current-user-label, .current-user-label');
        userLabelElements.forEach(elem => {
            elem.textContent = demoUser.userLabel;
        });
        
        // Auto-initialize demo user authentication state
        if (typeof window.updateZadAuth === 'function') {
            window.updateZadAuth(demoUser.userLabel, demoUser.participantId);
        }
        
        console.log('üé≠ Demo mode fully activated:', demoUser);
    });
}

</script>
</head>
<body>
    <div class="app-container">
        <div id="welcome-screen" class="screen active">
            <h1>CHAOS CHAT üí¨</h1>
            <p>Welcome to the most chaotic chat app ever!</p>
            <button onclick="showNewUserScreen()">New User</button>
            <button onclick="showReturningUserScreen()">Returning User</button>
        </div>

        <div id="new-user-screen" class="screen">
            <h1>New User</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Register & Enter</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <div id="returning-user-screen" class="screen">
            <h1>Returning User</h1>
            <select id="user-label-select"></select>
            <input type="text" id="returning-passcode" placeholder="4-digit code" maxlength="4">
            <button onclick="loginReturningUser()">Login</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <div id="main-screen" class="screen">
            <h1>CHAOS CHAT</h1>
            <div id="user-status">Welcome, <span id="current-user-label"></span>!</div>
            
            <div class="chat-container" id="chat-messages"></div>
            
            <div class="input-group">
                <input type="text" id="message-input" placeholder="Type something chaotic..." maxlength="280">
                <button id="send-button" onclick="sendMessage()">üì®</button>
            </div>
            
            <button onclick="showScreen('welcome-screen')">Leave Chat</button>
        </div>
    </div>

    <div class="floating-emoji" onclick="triggerEmojiRain()">üí¨</div>

    <script>
        let currentUser = null;
        let pollingInterval;

        // Authentication Flow
        async function generateNewUser() {
            const slots = await checkAvailableSlots();
            if (slots.isFull) {
                alert('Chat is full! Maximum 5 users.');
                return false;
            }
            
            const user = await generateUser();
            if (user?.success) {
                currentUser = user;
                document.getElementById('new-user-info').innerHTML = 
                    `Your ID: ${user.userLabel}<br>Code: ${user.pas