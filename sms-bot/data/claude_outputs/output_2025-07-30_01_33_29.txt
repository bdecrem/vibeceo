Here's a nostalgic MacPaint-style public collaborative painting app with all the requested features:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>WTAF Paint</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
            background: #fefef5;
            margin: 0;
            padding: 20px;
            min-height: 100vh;
        }

        .app-container {
            max-width: 800px;
            margin: 0 auto;
            text-align: center;
        }

        h1 {
            color: #FF4B4B;
            font-size: 24px;
            text-transform: uppercase;
            margin-bottom: 20px;
        }

        .canvas-container {
            background: white;
            border: 2px solid #FFD63D;
            border-radius: 12px;
            box-shadow: 4px 4px 0 #C9C2F9;
            padding: 10px;
            margin: 20px auto;
            display: inline-block;
        }

        #paintCanvas {
            border: 1px solid #ccc;
            cursor: crosshair;
            background: white;
            touch-action: none;
        }

        .toolbar {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            justify-content: center;
            margin: 20px 0;
        }

        button {
            background: #6ECBFF;
            border: none;
            border-radius: 20px;
            color: white;
            padding: 10px 20px;
            font-size: 16px;
            height: 44px;
            cursor: pointer;
            min-width: 44px;
            transition: transform 0.1s;
        }

        button:active {
            transform: scale(0.95);
        }

        .control-group {
            display: flex;
            align-items: center;
            gap: 10px;
            background: white;
            padding: 5px 15px;
            border-radius: 20px;
            border: 2px solid #6ECBFF;
        }

        input[type="range"] {
            width: 100px;
        }

        input[type="color"] {
            width: 44px;
            height: 44px;
            padding: 0;
            border: none;
            cursor: pointer;
        }

        .gallery {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
            margin-top: 40px;
        }

        .gallery-item {
            background: white;
            border: 2px solid #FFD63D;
            border-radius: 12px;
            padding: 10px;
            box-shadow: 4px 4px 0 #C9C2F9;
        }

        .gallery-item img {
            width: 100%;
            border-radius: 8px;
        }

        .gallery-item p {
            margin: 10px 0;
            font-size: 16px;
            color: #666;
        }

        #user-status {
            font-size: 16px;
            margin-bottom: 20px;
            color: #666;
        }

        @media (max-width: 600px) {
            .toolbar {
                flex-direction: column;
                align-items: stretch;
            }
            
            .control-group {
                flex-wrap: wrap;
                justify-content: center;
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <h1>WTAF Paint üé®</h1>
        <div id="user-status">Anonymous Artist: <span id="current-user-label"></span></div>

        <div class="canvas-container">
            <canvas id="paintCanvas" width="400" height="400"></canvas>
        </div>

        <div class="toolbar">
            <button id="pencilBtn">‚úèÔ∏è Pencil</button>
            <button id="brushBtn">üñåÔ∏è Brush</button>
            <button id="mysteryBtn">üé≤</button>
            <button id="undoBtn">‚Ü©Ô∏è Undo</button>
            <div class="control-group">
                <input type="color" id="colorPicker" value="#000000">
                <input type="range" id="sizeSlider" min="1" max="50" value="5">
            </div>
            <button id="saveBtn">üíæ Save</button>
        </div>

        <h2 style="color: #FF4B4B; margin-top: 40px;">GALLERY WALL</h2>
        <div id="gallery" class="gallery"></div>
    </div>

    <script>
        let currentUser = null;
        let isDrawing = false;
        let currentTool = 'pencil';
        let mysteryMode = 'neon';
        let lastX = 0;
        let lastY = 0;
        let hue = 0;
        
        const canvas = document.getElementById('paintCanvas');
        const ctx = canvas.getContext('2d');
        const undoStack = [];
        
        // Initialize canvas
        ctx.lineCap = 'round';
        ctx.lineJoin = 'round';
        saveCanvasState();

        // Tool selection
        document.getElementById('pencilBtn').onclick = () => {
            currentTool = 'pencil';
            ctx.globalCompositeOperation = 'source-over';
        };
        
        document.getElementById('brushBtn').onclick = () => {
            currentTool = 'brush';
            ctx.globalCompositeOperation = 'source-over';
        };
        
        document.getElementById('mysteryBtn').onclick = () => {
            currentTool = 'mystery';
            mysteryMode = mysteryMode === 'neon' ? 'rainbow' : 'neon';
            ctx.globalCompositeOperation = 'lighter';
        };
        
        document.getElementById('undoBtn').onclick = () => {
            if (undoStack.length > 1) {
                undoStack.pop();
                const lastState = undoStack[undoStack.length - 1];
                const img = new Image();
                img.src = lastState;
                img.onload = () => ctx.drawImage(img, 0, 0);
            }
        };

        // Drawing functions
        function startDrawing(e) {
            isDrawing = true;
            [lastX, lastY] = getCoords(e);
        }

        function draw(e) {
            if (!isDrawing) return;

            const [currentX, currentY] = getCoords(e);
            ctx.beginPath();
            ctx.moveTo(lastX, lastY);

            if (currentTool === 'pencil') {
                ctx.lineWidth = document.getElementById('sizeSlider').value;
                ctx.strokeStyle = document.getElementById('colorPicker').value;
                ctx.lineTo(currentX, currentY);
                ctx.stroke();
            } else if (currentTool === 'brush') {
                ctx.lineWidth = document.getElementById('sizeSlider').value * 2;
                ctx.strokeStyle = document.getElementById('colorPicker').value;
                ctx.lineTo(currentX, currentY);
                ctx.stroke();
            } else if (currentTool === 'mystery') {
                if (mysteryMode === 'neon') {
                    for (let i = 0; i < 3; i++) {
                        ctx.beginPath();
                        ctx.moveTo(currentX + (Math.random() * 20 - 10), currentY + (Math.random() * 20 - 10));
                        ctx.lineTo(currentX + (Math.random() * 20 - 10), currentY + (Math.random() * 20 - 10));
                        ctx.lineWidth = Math.random() * 3;
                        ctx.strokeStyle = `hsl(${Math.random() * 360}, 100%, 50%)`;
                        ctx.stroke();
                    }
                } else {
                    ctx.lineWidth = document.getElementById('sizeSlider').value * 2;
                    ctx.strokeStyle = `hsl(${hue}, 100%, 50%)`;
                    ctx.lineTo(currentX, currentY);
                    ctx.stroke();
                    hue = (hue + 2) % 360;
                }
            }

            [lastX, lastY] = [currentX, currentY];
        }

        function stopDrawing() {
            if (isDrawing) {
                isDrawing = false;
                saveCanvasState();
            }
        }

        function getCoords(e) {
            const rect = canvas.getBoundingClientRect();
            const x = (e.clientX || e.touches[0].clientX) - rect.left;
            const y = (e.clientY || e.touches[0].clientY) - rect.top;
            return [x, y];
        }

        function saveCanvasState() {
            undoStack.push(canvas.toDataURL());
        }

        // Event listeners
        canvas.addEventListener('mousedown', startDrawing);
        canvas.addEventListener('mousemove', draw);
        canvas.addEventListener('mouseup', stopDrawing);
        canvas.addEventListener('mouseout', stopDrawing);
        canvas.addEventListener('touchstart', startDrawing);
        canvas.addEventListener('touchmove', draw);
        canvas.addEventListener('touchend', stopDrawing);

        // Save artwork
        document.getElementById('saveBtn').onclick = async () => {
            const name = prompt("What's your name, artist?");
            if (name) {
                const artwork = {
                    image: canvas.toDataURL(),
                    name: name,
                    timestamp: new Date().toISOString()
                };
                await save('artwork', artwork);
                loadLatestData();
                
                // Clear canvas
                ctx.fillStyle = 'white';
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                undoStack.length = 0;
                saveCanvasState();
            }
        };

        // Load and display gallery
        async function loadLatestData() {
            const artworks = await load('artwork');
            const gallery = document.getElementById('gallery');
            gallery.innerHTML = '';
            
            artworks.sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
                .forEach(artwork => {
                    const item = document.createElement('div');
                    item.className = 'gallery-item';
                    item.innerHTML = `
                        <img src="${artwork.image}" alt="Artwork">
                        <p>By: ${artwork.name} (${artwork.author})</p>
                    `;
                    gallery.appendChild(item);
                });
        }

        // Initialize public mode and start auto-refresh
        async function initPublicMode() {
            currentUser = await generateAnonymousUser();
            if (currentUser?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                document.getElementById('current-user-label').textContent = currentUser.userLabel;
                startPolling();
                loadLatestData();
            }
        }

        let pollingInterval;
        function startPolling() {
            pollingInterval = setInterval(() => loadLatestData(), 2000);
        }

        // Initialize the app
        initPublicMode();
    </script>
</body>
</html>