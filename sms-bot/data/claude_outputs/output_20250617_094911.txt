```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Speedy Pong</title>
    <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=Inter:wght@400;500&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            overflow: hidden;
            background: linear-gradient(135deg, #0a0a0a, #1a0033, #330066, #1a0033, #0a0a0a);
            background-size: 400% 400%;
            animation: gradientShift 15s ease infinite;
            color: #fff;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            cursor: crosshair;
        }

        @keyframes gradientShift {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }

        .container {
            width: 90vw;
            max-width: 800px;
            height: 90vh;
            max-height: 600px;
            position: relative;
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            overflow: hidden;
            animation: fadeIn 0.8s ease-out;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .floating-emoji {
            position: absolute;
            font-size: 2rem;
            opacity: 0.3;
            pointer-events: none;
            transition: transform 0.3s ease-out;
            z-index: 1;
        }

        .emoji-1 { top: 10%; left: 10%; }
        .emoji-2 { top: 80%; right: 15%; }
        .emoji-3 { top: 50%; left: 5%; }

        .screen {
            position: absolute;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
            padding: 2rem;
            transition: opacity 0.5s ease, transform 0.5s ease;
        }

        .screen.hidden {
            opacity: 0;
            transform: scale(0.95);
            pointer-events: none;
        }

        h1 {
            font-family: 'Space Grotesk', sans-serif;
            font-size: clamp(3rem, 8vw, 5rem);
            font-weight: 700;
            margin-bottom: 1rem;
            text-shadow: 0 0 30px #ff00ff, 0 0 60px #00ffff;
            animation: neonPulse 2s ease-in-out infinite;
        }

        @keyframes neonPulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.8; }
        }

        .subtitle {
            font-size: 1.2rem;
            opacity: 0.8;
            margin-bottom: 3rem;
            font-style: italic;
        }

        .button {
            background: linear-gradient(135deg, #ff00ff, #00ffff);
            border: none;
            padding: 1rem 2.5rem;
            font-family: 'Space Grotesk', sans-serif;
            font-size: 1.1rem;
            font-weight: 500;
            color: #000;
            border-radius: 50px;
            cursor: pointer;
            margin: 0.5rem;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
            box-shadow: 0 4px 20px rgba(255, 0, 255, 0.3);
        }

        .button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 30px rgba(255, 0, 255, 0.5);
        }

        .button:active {
            transform: translateY(0);
        }

        #gameCanvas {
            width: 100%;
            height: 100%;
            image-rendering: pixelated;
            image-rendering: crisp-edges;
        }

        .score-display {
            position: absolute;
            top: 20px;
            font-family: 'Space Grotesk', sans-serif;
            font-size: 2rem;
            font-weight: 700;
            text-shadow: 0 0 20px currentColor;
            z-index: 10;
        }

        .score-left {
            left: 25%;
            color: #ff00ff;
        }

        .score-right {
            right: 25%;
            color: #00ffff;
        }

        .speed-indicator {
            position: absolute;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            font-size: 0.9rem;
            opacity: 0.6;
            z-index: 10;
        }

        .controls-hint {
            position: absolute;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            font-size: 0.8rem;
            opacity: 0.5;
            z-index: 10;
        }

        .end-stats {
            margin: 2rem 0;
            font-size: 1.2rem;
            line-height: 1.8;
        }

        .stat-value {
            color: #00ffff;
            font-weight: 700;
        }

        @media (max-width: 600px) {
            .button {
                padding: 0.8rem 2rem;
                font-size: 1rem;
            }
            
            .score-display {
                font-size: 1.5rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="floating-emoji emoji-1">âš¡</div>
        <div class="floating-emoji emoji-2">ðŸŽ®</div>
        <div class="floating-emoji emoji-3">ðŸ’«</div>

        <div id="introScreen" class="screen">
            <h1>SPEEDY PONG</h1>
            <p class="subtitle">Every bounce makes you question reality</p>
            <button class="button" onclick="startGame(1)">SOLO SURVIVAL</button>
            <button class="button" onclick="startGame(2)">DUAL CHAOS</button>
        </div>

        <div id="gameScreen" class="screen hidden">
            <canvas id="gameCanvas"></canvas>
            <div class="score-left" id="scoreLeft">0</div>
            <div class="score-right" id="scoreRight">0</div>
            <div class="speed-indicator" id="speedIndicator">SPEED: 1.0x</div>
            <div class="controls-hint" id="controlsHint"></div>
        </div>

        <div id="endScreen" class="screen hidden">
            <h1>GAME OVER</h1>
            <p class="subtitle">The void has consumed your paddle</p>
            <div class="end-stats">
                <div>Final Score: <span class="stat-value" id="finalScore">0 - 0</span></div>
                <div>Max Speed: <span class="stat-value" id="maxSpeed">1.0x</span></div>
                <div>Rally Length: <span class="stat-value" id="rallyLength">0</span> hits</div>
            </div>
            <button class="button" onclick="showIntro()">RESTART YOUR EXISTENCE</button>
        </div>
    </div>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        
        let gameState = 'intro';
        let gameMode = 1;
        let animationId;
        let lastTime = 0;
        
        const game = {
            ball: { x: 0, y: 0, vx: 0, vy: 0, size: 8, speed: 1 },
            leftPaddle: { y: 0, height: 80, width: 12, score: 0 },
            rightPaddle: { y: 0, height: 80, width: 12, score: 0 },
            maxSpeed: 1,
            hits: 0,
            particles: []
        };
        
        const keys = {};
        let touchY = null;
        
        function resizeCanvas() {
            const container = document.querySelector('.container');
            canvas.width = container.clientWidth;
            canvas.height = container.clientHeight;
        }
        
        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(s => s.classList.add('hidden'));
            document.getElementById(screenId).classList.remove('hidden');
        }
        
        function showIntro() {
            gameState = 'intro';
            showScreen('introScreen');
            cancelAnimationFrame(animationId);
        }
        
        function startGame(mode) {
            gameMode = mode;
            gameState = 'playing';
            showScreen('gameScreen');
            resizeCanvas();
            resetGame();
            
            const hint = gameMode === 1 ? 'W/S or Touch to move' : 'P1: W/S | P2: â†‘/â†“';
            document.getElementById('controlsHint').textContent = hint;
            
            lastTime = performance.now();
            gameLoop();
        }
        
        function resetGame() {
            game.ball.x = canvas.width / 2;
            game.ball.y = canvas.height / 2;
            game.ball.vx = (Math.random() > 0.5 ? 1 : -1) * 300;
            game.ball.vy = (Math.random() - 0.5) * 200;
            game.ball.speed = 1;
            
            game.leftPaddle.y = canvas.height / 2 - game.leftPaddle.height / 2;
            game.rightPaddle.y = canvas.height / 2 - game.rightPaddle.height / 2;
            game.leftPaddle.score = 0;
            game.rightPaddle.score = 0;
            
            game.maxSpeed = 1;
            game.hits = 0;
            game.particles = [];
            
            updateScore();
        }
        
        function updateScore() {
            document.getElementById('scoreLeft').textContent = game.leftPaddle.score;
            document.getElementById('scoreRight').textContent = game.rightPaddle.score;
            document.getElementById('speedIndicator').textContent = `SPEED: ${game.ball.speed.toFixed(1)}x`;
        }
        
        function createParticles(x, y, color) {
            for (let i = 0; i < 10; i++) {
                game.particles.push({
                    x, y,
                    vx: (Math.random() - 0.5) * 300,
                    vy: (Math.random() - 0.5) * 300,
                    life: 1,
                    color
                });
            }
        }
        
        function updateGame(deltaTime) {
            const dt = deltaTime / 1000;
            
            // Update ball
            game.ball.x += game.ball.vx * game.ball.speed * dt;
            game.ball.y += game.ball.vy * game.ball.speed * dt;
            
            // Ball collision with top/bottom
            if (game.ball.y <= game.ball.size || game.ball.y >= canvas.height - game.ball.size) {
                game.ball.vy = -game.ball.vy;
                createParticles(game.ball.x, game.ball.y, '#ffffff');
            }
            
            // Paddle movement
            const paddleSpeed = 400;
            
            if (gameMode === 1) {
                // Single player - left paddle controlled, right paddle AI
                if (keys['w'] || keys['W']) game.leftPaddle.y -= paddleSpeed * dt;
                if (keys['s'] || keys['S']) game.leftPaddle.y += paddleSpeed * dt;
                
                if (touchY !== null) {
                    game.leftPaddle.y = touchY - game.leftPaddle.height / 2;
                }
                
                // AI paddle
                const aiTarget = game.ball.y - game.rightPaddle.height / 2;
                const aiDiff = aiTarget - game.rightPaddle.y;
                game.rightPaddle.y += Math.sign(aiDiff) * Math.min(Math.abs(aiDiff), paddleSpeed * dt);
            } else {
                // Two player mode
                if (keys['w'] || keys['W']) game.leftPaddle.y -= paddleSpeed * dt;
                if (keys['s'] || keys['S']) game.leftPaddle.y += paddleSpeed * dt;
                if (keys['ArrowUp']) game.rightPaddle.y -= paddleSpeed * dt;
                if (keys['ArrowDown']) game.rightPaddle.y += paddleSpeed * dt;
            }
            
            // Clamp paddles
            game.leftPaddle.y = Math.max(0, Math.min(canvas.height - game.leftPaddle.height, game.leftPaddle.y));
            game.rightPaddle.y = Math.max(0, Math.min(canvas.height - game.rightPaddle.height, game.rightPaddle.y));
            
            // Paddle collision
            const ballLeft = game.ball.x - game.ball.size;
            const ballRight = game.ball.x + game.ball.size;
            const ballTop = game.ball.y - game.ball.size;
            const ballBottom = game.ball.y + game.ball.size;
            
            // Left paddle
            if (ballLeft <= 20 + game.leftPaddle.width && 
                ballRight >= 20 &&
                ballBottom >= game.leftPaddle.y &&
                ballTop <= game.leftPaddle.y + game.leftPaddle.height &&
                game.ball.vx < 0) {
                
                game.ball.vx = -game.ball.vx;
                game.ball.speed += 0.1;
                game.hits++;
                
                const relativeY = (game.ball.y - (game.leftPaddle.y + game.leftPaddle.height / 2)) / (game.leftPaddle.height / 2);
                game.ball.vy = relativeY * 300;
                
                createParticles(20 + game.leftPaddle.width, game.ball.y, '#ff00ff');
            }
            
            // Right paddle
            if (ballRight >= canvas.width - 20 - game.rightPaddle.width && 
                ballLeft <= canvas.width - 20 &&
                ballBottom >= game.rightPaddle.y &&
                ballTop <= game.rightPaddle.y + game.rightPaddle.height &&
                game.ball.vx > 0) {
                
                game.ball.vx = -game.ball.vx;
                game.ball.speed += 0.1;
                game.hits++;
                
                const relativeY = (game.ball.y - (game.rightPaddle.y + game.rightPaddle.height / 2)) / (game.rightPaddle.height / 2);
                game.ball.vy = relativeY * 300;
                
                createParticles(canvas.width - 20 - game.rightPaddle.width, game.ball.y, '#00ffff');
            }
            
            // Score
            if (game.ball.x < 0) {
                game.rightPaddle.score++;
                resetBall();
            } else if (game.ball.x > canvas.width) {
                game.leftPaddle.score++;
                resetBall();
            }
            
            // Update particles
            game.particles = game.particles.filter(p => {
                p.x += p.vx * dt;
                p.y += p.vy * dt;
                p.life -= dt * 2;
                return p.life > 0;
            });
            
            game.maxSpeed = Math.max(game.maxSpeed, game.ball.speed);
            updateScore();
            
            // Check win condition
            if (game.leftPaddle.score >= 5 || game.rightPaddle.score >= 5) {
                endGame();
            }
        }
        
        function resetBall() {
            game.ball.x = canvas.width / 2;
            game.ball.y = canvas.height / 2;
            game.ball.vx = (Math.random() > 0.5 ? 1 : -1) * 300;
            game.ball.vy = (Math.random() - 0.5) * 200;
            game.ball.speed = 1;
            game.hits = 0;
        }
        
        function drawGame() {
            ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // Draw center line
            ctx.strokeStyle = 'rgba(255, 255, 255, 0.2)';
            ctx.lineWidth = 2;
            ctx.setLineDash([10, 10]);
            ctx.beginPath();
            ctx.moveTo(canvas.width / 2, 0);
            ctx.lineTo(canvas.width / 2, canvas.height);
            ctx.stroke();
            ctx.setLineDash([]);
            
            // Draw paddles
            ctx.fillStyle = '#ff00ff';
            ctx.fillRect(20, game.leftPaddle.y, game.leftPaddle.width, game.leftPaddle.height);
            
            ctx.fillStyle = '#00ffff';
            ctx.fillRect(canvas.width - 20 - game.rightPaddle.width, game.rightPaddle.y, game.rightPaddle.width, game.rightPaddle.height);
            
            // Draw ball with glow
            ctx.shadowBlur = 20;
            ctx.shadowColor = '#ffffff';
            ctx.fillStyle = '#ffffff';
            ctx.fillRect(game.ball.x - game.ball.size, game.ball.y - game.ball.size, game.ball.size * 2, game.ball.size * 2);
            ctx.shadowBlur = 0;
            
            // Draw particles
            game.particles.forEach(p => {
                ctx.globalAlpha = p.life;
                ctx.fillStyle = p.color;
                ctx.fillRect(p.x - 2, p.y - 2, 4, 4);
            });
            ctx.globalAlpha = 1;
        }
        
        function gameLoop(currentTime) {
            const deltaTime = currentTime - lastTime;
            lastTime = currentTime;
            
            if (gameState === 'playing') {
                updateGame(deltaTime);
                drawGame();
                animationId = requestAnimationFrame(gameLoop);
            }
        }
        
        function endGame() {
            gameState = 'ended';
            document.getElementById('finalScore').textContent = `${game.leftPaddle.score} - ${game.rightPaddle.score}`;
            document.getElementById('maxSpeed').textContent = `${game.maxSpeed.toFixed(1)}x`;
            document.getElementById('rallyLength').textContent = game.hits;
            showScreen('endScreen');
        }
        
        // Event listeners
        window.addEventListener('keydown', e => keys[e.key] = true);
        window.addEventListener('keyup', e => keys[e.key] = false);
        window.addEventListener('resize', resizeCanvas);
        
        canvas.addEventListener('touchstart', e => {
            e.preventDefault();
            touchY = e.touches[0].clientY - canvas.getBoundingClientRect().top;
        });
        
        canvas.addEventListener('touchmove', e => {
            e.preventDefault();
            touchY = e.touches[0].clientY - canvas.getBoundingClientRect().top;
        });
        
        canvas.addEventListener('touchend', e => {
            e.preventDefault();
            touchY = null;
        });
        
        // Parallax effect
        document.addEventListener('mousemove', e => {
            const x = (e.clientX / window.innerWidth - 0.5) * 20;
            const y = (e.clientY / window.innerHeight - 0.5) * 20;
            
            document.querySelectorAll('.floating-emoji').forEach((emoji, i) => {
                const factor = (i + 1) * 0.5;
                emoji.style.transform = `translate(${x * factor}px, ${y * factor}px)`;
            });
        });
        
        // Initialize
        resizeCanvas();
    </script>
</body>
</html>
```