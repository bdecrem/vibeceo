```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Pizzaface - Weekly Habit Tracker</title>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=Inter:wght@400;600&display=swap');
    
    body { 
      font-family: 'Inter', sans-serif;
      background: linear-gradient(135deg, #FF2E93 0%, #7C3AED 50%, #3F88FF 100%);
      background-size: 400% 400%;
      animation: gradientShift 15s ease-in-out infinite;
      color: white;
      overflow-x: hidden;
      margin: 0;
      min-height: 100vh;
    }

    h1, h2, h3 {
      font-family: 'Space Grotesk', sans-serif;
      font-weight: 700;
      text-transform: uppercase;
      letter-spacing: -0.02em;
    }

    @keyframes gradientShift {
      0%, 100% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
    }

    .app-container {
      max-width: 800px;
      margin: 0 auto;
      background: rgba(0,0,0,0.4);
      backdrop-filter: blur(20px);
      border-radius: 20px;
      padding: 2rem;
      border: 1px solid rgba(255,255,255,0.1);
      position: relative;
      z-index: 10;
      min-height: 90vh;
    }

    .screen { display: none; }
    .screen.active { display: block; animation: fadeIn 0.3s ease; }

    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }

    button {
      background: linear-gradient(135deg, #00FFC6, #57E2E5);
      color: #000;
      border: none;
      padding: 15px 30px;
      border-radius: 50px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      text-transform: uppercase;
      letter-spacing: 1px;
      font-size: 14px;
      margin: 10px 5px;
    }

    button:hover {
      transform: scale(1.05);
      box-shadow: 0 0 30px rgba(0, 255, 198, 0.5);
    }

    input, select {
      background: rgba(255,255,255,0.1);
      border: 2px solid rgba(255,255,255,0.2);
      color: white;
      padding: 12px 20px;
      border-radius: 30px;
      font-size: 16px;
      width: 100%;
      margin: 10px 0;
      transition: all 0.3s ease;
    }

    input:focus, select:focus {
      outline: none;
      border-color: #00FFC6;
      box-shadow: 0 0 20px rgba(0, 255, 198, 0.3);
    }

    .data-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 20px;
      padding: 20px 0;
    }

    .data-card {
      background: rgba(0,0,0,0.3);
      border: 1px solid rgba(255,255,255,0.2);
      border-radius: 15px;
      padding: 20px;
      backdrop-filter: blur(10px);
      transition: all 0.3s ease;
    }

    .data-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 30px rgba(123,58,237,0.3);
    }

    .floating-emoji {
      position: fixed;
      font-size: 2rem;
      animation: float 6s ease-in-out infinite;
      pointer-events: none;
      z-index: 5;
      opacity: 0.8;
    }

    @keyframes float {
      0%, 100% { transform: translateY(0px) rotate(0deg); }
      50% { transform: translateY(-20px) rotate(10deg); }
    }

    h1 {
      position: relative;
      animation: glitch 3s ease-in-out infinite;
    }

    @keyframes glitch {
      0%, 100% { text-shadow: 2px 2px 0 #FF2E93, -2px -2px 0 #00FFC6; }
      25% { text-shadow: -2px 2px 0 #3F88FF, 2px -2px 0 #FF2E93; }
      50% { text-shadow: 2px -2px 0 #00FFC6, -2px 2px 0 #7C3AED; }
      75% { text-shadow: -2px -2px 0 #FF2E93, 2px 2px 0 #3F88FF; }
    }
  </style>
</head>
<body>
  <div class="app-container">
    <div id="welcome-screen" class="screen active">
        <h1>Welcome to Pizzaface</h1>
        <p>Track your weekly habits and avoid becoming a pizza zombie!</p>
        <button onclick="showNewUserScreen()">New User</button>
        <button onclick="showReturningUserScreen()">Returning User</button>
    </div>
    
    <div id="new-user-screen" class="screen">
        <h1>New User</h1>
        <div id="new-user-info"></div>
        <button onclick="registerNewUser()">Register & Enter App</button>
        <button onclick="showScreen('welcome-screen')">Back</button>
    </div>
    
    <div id="returning-user-screen" class="screen">
        <h1>Returning User</h1>
        <select id="user-label-select">
            <option>Select User</option>
        </select>
        <input type="text" id="returning-passcode" placeholder="Enter 4-digit passcode" maxlength="4">
        <button onclick="loginReturningUser()">Login</button>
        <button onclick="showScreen('welcome-screen')">Back</button>
    </div>
    
    <div id="main-screen" class="screen">
        <h1>Pizzaface Tracker</h1>
        <div id="user-status">Welcome, <span id="current-user-label"></span>!</div>
        <div id="app-content">
          <div class="data-grid" id="habit-grid">
            <!-- Weekly habit cards will be populated here -->
          </div>
          <button onclick="evaluateWeek()">Evaluate Week</button>
        </div>
        <button onclick="showScreen('welcome-screen')">Leave App</button>
    </div>
  </div>

  <div class="floating-emoji" style="top: 5%; left: 2%;" data-value="2">üçï</div>
  <div class="floating-emoji" style="top: 5%; right: 2%;" data-value="3">üåô</div>
  <div class="floating-emoji" style="bottom: 5%; left: 2%;" data-value="1">üçµ</div>
  <div class="floating-emoji" style="bottom: 5%; right: 2%;" data-value="4">üßü</div>

  <script>
    const supabase = window.supabase.createClient(
      'https://tqniseocczttrfwtpbdr.supabase.co', 
      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRxbmlzZW9jY3p0dHJmd3RwYmRyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg4ODI5MjIsImV4cCI6MjA2NDQ1ODkyMn0.mwb33p0xIEXy5F7ZoLc1j9-4ZNk3FuT4zrR0aTdm350'
    );

    const APP_ID = 'test1';
    const USER_LABELS = ['user1üéØ', 'user2‚ö°', 'user3üåü', 'user4üî•', 'user5üíé'];

    let currentUser = null;

    async function generateNewUser() {
      const { data: existingUsers } = await supabase
        .from('wtaf_zero_admin_collaborative')
        .select('participant_data')
        .eq('app_id', APP_ID)
        .eq('action_type', 'join');
      
      const usedLabels = existingUsers?.map(u => u.participant_data?.userLabel).filter(Boolean) || [];
      
      if (usedLabels.length >= 5) {
        alert('SQUAD\'S FULL, TRY ANOTHER DIMENSION üö´');
        return false;
      }
      
      const availableLabel = USER_LABELS.find(label => !usedLabels.includes(label));
      if (!availableLabel) {
        alert('NO MORE ROOM IN THIS CHAOS REALM üåÄ');
        return false;
      }
      
      const code = Math.floor(1000 + Math.random() * 9000).toString();
      currentUser = {
        userLabel: availableLabel,
        passcode: code,
        participantId: availableLabel + '_' + code
      };
      
      document.getElementById('new-user-info').innerHTML = 
        `<strong>YOUR LABEL:</strong> ${currentUser.userLabel}<br><strong>SECRET DIGITS:</strong> ${currentUser.passcode}<br><em>SCREENSHOT THIS OR CRY LATER üì∏</em>`;
      
      return true;
    }

    async function registerNewUser() {
      if (!currentUser) {
        alert('GENERATE YOUR IDENTITY FIRST, CHAOS AGENT üé≠');
        return;
      }
      
      try {
        await supabase.from('wtaf_zero_admin_collaborative').insert({
          app_id: APP_ID,
          participant_id: currentUser.participantId,
          action_type: 'join',
          participant_data: {
            userLabel: currentUser.userLabel,
            passcode: currentUser.passcode,
            join_time: Date.now()
          },
          content_data: { message: 'Joined the app', timestamp: Date.now() }
        });
        
        enterMainScreen();
      } catch (error) {
        console.error('Registration error:', error);
        alert('REGISTRATION EXPLODED, TRY AGAIN üí•');
      }
    }

    async function showNewUserScreen() {
      showScreen('new-user-screen');
      const success = await generateNewUser();
      if (!success) {
        showScreen('welcome-screen');
      }
    }

    async function loginReturningUser() {
      const selectedLabel = document.getElementById('user-label-select').value;
      const enteredPasscode = document.getElementById('returning-passcode').value.trim();
      
      if (!selectedLabel || selectedLabel === 'Select User') {
        alert('PICK YOUR IDENTITY, PHANTOM üëª');
        return;
      }
      
      if (!enteredPasscode || enteredPasscode.length !== 4) {
        alert('4 DIGITS OF CHAOS REQUIRED üî¢');
        return;
      }
      
      try {
        const { data: joinRecords } = await supabase
          .from('wtaf_zero_admin_collaborative')
          .select('*')
          .eq('app_id', APP_ID)
          .eq('action_type', 'join');
        
        const userRecord = joinRecords?.find(record => 
          record.participant_data?.userLabel === selectedLabel && 
          record.participant_data?.passcode === enteredPasscode
        );
        
        if (userRecord) {
          currentUser = {
            userLabel: selectedLabel,
            passcode: enteredPasscode,
            participantId: userRecord.participant_id
          };
          enterMainScreen();
        } else {
          alert('NICE TRY, WRONG VIBES ‚ùå');
        }
      } catch (error) {
        console.error('Login error:', error);
        alert('LOGIN MALFUNCTION, REALITY GLITCHING üåÄ');
      }
    }

    function showScreen(screenId) {
      document.querySelectorAll('.screen').forEach(screen => 
        screen.classList.remove('active'));
      document.getElementById(screenId).classList.add('active');
      
      if (screenId !== 'main-screen') {
        stopPolling();
      }
    }

    function showReturningUserScreen() {
      showScreen('returning-user-screen');
      const userSelect = document.getElementById('user-label-select');
      userSelect.innerHTML = '<option>Select User</option>';
      USER_LABELS.forEach(label => {
        const option = document.createElement('option');
        option.value = label;
        option.textContent = label;
        userSelect.appendChild(option);
      });
    }

    function enterMainScreen() {
      showScreen('main-screen');
      document.getElementById('current-user-label').textContent = currentUser.userLabel;
      startPolling();
      loadLatestData();
    }

    let pollingInterval;

    function startPolling() {
      pollingInterval = setInterval(async () => {
        await loadLatestData();
      }, 2000);
    }

    function stopPolling() {
      if (pollingInterval) {
        clearInterval(pollingInterval);
        pollingInterval = null;
      }
    }

    async function loadLatestData() {
      const { data } = await supabase
        .from('wtaf_zero_admin_collaborative')
        .select('*')
        .eq('app_id', APP_ID)
        .eq('action_type', 'habit_log')
        .order('created_at', { ascending: true });
        
      updateUI(data);
    }

    function updateUI(habitData) {
      const habitGrid = document.getElementById('habit-grid');
      habitGrid.innerHTML = '';
      const habits = ['Pizza', 'Late Night', 'Matcha Latte'];
      
      habits.forEach(habit => {
        const habitCard = document.createElement('div');
        habitCard.className = 'data-card';
        habitCard.innerHTML = `<h3>${habit}</h3>`;
        
        for (let i = 0; i < 7; i++) {
          const dayButton = document.createElement('button');
          dayButton.textContent = `Day ${i+1}`;
          dayButton.onclick = () => toggleHabitSuccess(habit, i);
          habitCard.appendChild(dayButton);
        }
        
        habitGrid.appendChild(habitCard);
      });
    }

    async function toggleHabitSuccess(habit, day) {
      // Handle toggling logic here
      await supabase.from('wtaf_zero_admin_collaborative').insert({
        app_id: APP_ID,
        participant_id: currentUser.participantId,
        action_type: 'habit_log',
        participant_data: {
          userLabel: currentUser.userLabel,
          passcode: currentUser.passcode
        },
        content_data: {
          habit: habit,
          day: day,
          success: true, // Or toggle based on existing data
          timestamp: Date.now()
        }
      });
    }

    async function evaluateWeek() {
      const { data } = await supabase
        .from('wtaf_zero_admin_collaborative')
        .select('*')
        .eq('app_id', APP_ID)
        .eq('action_type', 'habit_log');
      
      const results = { 'Pizza': 0, 'Late Night': 0, 'Matcha Latte': 0 };
      
      data.forEach(log => {
        if (log.participant_id === currentUser.participantId) {
          if (log.content_data.success) {
            results[log.content_data.habit]++;
          }
        }
      });

      const successfulHabits = Object.values(results).filter(count => count >= 5).length;
      
      if (successfulHabits >= 2) {
        alert('YOU EARNED A RIDICULOUS BADGE! üéâ');
      } else {
        alert('OH NO, YOU\'RE A PIZZA ZOMBIE! üßüüçï');
      }
    }

    document.addEventListener('mousemove', (e) => {
      document.querySelectorAll('.floating-emoji').forEach((elem) => {
        const speed = elem.getAttribute('data-value') || 2;
        const x = (e.clientX * speed) / 100;
        const y = (e.clientY * speed) / 100;
        elem.style.transform = `translateX(${x}px) translateY(${y}px)`;
      });
    });

    console.log('üî• Welcome to the WTAF dimension! Type wtaf() in console for secrets...');

    window.wtaf = function() {
      document.body.style.animation = 'rainbow 1s infinite';
      setTimeout(() => {
        document.body.style.animation = '';
        alert('üéâ WTAF MASTER MODE UNLOCKED! You found the secret!');
      }, 3000);
    };
  </script>
</body>
</html>
```