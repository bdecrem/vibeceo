```html
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, user-scalable=no">
    <title>Block Drop</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            background: linear-gradient(135deg, #1a1a2e, #16213e);
            font-family: Arial, sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            overflow: hidden;
            color: white;
            touch-action: none;
        }
        canvas {
            display: block;
            background: #0f3460;
        }
        #controls {
            position: fixed;
            bottom: 0;
            width: 100%;
            height: 120px;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        .d-pad {
            display: grid;
            grid-template-columns: repeat(3, 60px);
            grid-template-rows: repeat(3, 60px);
            gap: 5px;
        }
        .btn {
            width: 60px;
            height: 60px;
            background: rgba(255, 255, 255, 0.2);
            border: 2px solid white;
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            user-select: none;
            cursor: pointer;
        }
        .up { grid-column: 2; grid-row: 1; }
        .left { grid-column: 1; grid-row: 2; }
        .right { grid-column: 3; grid-row: 2; }
        .down { grid-column: 2; grid-row: 3; }
        .center { grid-column: 2; grid-row: 2; }
        #screen {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            background: rgba(15, 52, 96, 0.9);
            z-index: 2000;
        }
        #screen h1 {
            font-size: 48px;
            margin: 0;
            text-align: center;
        }
        #screen p {
            font-size: 20px;
            max-width: 80%;
            text-align: center;
            margin: 20px 0;
        }
        #screen button {
            background: #e94560;
            color: white;
            border: none;
            padding: 15px 40px;
            font-size: 20px;
            border-radius: 30px;
            cursor: pointer;
            margin-top: 20px;
        }
        #scoreDisplay {
            position: absolute;
            top: 20px;
            left: 20px;
            font-size: 24px;
        }
    </style>
</head>
<body>
    <div id="scoreDisplay">Score: 0</div>
    <canvas id="game"></canvas>
    <div id="screen">
        <h1>üß± Block Drop</h1>
        <p>Stack the falling blocks to clear lines. Rotate with ‚Üë, move with ‚Üê ‚Üí, drop with ‚Üì</p>
        <button id="startButton">Start Game</button>
    </div>
    <div id="controls">
        <div class="d-pad">
            <div class="btn up">‚Üë</div>
            <div class="btn left">‚Üê</div>
            <div class="btn center">‚óè</div>
            <div class="btn right">‚Üí</div>
            <div class="btn down">‚Üì</div>
        </div>
    </div>

    <script>
        var canvas = document.getElementById('game');
        var ctx = canvas.getContext('2d');
        var scoreDisplay = document.getElementById('scoreDisplay');
        var startScreen = document.getElementById('screen');
        var startButton = document.getElementById('startButton');

        var dpr = window.devicePixelRatio || 1;
        var controlsHeight = 120;
        var COLS = 10;
        var ROWS = 20;
        var blockSize, offsetX, offsetY;
        var canvasDisplayWidth, canvasDisplayHeight;

        var score = 0;
        var gameOver = false;
        var gameStarted = false;
        var dropInterval = 500;
        var lastTime = 0;
        var dropCounter = 0;

        var board = [];
        for (var i = 0; i < ROWS; i++) {
            board.push(Array(COLS).fill(0));
        }

        var colors = [
            null,
            '#FF0D72', // I
            '#0DC2FF', // J
            '#0DFF72', // L
            '#F538FF', // O
            '#FF8E0D', // S
            '#FFE138', // T
            '#3877FF'  // Z
        ];

        var pieces = [
            [ // I
                [0, 0, 0, 0],
                [1, 1, 1, 1],
                [0, 0, 0, 0],
                [0, 0, 0, 0]
            ],
            [ // J
                [2, 0, 0],
                [2, 2, 2],
                [0, 0, 0]
            ],
            [ // L
                [0, 0, 3],
                [3, 3, 3],
                [0, 0, 0]
            ],
            [ // O
                [4, 4],
                [4, 4]
            ],
            [ // S
                [0, 5, 5],
                [5, 5, 0],
                [0, 0, 0]
            ],
            [ // T
                [0, 6, 0],
                [6, 6, 6],
                [0, 0, 0]
            ],
            [ // Z
                [7, 7, 0],
                [0, 7, 7],
                [0, 0, 0]
            ]
        ];

        var player = {
            pos: {x: 0, y: 0},
            matrix: null,
            score: 0
        };

        function resizeCanvas() {
            canvasDisplayWidth = window.innerWidth;
            canvasDisplayHeight = window.innerHeight - controlsHeight;
            
            blockSize = Math.min(
                Math.floor(canvasDisplayWidth / COLS),
                Math.floor(canvasDisplayHeight / ROWS)
            );
            
            offsetX = (canvasDisplayWidth - (blockSize * COLS)) / 2;
            offsetY = (canvasDisplayHeight - (blockSize * ROWS)) / 2;
            
            canvas.width = canvasDisplayWidth * dpr;
    canvas.height = canvasDisplayHeight * dpr;
    canvas.style.width = canvasDisplayWidth + 'px';
    canvas.style.height = canvasDisplayHeight + 'px';
    ctx.scale(dpr, dpr);
        }

        function createPiece(type) {
            return pieces[type].map(function(row) {
                return row.slice();
            });
        }

        function createRandomPiece() {
            var rand = Math.floor(Math.random() * pieces.length);
            return createPiece(rand);
        }

        function drawMatrix(matrix, offset) {
            matrix.forEach(function(row, y) {
                row.forEach(function(value, x) {
                    if (value !== 0) {
                        ctx.fillStyle = colors[value];
                        ctx.fillRect(
                            offsetX + (x + offset.x) * blockSize,
                            offsetY + (y + offset.y) * blockSize,
                            blockSize,
                            blockSize
                        );
                        ctx.strokeStyle = '#000';
                        ctx.strokeRect(
                            offsetX + (x + offset.x) * blockSize,
                            offsetY + (y + offset.y) * blockSize,
                            blockSize,
                            blockSize
                        );
                    }
                });
            });
        }

        function drawBoard() {
            board.forEach(function(row, y) {
                row.forEach(function(value, x) {
                    if (value !== 0) {
                        ctx.fillStyle = colors[value];
                        ctx.fillRect(
                            offsetX + x * blockSize,
                            offsetY + y * blockSize,
                            blockSize,
                            blockSize
                        );
                        ctx.strokeStyle = '#000';
                        ctx.strokeRect(
                            offsetX + x * blockSize,
                            offsetY + y * blockSize,
                            blockSize,
                            blockSize
                        );
                    }
                });
            });
        }

        function draw() {
            ctx.fillStyle = '#0f3460';
            ctx.fillRect(0, 0, canvasDisplayWidth, canvasDisplayHeight);
            
            drawBoard();
            drawMatrix(player.matrix, player.pos);
        }

        function merge() {
            player.matrix.forEach(function(row, y) {
                row.forEach(function(value, x) {
                    if (value !== 0) {
                        board[y + player.pos.y][x + player.pos.x] = value;
                    }
                });
            });
        }

        function rotate(matrix, dir) {
            for (var y = 0; y < matrix.length; ++y) {
                for (var x = 0; x < y; ++x) {
                    var temp = matrix[y][x];
                    matrix[y][x] = matrix[x][y];
                    matrix[x][y] = temp;
                }
            }

            if (dir > 0) {
                matrix.forEach(function(row) {
                    row.reverse();
                });
            } else {
                matrix.reverse();
            }
        }

        function playerRotate(dir) {
            var pos = player.pos.x;
            var offset = 1;
            rotate(player.matrix, dir);
            
            while (collide()) {
                player.pos.x += offset;
                offset = -(offset + (offset > 0 ? 1 : -1));
                if (offset > player.matrix[0].length) {
                    rotate(player.matrix, -dir);
                    player.pos.x = pos;
                    return;
                }
            }
        }

        function collide() {
            var m = player.matrix;
            var o = player.pos;
            
            for (var y = 0; y < m.length; ++y) {
                for (var x = 0; x < m[y].length; ++x) {
                    if (m[y][x] !== 0 &&
                        (board[y + o.y] &&
                        board[y + o.y][x + o.x]) !== 0) {
                        return true;
                    }
                }
            }
            return false;
        }

        function playerDrop() {
            player.pos.y++;
            if (collide()) {
                player.pos.y--;
                merge();
                playerReset();
                sweep();
                updateScore();
            }
            dropCounter = 0;
        }

        function playerHardDrop() {
            while (!collide()) {
                player.pos.y++;
            }
            player.pos.y--;
            merge();
            playerReset();
            sweep();
            updateScore();
            dropCounter = 0;
        }

        function playerMove(dir) {
            player.pos.x += dir;
            if (collide()) {
                player.pos.x -= dir;
            }
        }

        function playerReset() {
            var piecesCount = pieces.length;
            player.matrix = createRandomPiece();
            player.pos.y = 0;
            player.pos.x = Math.floor(COLS / 2) - Math.floor(player.matrix[0].length / 2);
            
            if (collide()) {
                gameOver = true;
                startScreen.querySelector('h1').textContent = 'Game Over!';
                startScreen.querySelector('p').textContent = 'Final Score: ' + player.score;
                startScreen.querySelector('button').textContent = 'Play Again';
                startScreen.style.display = 'flex';
            }
        }

        function sweep() {
            var linesCleared = 0;
            outer: for (var y = board.length - 1; y >= 0; --y) {
                for (var x = 0; x < board[y].length; ++x) {
                    if (board[y][x] === 0) {
                        continue outer;
                    }
                }

                var row = board.splice(y, 1)[0].fill(0);
                board.unshift(row);
                linesCleared++;
                y++;
            }
            
            if (linesCleared > 0) {
                player.score += linesCleared * 100;
                if (linesCleared === 4) {
                    player.score += 400; // Bonus for tetris
                }
                
                // Increase speed based on score
                dropInterval = Math.max(100, 500 - Math.floor(player.score / 500) * 50);
            }
        }

        function updateScore() {
            scoreDisplay.textContent = 'Score: ' + player.score;
        }

        function update(time) {
            if (!gameStarted) return;
            
            var deltaTime = time - lastTime;
            lastTime = time;
            
            dropCounter += deltaTime;
            if (dropCounter > dropInterval) {
                playerDrop();
            }
            
            draw();
            
            if (!gameOver) {
                requestAnimationFrame(update);
            }
        }

        function resetGame() {
            board = [];
            for (var i = 0; i < ROWS; i++) {
                board.push(Array(COLS).fill(0));
            }
            
            player.score = 0;
            gameOver = false;
            dropInterval = 500;
            updateScore();
            playerReset();
        }

        // Controls
        document.querySelector('.left').addEventListener('click', function() {
            if (gameStarted && !gameOver) playerMove(-1);
        });

        document.querySelector('.right').addEventListener('click', function() {
            if (gameStarted && !gameOver) playerMove(1);
        });

        document.querySelector('.up').addEventListener('click', function() {
            if (gameStarted && !gameOver) playerRotate(1);
        });

        document.querySelector('.down').addEventListener('click', function() {
            if (gameStarted && !gameOver) playerHardDrop();
        });

        document.querySelector('.center').addEventListener('click', function() {
            if (gameStarted && !gameOver) playerRotate(1);
        });

        // Keyboard controls
        document.addEventListener('keydown', function(event) {
            if (!gameStarted || gameOver) return;
            
            switch (event.keyCode) {
                case 37: // left
                    playerMove(-1);
                    break;
                case 39: // right
                    playerMove(1);
                    break;
                case 40: // down
                    playerDrop();
                    break;
                case 38: // up
                    playerRotate(1);
                    break;
                case 32: // space
                    playerHardDrop();
                    break;
            }
        });

        startButton.addEventListener('click', function() {
            gameStarted = true;
            startScreen.style.display = 'none';
            resetGame();
            lastTime = performance.now();
            requestAnimationFrame(update);
        });

        window.addEventListener('resize', function() {
            resizeCanvas();
        });

        resizeCanvas();
        draw();
    </script>
</body>
</html>
```