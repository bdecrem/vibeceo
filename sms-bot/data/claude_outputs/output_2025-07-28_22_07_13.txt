```html
<!DOCTYPE html>
<html>
<head>
    <title>üêç Snake Game</title>
    <meta name="viewport" content="width=device-width, user-scalable=no">
    <style>
        body { 
            margin: 0; 
            padding: 0; 
            background: linear-gradient(135deg, #1a1a2e, #16213e); 
            display: flex; 
            flex-direction: column; 
            align-items: center; 
            justify-content: center; 
            height: 100vh; 
            font-family: sans-serif; 
            color: white; 
            touch-action: none;
            overflow: hidden;
        }
        canvas { 
            display: block; 
            background: #0f3460; 
            border-radius: 8px; 
        }
        #controls { 
            position: fixed; 
            bottom: 0; 
            width: 100%; 
            height: 120px; 
            display: flex; 
            justify-content: center; 
            align-items: center; 
            gap: 20px; 
            background: rgba(0,0,0,0.3); 
            z-index: 1000; 
        }
        .d-pad { 
            display: grid; 
            grid-template-columns: repeat(3, 60px); 
            grid-template-rows: repeat(3, 60px); 
            gap: 5px; 
        }
        .btn { 
            width: 60px; 
            height: 60px; 
            background: rgba(255,255,255,0.2); 
            border: none; 
            border-radius: 10px; 
            color: white; 
            font-size: 24px; 
            display: flex; 
            align-items: center; 
            justify-content: center; 
            cursor: pointer; 
            user-select: none; 
        }
        .up { grid-column: 2; grid-row: 1; }
        .left { grid-column: 1; grid-row: 2; }
        .right { grid-column: 3; grid-row: 2; }
        .down { grid-column: 2; grid-row: 3; }
        .screen { 
            position: absolute; 
            top: 0; 
            left: 0; 
            width: 100%; 
            height: calc(100% - 120px); 
            display: flex; 
            flex-direction: column; 
            justify-content: center; 
            align-items: center; 
            text-align: center; 
            background: rgba(15, 52, 96, 0.9); 
            z-index: 500; 
            border-radius: 8px; 
        }
        h1 { font-size: 48px; margin: 0; }
        p { font-size: 20px; max-width: 80%; }
        button { 
            margin-top: 20px; 
            padding: 12px 30px; 
            font-size: 20px; 
            background: #e94560; 
            border: none; 
            border-radius: 30px; 
            color: white; 
            cursor: pointer; 
        }
        #score { 
            position: absolute; 
            top: 20px; 
            left: 20px; 
            font-size: 24px; 
            z-index: 100; 
        }
    </style>
</head>
<body>
    <div id="score">Length: 3</div>
    <canvas id="game"></canvas>
    
    <div id="intro" class="screen">
        <h1>üêç SLITHER</h1>
        <p>Eat the food and grow long. Don't bite yourself!</p>
        <button id="start">PLAY</button>
    </div>
    
    <div id="end" class="screen" style="display:none;">
        <h1>GAME OVER</h1>
        <p id="final-score">Your length: 3</p>
        <button id="restart">PLAY AGAIN</button>
    </div>
    
    <div id="controls">
        <div class="d-pad">
            <div class="btn up">‚¨ÜÔ∏è</div>
            <div class="btn left">‚¨ÖÔ∏è</div>
            <div class="btn right">‚û°Ô∏è</div>
            <div class="btn down">‚¨áÔ∏è</div>
        </div>
    </div>

    <script>
        var canvas = document.getElementById('game');
        var ctx = canvas.getContext('2d');
        var scoreElement = document.getElementById('score');
        var finalScoreElement = document.getElementById('final-score');
        var introScreen = document.getElementById('intro');
        var endScreen = document.getElementById('end');
        var startButton = document.getElementById('start');
        var restartButton = document.getElementById('restart');
        
        var dpr = window.devicePixelRatio || 1;
        var controlsHeight = 120;
        var width = window.innerWidth;
        var height = window.innerHeight - controlsHeight;
        
        canvas.width = width * dpr;
        canvas.height = height * dpr;
        canvas.style.width = width + 'px';
        canvas.style.height = height + 'px';
        ctx.scale(dpr, dpr);
        
        var gridSize = 20;
        var gridWidth = Math.floor(width / gridSize);
        var gridHeight = Math.floor(height / gridSize);
        
        var snake = [];
        var food = {};
        var direction = 'right';
        var nextDirection = 'right';
        var score = 3;
        var gameSpeed = 120;
        var lastUpdate = 0;
        var gameRunning = false;
        var gameLoop;
        
        function initGame() {
            snake = [
                {x: 5, y: 10},
                {x: 4, y: 10},
                {x: 3, y: 10}
            ];
            direction = 'right';
            nextDirection = 'right';
            score = 3;
            scoreElement.textContent = 'Length: ' + score;
            generateFood();
        }
        
        function generateFood() {
            var newFood;
            var onSnake;
            do {
                onSnake = false;
                newFood = {
                    x: Math.floor(Math.random() * gridWidth),
                    y: Math.floor(Math.random() * gridHeight)
                };
                for (var i = 0; i < snake.length; i++) {
                    if (snake[i].x === newFood.x && snake[i].y === newFood.y) {
                        onSnake = true;
                        break;
                    }
                }
            } while (onSnake);
            food = newFood;
        }
        
        function update() {
            direction = nextDirection;
            
            var head = {x: snake[0].x, y: snake[0].y};
            
            if (direction === 'right') head.x++;
            if (direction === 'left') head.x--;
            if (direction === 'up') head.y--;
            if (direction === 'down') head.y++;
            
            if (head.x < 0 || head.x >= gridWidth || head.y < 0 || head.y >= gridHeight) {
                gameOver();
                return;
            }
            
            for (var i = 0; i < snake.length; i++) {
                if (snake[i].x === head.x && snake[i].y === head.y) {
                    gameOver();
                    return;
                }
            }
            
            snake.unshift(head);
            
            if (head.x === food.x && head.y === food.y) {
                score++;
                scoreElement.textContent = 'Length: ' + score;
                generateFood();
                if (gameSpeed > 60) gameSpeed -= 2;
            } else {
                snake.pop();
            }
        }
        
        function draw() {
            ctx.clearRect(0, 0, width, height);
            
            // Draw snake
            ctx.fillStyle = '#4ecca3';
            for (var i = 0; i < snake.length; i++) {
                ctx.fillRect(
                    snake[i].x * gridSize, 
                    snake[i].y * gridSize, 
                    gridSize - 1, 
                    gridSize - 1
                );
            }
            
            // Draw food
            ctx.fillStyle = '#f8b500';
            ctx.fillRect(
                food.x * gridSize, 
                food.y * gridSize, 
                gridSize - 1, 
                gridSize - 1
            );
        }
        
        function gameStep(timestamp) {
            if (!gameRunning) return;
            
            var elapsed = timestamp - lastUpdate;
            
            if (elapsed > gameSpeed) {
                update();
                draw();
                lastUpdate = timestamp;
            }
            
            gameLoop = requestAnimationFrame(gameStep);
        }
        
        function startGame() {
            introScreen.style.display = 'none';
            endScreen.style.display = 'none';
            initGame();
            gameRunning = true;
            lastUpdate = 0;
            gameLoop = requestAnimationFrame(gameStep);
        }
        
        function gameOver() {
            gameRunning = false;
            cancelAnimationFrame(gameLoop);
            finalScoreElement.textContent = 'Your length: ' + score;
            endScreen.style.display = 'flex';
        }
        
        startButton.addEventListener('click', startGame);
        restartButton.addEventListener('click', startGame);
        
        document.querySelector('.up').addEventListener('click', function() {
            if (direction !== 'down') nextDirection = 'up';
        });
        document.querySelector('.down').addEventListener('click', function() {
            if (direction !== 'up') nextDirection = 'down';
        });
        document.querySelector('.left').addEventListener('click', function() {
            if (direction !== 'right') nextDirection = 'left';
        });
        document.querySelector('.right').addEventListener('click', function() {
            if (direction !== 'left') nextDirection = 'right';
        });
        
        document.addEventListener('keydown', function(e) {
            if (!gameRunning) return;
            if (e.key === 'ArrowUp' && direction !== 'down') nextDirection = 'up';
            if (e.key === 'ArrowDown' && direction !== 'up') nextDirection = 'down';
            if (e.key === 'ArrowLeft' && direction !== 'right') nextDirection = 'left';
            if (e.key === 'ArrowRight' && direction !== 'left') nextDirection = 'right';
        });
        
        window.addEventListener('resize', function() {
            width = window.innerWidth;
            height = window.innerHeight - controlsHeight;
            gridWidth = Math.floor(width / gridSize);
            gridHeight = Math.floor(height / gridSize);
            
            canvas.width = width * dpr;
            canvas.height = height * dpr;
            canvas.style.width = width + 'px';
            canvas.style.height = height + 'px';
            ctx.scale(dpr, dpr);
            
            if (gameRunning) draw();
        });
    </script>
</body>
</html>
```