<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>Language Flash Cards</title>
    <style>
        * { box-sizing: border-box; margin: 0; padding: 0; }
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
            background: #fefef5;
            font-size: 16px;
            line-height: 1.5;
            padding: 20px;
        }
        .app-container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        .screen {
            display: none;
        }
        .screen.active {
            display: block;
        }
        h1, h2 {
            color: #FF4B4B;
            text-transform: uppercase;
            text-align: center;
            margin-bottom: 20px;
        }
        button {
            background: #6ECBFF;
            border: none;
            border-radius: 25px;
            color: white;
            padding: 12px 24px;
            font-size: 16px;
            cursor: pointer;
            min-height: 44px;
            width: 100%;
            margin: 10px 0;
        }
        input, select {
            width: 100%;
            padding: 12px;
            border: 2px solid #6ECBFF;
            border-radius: 8px;
            font-size: 16px;
            margin: 10px 0;
            min-height: 44px;
        }
        .card {
            background: white;
            border: 2px solid #FFD63D;
            border-radius: 12px;
            padding: 20px;
            margin: 20px 0;
            box-shadow: 4px 4px 0 #C9C2F9;
            text-align: center;
            min-height: 200px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            cursor: pointer;
            font-size: 24px;
        }
        .card-controls {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }
        .language-select {
            margin: 20px 0;
            padding: 20px;
            background: white;
            border: 2px solid #FFD63D;
            border-radius: 12px;
            box-shadow: 4px 4px 0 #C9C2F9;
        }
        @media (min-width: 768px) {
            button {
                width: auto;
                margin-right: 10px;
            }
            .card-controls button {
                flex: 1;
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Auth Screens -->
        <div id="welcome-screen" class="screen active">
            <h1>Language Flash Cards üó£Ô∏è</h1>
            <p>Learn new words in any language!</p>
            <button onclick="showNewUserScreen()">New User</button>
            <button onclick="showReturningUserScreen()">Returning User</button>
        </div>
        
        <div id="new-user-screen" class="screen">
            <h1>New User</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Register & Enter</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="returning-user-screen" class="screen">
            <h1>Returning User</h1>
            <select id="user-label-select"></select>
            <input type="text" id="returning-passcode" placeholder="4-digit code" maxlength="4">
            <button onclick="loginReturningUser()">Login</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <!-- Main App Screen -->
        <div id="main-screen" class="screen">
            <div id="user-status">Welcome, <span id="current-user-label"></span>!</div>
            
            <div id="language-setup" class="language-select">
                <h2>Choose Language</h2>
                <select id="language-select">
                    <option value="Spanish">Spanish</option>
                    <option value="French">French</option>
                    <option value="German">German</option>
                    <option value="Italian">Italian</option>
                    <option value="Japanese">Japanese</option>
                </select>
                <button onclick="generateNewWords()">Generate New Words</button>
            </div>

            <div id="flashcard-area">
                <div id="card" class="card" onclick="flipCard()">
                    Click 'Generate New Words' to start!
                </div>
                <div class="card-controls">
                    <button onclick="prevCard()">‚Üê Previous</button>
                    <button onclick="nextCard()">Next ‚Üí</button>
                </div>
            </div>

            <button onclick="showScreen('welcome-screen')">Leave</button>
        </div>
    </div>

    <script>
        let currentUser = null;
        let cards = [];
        let currentCardIndex = 0;
        let isShowingFront = true;

        // Auth Functions
        async function generateNewUser() {
            const slots = await checkAvailableSlots();
            if (slots.isFull) {
                alert('App is full!');
                return false;
            }
            const user = await generateUser();
            if (user?.success) {
                currentUser = user;
                document.getElementById('new-user-info').innerHTML = 
                    `Your ID: ${user.userLabel}<br>Code: ${user.passcode}<br>Save these!`;
                return true;
            }
            return false;
        }

        async function registerNewUser() {
            if (!currentUser) return;
            const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
            if (result?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                enterMainScreen();
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            await generateNewUser();
        }

        async function loginReturningUser() {
            const label = document.getElementById('user-label-select').value;
            const passcode = document.getElementById('returning-passcode').value;
            const result = await authenticateUser(label, passcode);
            if (result?.success) {
                currentUser = { userLabel: label, passcode, participantId: result.user.participantId };
                updateZadAuth(label, result.user.participantId);
                enterMainScreen();
            } else {
                alert('Wrong code!');
            }
        }

        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const slots = await checkAvailableSlots();
            const select = document.getElementById('user-label-select');
            select.innerHTML = '<option>Select User</option>';
            slots.usedLabels.forEach(label => {
                select.innerHTML += `<option>${label}</option>`;
            });
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            loadLatestData();
        }

        // Flashcard Functions
        async function generateNewWords() {
            const language = document.getElementById('language-select').value;
            const prompt = `Generate 10 basic ${language} words with their English translations. Format each line exactly like this example: hola:hello`;
            
            try {
                const response = await generateText(prompt, {
                    systemPrompt: `You are a language teacher. Return ONLY word pairs in the format word:translation, one per line. Use basic, common words. No other text.`,
                    maxTokens: 200
                });

                cards = response.split('\n')
                    .map(line => line.trim())
                    .filter(line => line.includes(':'))
                    .map(line => {
                        const [foreign, english] = line.split(':');
                        return { foreign: foreign.trim(), english: english.trim() };
                    });

                await save('flashcards', {
                    language,
                    cards,
                    timestamp: new Date().toISOString()
                });

                currentCardIndex = 0;
                isShowingFront = true;
                updateCardDisplay();
            } catch (error) {
                alert('Error generating words. Please try again.');
            }
        }

        function updateCardDisplay() {
            if (cards.length === 0) {
                document.getElementById('card').textContent = 'No cards yet! Generate some words first.';
                return;
            }

            const card = cards[currentCardIndex];
            document.getElementById('card').textContent = isShowingFront ? card.foreign : card.english;
        }

        function flipCard() {
            if (cards.length === 0) return;
            isShowingFront = !isShowingFront;
            updateCardDisplay();
        }

        function nextCard() {
            if (cards.length === 0) return;
            currentCardIndex = (currentCardIndex + 1) % cards.length;
            isShowingFront = true;
            updateCardDisplay();
        }

        function prevCard() {
            if (cards.length === 0) return;
            currentCardIndex = (currentCardIndex - 1 + cards.length) % cards.length;
            isShowingFront = true;
            updateCardDisplay();
        }

        async function loadLatestData() {
            const allCards = await load('flashcards');
            const myCards = allCards.filter(c => c.author === getUsername());
            
            if (myCards.length > 0) {
                // Get most recent set
                const latest = myCards.sort((a, b) => 
                    new Date(b.created_at) - new Date(a.created_at)
                )[0];
                
                cards = latest.cards;
                document.getElementById('language-select').value = latest.language;
                currentCardIndex = 0;
                isShowingFront = true;
                updateCardDisplay();
            }
        }

        // Initialize
        initAuth();
    </script>
</body>
</html>