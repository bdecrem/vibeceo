```html
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, user-scalable=no">
    <title>Flappy Emoji</title>
    <style>
        * { margin: 0; padding: 0; touch-action: none; user-select: none; -webkit-user-select: none; }
        body { background: linear-gradient(to bottom, #64b3f4, #c2e59c); font-family: sans-serif; overflow: hidden; }
        canvas { display: block; }
        #game { position: relative; }
        .screen { position: absolute; top: 0; left: 0; width: 100%; height: 100%; display: flex; flex-direction: column; justify-content: center; align-items: center; text-align: center; }
        #titleScreen { background: rgba(0,0,0,0.7); color: white; }
        #gameOverScreen { background: rgba(0,0,0,0.7); color: white; display: none; }
        h1 { font-size: 2.5rem; margin-bottom: 20px; }
        p { font-size: 1.2rem; margin: 10px 0; max-width: 80%; }
        button { background: #4CAF50; color: white; border: none; padding: 15px 30px; font-size: 1.2rem; margin: 20px 0; border-radius: 50px; cursor: pointer; }
        #scoreDisplay { position: absolute; top: 20px; left: 0; width: 100%; text-align: center; font-size: 2rem; color: white; text-shadow: 2px 2px 4px rgba(0,0,0,0.5); }
    </style>
</head>
<body>
    <div id="game">
        <div id="titleScreen" class="screen">
            <h1>üê¶ Flappy Emoji</h1>
            <p>Tap or click to flap! Avoid the pipes!</p>
            <button id="startBtn">Start Game</button>
        </div>
        <div id="gameOverScreen" class="screen">
            <h1>Game Over!</h1>
            <p>Score: <span id="finalScore">0</span></p>
            <button id="restartBtn">Play Again</button>
        </div>
        <div id="scoreDisplay">0</div>
        <canvas id="canvas"></canvas>
    </div>

    <script>
        var canvas = document.getElementById('canvas');
        var ctx = canvas.getContext('2d');
        var titleScreen = document.getElementById('titleScreen');
        var gameOverScreen = document.getElementById('gameOverScreen');
        var startBtn = document.getElementById('startBtn');
        var restartBtn = document.getElementById('restartBtn');
        var scoreDisplay = document.getElementById('scoreDisplay');
        var finalScore = document.getElementById('finalScore');
        
        var controlsHeight = 120;
        var gravity = 0;
        var bird = { x: 0, y: 0, width: 30, height: 30, velocity: 0, jump: -8 };
        var pipes = [];
        var score = 0;
        var gameSpeed = 3;
        var pipeWidth = 60;
        var pipeGap = 150;
        var frameCount = 0;
        var gameRunning = false;
        var lastTime = 0;
        var deltaTime = 0;
        
        function resizeCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight - controlsHeight;
            canvas.style.width = window.innerWidth + 'px';
            canvas.style.height = (window.innerHeight - controlsHeight) + 'px';
            canvas.width *= window.devicePixelRatio;
            canvas.height *= window.devicePixelRatio;
            ctx.scale(window.devicePixelRatio, window.devicePixelRatio);
            
            gravity = canvas.height * 0.0008;
            bird.x = canvas.width / 6;
            bird.y = canvas.height / 2;
        }
        
        window.addEventListener('resize', resizeCanvas);
        resizeCanvas();
        
        function initGame() {
            bird.y = canvas.height / 2;
            bird.velocity = 0;
            pipes = [];
            score = 0;
            frameCount = 0;
            scoreDisplay.textContent = score;
            gameRunning = true;
        }
        
        function flap() {
            if (gameRunning) {
                bird.velocity = bird.jump;
            }
        }
        
        canvas.addEventListener('mousedown', flap);
        canvas.addEventListener('touchstart', function(e) {
            e.preventDefault();
            flap();
        });
        
        startBtn.addEventListener('click', function() {
            titleScreen.style.display = 'none';
            initGame();
        });
        
        restartBtn.addEventListener('click', function() {
            gameOverScreen.style.display = 'none';
            initGame();
        });
        
        function update() {
            if (!gameRunning) return;
            
            bird.velocity += gravity;
            bird.y += bird.velocity;
            
            if (bird.y < 0) {
                bird.y = 0;
                bird.velocity = 0;
            }
            
            if (bird.y + bird.height > canvas.height) {
                gameOver();
                return;
            }
            
            frameCount++;
            if (frameCount % 100 === 0) {
                var pipeHeight = Math.floor(Math.random() * (canvas.height - pipeGap - 50)) + 25;
                pipes.push({
                    x: canvas.width,
                    y: 0,
                    width: pipeWidth,
                    height: pipeHeight,
                    passed: false
                });
                pipes.push({
                    x: canvas.width,
                    y: pipeHeight + pipeGap,
                    width: pipeWidth,
                    height: canvas.height - pipeHeight - pipeGap,
                    passed: false
                });
            }
            
            for (var i = pipes.length - 1; i >= 0; i--) {
                var pipe = pipes[i];
                pipe.x -= gameSpeed;
                
                if (!pipe.passed && pipe.x + pipe.width < bird.x) {
                    pipe.passed = true;
                    score++;
                    scoreDisplay.textContent = score;
                }
                
                if (pipe.x + pipe.width < 0) {
                    pipes.splice(i, 1);
                    continue;
                }
                
                if (checkCollision(bird, pipe)) {
                    gameOver();
                    return;
                }
            }
        }
        
        function checkCollision(rect1, rect2) {
            return rect1.x < rect2.x + rect2.width &&
                   rect1.x + rect1.width > rect2.x &&
                   rect1.y < rect2.y + rect2.height &&
                   rect1.y + rect1.height > rect2.y;
        }
        
        function gameOver() {
            gameRunning = false;
            finalScore.textContent = score;
            gameOverScreen.style.display = 'flex';
        }
        
        function draw() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Draw background
            ctx.fillStyle = '#70c5ce';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // Draw bird
            ctx.font = bird.width + 'px Arial';
            ctx.fillText('üê¶', bird.x - bird.width/2, bird.y + bird.height/2);
            
            // Draw pipes
            ctx.fillStyle = '#2ECC71';
            for (var i = 0; i < pipes.length; i++) {
                var pipe = pipes[i];
                ctx.fillRect(pipe.x, pipe.y, pipe.width, pipe.height);
            }
            
            // Draw ground
            ctx.fillStyle = '#D35400';
            ctx.fillRect(0, canvas.height - 20, canvas.width, 20);
        }
        
        function gameLoop(currentTime) {
            deltaTime = currentTime - lastTime;
            lastTime = currentTime;
            
            update();
            draw();
            
            requestAnimationFrame(gameLoop);
        }
        
        requestAnimationFrame(gameLoop);
    </script>
</body>
</html>
```