<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>WTAF People Tracker</title>
    <style>
        * {
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: #0a0a0a;
            color: #fff;
            margin: 0;
            padding: 10px;
            font-size: 16px;
        }

        .app-container {
            max-width: 800px;
            margin: 0 auto;
            background: #1a1a1a;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 0 40px rgba(0,0,0,0.5);
        }

        h1 {
            font-size: 24px;
            margin: 0 0 20px 0;
            text-transform: uppercase;
            background: linear-gradient(45deg, #ff0066, #00ffff);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            animation: glitch 2s infinite;
        }

        button {
            background: linear-gradient(45deg, #ff0066, #ff00ff);
            color: white;
            border: none;
            padding: 16px 24px;
            border-radius: 6px;
            font-weight: bold;
            cursor: pointer;
            margin: 8px 0;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-size: 16px;
            width: 100%;
            min-height: 44px;
            display: block;
            transform: skew(-5deg);
            box-shadow: 4px 4px 0 #ff00ff;
        }

        button:hover {
            filter: brightness(1.2);
        }

        button:active {
            transform: skew(-5deg) scale(0.98);
        }

        input, textarea {
            background: #2a2a2a;
            border: 2px solid #ff0066;
            color: white;
            padding: 16px;
            border-radius: 6px;
            width: 100%;
            margin: 10px 0;
            font-size: 16px;
            min-height: 44px;
        }

        .screen { display: none; }
        .screen.active { display: block; }

        .person-card {
            background: #2a2a2a;
            padding: 16px;
            margin: 10px 0;
            border-radius: 8px;
            border: 1px solid #ff0066;
        }

        .note {
            background: #1a1a1a;
            padding: 10px;
            margin: 5px 0;
            border-radius: 4px;
            border-left: 3px solid #00ffff;
        }

        .filter-buttons {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }

        .filter-buttons button {
            flex: 1;
        }

        @keyframes glitch {
            0%, 100% { transform: translate(0); }
            20% { transform: translate(-2px, 2px); }
            40% { transform: translate(-2px, -2px); }
            60% { transform: translate(2px, 2px); }
            80% { transform: translate(2px, -2px); }
        }

        @media (min-width: 600px) {
            body { padding: 20px; }
            .app-container { padding: 30px; }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Auth Screens -->
        <div id="welcome-screen" class="screen active">
            <h1>🔥 WTAF People Tracker 🔥</h1>
            <p>Track who needs to see WTAF.me!</p>
            <button onclick="showNewUserScreen()">New User</button>
            <button onclick="showReturningUserScreen()">Returning User</button>
        </div>
        
        <div id="new-user-screen" class="screen">
            <h1>New User</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Register & Enter</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="returning-user-screen" class="screen">
            <h1>Returning User</h1>
            <select id="user-label-select"></select>
            <input type="text" id="returning-passcode" placeholder="4-digit code" maxlength="4">
            <button onclick="loginReturningUser()">Login</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <!-- Main App Screen -->
        <div id="main-screen" class="screen">
            <h1>🔥 WTAF People Tracker 🔥</h1>
            <div id="user-status">Agent: <span id="current-user-label"></span></div>

            <!-- Add New Person Form -->
            <div id="add-person-form">
                <input type="text" id="new-person-name" placeholder="Enter person's name">
                <textarea id="new-person-note" placeholder="Initial note (optional)"></textarea>
                <button onclick="addPerson()">ADD TO MISSION</button>
            </div>

            <!-- Filter Buttons -->
            <div class="filter-buttons">
                <button onclick="setFilter('all')">ALL</button>
                <button onclick="setFilter('contacted')">CONTACTED</button>
                <button onclick="setFilter('pending')">TO CONTACT</button>
            </div>

            <!-- People List -->
            <div id="people-list"></div>

            <button onclick="showScreen('welcome-screen')">EXIT MISSION</button>
        </div>
    </div>

    <script>
        let currentUser = null;
        let currentFilter = 'all';

        // Auth Code
        async function generateNewUser() {
            const slots = await checkAvailableSlots();
            if (slots.isFull) {
                alert('App is full!');
                return false;
            }
            const user = await generateUser();
            if (user?.success) {
                currentUser = user;
                document.getElementById('new-user-info').innerHTML = 
                    `Your ID: ${user.userLabel}<br>Code: ${user.passcode}<br>Save these!`;
                return true;
            }
            return false;
        }

        async function registerNewUser() {
            if (!currentUser) return;
            const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
            if (result?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                enterMainScreen();
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            await generateNewUser();
        }

        async function loginReturningUser() {
            const label = document.getElementById('user-label-select').value;
            const passcode = document.getElementById('returning-passcode').value;
            const result = await authenticateUser(label, passcode);
            if (result?.success) {
                currentUser = { userLabel: label, passcode, participantId: result.user.participantId };
                updateZadAuth(label, result.user.participantId);
                enterMainScreen();
            } else {
                alert('Wrong code!');
            }
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            if (screenId !== 'main-screen') stopPolling();
        }

        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const slots = await checkAvailableSlots();
            const select = document.getElementById('user-label-select');
            select.innerHTML = '<option>Select User</option>';
            slots.usedLabels.forEach(label => {
                select.innerHTML += `<option>${label}</option>`;
            });
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            startPolling();
            loadLatestData();
        }

        // App-specific functions
        async function addPerson() {
            const name = document.getElementById('new-person-name').value.trim();
            const note = document.getElementById('new-person-note').value.trim();
            
            if (!name) return;

            await save('person', {
                name,
                contacted: false,
                created_at: new Date().toISOString()
            });

            if (note) {
                await save('note', {
                    person_name: name,
                    text: note,
                    created_at: new Date().toISOString()
                });
            }

            document.getElementById('new-person-name').value = '';
            document.getElementById('new-person-note').value = '';
            await loadLatestData();
        }

        async function toggleContacted(name, currentStatus) {
            await save('person', {
                name,
                contacted: !currentStatus,
                created_at: new Date().toISOString()
            });
            await loadLatestData();
        }

        async function addNote(name) {
            const note = prompt('Enter note:');
            if (!note) return;

            await save('note', {
                person_name: name,
                text: note,
                created_at: new Date().toISOString()
            });
            await loadLatestData();
        }

        function setFilter(filter) {
            currentFilter = filter;
            loadLatestData();
        }

        async function loadLatestData() {
            const people = await load('person');
            const notes = await load('note');

            // Get latest status for each person
            const uniquePeople = people.reduce((acc, person) => {
                const existing = acc.find(p => p.name === person.name);
                if (!existing || new Date(person.created_at) > new Date(existing.created_at)) {
                    if (existing) {
                        const index = acc.indexOf(existing);
                        acc[index] = person;
                    } else {
                        acc.push(person);
                    }
                }
                return acc;
            }, []);

            // Apply filter
            let filteredPeople = uniquePeople;
            if (currentFilter === 'contacted') {
                filteredPeople = uniquePeople.filter(p => p.contacted);
            } else if (currentFilter === 'pending') {
                filteredPeople = uniquePeople.filter(p => !p.contacted);
            }

            // Sort by creation date
            filteredPeople.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));

            const html = filteredPeople.map(person => {
                const personNotes = notes
                    .filter(n => n.person_name === person.name)
                    .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));

                const notesHtml = personNotes.map(note => `
                    <div class="note">
                        <div>${note.text}</div>
                        <small>${new Date(note.created_at).toLocaleString()}</small>
                    </div>
                `).join('');

                return `
                    <div class="person-card">
                        <h3>${person.name}</h3>
                        <button onclick="toggleContacted('${person.name}', ${person.contacted})">
                            ${person.contacted ? '✅ CONTACTED!' : '⚡ MARK CONTACTED'}
                        </button>
                        <button onclick="addNote('${person.name}')">📝 ADD NOTE</button>
                        ${notesHtml}
                    </div>
                `;
            }).join('');

            document.getElementById('people-list').innerHTML = html;
        }

        // Polling setup
        let pollingInterval;

        function startPolling() {
            pollingInterval = setInterval(() => loadLatestData(), 2000);
        }

        function stopPolling() {
            if (pollingInterval) clearInterval(pollingInterval);
        }

        initAuth();
    </script>
</body>
</html>