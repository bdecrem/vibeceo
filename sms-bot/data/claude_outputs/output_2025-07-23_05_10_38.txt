<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>AI Image Gallery</title>
    <style>
        * {
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: #0a0a0a;
            color: #fff;
            margin: 0;
            padding: 10px;
            font-size: 16px;
        }

        .app-container {
            max-width: 800px;
            margin: 0 auto;
            background: #1a1a1a;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 0 40px rgba(0,0,0,0.5);
        }

        h1 {
            font-size: 24px;
            margin: 0 0 20px 0;
        }

        button {
            background: #ff0066;
            color: white;
            border: none;
            padding: 16px 24px;
            border-radius: 6px;
            font-weight: bold;
            cursor: pointer;
            margin: 8px 0;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-size: 16px;
            width: 100%;
            min-height: 44px;
            display: block;
        }

        button:hover {
            background: #ff3388;
        }

        button:active {
            transform: scale(0.98);
        }

        input, select, textarea {
            background: #2a2a2a;
            border: 1px solid #444;
            color: white;
            padding: 16px;
            border-radius: 6px;
            width: 100%;
            margin: 10px 0;
            font-size: 16px;
            min-height: 44px;
        }

        .screen { display: none; }
        .screen.active { display: block; }

        .gallery {
            display: grid;
            grid-template-columns: 1fr;
            gap: 20px;
            margin-top: 20px;
        }

        .image-card {
            background: #2a2a2a;
            border-radius: 8px;
            padding: 16px;
            position: relative;
        }

        .image-card img {
            width: 100%;
            border-radius: 4px;
            margin-bottom: 10px;
        }

        .image-info {
            font-size: 14px;
            color: #aaa;
        }

        @media (min-width: 600px) {
            body { padding: 20px; }
            .app-container { padding: 30px; }
            
            button {
                width: auto;
                display: inline-block;
                margin: 5px;
            }

            .gallery {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        #generate-form {
            margin: 20px 0;
            padding: 20px;
            background: #2a2a2a;
            border-radius: 8px;
        }

        .loading {
            text-align: center;
            padding: 20px;
            display: none;
        }
    </style>
</head>
<body>
    <div class="app-container">
        <div id="welcome-screen" class="screen active">
            <h1>AI Image Gallery</h1>
            <p>Generate and share AI images with others!</p>
            <button onclick="showNewUserScreen()">New User</button>
            <button onclick="showReturningUserScreen()">Returning User</button>
        </div>
        
        <div id="new-user-screen" class="screen">
            <h1>New User</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Register & Enter</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="returning-user-screen" class="screen">
            <h1>Returning User</h1>
            <select id="user-label-select"></select>
            <input type="text" id="returning-passcode" placeholder="4-digit code" maxlength="4">
            <button onclick="loginReturningUser()">Login</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="main-screen" class="screen">
            <h1>AI Image Gallery</h1>
            <div id="user-status">Welcome, <span id="current-user-label"></span>!</div>
            
            <div id="generate-form">
                <textarea id="image-prompt" placeholder="Describe the image you want to generate..." rows="3"></textarea>
                <select id="style-select">
                    <option value="default">Default Style</option>
                    <option value="artistic">Artistic</option>
                    <option value="photographic">Photographic</option>
                    <option value="cartoon">Cartoon</option>
                </select>
                <button onclick="generateNewImage()">Generate Image</button>
            </div>

            <div class="loading" id="loading-message">
                Generating your image... please wait...
            </div>

            <div id="gallery" class="gallery">
                <!-- Images will be loaded here -->
            </div>
            
            <button onclick="showScreen('welcome-screen')">Leave</button>
        </div>
    </div>

    <script>
        let currentUser = null;
        let isGenerating = false;

        async function generateNewImage() {
            if (isGenerating) return;
            
            const prompt = document.getElementById('image-prompt').value.trim();
            const style = document.getElementById('style-select').value;
            
            if (!prompt) {
                alert('Please enter an image description!');
                return;
            }

            isGenerating = true;
            document.getElementById('loading-message').style.display = 'block';
            
            try {
                const imageUrl = await generateImage(prompt, style);
                await save('gallery_image', {
                    prompt,
                    style,
                    imageUrl,
                    created_at: new Date().toISOString()
                });
                
                document.getElementById('image-prompt').value = '';
                await loadLatestData();
            } catch (error) {
                alert('Failed to generate image. Please try again.');
            } finally {
                isGenerating = false;
                document.getElementById('loading-message').style.display = 'none';
            }
        }

        async function loadLatestData() {
            const images = await load('gallery_image');
            
            // Sort by newest first
            images.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
            
            const gallery = document.getElementById('gallery');
            gallery.innerHTML = images.map(img => `
                <div class="image-card">
                    <img src="${img.imageUrl}" alt="${img.prompt}">
                    <div class="image-info">
                        <strong>${img.prompt}</strong><br>
                        Created by ${img.author}<br>
                        Style: ${img.style}<br>
                        ${new Date(img.created_at).toLocaleString()}
                    </div>
                </div>
            `).join('');
        }

        // Auth code
        async function generateNewUser() {
            const slots = await checkAvailableSlots();
            if (slots.isFull) {
                alert('App is full!');
                return false;
            }
            
            const user = await generateUser();
            if (user?.success) {
                currentUser = user;
                document.getElementById('new-user-info').innerHTML = 
                    `Your ID: ${user.userLabel}<br>Code: ${user.passcode}<br>Save these!`;
                return true;
            }
            return false;
        }

        async function registerNewUser() {
            if (!currentUser) return;
            
            const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
            if (result?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                enterMainScreen();
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            await generateNewUser();
        }

        async function loginReturningUser() {
            const label = document.getElementById('user-label-select').value;
            const passcode = document.getElementById('returning-passcode').value;
            
            const result = await authenticateUser(label, passcode);
            if (result?.success) {
                currentUser = { userLabel: label, passcode, participantId: result.user.participantId };
                updateZadAuth(label, result.user.participantId);
                enterMainScreen();
            } else {
                alert('Wrong code!');
            }
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            if (screenId !== 'main-screen') stopPolling();
        }

        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const slots = await checkAvailableSlots();
            const select = document.getElementById('user-label-select');
            select.innerHTML = '<option>Select User</option>';
            slots.usedLabels.forEach(label => {
                select.innerHTML += `<option>${label}</option>`;
            });
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            startPolling();
            loadLatestData();
        }

        let pollingInterval;

        function startPolling() {
            loadLatestData();
            pollingInterval = setInterval(() => loadLatestData(), 2000);
        }

        function stopPolling() {
            if (pollingInterval) clearInterval(pollingInterval);
        }

        initAuth();
    </script>
</body>
</html>