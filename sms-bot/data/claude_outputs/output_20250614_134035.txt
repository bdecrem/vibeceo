Here's a sophisticated, minimalist take on Tetris with clean aesthetics and smooth animations:

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Elegant Tetris</title>
    <style>
        body {
            margin: 0;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            background: linear-gradient(135deg, #f6f8fd 0%, #e9edf5 100%);
            font-family: 'Inter', sans-serif;
        }

        .game-container {
            position: relative;
            padding: 2rem;
            background: rgba(255, 255, 255, 0.9);
            border-radius: 1.5rem;
            box-shadow: 0 8px 32px rgba(31, 38, 135, 0.1);
            backdrop-filter: blur(4px);
        }

        #game {
            border: 1px solid #e1e5ee;
            border-radius: 4px;
            background: #ffffff;
        }

        .score-display {
            position: absolute;
            top: 2rem;
            right: -180px;
            background: rgba(255, 255, 255, 0.9);
            padding: 1.5rem;
            border-radius: 1rem;
            box-shadow: 0 4px 16px rgba(31, 38, 135, 0.05);
            min-width: 150px;
        }

        .score-label {
            font-size: 0.875rem;
            color: #666;
            margin-bottom: 0.5rem;
        }

        .score {
            font-size: 2rem;
            font-weight: 600;
            color: #333;
        }

        .controls {
            margin-top: 1rem;
            text-align: center;
            color: #666;
            font-size: 0.875rem;
        }

        @media (max-width: 768px) {
            .game-container {
                transform: scale(0.8);
            }
            .score-display {
                position: relative;
                right: 0;
                margin-top: 1rem;
            }
        }
    </style>
</head>
<body>
    <div class="game-container">
        <canvas id="game" width="240" height="400"></canvas>
        <div class="score-display">
            <div class="score-label">SCORE</div>
            <div class="score" id="score">0</div>
        </div>
        <div class="controls">
            ← → to move • ↑ to rotate • ↓ to drop
        </div>
    </div>

<script>
const canvas = document.getElementById('game');
const context = canvas.getContext('2d');
const grid = 20;
const scoreDisplay = document.getElementById('score');

let score = 0;
let tetrominoSequence = [];

// Tetromino colors
const colors = [
    '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4',
    '#FFEEAD', '#D4A5A5', '#9A8194'
];

// Tetromino shapes
const tetrominos = {
    'I': [[0,0,0,0], [1,1,1,1], [0,0,0,0], [0,0,0,0]],
    'J': [[1,0,0], [1,1,1], [0,0,0]],
    'L': [[0,0,1], [1,1,1], [0,0,0]],
    'O': [[1,1], [1,1]],
    'S': [[0,1,1], [1,1,0], [0,0,0]],
    'T': [[0,1,0], [1,1,1], [0,0,0]],
    'Z': [[1,1,0], [0,1,1], [0,0,0]]
};

let count = 0;
let tetromino = getNextTetromino();
let rAF = null;  
let gameOver = false;

const playfield = Array.from({ length: 20 }, () => Array(10).fill(0));

function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

function generateSequence() {
    const sequence = ['I', 'J', 'L', 'O', 'S', 'T', 'Z'];
    while (sequence.length) {
        const rand = getRandomInt(0, sequence.length - 1);
        const name = sequence.splice(rand, 1)[0];
        tetrominoSequence.push(name);
    }
}

function getNextTetromino() {
    if (tetrominoSequence.length === 0) {
        generateSequence();
    }
    
    const name = tetrominoSequence.pop();
    const matrix = tetrominos[name];
    
    const col = playfield[0].length / 2 - Math.ceil(matrix[0].length / 2);
    const row = name === 'I' ? -1 : -2;

    return {
        name: name,
        matrix: matrix,
        row: row,
        col: col
    };
}

function rotate(matrix) {
    const N = matrix.length;
    const result = matrix.map((row, i) =>
        row.map((val, j) => matrix[N - 1 - j][i])
    );
    return result;
}

function isValidMove(matrix, cellRow, cellCol) {
    for (let row = 0; row < matrix.length; row++) {
        for (let col = 0; col < matrix[row].length; col++) {
            if (matrix[row][col] && (
                cellCol + col < 0 ||
                cellCol + col >= playfield[0].length ||
                cellRow + row >= playfield.length ||
                playfield[cellRow + row][cellCol + col])
                ) {
                return false;
            }
        }
    }
    return true;
}

function placeTetromino() {
    for (let row = 0; row < tetromino.matrix.length; row++) {
        for (let col = 0; col < tetromino.matrix[row].length; col++) {
            if (tetromino.matrix[row][col]) {
                if (tetromino.row + row < 0) {
                    return showGameOver();
                }
                playfield[tetromino.row + row][tetromino.col + col] = tetromino.name;
            }
        }
    }

    // Check for line clears
    for (let row = playfield.length - 1; row >= 0; ) {
        if (playfield[row].every(cell => !!cell)) {
            for (let r = row; r >= 0; r--) {
                playfield[r] = playfield[r-1];
            }
            playfield[0] = Array(10).fill(0);
            score += 100;
            scoreDisplay.textContent = score;
        }
        else {
            row--;
        }
    }

    tetromino = getNextTetromino();
}

function showGameOver() {
    cancelAnimationFrame(rAF);
    gameOver = true;
    context.fillStyle = 'rgba(0, 0, 0, 0.5)';
    context.fillRect(0, 0, canvas.width, canvas.height);
    context.fillStyle = '#fff';
    context.font = '2rem Arial';
    context.textAlign = 'center';
    context.textBaseline = 'middle';
    context.fillText('GAME OVER', canvas.width / 2, canvas.height / 2);
}

function loop() {
    rAF = requestAnimationFrame(loop);
    context.clearRect(0, 0, canvas.width, canvas.height);

    // Draw playfield
    for (let row = 0; row < 20; row++) {
        for (let col = 0; col < 10; col++) {
            if (playfield[row][col]) {
                const name = playfield[row][col];
                context.fillStyle = colors[['I','O','T','S','Z','J','L'].indexOf(name)];
                context.fillRect(col * grid, row * grid, grid-1, grid-1);
            }
        }
    }

    // Draw tetromino
    if (tetromino) {
        if (++count > 35) {
            tetromino.row++;
            count = 0;
            if (!isValidMove(tetromino.matrix, tetromino.row, tetromino.col)) {
                tetromino.row--;
                placeTetromino();
            }
        }

        context.fillStyle = colors[['I','O','T','S','Z','J','L'].indexOf(tetromino.name)];
        for (let row = 0; row < tetromino.matrix.length; row++) {
            for (let col = 0; col < tetromino.matrix[row].length; col++) {
                if (tetromino.matrix[row][col]) {
                    context.fillRect((tetromino.col + col) * grid,
                                   (tetromino.row + row) * grid,
                                   grid-1, grid-1);
                }
            }
        }
    }
}

document.addEventListener('keydown', function(e) {
    if (gameOver) return;

    if (e.key === 'ArrowLeft' || e.key === 'ArrowRight') {
        const col = e.key === 'ArrowLeft'
            ? tetromino.col - 1
            : tetromino.col + 1;

        if (isValidMove(tetromino.matrix, tetromino.row, col)) {
            tetromino.col = col;
        }
    }

    if (e.key === 'ArrowUp') {
        const matrix = rotate(tetromino.matrix);
        if (isValidMove(matrix, tetromino.row, tetromino.col)) {
            tetromino.matrix = matrix;
        }
    }

    if(e.key === 'ArrowDown') {
        const row = tetromino.row + 1;
        if (!isValidMove(tetromino.matrix, row, tetromino.col)) {
            tetromino.row = row - 1;
            placeTetromino();
            return;
        }
        tetromino.row = row;
    }
});

// Touch controls for mobile
let touchStartX = null;
let touchStartY = null;

canvas.addEventListener('touchstart', function(e) {
    touchStartX = e.touches[0].clientX;
    touchStartY = e.touches[0].clientY;
    e.preventDefault();
});

canvas.addEventListener('touchmove', function(e) {
    if (!touchStartX || !touchStartY) return;

    const touchEndX = e.touches[0].clientX;
    const touchEndY = e.touches[0].clientY;
    
    const diffX = touchStartX - touchEndX;
    const diffY = touchStartY - touchEndY;

    if (Math.abs(diffX) > Math.abs(diffY)) {
        // Horizontal swipe
        if (diffX > 0) {
            // Swipe left
            if (isValidMove(tetromino.matrix, tetromino.row, tetromino.col - 1)) {
                tetromino.col -= 1;
            }
        } else {
            // Swipe right
            if (isValidMove(tetromino.matrix, tetromino.row, tetromino.col + 1)) {
                tetromino.col += 1;
            }
        }
    } else {
        // Vertical swipe
        if (diffY > 0) {
            // Swipe up - rotate
            const matrix = rotate(tetromino.matrix);
            if (isValidMove(matrix, tetromino.row, tetromino.col)) {
                tetromino.matrix = matrix;
            }
        } else {
            // Swipe down - drop
            const row = tetromino.row + 1;
            if (!isValidMove(tetromino.matrix, row, tetromino.col)) {
                tetromino.row = row - 1;
                placeTetromino();
                return;
            }
            tetromino.row = row;
        }
    }

    touchStartX = touchEndX;
    touchStartY = touchEndY;
    e.preventDefault();
});

canvas.addEventListener('touchend', function(e) {
    touchStartX = null;
    touchStartY = null;
    e.preventDefault();
});

rAF = requestAnimationFrame(loop);
</script>
</body>
</html>
```

This version of Tetris features:

1. Clean, minimalist design with a soft color palette
2. Glass morphism effects for the game container and score display
3. Responsive layout that scales for mobile devices
4. Touch controls for mobile play
5. Smooth animations and transitions
6. Professional scoring display
7. Clear control instructions
8. Subtle shadows and borders for depth
9. Full game mechanics including:
   - Piece rotation
   - Line clearing
   - Score tracking
   - Game over state
   - Collision detection
   - Random piece generation

To play:
- Use arrow keys on desktop (←→ to move, ↑ to rotate, ↓ to drop)
- On mobile, swipe left/right to move, up to rotate, down to drop
- Score increases by 100 points for each line cleared
- Game ends when pieces stack to the top

The design uses a modern, professional aesthetic with subtle gradients and glass-like effects while maintaining the classic Tetris gameplay mechanics.