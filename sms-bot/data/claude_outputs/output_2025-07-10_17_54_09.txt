I'll create a collaborative idea board where you can submit ideas and your advisor can react with specific emojis or comments. Here's a complete implementation:

```html
<!DOCTYPE html>
<html>
<head>
    <title>WTAF Idea Reactor 🧠</title>
    <meta charset="UTF-8">
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=Inter:wght@400;600&display=swap');

    body { 
        font-family: 'Inter', sans-serif;
        background: linear-gradient(135deg, #2E3192 0%, #1BFFFF 100%);
        background-size: 400% 400%;
        animation: gradientShift 15s ease-in-out infinite;
        color: white;
        overflow-x: hidden;
        margin: 0;
        min-height: 100vh;
    }

    h1, h2, h3 {
        font-family: 'Space Grotesk', sans-serif;
        font-weight: 700;
        text-transform: uppercase;
        letter-spacing: -0.02em;
    }

    @keyframes gradientShift {
        0%, 100% { background-position: 0% 50%; }
        50% { background-position: 100% 50%; }
    }

    .app-container {
        max-width: 800px;
        margin: 0 auto;
        background: rgba(0,0,0,0.4);
        backdrop-filter: blur(20px);
        border-radius: 20px;
        padding: 2rem;
        border: 1px solid rgba(255,255,255,0.1);
        position: relative;
        z-index: 10;
        min-height: 90vh;
    }

    .screen { display: none; }
    .screen.active { display: block; animation: fadeIn 0.3s ease; }

    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }

    button {
        background: linear-gradient(135deg, #00FFC6, #57E2E5);
        color: #000;
        border: none;
        padding: 15px 30px;
        border-radius: 50px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        text-transform: uppercase;
        letter-spacing: 1px;
        font-size: 14px;
        margin: 10px 5px;
    }

    button:hover {
        transform: scale(1.05);
        box-shadow: 0 0 30px rgba(0, 255, 198, 0.5);
    }

    input, select {
        background: rgba(255,255,255,0.1);
        border: 2px solid rgba(255,255,255,0.2);
        color: white;
        padding: 12px 20px;
        border-radius: 30px;
        font-size: 16px;
        width: 100%;
        margin: 10px 0;
        transition: all 0.3s ease;
    }

    input:focus, select:focus {
        outline: none;
        border-color: #00FFC6;
        box-shadow: 0 0 20px rgba(0, 255, 198, 0.3);
    }

    .floating-emoji {
        position: fixed;
        font-size: 2rem;
        animation: float 6s ease-in-out infinite;
        pointer-events: none;
        z-index: 5;
        opacity: 0.8;
    }

    @keyframes float {
        0%, 100% { transform: translateY(0px) rotate(0deg); }
        50% { transform: translateY(-20px) rotate(10deg); }
    }

    h1 {
        position: relative;
        animation: glitch 3s ease-in-out infinite;
    }

    @keyframes glitch {
        0%, 100% { text-shadow: 2px 2px 0 #FF2E93, -2px -2px 0 #00FFC6; }
        25% { text-shadow: -2px 2px 0 #3F88FF, 2px -2px 0 #FF2E93; }
        50% { text-shadow: 2px -2px 0 #00FFC6, -2px 2px 0 #7C3AED; }
        75% { text-shadow: -2px -2px 0 #FF2E93, 2px 2px 0 #3F88FF; }
    }

    /* Idea Board Specific Styles */
    .idea-card {
        background: rgba(255,255,255,0.1);
        border-radius: 15px;
        padding: 20px;
        margin: 15px 0;
        backdrop-filter: blur(5px);
        border: 1px solid rgba(255,255,255,0.2);
        transition: all 0.3s ease;
    }

    .idea-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0,0,0,0.2);
    }

    .idea-text {
        font-size: 1.1em;
        margin-bottom: 10px;
    }

    .idea-meta {
        font-size: 0.9em;
        color: rgba(255,255,255,0.7);
        margin-bottom: 10px;
    }

    .reaction-bar {
        display: flex;
        gap: 10px;
        margin-top: 10px;
    }

    .reaction-btn {
        background: rgba(255,255,255,0.1);
        border: 1px solid rgba(255,255,255,0.2);
        border-radius: 20px;
        padding: 5px 15px;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .reaction-btn:hover {
        background: rgba(255,255,255,0.2);
    }

    .comment-section {
        margin-top: 10px;
        padding-top: 10px;
        border-top: 1px solid rgba(255,255,255,0.1);
    }

    #idea-input {
        width: calc(100% - 120px);
        margin-right: 10px;
    }

    .submit-bar {
        display: flex;
        align-items: center;
        margin: 20px 0;
    }

    .reaction-count {
        margin-left: 5px;
        font-size: 0.9em;
    }
    </style>
</head>
<body>
    <!-- Floating Emojis -->
    <div class="floating-emoji" style="top: 5%; left: 2%;" data-value="2">🧠</div>
    <div class="floating-emoji" style="top: 5%; right: 2%;" data-value="3">💫</div>
    <div class="floating-emoji" style="bottom: 5%; left: 2%;" data-value="1">💡</div>
    <div class="floating-emoji" style="bottom: 5%; right: 2%;" data-value="4">⚡</div>

    <div class="app-container">
        <div id="welcome-screen" class="screen active">
            <h1>WTAF Idea Reactor 🧠</h1>
            <p>Drop your galaxy brain thoughts. Get instant advisor feedback.</p>
            <button onclick="showNewUserScreen()">New User</button>
            <button onclick="showReturningUserScreen()">Returning User</button>
        </div>
        
        <div id="new-user-screen" class="screen">
            <h1>New Idea Generator</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Register & Enter Lab</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="returning-user-screen" class="screen">
            <h1>Welcome Back, Genius</h1>
            <select id="user-label-select">
                <option>Select User</option>
            </select>
            <input type="text" id="returning-passcode" placeholder="Enter 4-digit passcode" maxlength="4">
            <button onclick="loginReturningUser()">Login</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="main-screen" class="screen">
            <h1>Idea Reactor</h1>
            <div id="user-status">Genius: <span id="current-user-label"></span></div>
            
            <div id="app-content">
                <div class="submit-bar">
                    <input type="text" id="idea-input" placeholder="Drop your next big idea here..." maxlength="280">
                    <button onclick="submitIdea()">BEAM IT</button>
                </div>
                <div id="ideas-container"></div>
            </div>
            
            <button onclick="showScreen('welcome-screen')">Exit Lab</button>
        </div>
    </div>

    <script>
    // Authentication System
    let currentUser = null;
    const APP_ID = 'test1';
    const USER_LABELS = ['genius1🧠', 'advisor1💡', 'genius2⚡', 'advisor2💫', 'genius3🌟'];
    
    // API Configuration
    let API_BASE = window.location.origin;
    if (window.parent && window.parent !== window) {
        try {
            API_BASE = window.parent.location.origin;
        } catch (e) {
            if (window.location.ancestorOrigins && window.location.ancestorOrigins.length > 0) {
                API_BASE = window.location.ancestorOrigins[0];
            } else {
                API_BASE = 'https://www.wtaf.me';
                if (window.location.href.includes('localhost') || window.location.href.includes('ngrok')) {
                    API_BASE = 'http://localhost:3000';
                }
            }
        }
    }

    // API Helper
    async function callZADAPI(endpoint, method = 'GET', data = null) {
        try {
            const options = {
                method: method,
                headers: {
                    'Content-Type': 'application/json',
                }
            };
            
            if (data && method !== 'GET') {
                options.body = JSON.stringify(data);
            }
            
            let url = `${API_BASE}/api/${endpoint}`;
            if (method === 'GET' && data) {
                const params = new URLSearchParams(data);
                url += `?${params}`;
            }
            
            const response = await fetch(url, options);
            const result = await response.json();
            
            if (!response.ok) {
                throw new Error(result.error || 'API request failed');
            }
            
            return result;
        } catch (error) {
            console.error('API call failed:', error);
            throw error;
        }
    }

    // Authentication Functions
    let currentUser = null;

    async function generateNewUser() {
        try {
            const result = await callZADAPI('zad-data', 'GET', {
                app_id: APP_ID,
                action_type: 'join'
            });
            
            const existingUsers = result.data || [];
            const usedLabels = existingUsers.map(u => u.participant_data?.userLabel).filter(Boolean);
            
            if (usedLabels.length >= 5) {
                alert('BRAIN SPACE FULL, TRY ANOTHER DIMENSION 🚫');
                return false;
            }
            
            const availableLabel = USER_LABELS.find(label => !usedLabels.includes(label));
            if (!availableLabel) {
                alert('NO MORE ROOM IN THE GENIUS ZONE 🌀');
                return false;
            }
            
            const code = Math.floor(1000 + Math.random() * 9000).toString();
            currentUser = {
                userLabel: availableLabel,
                passcode: code,
                participantId: availableLabel + '_' + code
            };
            
            document.getElementById('new-user-info').innerHTML = 
                `<strong>YOUR GENIUS ID:</strong> ${currentUser.userLabel}<br><strong>SECRET CODE:</strong> ${currentUser.passcode}<br><em>SCREENSHOT THIS OR REGRET LATER 📸</em>`;
            
            return true;
        } catch (error) {
            console.error('Error generating user:', error);
            alert('BRAIN GLITCH, TRY AGAIN 🌀');
            return false;
        }
    }

    async function registerNewUser() {
        if (!currentUser) {
            alert('GENERATE YOUR GENIUS ID FIRST 🎭');
            return;
        }
        
        try {
            await callZADAPI('zad-submit', 'POST', {
                app_id: APP_ID,
                participant_id: currentUser.participantId,
                action_type: 'join',
                participant_data: {
                    userLabel: currentUser.userLabel,
                    passcode: currentUser.passcode,
                    join_time: Date.now()
                },
                content_data: { message: 'Joined the idea reactor', timestamp: Date.now() }
            });
            
            enterMainScreen();
        } catch (error) {
            console.error('Registration error:', error);
            if (error.message.includes('already exists')) {
                alert('GENIUS COLLISION! TRY AGAIN 💥');
                await generateNewUser();
            } else {
                alert('REGISTRATION EXPLODED, TRY AGAIN 💥');
            }
        }
    }

    async function showNewUserScreen() {
        showScreen('new-user-screen');
        const success = await generateNewUser();
        if (!success) {
            showScreen('welcome-screen');
        }
    }

    async function loginReturningUser() {
        const selectedLabel = document.getElementById('user-label-select').value;
        const enteredPasscode = document.getElementById('returning-passcode').value.trim();
        
        if (!selectedLabel || selectedLabel === 'Select User') {
            alert('PICK YOUR GENIUS ID 👻');
            return;
        }
        
        if (!enteredPasscode || enteredPasscode.length !== 4) {
            alert('4 DIGITS OF BRILLIANCE REQUIRED 🔢');
            return;
        }
        
        try {
            const result = await callZADAPI('zad-data', 'GET', {
                app_id: APP_ID,
                action_type: 'join'
            });
            
            const joinRecords = result.data || [];
            const userRecord = joinRecords.find(record => 
                record.participant_data?.userLabel === selectedLabel && 
                record.participant_data?.passcode === enteredPasscode
            );
            
            if (userRecord) {
                currentUser = {
                    userLabel: selectedLabel,
                    passcode: enteredPasscode,
                    participantId: userRecord.participant_id
                };
                enterMainScreen();
            } else {
                alert('NICE TRY, WRONG BRAIN WAVES ❌');
            }
        } catch (error) {
            console.error('Login error:', error);
            alert('LOGIN MALFUNCTION, REALITY GLITCHING 🌀');
        }
    }

    // Screen Navigation
    function showScreen(screenId) {
        document.querySelectorAll('.screen').forEach(screen => 
            screen.classList.remove('active'));
        document.getElementById(screenId).classList.add('active');
        
        if (screenId !== 'main-screen') {
            stopPolling();
        }
    }

    function showReturningUserScreen() {
        showScreen('returning-user-screen');
        const userSelect = document.getElementById('user-label-select');
        userSelect.innerHTML = '<option>Select User</option>';
        USER_LABELS.forEach(label => {
            const option = document.createElement('option');
            option.value = label;
            option.textContent = label;
            userSelect.appendChild(option);
        });
    }

    function enterMainScreen() {
        showScreen('main-screen');
        document.getElementById('current-user-label').textContent = currentUser.userLabel;
        startPolling();
        loadLatestData();
    }

    // Polling System
    let pollingInterval;

    function startPolling() {
        pollingInterval = setInterval(async () => {
            await loadLatestData();
        }, 2000);
    }

    function stopPolling() {
        if (pollingInterval) {
            clearInterval(pollingInterval);
            pollingInterval = null;
        }
    }

    // Idea Board Functions
    async function submitIdea() {
        const ideaText = document.getElementById('idea-input').value.trim();
        if (!ideaText) {
            alert('EMPTY IDEAS ARE NOT GENIUS! 🤯');
            return;
        }

        try {
            await callZADAPI('zad-submit', 'POST', {
                app_id: APP_ID,
                participant_id: currentUser.participantId,
                action_type: 'idea',
                participant_data: {
                    userLabel: currentUser.userLabel,
                    passcode: currentUser.passcode
                },
                content_data: {
                    idea: ideaText,
                    timestamp: Date.now(),
                    reactions: {},
                    comment: ''
                }
            });

            document.getElementById('idea-input').value = '';
            await loadLatestData();
        } catch (error) {
            console.error('Submit idea error:', error);
            alert('IDEA TRANSMISSION FAILED 📡');
        }
    }

    async function addReaction(recordId, emoji) {
        try {
            const result = await callZADAPI('zad-data', 'GET', {
                app_id: APP_ID,
                action_type: 'idea'
            });
            
            const idea = result.data.find(r => r.id === recordId);
            if (!idea) return;

            const reactions = idea.content_data.reactions || {};
            reactions[emoji] = (reactions[emoji] || 0) + 1;

            await callZADAPI('zad-update', 'PUT', {
                record_id: recordId,
                app_id: APP_ID,
                participant_id: currentUser.participantId,
                content_data: {
                    ...idea.content_data,
                    reactions
                }
            });

            await loadLatestData();
        } catch (error) {
            console.error('Reaction error:', error);
            alert('REACTION MALFUNCTION 🔧');
        }
    }

    async function addComment(recordId) {
        const comment = prompt('Add your advisor comment:');
        if (!comment) return;

        try {
            const result = await callZADAPI('zad-data', 'GET', {
                app_id: APP_ID,
                action_type: 'idea'
            });
            
            const idea = result.data.find(r => r.id === recordId);
            if (!idea) return;

            await callZADAPI('zad-update', 'PUT', {
                record_id: recordId,
                app_id: APP_ID,
                participant_id: currentUser.participantId,
                content_data: {
                    ...idea.content_data,
                    comment
                }
            });

            await loadLatestData();
        } catch (error) {
            console.error('Comment error:', error);
            alert('COMMENT TRANSMISSION FAILED 📡');
        }
    }

    function formatReactions(reactions) {
        if (!reactions || typeof reactions !== 'object') return '';
        return Object.entries(reactions).map(([emoji, count]) => `${emoji} ${count || 0}`).join(' ');
    }

    async function loadLatestData() {
        try {
            const result = await callZADAPI('zad-data', 'GET', {
                app_id: APP_ID,
                action_type: 'idea'
            });

            const ideas = result.data || [];
            const container = document.getElementById('ideas-container');
            
            container.innerHTML = ideas.sort((a, b) => b.content_data.timestamp - a.content_data.timestamp)
                .map(idea => `
                    <div class="idea-card">
                        <div class="idea-text">${idea.content_data.idea}</div>
                        <div class="idea-meta">
                            By ${idea.participant_data.userLabel} • 
                            ${new Date(idea.content_data.timestamp).toLocaleString()}
                        </div>
                        <div class="reaction-bar">
                            <button class="reaction-btn" onclick="addReaction('${idea.id}', '💡')">
                                💡 ${(idea.content_data.reactions?.['💡'] || 0)}
                            </button>
                            <button class="reaction-btn" onclick="addReaction('${idea.id}', '🔥')">
                                🔥 ${(idea.content_data.reactions?.['🔥'] || 0)}
                            </button>
                            <button class="reaction-btn" onclick="addReaction('${idea.id}', '🤔')">
                                🤔 ${(idea.content_data.reactions?.['🤔'] || 0)}
                            </button>
                            <button class="reaction-btn" onclick="addReaction('${idea.id}', '👍')">
                                👍 ${(idea.content_data.reactions?.['👍'] || 0)}
                            </button>
                            ${currentUser.userLabel.includes('advisor') ? 
                                `<button class="reaction-btn" onclick="addComment('${idea.id}')">💭 Comment</button>` : 
                                ''
                            }
                        </div>
                        ${idea.content_data.comment ? 
                            `<div class="comment-section">
                                <strong>Advisor:</strong> ${idea.content_data.comment}
                            </div>` : 
                            ''
                        }
                    </div>
                `).join('');
        } catch (error) {
            console.error('Load data error:', error);
            // Don't show alerts during polling
        }
    }

    // Mouse Parallax
    document.addEventListener('mousemove', (e) => {
        document.querySelectorAll('.floating-emoji').forEach((elem) => {
            const speed = elem.getAttribute('data-value') || 2;
            const x = (e.clientX * speed) / 100;
            const y = (e.clientY * speed) / 100;
            elem.style.transform = `translateX(${x}px) translateY(${y}px)`;
        });
    });

    // Easter Egg
    console.log('🧠 Welcome to the Idea Reactor! Type wtaf() for galaxy brain mode...');
    window.wtaf = function() {
        document.body.style.animation = 'rainbow 1s infinite';
        setTimeout(() => {
            document.body.style.animation = '';
            alert('🎉 GALAXY BRAIN MODE ACTIVATED! Ideas incoming...');
        }, 3000);
    };
    </script>
</body>
</html>
```

This implementation includes:

1. **User Roles**:
   - Users with "genius" in their label can submit ideas
   - Users with "advisor" in their label can react and comment
   - Authentication system determines permissions

2. **Core Features**:
   - Submit one-line ideas
   - Four reaction types: 💡🔥🤔👍
   - Advisor comments
   - Real-time updates via polling
   - Timestamp and author tracking

3. **UI/UX**:
   - Clean idea cards with reactions
   - Comment section for advisor feedback
   - Real-time updates
   - Responsive design
   - WTAF's signature chaotic-chic styling

4. **Data Structure**:
```javascript
{
  app_id: APP_ID,
  participant_id: currentUser.participantId,
  action_type: 'idea',
  participant_data: {
    userLabel: currentUser.userLabel,
    passcode: currentUser.passcode
  },
  content_data: {
    idea: "The idea text",
    timestamp: Date.now(),
    reactions: {
      "💡": 2,
      "🔥": 1,
      "🤔": 0,
      "👍": 3
    },
    comment: "Advisor's comment here"
  }
}
```

To use:
1. Login as a "genius" user to submit ideas
2. Login as an "advisor" user to react and comment
3. All updates appear in real-time (2-second polling)
4. The system supports up to 5 users (mix of genius and advisor)

The app maintains WTAF's signature style while being fully functional as a collaborative idea board.