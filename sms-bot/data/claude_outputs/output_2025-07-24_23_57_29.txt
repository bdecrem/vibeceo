<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>Mini Habit Tracker</title>
    <style>
        * {
            box-sizing: border-box;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
        }

        body {
            margin: 0;
            padding: 0;
            background: #fefef5;
            min-height: 100vh;
            font-size: 16px;
        }

        .app-container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }

        .screen {
            display: none;
        }

        .screen.active {
            display: block;
        }

        h1, h2 {
            color: #FF4B4B;
            text-transform: uppercase;
            text-align: center;
            margin-bottom: 20px;
        }

        button {
            background: #6ECBFF;
            border: none;
            border-radius: 25px;
            color: white;
            padding: 12px 24px;
            font-size: 16px;
            cursor: pointer;
            width: 100%;
            min-height: 44px;
            margin: 10px 0;
            transition: opacity 0.2s;
        }

        button:active {
            opacity: 0.8;
        }

        input, select {
            width: 100%;
            padding: 12px;
            border: 2px solid #6ECBFF;
            border-radius: 8px;
            font-size: 16px;
            margin-bottom: 10px;
            min-height: 44px;
        }

        .card {
            background: white;
            border: 2px solid #FFD63D;
            border-radius: 12px;
            padding: 20px;
            margin: 20px 0;
            box-shadow: 4px 4px 0 #C9C2F9;
        }

        .habit-card {
            background: #B6FFB3;
            border: 2px solid #FFD63D;
            border-radius: 12px;
            padding: 15px;
            margin: 10px 0;
            position: relative;
        }

        .habit-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .streak {
            font-size: 14px;
            color: #FF4B4B;
        }

        .toggle-container {
            display: flex;
            gap: 10px;
        }

        .toggle-btn {
            width: auto;
            padding: 8px 16px;
            font-size: 14px;
        }

        @media (min-width: 768px) {
            button {
                width: auto;
                display: inline-block;
                margin-right: 10px;
            }
            
            .button-container {
                text-align: center;
            }
        }

        #setup-container {
            max-width: 500px;
            margin: 0 auto;
        }

        .emoji-decoration {
            font-size: 24px;
            position: absolute;
            right: 10px;
            top: 10px;
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Auth Screens -->
        <div id="welcome-screen" class="screen active">
            <h1>Mini Habit Tracker âœ¨</h1>
            <p style="text-align: center;">Track up to three daily habits!</p>
            <button onclick="showNewUserScreen()">New User</button>
            <button onclick="showReturningUserScreen()">Returning User</button>
        </div>

        <div id="new-user-screen" class="screen">
            <h1>New User</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Register & Enter</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <div id="returning-user-screen" class="screen">
            <h1>Welcome Back!</h1>
            <select id="user-label-select"></select>
            <input type="text" id="returning-passcode" placeholder="4-digit code" maxlength="4">
            <button onclick="loginReturningUser()">Login</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <!-- Main App Screen -->
        <div id="main-screen" class="screen">
            <div id="user-status">Welcome, <span id="current-user-label"></span>! ðŸŒŸ</div>

            <div id="setup-container" class="card">
                <h2>My Daily Habits</h2>
                <div id="habits-list"></div>
                <div id="add-habit-form" style="display: none;">
                    <input type="text" id="habit-input" placeholder="Enter a new habit" maxlength="50">
                    <button onclick="saveHabit()">Save Habit</button>
                </div>
                <button id="add-habit-btn" onclick="showAddHabitForm()">Add Habit</button>
            </div>

            <div class="button-container">
                <button onclick="showScreen('welcome-screen')">Leave</button>
            </div>
        </div>
    </div>

    <script>
        let currentUser = null;
        let habits = [];

        // Auth code (copied from template)
        async function generateNewUser() {
            const slots = await checkAvailableSlots();
            if (slots.isFull) {
                alert('App is full!');
                return false;
            }
            const user = await generateUser();
            if (user?.success) {
                currentUser = user;
                document.getElementById('new-user-info').innerHTML = 
                    `Your ID: ${user.userLabel}<br>Code: ${user.passcode}<br>Save these!`;
                return true;
            }
            return false;
        }

        async function registerNewUser() {
            if (!currentUser) return;
            const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
            if (result?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                enterMainScreen();
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            await generateNewUser();
        }

        async function loginReturningUser() {
            const label = document.getElementById('user-label-select').value;
            const passcode = document.getElementById('returning-passcode').value;
            const result = await authenticateUser(label, passcode);
            if (result?.success) {
                currentUser = { userLabel: label, passcode, participantId: result.user.participantId };
                updateZadAuth(label, result.user.participantId);
                enterMainScreen();
            } else {
                alert('Wrong code!');
            }
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            if (screenId !== 'main-screen') stopPolling();
        }

        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const slots = await checkAvailableSlots();
            const select = document.getElementById('user-label-select');
            select.innerHTML = '<option>Select User</option>';
            slots.usedLabels.forEach(label => {
                select.innerHTML += `<option>${label}</option>`;
            });
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            startPolling();
            loadLatestData();
        }

        // Polling setup
        let pollingInterval;

        function startPolling() {
            loadLatestData();
            pollingInterval = setInterval(loadLatestData, 2000);
        }

        function stopPolling() {
            if (pollingInterval) clearInterval(pollingInterval);
        }

        // Habit tracking functions
        async function loadLatestData() {
            const allHabits = await load('habit');
            const myHabits = allHabits.filter(h => h.author === getCurrentUser());
            
            // Get latest version of each habit
            habits = myHabits.reduce((acc, habit) => {
                const existing = acc.find(h => h.name === habit.name);
                if (!existing || new Date(habit.created_at) > new Date(existing.created_at)) {
                    if (existing) {
                        const index = acc.indexOf(existing);
                        acc[index] = habit;
                    } else {
                        acc.push(habit);
                    }
                }
                return acc;
            }, []);

            updateUI();
        }

        function updateUI() {
            const habitsList = document.getElementById('habits-list');
            habitsList.innerHTML = '';
            
            habits.forEach(habit => {
                const card = document.createElement('div');
                card.className = 'habit-card';
                card.innerHTML = `
                    <div class="habit-header">
                        <strong>${habit.name}</strong>
                        <span class="streak">ðŸ”¥ ${habit.streak || 0} days</span>
                    </div>
                    <div class="toggle-container">
                        <button class="toggle-btn" onclick="toggleHabit('${habit.name}', true)">
                            Done Today ${habit.completed ? 'âœ…' : 'â¬œ'}
                        </button>
                    </div>
                    <span class="emoji-decoration">ðŸŽ¯</span>
                `;
                habitsList.appendChild(card);
            });

            // Show/hide add habit button based on count
            const addBtn = document.getElementById('add-habit-btn');
            addBtn.style.display = habits.length >= 3 ? 'none' : 'block';
        }

        function showAddHabitForm() {
            document.getElementById('add-habit-form').style.display = 'block';
            document.getElementById('add-habit-btn').style.display = 'none';
        }

        async function saveHabit() {
            const input = document.getElementById('habit-input');
            const habitName = input.value.trim();
            
            if (!habitName) return;
            if (habits.length >= 3) {
                alert('Maximum 3 habits allowed!');
                return;
            }

            await save('habit', {
                name: habitName,
                completed: false,
                streak: 0,
                lastCompleted: null
            });

            input.value = '';
            document.getElementById('add-habit-form').style.display = 'none';
            document.getElementById('add-habit-btn').style.display = 'block';
            
            await loadLatestData();
        }

        async function toggleHabit(habitName, completed) {
            const habit = habits.find(h => h.name === habitName);
            if (!habit) return;

            const today = new Date().toISOString().split('T')[0];
            const lastCompleted = habit.lastCompleted;
            
            let streak = habit.streak || 0;
            if (completed) {
                if (!habit.completed) streak++;
            } else {
                if (lastCompleted === today) streak--;
            }

            await save('habit', {
                name: habitName,
                completed: completed,
                streak: streak,
                lastCompleted: completed ? today : lastCompleted
            });

            await loadLatestData();
        }

        // Initialize
        initAuth();
    </script>
</body>
</html>