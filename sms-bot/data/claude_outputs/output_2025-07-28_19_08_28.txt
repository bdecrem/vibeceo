```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0">
  <title>WTAF Tetris</title>
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body {
      background: linear-gradient(to right, #111, #333);
      color: #fff;
      font-family: sans-serif;
      height: 100vh;
      display: flex;
      flex-direction: column;
      overflow: hidden;
      touch-action: none;
    }
    canvas {
      display: block;
      width: 100%;
      background: #000;
    }
    #controls {
      height: 120px;
      background: rgba(0,0,0,0.5);
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 20px;
      padding: 10px;
    }
    .btn {
      background: #444;
      color: #fff;
      border: none;
      width: 60px;
      height: 60px;
      font-size: 24px;
      border-radius: 10px;
      display: flex;
      justify-content: center;
      align-items: center;
      user-select: none;
    }
    #screen {
      position: absolute;
      top: 0; left: 0; right: 0; bottom: 120px;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      background: rgba(0,0,0,0.8);
      z-index: 10;
      text-align: center;
      padding: 20px;
    }
    #screen h1 { font-size: 36px; margin-bottom: 10px; }
    #screen p { margin-bottom: 20px; }
    #startBtn, #restartBtn {
      background: #f00;
      color: #fff;
      border: none;
      padding: 12px 24px;
      font-size: 18px;
      border-radius: 8px;
      cursor: pointer;
    }
    #scoreDisplay {
      position: absolute;
      top: 10px;
      left: 10px;
      font-size: 20px;
      z-index: 5;
    }
  </style>
</head>
<body>

<canvas id="gameCanvas"></canvas>
<div id="scoreDisplay">Score: 0</div>

<div id="screen">
  <h1>üß± WTAF Tetris</h1>
  <p>Stack the blocks! Clear lines to score. Don't hit the top!</p>
  <button id="startBtn">‚ñ∂Ô∏è Start</button>
</div>

<div id="controls">
  <div class="btn" id="leftBtn">‚¨ÖÔ∏è</div>
  <div class="btn" id="rotateBtn">üîÑ</div>
  <div class="btn" id="rightBtn">‚û°Ô∏è</div>
  <div class="btn" id="downBtn">‚¨áÔ∏è</div>
</div>

<script>
(function() {
  var canvas = document.getElementById('gameCanvas');
  var ctx = canvas.getContext('2d');
  var scoreDisplay = document.getElementById('scoreDisplay');
  var screen = document.getElementById('screen');
  var startBtn = document.getElementById('startBtn');
  var restartBtn = document.createElement('button');
  restartBtn.id = 'restartBtn';
  restartBtn.textContent = 'üîÅ Restart';

  var dpr = window.devicePixelRatio || 1;
  var controlsHeight = 120;

  function resizeCanvas() {
    var width = window.innerWidth;
    var height = window.innerHeight - controlsHeight;
    canvas.width = width * dpr;
    canvas.height = height * dpr;
    canvas.style.width = width + 'px';
    canvas.style.height = height + 'px';
    ctx.scale(dpr, dpr);
  }

  window.addEventListener('resize', resizeCanvas);
  resizeCanvas();

  var COLS = 10;
  var ROWS = 20;
  var blockSize = Math.min(canvas.width, canvas.height) / Math.max(COLS, ROWS);
  blockSize = Math.floor(blockSize / dpr);

  var grid = [];
  var score = 0;
  var dropInterval = 1000;
  var lastTime = 0;
  var dropCounter = 0;

  var colors = [
    null,
    '#FF0D72', // I
    '#0DC2FF', // J
    '#0DFF72', // L
    '#F538FF', // O
    '#FF8E0D', // S
    '#FFE138', // T
    '#3877FF'  // Z
  ];

  var tetrominoes = {
    'I': [
      [0,0,0,0],
      [1,1,1,1],
      [0,0,0,0],
      [0,0,0,0]
    ],
    'J': [
      [2,0,0],
      [2,2,2],
      [0,0,0]
    ],
    'L': [
      [0,0,3],
      [3,3,3],
      [0,0,0]
    ],
    'O': [
      [4,4],
      [4,4]
    ],
    'S': [
      [0,5,5],
      [5,5,0],
      [0,0,0]
    ],
    'T': [
      [0,6,0],
      [6,6,6],
      [0,0,0]
    ],
    'Z': [
      [7,7,0],
      [0,7,7],
      [0,0,0]
    ]
  };

  var pieces = 'IJLOSTZ';
  var player = {
    pos: {x: 0, y: 0},
    matrix: null,
    score: 0
  };

  function createMatrix(w, h) {
    var matrix = [];
    while (h--) {
      matrix.push(new Array(w).fill(0));
    }
    return matrix;
  }

  function createPiece(type) {
    return tetrominoes[type];
  }

  function drawMatrix(matrix, offset) {
    matrix.forEach(function(row, y) {
      row.forEach(function(value, x) {
        if (value !== 0) {
          ctx.fillStyle = colors[value];
          ctx.fillRect(x + offset.x, y + offset.y, 1, 1);
          ctx.strokeStyle = '#000';
          ctx.strokeRect(x + offset.x, y + offset.y, 1, 1);
        }
      });
    });
  }

  function draw() {
    ctx.fillStyle = '#000';
    ctx.fillRect(0, 0, canvas.width/dpr, canvas.height/dpr);

    drawMatrix(grid, {x: 0, y: 0});
    drawMatrix(player.matrix, player.pos);
  }

  function merge(grid, player) {
    player.matrix.forEach(function(row, y) {
      row.forEach(function(value, x) {
        if (value !== 0) {
          grid[y + player.pos.y][x + player.pos.x] = value;
        }
      });
    });
  }

  function rotate(matrix, dir) {
    for (var y = 0; y < matrix.length; ++y) {
      for (var x = 0; x < y; ++x) {
        var temp = matrix[x][y];
        matrix[x][y] = matrix[y][x];
        matrix[y][x] = temp;
      }
    }

    if (dir > 0) {
      matrix.forEach(function(row) { row.reverse(); });
    } else {
      matrix.reverse();
    }
  }

  function playerDrop() {
    player.pos.y++;
    if (collide(grid, player)) {
      player.pos.y--;
      merge(grid, player);
      playerReset();
      sweepRows();
      updateScore();
    }
    dropCounter = 0;
  }

  function playerMove(dir) {
    player.pos.x += dir;
    if (collide(grid, player)) {
      player.pos.x -= dir;
    }
  }

  function playerRotate(dir) {
    var pos = player.pos.x;
    var offset = 1;
    rotate(player.matrix, dir);
    while (collide(grid, player)) {
      player.pos.x += offset;
      offset = -(offset + (offset > 0 ? 1 : -1));
      if (offset > player.matrix[0].length) {
        rotate(player.matrix, -dir);
        player.pos.x = pos;
        return;
      }
    }
  }

  function collide(grid, player) {
    var m = player.matrix;
    var o = player.pos;
    for (var y = 0; y < m.length; ++y) {
      for (var x = 0; x < m[y].length; ++x) {
        if (m[y][x] !== 0 &&
           (grid[y + o.y] &&
            grid[y + o.y][x + o.x]) !== 0) {
          return true;
        }
      }
    }
    return false;
  }

  function playerReset() {
    var pieces = 'IJLOSTZ';
    player.matrix = createPiece(pieces[pieces.length * Math.random() | 0]);
    player.pos.y = 0;
    player.pos.x = (grid[0].length / 2 | 0) -
                   (player.matrix[0].length / 2 | 0);
    if (collide(grid, player)) {
      endGame();
    }
  }

  function sweepRows() {
    var rowCount = 0;
    outer: for (var y = grid.length - 1; y >= 0; --y) {
      for (var x = 0; x < grid[y].length; ++x) {
        if (grid[y][x] === 0) {
          continue outer;
        }
      }

      var row = grid.splice(y, 1)[0].fill(0);
      grid.unshift(row);
      ++y;
      rowCount++;
    }

    if (rowCount > 0) {
      player.score += rowCount * 10;
      dropInterval = Math.max(100, 1000 - (player.score / 100 | 0) * 50);
    }
  }

  function updateScore() {
    scoreDisplay.textContent = 'Score: ' + player.score;
  }

  function update(time) {
    var deltaTime = time - lastTime;
    lastTime = time;

    dropCounter += deltaTime;
    if (dropCounter > dropInterval) {
      playerDrop();
    }

    draw();
    requestAnimationFrame(update);
  }

  function startGame() {
    screen.style.display = 'none';
    grid = createMatrix(COLS, ROWS);
    player.score = 0;
    dropInterval = 1000;
    updateScore();
    playerReset();
    lastTime = 0;
    dropCounter = 0;
    requestAnimationFrame(update);
  }

  function endGame() {
    screen.innerHTML = '<h1>üíÄ Game Over</h1><p>Final Score: ' + player.score + '</p>';
    screen.appendChild(restartBtn);
    screen.style.display = 'flex';
  }

  startBtn.addEventListener('click', startGame);
  restartBtn.addEventListener('click', startGame);

  document.getElementById('leftBtn').addEventListener('click', function() { playerMove(-1); });
  document.getElementById('rightBtn').addEventListener('click', function() { playerMove(1); });
  document.getElementById('rotateBtn').addEventListener('click', function() { playerRotate(1); });
  document.getElementById('downBtn').addEventListener('click', function() { playerDrop(); });

  document.addEventListener('keydown', function(event) {
    if (screen.style.display !== 'none') return;
    if (event.keyCode === 37) { playerMove(-1); }
    else if (event.keyCode === 39) { playerMove(1); }
    else if (event.keyCode === 40) { playerDrop(); }
    else if (event.keyCode === 38) { playerRotate(1); }
  });

  ctx.scale(blockSize, blockSize);
})();
</script>

</body>
</html>
```