<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>Advisor Ideas</title>
    <style>
        * { box-sizing: border-box; }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: #0a0a0a;
            color: #fff;
            margin: 0;
            padding: 10px;
            font-size: 16px;
        }

        .app-container {
            max-width: 800px;
            margin: 0 auto;
            background: #1a1a1a;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 0 40px rgba(0,0,0,0.5);
        }

        h1 {
            font-size: 24px;
            margin: 0 0 20px 0;
        }

        button {
            background: #ff0066;
            color: white;
            border: none;
            padding: 16px 24px;
            border-radius: 6px;
            font-weight: bold;
            cursor: pointer;
            margin: 8px 0;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-size: 16px;
            width: 100%;
            min-height: 44px;
            display: block;
        }

        button:hover { background: #ff3388; }
        button:active { transform: scale(0.98); }

        input, select {
            background: #2a2a2a;
            border: 1px solid #444;
            color: white;
            padding: 16px;
            border-radius: 6px;
            width: 100%;
            margin: 10px 0;
            font-size: 16px;
            min-height: 44px;
        }

        .screen { display: none; }
        .screen.active { display: block; }

        .idea-card {
            background: #2a2a2a;
            padding: 16px;
            margin: 10px 0;
            border-radius: 8px;
            min-height: 60px;
        }

        .idea-text {
            font-size: 18px;
            margin-bottom: 10px;
        }

        .idea-meta {
            color: #888;
            font-size: 14px;
            margin-bottom: 10px;
        }

        .reaction-bar {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }

        .reaction-btn {
            background: #333;
            border: none;
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            cursor: pointer;
            font-size: 20px;
            min-height: 44px;
            width: auto;
            margin: 0;
        }

        .comment-section {
            margin-top: 10px;
            padding-top: 10px;
            border-top: 1px solid #444;
        }

        .comment-input {
            display: flex;
            gap: 10px;
        }

        .comment-input input {
            flex: 1;
            margin: 0;
        }

        .comment-input button {
            width: auto;
            margin: 0;
            padding: 8px 16px;
        }

        @media (min-width: 600px) {
            body { padding: 20px; }
            .app-container { padding: 30px; }
            
            button {
                width: auto;
                display: inline-block;
                margin: 5px;
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <div id="welcome-screen" class="screen active">
            <h1>Advisor Ideas Board</h1>
            <p>Share and discuss ideas with your advisor</p>
            <button onclick="showNewUserScreen()">New User</button>
            <button onclick="showReturningUserScreen()">Returning User</button>
        </div>
        
        <div id="new-user-screen" class="screen">
            <h1>New User</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Register & Enter</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="returning-user-screen" class="screen">
            <h1>Returning User</h1>
            <select id="user-label-select"></select>
            <input type="text" id="returning-passcode" placeholder="4-digit code" maxlength="4">
            <button onclick="loginReturningUser()">Login</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="main-screen" class="screen">
            <h1>Ideas Board</h1>
            <div id="user-status">Welcome, <span id="current-user-label"></span>!</div>
            
            <div id="app-content">
                <div id="idea-input-section">
                    <input type="text" id="new-idea" placeholder="Type your idea here..." maxlength="200">
                    <button onclick="submitIdea()">Share Idea</button>
                </div>
                
                <div id="ideas-list"></div>
            </div>
            
            <button onclick="showScreen('welcome-screen')">Leave</button>
        </div>
    </div>

    <script>
        let currentUser = null;
        let pollingInterval;

        function startPolling() {
            pollingInterval = setInterval(() => loadLatestData(), 2000);
        }

        function stopPolling() {
            if (pollingInterval) clearInterval(pollingInterval);
        }

        async function submitIdea() {
            const input = document.getElementById('new-idea');
            const idea = input.value.trim();
            
            if (idea) {
                await save('idea', {
                    text: idea,
                    reactions: {},
                    comments: []
                });
                
                input.value = '';
                await loadLatestData();
            }
        }

        async function addReaction(ideaId, emoji) {
            const ideas = await load('idea');
            const idea = ideas.find(i => i.id === parseInt(ideaId));
            
            if (idea) {
                const reactions = idea.reactions || {};
                reactions[emoji] = (reactions[emoji] || 0) + 1;
                
                await save('update_task', {
                    taskId: parseInt(ideaId),
                    updates: { reactions }
                });
                
                await loadLatestData();
            }
        }

        async function addComment(ideaId) {
            const input = document.getElementById(`comment-${ideaId}`);
            const comment = input.value.trim();
            
            if (comment) {
                const ideas = await load('idea');
                const idea = ideas.find(i => i.id === parseInt(ideaId));
                
                if (idea) {
                    const comments = idea.comments || [];
                    comments.push({
                        text: comment,
                        author: getCurrentUser().userLabel,
                        timestamp: new Date().toISOString()
                    });
                    
                    await save('update_task', {
                        taskId: parseInt(ideaId),
                        updates: { comments }
                    });
                    
                    input.value = '';
                    await loadLatestData();
                }
            }
        }

        async function loadLatestData() {
            const ideas = await load('idea');
            const sortedIdeas = ideas.sort((a, b) => 
                new Date(b.created_at) - new Date(a.created_at)
            );
            
            const ideasList = document.getElementById('ideas-list');
            ideasList.innerHTML = sortedIdeas.map(idea => `
                <div class="idea-card">
                    <div class="idea-text">${idea.text}</div>
                    <div class="idea-meta">Posted by ${idea.author}</div>
                    
                    <div class="reaction-bar">
                        <button onclick="addReaction(${idea.id}, 'üí°')" class="reaction-btn">
                            üí° ${(idea.reactions?.['üí°'] || 0)}
                        </button>
                        <button onclick="addReaction(${idea.id}, 'üî•')" class="reaction-btn">
                            üî• ${(idea.reactions?.['üî•'] || 0)}
                        </button>
                        <button onclick="addReaction(${idea.id}, 'ü§î')" class="reaction-btn">
                            ü§î ${(idea.reactions?.['ü§î'] || 0)}
                        </button>
                        <button onclick="addReaction(${idea.id}, 'üëç')" class="reaction-btn">
                            üëç ${(idea.reactions?.['üëç'] || 0)}
                        </button>
                    </div>

                    <div class="comment-section">
                        ${(idea.comments || []).map(comment => `
                            <div class="comment">
                                <strong>${comment.author}:</strong> ${comment.text}
                            </div>
                        `).join('')}
                        
                        <div class="comment-input">
                            <input type="text" id="comment-${idea.id}" 
                                placeholder="Add a comment..." maxlength="100">
                            <button onclick="addComment(${idea.id})">Send</button>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        // Auth boilerplate
        async function generateNewUser() {
            const slots = await checkAvailableSlots();
            if (slots.isFull) {
                alert('App is full!');
                return false;
            }
            
            const user = await generateUser();
            if (user?.success) {
                currentUser = user;
                document.getElementById('new-user-info').innerHTML = 
                    `Your ID: ${user.userLabel}<br>Code: ${user.passcode}<br>Save these!`;
                return true;
            }
            return false;
        }

        async function registerNewUser() {
            if (!currentUser) return;
            
            const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
            if (result?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                enterMainScreen();
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            await generateNewUser();
        }

        async function loginReturningUser() {
            const label = document.getElementById('user-label-select').value;
            const passcode = document.getElementById('returning-passcode').value;
            
            const result = await authenticateUser(label, passcode);
            if (result?.success) {
                currentUser = { userLabel: label, passcode, participantId: result.user.participantId };
                updateZadAuth(label, result.user.participantId);
                enterMainScreen();
            } else {
                alert('Wrong code!');
            }
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            if (screenId !== 'main-screen') stopPolling();
        }

        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const slots = await checkAvailableSlots();
            const select = document.getElementById('user-label-select');
            select.innerHTML = '<option>Select User</option>';
            slots.usedLabels.forEach(label => {
                select.innerHTML += `<option>${label}</option>`;
            });
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            startPolling();
            loadLatestData();
        }

        initAuth();
    </script>
</body>
</html>