```html
<!DOCTYPE html>
<html>
<head>
    <title>Snake Game</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <style>
        body {
            margin: 0;
            padding: 0;
            background: linear-gradient(to bottom, #1a1a2e, #16213e);
            font-family: Arial, sans-serif;
            touch-action: none;
            user-select: none;
            -webkit-user-select: none;
            overflow: hidden;
        }
        #gameCanvas {
            display: block;
            margin: 0 auto;
        }
        #controls {
            position: fixed;
            bottom: 0;
            width: 100%;
            height: 120px;
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 20px;
            background: rgba(0, 0, 0, 0.3);
        }
        .d-pad {
            width: 60px;
            height: 60px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 10px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 24px;
            color: white;
            user-select: none;
        }
        #upBtn { position: absolute; top: 10px; }
        #downBtn { position: absolute; bottom: 10px; }
        #leftBtn { position: absolute; left: 10px; }
        #rightBtn { position: absolute; right: 10px; }
        .d-pad-container {
            position: relative;
            width: 180px;
            height: 180px;
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas"></canvas>
    <div id="controls">
        <div class="d-pad-container">
            <div class="d-pad" id="upBtn">‚¨ÜÔ∏è</div>
            <div class="d-pad" id="downBtn">‚¨áÔ∏è</div>
            <div class="d-pad" id="leftBtn">‚¨ÖÔ∏è</div>
            <div class="d-pad" id="rightBtn">‚û°Ô∏è</div>
        </div>
    </div>

    <script>
        var canvas = document.getElementById('gameCanvas');
        var ctx = canvas.getContext('2d');
        var devicePixelRatio = window.devicePixelRatio || 1;
        var controlsHeight = 120;
        
        function resizeCanvas() {
            canvas.width = window.innerWidth * devicePixelRatio;
            canvas.height = (window.innerHeight - controlsHeight) * devicePixelRatio;
            canvas.style.width = window.innerWidth + 'px';
            canvas.style.height = (window.innerHeight - controlsHeight) + 'px';
        }
        
        window.addEventListener('resize', resizeCanvas);
        resizeCanvas();
        
        var gridSize;
        var gridWidth;
        var gridHeight;
        
        function calculateGrid() {
            gridSize = Math.floor(Math.min(canvas.width, canvas.height) / 20);
            gridWidth = Math.floor(canvas.width / gridSize);
            gridHeight = Math.floor(canvas.height / gridSize);
        }
        
        calculateGrid();
        
        var snake = [];
        var food = {};
        var direction = 'right';
        var nextDirection = 'right';
        var score = 0;
        var gameState = 'title'; // title, playing, gameover
        var gameSpeed = 150;
        var lastTime = 0;
        
        var keys = {
            left: false,
            right: false,
            up: false,
            down: false
        };
        
        function initGame() {
            calculateGrid();
            snake = [
                {x: Math.floor(gridWidth/2), y: Math.floor(gridHeight/2)},
                {x: Math.floor(gridWidth/2)-1, y: Math.floor(gridHeight/2)},
                {x: Math.floor(gridWidth/2)-2, y: Math.floor(gridHeight/2)}
            ];
            direction = 'right';
            nextDirection = 'right';
            score = 0;
            spawnFood();
        }
        
        function spawnFood() {
            var newFood;
            var onSnake;
            do {
                onSnake = false;
                newFood = {
                    x: Math.floor(Math.random() * gridWidth),
                    y: Math.floor(Math.random() * gridHeight)
                };
                for (var i = 0; i < snake.length; i++) {
                    if (snake[i].x === newFood.x && snake[i].y === newFood.y) {
                        onSnake = true;
                        break;
                    }
                }
            } while (onSnake);
            food = newFood;
        }
        
        function update() {
            direction = nextDirection;
            
            var head = {x: snake[0].x, y: snake[0].y};
            
            switch(direction) {
                case 'up': head.y--; break;
                case 'down': head.y++; break;
                case 'left': head.x--; break;
                case 'right': head.x++; break;
            }
            
            // Wall collision (wrap around)
            if (head.x < 0) head.x = gridWidth - 1;
            if (head.x >= gridWidth) head.x = 0;
            if (head.y < 0) head.y = gridHeight - 1;
            if (head.y >= gridHeight) head.y = 0;
            
            // Self collision
            for (var i = 0; i < snake.length; i++) {
                if (snake[i].x === head.x && snake[i].y === head.y) {
                    gameState = 'gameover';
                    return;
                }
            }
            
            snake.unshift(head);
            
            // Food collision
            if (head.x === food.x && head.y === food.y) {
                score += 10;
                spawnFood();
            } else {
                snake.pop();
            }
        }
        
        function draw() {
            // Clear canvas
            ctx.fillStyle = '#0f3460';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            if (gameState === 'title') {
                // Draw title
                ctx.fillStyle = 'white';
                ctx.font = (48 * devicePixelRatio) + 'px Arial';
                ctx.textAlign = 'center';
                ctx.fillText('üêç SNAKE GAME üçé', canvas.width/2, canvas.height/2 - 50 * devicePixelRatio);
                ctx.font = (24 * devicePixelRatio) + 'px Arial';
                ctx.fillText('Tap to Start', canvas.width/2, canvas.height/2 + 20 * devicePixelRatio);
                ctx.fillText('Use D-Pad to control', canvas.width/2, canvas.height/2 + 60 * devicePixelRatio);
                return;
            }
            
            if (gameState === 'gameover') {
                // Draw game over
                ctx.fillStyle = 'white';
                ctx.font = (48 * devicePixelRatio) + 'px Arial';
                ctx.textAlign = 'center';
                ctx.fillText('GAME OVER', canvas.width/2, canvas.height/2 - 50 * devicePixelRatio);
                ctx.font = (32 * devicePixelRatio) + 'px Arial';
                ctx.fillText('Score: ' + score, canvas.width/2, canvas.height/2);
                ctx.font = (24 * devicePixelRatio) + 'px Arial';
                ctx.fillText('Tap to Restart', canvas.width/2, canvas.height/2 + 50 * devicePixelRatio);
                return;
            }
            
            // Draw snake
            for (var i = 0; i < snake.length; i++) {
                if (i === 0) {
                    ctx.fillStyle = '#4ecca3'; // Head
                } else {
                    ctx.fillStyle = '#00b894'; // Body
                }
                ctx.fillRect(
                    snake[i].x * gridSize,
                    snake[i].y * gridSize,
                    gridSize - 1,
                    gridSize - 1
                );
            }
            
            // Draw food
            ctx.fillStyle = '#ff6b6b';
            ctx.beginPath();
            ctx.arc(
                food.x * gridSize + gridSize/2,
                food.y * gridSize + gridSize/2,
                gridSize/2 - 1,
                0,
                Math.PI * 2
            );
            ctx.fill();
            
            // Draw score
            ctx.fillStyle = 'white';
            ctx.font = (24 * devicePixelRatio) + 'px Arial';
            ctx.textAlign = 'left';
            ctx.fillText('Score: ' + score, 20 * devicePixelRatio, 40 * devicePixelRatio);
        }
        
        function gameLoop(currentTime) {
            if (gameState === 'playing' && currentTime - lastTime >= gameSpeed) {
                update();
                lastTime = currentTime;
            }
            draw();
            requestAnimationFrame(gameLoop);
        }
        
        function handleCanvasInteraction() {
            if (gameState === 'title') {
                gameState = 'playing';
                initGame();
            } else if (gameState === 'gameover') {
                gameState = 'title';
            }
        }
        
        canvas.addEventListener('click', function() {
            handleCanvasInteraction();
        });
        
        canvas.addEventListener('touchend', function(e) {
            e.preventDefault();
            handleCanvasInteraction();
        });
        
        // Touch controls
        document.getElementById('leftBtn').addEventListener('touchstart', function(e) {
            e.preventDefault();
            if (direction !== 'right') nextDirection = 'left';
        });
        
        document.getElementById('rightBtn').addEventListener('touchstart', function(e) {
            e.preventDefault();
            if (direction !== 'left') nextDirection = 'right';
        });
        
        document.getElementById('upBtn').addEventListener('touchstart', function(e) {
            e.preventDefault();
            if (direction !== 'down') nextDirection = 'up';
        });
        
        document.getElementById('downBtn').addEventListener('touchstart', function(e) {
            e.preventDefault();
            if (direction !== 'up') nextDirection = 'down';
        });
        
        // Keyboard controls
        document.addEventListener('keydown', function(e) {
            switch(e.key) {
                case 'ArrowLeft':
                    if (direction !== 'right') nextDirection = 'left';
                    break;
                case 'ArrowRight':
                    if (direction !== 'left') nextDirection = 'right';
                    break;
                case 'ArrowUp':
                    if (direction !== 'down') nextDirection = 'up';
                    break;
                case 'ArrowDown':
                    if (direction !== 'up') nextDirection = 'down';
                    break;
            }
        });
        
        // Prevent scrolling with arrow keys
        window.addEventListener("keydown", function(e) {
            if(["ArrowUp","ArrowDown","ArrowLeft","ArrowRight"].indexOf(e.code) > -1) {
                e.preventDefault();
            }
        }, false);
        
        requestAnimationFrame(gameLoop);
    </script>
</body>
</html>
```