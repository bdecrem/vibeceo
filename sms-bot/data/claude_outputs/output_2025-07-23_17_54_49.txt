<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>ASCII Critter Wall</title>
    <style>
        * { box-sizing: border-box; }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: #0a0a0a;
            color: #fff;
            margin: 0;
            padding: 10px;
            font-size: 16px;
        }

        .app-container {
            max-width: 800px;
            margin: 0 auto;
            background: #1a1a1a;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 0 40px rgba(0,0,0,0.5);
        }

        h1 {
            font-size: 24px;
            margin: 0 0 20px 0;
            text-align: center;
        }

        button {
            background: #ff0066;
            color: white;
            border: none;
            padding: 16px 24px;
            border-radius: 6px;
            font-weight: bold;
            cursor: pointer;
            margin: 8px 0;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-size: 16px;
            width: 100%;
            min-height: 44px;
            display: block;
        }

        button:hover {
            background: #ff3388;
        }

        button:active {
            transform: scale(0.98);
        }

        input, select {
            background: #2a2a2a;
            border: 1px solid #444;
            color: white;
            padding: 16px;
            border-radius: 6px;
            width: 100%;
            margin: 10px 0;
            font-size: 16px;
            min-height: 44px;
        }

        .screen { display: none; }
        .screen.active { display: block; }

        .critter-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 10px;
            margin: 20px 0;
        }

        .critter-option {
            background: #2a2a2a;
            padding: 10px;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.2s;
            text-align: center;
        }

        .critter-option:hover {
            background: #3a3a3a;
        }

        .critter-option.selected {
            background: #ff0066;
        }

        pre {
            margin: 0;
            font-size: 14px;
            line-height: 1.2;
            white-space: pre;
            font-family: monospace;
        }

        .wall {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }

        .wall-item {
            background: #2a2a2a;
            padding: 10px;
            border-radius: 8px;
            text-align: center;
        }

        .author-label {
            font-size: 12px;
            color: #888;
            margin-top: 5px;
        }

        @media (min-width: 600px) {
            body { padding: 20px; }
            .app-container { padding: 30px; }
            
            button {
                width: auto;
                display: inline-block;
                margin: 5px;
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <div id="welcome-screen" class="screen active">
            <h1>ASCII Critter Wall</h1>
            <p>Choose your favorite critter and add it to our shared wall!</p>
            <button onclick="showNewUserScreen()">New User</button>
            <button onclick="showReturningUserScreen()">Returning User</button>
        </div>
        
        <div id="new-user-screen" class="screen">
            <h1>New User</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Register & Enter</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="returning-user-screen" class="screen">
            <h1>Returning User</h1>
            <select id="user-label-select"></select>
            <input type="text" id="returning-passcode" placeholder="4-digit code" maxlength="4">
            <button onclick="loginReturningUser()">Login</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="main-screen" class="screen">
            <h1>ASCII Critter Wall</h1>
            <div id="user-status">Welcome, <span id="current-user-label"></span>!</div>
            
            <div id="app-content">
                <div class="critter-grid" id="critter-selector"></div>
                <button onclick="addToWall()">Add to Wall</button>
                <div class="wall" id="critter-wall"></div>
            </div>
            
            <button onclick="showScreen('welcome-screen')">Leave</button>
        </div>
    </div>

    <script>
        let currentUser = null;
        let selectedCritter = null;
        
        const CRITTERS = [
            {
                name: "Happy Cat",
                art: ` /\\___/\\
( =^.^=)
 (") (")`
            },
            {
                name: "Shy Ghost",
                art: `  .-.
 (o.o)
 (   )
  \"-\"`
            },
            {
                name: "Curious Frog",
                art: ` /\\___/\\
(  o_o  )
 ( www )`
            },
            {
                name: "Sleepy Bear",
                art: ` _____
(=-w-=)
 (   )
 (\") (")`
            },
            {
                name: "Cool Duck",
                art: `  >o)
 (_>
 ^^^`
            },
            {
                name: "Bunny",
                art: ` () ()
 (^.^)
 c(\")(\")`
            },
            {
                name: "Owl",
                art: ` /\\___/\\
((@v@))
 (   )
  \"-\"`
            },
            {
                name: "Mouse",
                art: `  ,--,
 (o.o)
 (\")_(\"`
            },
            {
                name: "Pig",
                art: `  _____
 ('^.^)
 (    )
  (\")(")`
            }
        ];

        async function generateNewUser() {
            const slots = await checkAvailableSlots();
            if (slots.isFull) {
                alert('App is full!');
                return false;
            }
            
            const user = await generateUser();
            if (user?.success) {
                currentUser = user;
                document.getElementById('new-user-info').innerHTML = 
                    `Your ID: ${user.userLabel}<br>Code: ${user.passcode}<br>Save these!`;
                return true;
            }
            return false;
        }

        async function registerNewUser() {
            if (!currentUser) return;
            
            const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
            if (result?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                enterMainScreen();
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            await generateNewUser();
        }

        async function loginReturningUser() {
            const label = document.getElementById('user-label-select').value;
            const passcode = document.getElementById('returning-passcode').value;
            
            const result = await authenticateUser(label, passcode);
            if (result?.success) {
                currentUser = { userLabel: label, passcode, participantId: result.user.participantId };
                updateZadAuth(label, result.user.participantId);
                enterMainScreen();
            } else {
                alert('Wrong code!');
            }
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            if (screenId !== 'main-screen') stopPolling();
        }

        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const slots = await checkAvailableSlots();
            const select = document.getElementById('user-label-select');
            select.innerHTML = '<option>Select User</option>';
            slots.usedLabels.forEach(label => {
                select.innerHTML += `<option>${label}</option>`;
            });
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            setupCritterSelector();
            startPolling();
            loadLatestData();
        }

        function setupCritterSelector() {
            const grid = document.getElementById('critter-selector');
            grid.innerHTML = CRITTERS.map((critter, index) => `
                <div class="critter-option" onclick="selectCritter(${index})">
                    <pre>${critter.art}</pre>
                    <div>${critter.name}</div>
                </div>
            `).join('');
        }

        function selectCritter(index) {
            selectedCritter = CRITTERS[index];
            document.querySelectorAll('.critter-option').forEach(opt => opt.classList.remove('selected'));
            document.querySelectorAll('.critter-option')[index].classList.add('selected');
        }

        async function addToWall() {
            if (!selectedCritter) {
                alert('Please select a critter first!');
                return;
            }

            await save('critter', {
                name: selectedCritter.name,
                art: selectedCritter.art
            });

            loadLatestData();
        }

        let pollingInterval;

        function startPolling() {
            pollingInterval = setInterval(() => loadLatestData(), 2000);
        }

        function stopPolling() {
            if (pollingInterval) clearInterval(pollingInterval);
        }

        async function loadLatestData() {
            const critters = await load('critter');
            const wall = document.getElementById('critter-wall');
            
            wall.innerHTML = critters.map(critter => `
                <div class="wall-item">
                    <pre>${critter.art}</pre>
                    <div class="author-label">Added by ${critter.author}</div>
                </div>
            `).join('');
        }

        initAuth();
    </script>
</body>
</html>