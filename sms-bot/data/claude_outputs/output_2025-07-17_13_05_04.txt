<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DIGITAL QUILT COLLECTIVE</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=Inter:wght@400;600&display=swap');

        body { 
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #FF61C7 0%, #7C3AED 50%, #3F88FF 100%);
            background-size: 400% 400%;
            animation: gradientShift 15s ease-in-out infinite;
            color: white;
            overflow-x: hidden;
            margin: 0;
            min-height: 100vh;
        }

        h1, h2, h3 {
            font-family: 'Space Grotesk', sans-serif;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: -0.02em;
        }

        @keyframes gradientShift {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }

        .app-container {
            max-width: 800px;
            margin: 0 auto;
            background: rgba(0,0,0,0.4);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            padding: 2rem;
            border: 1px solid rgba(255,255,255,0.1);
            position: relative;
            z-index: 10;
            min-height: 90vh;
        }

        .screen { display: none; }
        .screen.active { display: block; animation: fadeIn 0.3s ease; }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        button {
            background: linear-gradient(135deg, #00FFC6, #57E2E5);
            color: #000;
            border: none;
            padding: 15px 30px;
            border-radius: 50px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-size: 14px;
            margin: 10px 5px;
        }

        button:hover {
            transform: scale(1.05);
            box-shadow: 0 0 30px rgba(0, 255, 198, 0.5);
        }

        input, select {
            background: rgba(255,255,255,0.1);
            border: 2px solid rgba(255,255,255,0.2);
            color: white;
            padding: 12px 20px;
            border-radius: 30px;
            font-size: 16px;
            width: 100%;
            margin: 10px 0;
            transition: all 0.3s ease;
        }

        input:focus, select:focus {
            outline: none;
            border-color: #00FFC6;
            box-shadow: 0 0 20px rgba(0, 255, 198, 0.3);
        }

        .floating-emoji {
            position: fixed;
            font-size: 2rem;
            animation: float 6s ease-in-out infinite;
            pointer-events: none;
            z-index: 5;
            opacity: 0.8;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            50% { transform: translateY(-20px) rotate(10deg); }
        }

        h1 {
            position: relative;
            animation: glitch 3s ease-in-out infinite;
        }

        @keyframes glitch {
            0%, 100% { text-shadow: 2px 2px 0 #FF2E93, -2px -2px 0 #00FFC6; }
            25% { text-shadow: -2px 2px 0 #3F88FF, 2px -2px 0 #FF2E93; }
            50% { text-shadow: 2px -2px 0 #00FFC6, -2px 2px 0 #7C3AED; }
            75% { text-shadow: -2px -2px 0 #FF2E93, 2px 2px 0 #3F88FF; }
        }

        .quilt-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
            gap: 10px;
            padding: 20px;
            max-width: 600px;
            margin: 0 auto;
        }

        .quilt-square {
            aspect-ratio: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2em;
            border-radius: 10px;
            animation: squareAppear 0.5s ease;
            transition: transform 0.3s ease;
        }

        .quilt-square:hover {
            transform: scale(1.1);
        }

        @keyframes squareAppear {
            from { 
                opacity: 0;
                transform: scale(0.5) rotate(-10deg);
            }
            to { 
                opacity: 1;
                transform: scale(1) rotate(0deg);
            }
        }

        .color-picker, .symbol-picker {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(50px, 1fr));
            gap: 10px;
            margin: 20px 0;
        }

        .color-option, .symbol-option {
            padding: 10px;
            border-radius: 5px;
            cursor: pointer;
            text-align: center;
            transition: transform 0.2s ease;
        }

        .color-option:hover, .symbol-option:hover {
            transform: scale(1.1);
        }

        .selected {
            outline: 3px solid #00FFC6;
        }

        #user-status {
            position: absolute;
            top: 20px;
            right: 20px;
            background: rgba(0,0,0,0.3);
            padding: 10px 20px;
            border-radius: 20px;
        }

    </style>
</head>
<body>
    <div class="floating-emoji" style="top: 5%; left: 2%;" data-value="2">🧵</div>
    <div class="floating-emoji" style="top: 5%; right: 2%;" data-value="3">🪡</div>
    <div class="floating-emoji" style="bottom: 5%; left: 2%;" data-value="1">🎨</div>
    <div class="floating-emoji" style="bottom: 5%; right: 2%;" data-value="4">✨</div>

    <div class="app-container">
        <div id="welcome-screen" class="screen active">
            <h1>DIGITAL QUILT COLLECTIVE</h1>
            <p>JOIN THE CHAOTIC QUILT REVOLUTION 🎨</p>
            <button onclick="showNewUserScreen()">New User</button>
            <button onclick="showReturningUserScreen()">Returning User</button>
        </div>
        
        <div id="new-user-screen" class="screen">
            <h1>New Quilter</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Register & Start Quilting</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="returning-user-screen" class="screen">
            <h1>Welcome Back Quilter</h1>
            <select id="user-label-select">
                <option>Select User</option>
            </select>
            <input type="text" id="returning-passcode" placeholder="Enter 4-digit passcode" maxlength="4">
            <button onclick="loginReturningUser()">Login</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="main-screen" class="screen">
            <h1>DIGITAL QUILT COLLECTIVE</h1>
            <div id="user-status">Welcome, <span id="current-user-label"></span>!</div>
            
            <div id="app-content">
                <div class="quilt-grid" id="quilt-grid"></div>
                
                <div id="square-creator" style="margin-top: 20px;">
                    <h2>ADD YOUR SQUARE</h2>
                    <div class="color-picker">
                        <div class="color-option" style="background: #FF0000;" data-color="🟥" onclick="selectColor(this)">🟥</div>
                        <div class="color-option" style="background: #0000FF;" data-color="🟦" onclick="selectColor(this)">🟦</div>
                        <div class="color-option" style="background: #00FF00;" data-color="🟩" onclick="selectColor(this)">🟩</div>
                        <div class="color-option" style="background: #800080;" data-color="🟪" onclick="selectColor(this)">🟪</div>
                        <div class="color-option" style="background: #FFD700;" data-color="🟨" onclick="selectColor(this)">🟨</div>
                    </div>
                    
                    <div class="symbol-picker">
                        <div class="symbol-option" onclick="selectSymbol(this)">🌸</div>
                        <div class="symbol-option" onclick="selectSymbol(this)">⚡</div>
                        <div class="symbol-option" onclick="selectSymbol(this)">💀</div>
                        <div class="symbol-option" onclick="selectSymbol(this)">🔥</div>
                        <div class="symbol-option" onclick="selectSymbol(this)">💫</div>
                        <div class="symbol-option" onclick="selectSymbol(this)">🦋</div>
                        <div class="symbol-option" onclick="selectSymbol(this)">🌈</div>
                        <div class="symbol-option" onclick="selectSymbol(this)">💎</div>
                    </div>
                    
                    <button onclick="addSquare()">ADD TO QUILT</button>
                </div>
            </div>
            
            <button onclick="leaveApp()">Leave Quilt</button>
        </div>
    </div>

    <script>
        let currentUser = null;
        let selectedColor = null;
        let selectedSymbol = null;
        let pollingInterval;

        async function generateNewUser() {
            try {
                const slots = await checkAvailableSlots();
                
                if (slots.isFull) {
                    alert('QUILT CIRCLE IS FULL, TRY ANOTHER DIMENSION 🧵');
                    return false;
                }
                
                const user = await generateUser();
                if (user && user.success) {
                    currentUser = {
                        userLabel: user.userLabel,
                        passcode: user.passcode,
                        participantId: user.participantId
                    };
                    
                    document.getElementById('new-user-info').innerHTML = 
                        `<strong>YOUR QUILTER TAG:</strong> ${currentUser.userLabel}<br><strong>SECRET DIGITS:</strong> ${currentUser.passcode}<br><em>SCREENSHOT THIS OR LOSE YOUR QUILT FOREVER 📸</em>`;
                    
                    return true;
                } else {
                    alert('NO MORE ROOM IN THIS QUILT CIRCLE 🎭');
                    return false;
                }
            } catch (error) {
                console.error('User generation error:', error);
                alert('GENERATION EXPLODED, TRY AGAIN 💥');
                return false;
            }
        }

        async function registerNewUser() {
            if (!currentUser) {
                alert('GENERATE YOUR QUILTER IDENTITY FIRST 🎨');
                return;
            }
            
            try {
                const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
                if (result && result.success) {
                    updateZadAuth(currentUser.userLabel, currentUser.participantId);
                    enterMainScreen();
                } else {
                    alert('REGISTRATION FAILED, TRY AGAIN 🌀');
                }
            } catch (error) {
                console.error('Registration error:', error);
                alert('REGISTRATION EXPLODED, TRY AGAIN 💥');
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            const success = await generateNewUser();
            if (!success) {
                showScreen('welcome-screen');
            }
        }

        async function loginReturningUser() {
            const selectedLabel = document.getElementById('user-label-select').value;
            const enteredPasscode = document.getElementById('returning-passcode').value.trim();
            
            if (!selectedLabel || selectedLabel === 'Select User') {
                alert('PICK YOUR QUILTER TAG 🎨');
                return;
            }
            
            if (!enteredPasscode || enteredPasscode.length !== 4) {
                alert('4 DIGITS OF QUILT MAGIC REQUIRED 🔢');
                return;
            }
            
            try {
                const result = await authenticateUser(selectedLabel, enteredPasscode);
                if (result && result.success) {
                    currentUser = {
                        userLabel: selectedLabel,
                        passcode: enteredPasscode,
                        participantId: result.user.participantId
                    };
                    updateZadAuth(currentUser.userLabel, currentUser.participantId);
                    enterMainScreen();
                } else {
                    alert('WRONG QUILT CREDENTIALS ❌');
                }
            } catch (error) {
                console.error('Login error:', error);
                alert('LOGIN MALFUNCTION 🌀');
            }
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(screen => 
                screen.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            
            if (screenId !== 'main-screen') {
                stopPolling();
            }
        }

        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            
            try {
                const slots = await checkAvailableSlots();
                const userSelect = document.getElementById('user-label-select');
                userSelect.innerHTML = '<option>Select User</option>';
                
                slots.usedLabels.forEach(label => {
                    const option = document.createElement('option');
                    option.value = label;
                    option.textContent = label;
                    userSelect.appendChild(option);
                });
                
                if (slots.usedLabels.length === 0) {
                    userSelect.innerHTML = '<option>No quilters yet</option>';
                }
            } catch (error) {
                console.error('Error loading users:', error);
                const userSelect = document.getElementById('user-label-select');
                userSelect.innerHTML = '<option>Error loading quilters</option>';
            }
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            startPolling();
            loadLatestData();
        }

        function startPolling() {
            pollingInterval = setInterval(loadLatestData, 2000);
        }

        function stopPolling() {
            if (pollingInterval) {
                clearInterval(pollingInterval);
                pollingInterval = null;
            }
        }

        function selectColor(element) {
            document.querySelectorAll('.color-option').forEach(opt => opt.classList.remove('selected'));
            element.classList.add('selected');
            selectedColor = element.dataset.color;
        }

        function selectSymbol(element) {
            document.querySelectorAll('.symbol-option').forEach(opt => opt.classList.remove('selected'));
            element.classList.add('selected');
            selectedSymbol = element.textContent;
        }

        async function addSquare() {
            if (!selectedColor || !selectedSymbol) {
                alert('PICK BOTH COLOR AND SYMBOL 🎨');
                return;
            }

            try {
                const squares = await load('quilt_square');
                const existingSquare = squares.find(s => s.user_id === currentUser.participantId);
                
                if (existingSquare) {
                    alert('YOU ALREADY ADDED YOUR SQUARE TO THIS QUILT 🎭');
                    return;
                }

                await save('quilt_square', {
                    user_id: currentUser.participantId,
                    user_label: currentUser.userLabel,
                    color: selectedColor,
                    symbol: selectedSymbol,
                    timestamp: Date.now()
                });

                loadLatestData();
            } catch (error) {
                console.error('Error adding square:', error);
                alert('FAILED TO ADD SQUARE 💥');
            }
        }

        async function loadLatestData() {
            try {
                const squares = await load('quilt_square');
                const grid = document.getElementById('quilt-grid');
                
                grid.innerHTML = '';
                squares.sort((a, b) => a.timestamp - b.timestamp).forEach(square => {
                    const squareElement = document.createElement('div');
                    squareElement.className = 'quilt-square';
                    squareElement.innerHTML = `${square.color}${square.symbol}`;
                    squareElement.title = `Added by ${square.user_label}`;
                    grid.appendChild(squareElement);
                });
            } catch (error) {
                console.error('Error loading quilt data:', error);
            }
        }

        function leaveApp() {
            showScreen('welcome-screen');
            selectedColor = null;
            selectedSymbol = null;
            document.querySelectorAll('.selected').forEach(el => el.classList.remove('selected'));
        }

        document.addEventListener('mousemove', (e) => {
            document.querySelectorAll('.floating-emoji').forEach((elem) => {
                const speed = elem.getAttribute('data-value') || 2;
                const x = (e.clientX * speed) / 100;
                const y = (e.clientY * speed) / 100;
                elem.style.transform = `translateX(${x}px) translateY(${y}px)`;
            });
        });

        console.log('🧵 Welcome to the DIGITAL QUILT COLLECTIVE! Type wtaf() for quilting secrets...');

        window.wtaf = function() {
            document.body.style.animation = 'rainbow 1s infinite';
            setTimeout(() => {
                document.body.style.animation = '';
                alert('🎨 COSMIC QUILT MODE UNLOCKED! You found the secret pattern!');
            }, 3000);
        };

        initAuth();
    </script>
</body>
</html>