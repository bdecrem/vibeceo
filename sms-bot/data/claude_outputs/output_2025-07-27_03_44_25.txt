<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sound Emoji Mixer ðŸŽµ</title>
    <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --cream: #FEFEF5;
            --yellow: #FFD63D;
            --blue: #6ECBFF;
            --purple: #C9C2F9;
            --red: #FF4B4B;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Space Grotesk', system-ui;
            background: var(--cream);
            min-height: 100vh;
            padding: 2rem;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
        }

        h1 {
            font-size: 2.5rem;
            text-transform: uppercase;
            color: var(--red);
            transform: rotate(-2deg);
            margin-bottom: 2rem;
            text-align: center;
        }

        .emoji-palette {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
            padding: 1rem;
            background: white;
            border: 4px solid var(--yellow);
            border-radius: 1rem;
            box-shadow: 8px 8px 0 var(--purple);
        }

        .emoji {
            font-size: 2rem;
            padding: 1rem;
            text-align: center;
            cursor: move;
            user-select: none;
            transition: transform 0.2s;
        }

        .emoji:hover {
            transform: scale(1.2);
        }

        .mixing-bowl {
            min-height: 200px;
            padding: 2rem;
            background: white;
            border: 4px solid var(--blue);
            border-radius: 1rem;
            margin-bottom: 2rem;
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
            align-items: center;
            justify-content: center;
            box-shadow: 8px 8px 0 var(--purple);
        }

        .bowl-emoji {
            font-size: 3rem;
            animation: float 2s ease-in-out infinite;
        }

        .generate-btn {
            display: block;
            width: 100%;
            max-width: 300px;
            margin: 2rem auto;
            padding: 1rem 2rem;
            font-size: 1.2rem;
            font-weight: bold;
            background: var(--yellow);
            border: none;
            border-radius: 2rem;
            cursor: pointer;
            transform: rotate(-1deg);
            box-shadow: 4px 4px 0 var(--purple);
            transition: all 0.2s;
        }

        .generate-btn:hover {
            transform: rotate(1deg) translateY(-2px);
            box-shadow: 6px 6px 0 var(--purple);
        }

        .generate-btn:active {
            transform: translateY(2px);
            box-shadow: 2px 2px 0 var(--purple);
        }

        .player-container {
            padding: 2rem;
            background: white;
            border: 4px solid var(--yellow);
            border-radius: 1rem;
            box-shadow: 8px 8px 0 var(--purple);
        }

        audio {
            width: 100%;
            height: 54px;
            margin: 1rem 0;
        }

        .status {
            text-align: center;
            margin: 1rem 0;
            font-weight: bold;
            color: var(--blue);
        }

        @keyframes float {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-10px); }
        }

        @keyframes shake {
            0%, 100% { transform: rotate(0); }
            25% { transform: rotate(-5deg); }
            75% { transform: rotate(5deg); }
        }

        .shake {
            animation: shake 0.5s ease-in-out;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Sound Emoji Mixer ðŸŽµ</h1>
        
        <div class="emoji-palette" id="palette">
            <div class="emoji" draggable="true">ðŸŒŠ</div>
            <div class="emoji" draggable="true">ðŸŒ…</div>
            <div class="emoji" draggable="true">ðŸ¤–</div>
            <div class="emoji" draggable="true">ðŸŽ¸</div>
            <div class="emoji" draggable="true">ðŸŒ®</div>
            <div class="emoji" draggable="true">ðŸŽº</div>
            <div class="emoji" draggable="true">ðŸŒŸ</div>
            <div class="emoji" draggable="true">ðŸŒ™</div>
        </div>

        <div class="mixing-bowl" id="bowl"></div>

        <button class="generate-btn" id="generateBtn">ðŸŽµ Mix It Up! ðŸŽµ</button>

        <div class="status" id="status"></div>

        <div class="player-container">
            <audio id="audioPlayer" controls></audio>
        </div>
    </div>

    <script>
        const bowl = document.getElementById('bowl');
        const generateBtn = document.getElementById('generateBtn');
        const status = document.getElementById('status');
        const audioPlayer = document.getElementById('audioPlayer');
        
        let bowlEmojis = [];

        // Drag and Drop
        document.querySelectorAll('.emoji').forEach(emoji => {
            emoji.addEventListener('dragstart', e => {
                e.dataTransfer.setData('text/plain', e.target.textContent);
            });
        });

        bowl.addEventListener('dragover', e => {
            e.preventDefault();
        });

        bowl.addEventListener('drop', e => {
            e.preventDefault();
            const emoji = e.dataTransfer.getData('text/plain');
            if (bowlEmojis.length < 3) {
                bowlEmojis.push(emoji);
                updateBowl();
            }
        });

        function updateBowl() {
            bowl.innerHTML = bowlEmojis.map(emoji => 
                `<div class="bowl-emoji">${emoji}</div>`
            ).join('');
        }

        generateBtn.addEventListener('click', async () => {
            if (bowlEmojis.length === 0) {
                status.textContent = "Add some emojis first! ðŸŽµ";
                return;
            }

            bowl.classList.add('shake');
            setTimeout(() => bowl.classList.remove('shake'), 500);

            const prompts = {
                'ðŸŒŠ': 'ocean waves',
                'ðŸŒ…': 'peaceful sunset',
                'ðŸ¤–': 'robot electronic',
                'ðŸŽ¸': 'electric guitar',
                'ðŸŒ®': 'mexican fiesta',
                'ðŸŽº': 'mariachi',
                'ðŸŒŸ': 'magical sparkles',
                'ðŸŒ™': 'night ambient'
            };

            const prompt = bowlEmojis
                .map(emoji => prompts[emoji])
                .filter(Boolean)
                .join(', ');

            status.textContent = "Mixing your musical potion... ðŸŽµ";

            try {
                const result = await generateMusic(prompt);
                if (result.success) {
                    audioPlayer.src = result.audioUrl;
                    status.textContent = "Ready to play! ðŸŽ‰";
                } else {
                    status.textContent = "Oops! The mix didn't work. Try again! ðŸŽµ";
                }
            } catch (error) {
                status.textContent = "Something went wrong! Try a different mix! ðŸŽµ";
            }
        });

        async function generateMusic(prompt) {
            try {
                const response = await fetch('/api/sonauto', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ prompt: prompt + ", instrumental" })
                });
                
                const data = await response.json();
                return await pollForCompletion(data.task_id);
            } catch (error) {
                console.error('Generation failed:', error);
                return { success: false };
            }
        }

        async function pollForCompletion(taskId) {
            const maxAttempts = 60;
            let attempts = 0;
            
            while (attempts < maxAttempts) {
                try {
                    const response = await fetch(`/api/sonauto?taskId=${taskId}`);
                    const result = await response.json();
                    
                    const status = typeof result === 'string' ? result : result.status;
                    
                    if (status === 'SUCCESS' || status === 'COMPLETED') {
                        const audioUrl = result.song_paths?.[0] || result.url;
                        return { success: true, audioUrl };
                    }
                    
                    if (status === 'FAILED') {
                        return { success: false };
                    }
                    
                    await new Promise(resolve => setTimeout(resolve, 2000));
                    attempts++;
                } catch (error) {
                    attempts++;
                }
            }
            
            return { success: false };
        }
    </script>
</body>
</html>