I'll create a luxurious greeting app with both public and admin pages. Here's the implementation:

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LuxHello - The Elegant Greeting</title>
    <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@300;400;500;600;700&family=Inter:wght@300;400;500;600&display=swap" rel="stylesheet">
    <style>
        /* Your existing styles remain unchanged */

        .form-group {
            margin-bottom: 1.5rem;
            text-align: left;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            color: rgba(255, 255, 255, 0.9);
            font-family: 'Space Grotesk', sans-serif;
        }

        .form-group input, .form-group textarea {
            width: 100%;
            padding: 0.8rem;
            border-radius: 8px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            background: rgba(255, 255, 255, 0.1);
            color: white;
            font-family: 'Inter', sans-serif;
        }

        .submit-btn {
            background: linear-gradient(45deg, var(--accent-gold), var(--accent-silver));
            border: none;
            padding: 1rem 2rem;
            border-radius: 8px;
            color: #1a1a1a;
            font-family: 'Space Grotesk', sans-serif;
            font-weight: 500;
            cursor: pointer;
            transition: transform 0.2s ease;
        }

        .submit-btn:hover {
            transform: translateY(-2px);
        }

        #success-message {
            display: none;
            color: #4CAF50;
            margin-top: 1rem;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="floating-emojis">
            <span class="emoji-1" data-value="2">ðŸŽ‰</span>
            <span class="emoji-2" data-value="3">âœ¨</span>
            <span class="emoji-3" data-value="1">ðŸ¥‚</span>
            <span class="emoji-4" data-value="4">ðŸ—¼</span>
        </div>
        
        <div class="glass-card">
            <h1>LuxHello</h1>
            <p>Share your elegant greeting with the world, crafted with sophistication and style.</p>
            
            <form id="greeting-form" style="margin-top: 2rem;">
                <div class="form-group">
                    <label for="name">Your Name</label>
                    <input type="text" id="name" required>
                </div>
                
                <div class="form-group">
                    <label for="email">Email Address</label>
                    <input type="email" id="email" required>
                </div>
                
                <div class="form-group">
                    <label for="message">Your Greeting</label>
                    <textarea id="message" rows="4" required></textarea>
                </div>
                
                <button type="submit" class="submit-btn">Send Greeting</button>
            </form>
            
            <div id="success-message">
                Your greeting has been sent successfully!
            </div>
        </div>
    </div>

    <script src="https://unpkg.com/@supabase/supabase-js@2"></script>
    <script>
        const supabase = window.supabase.createClient('YOUR_SUPABASE_URL', 'YOUR_SUPABASE_ANON_KEY')

        document.addEventListener('mousemove', (e) => {
            document.querySelectorAll('.floating-emojis span').forEach((elem) => {
                const speed = elem.getAttribute('data-value')
                const x = (e.clientX * speed) / 100
                const y = (e.clientY * speed) / 100
                elem.style.transform = `translateX(${x}px) translateY(${y}px)`
            })
        })

        document.getElementById('greeting-form').addEventListener('submit', async (e) => {
            e.preventDefault()
            
            const formData = {
                name: document.getElementById('name').value,
                email: document.getElementById('email').value,
                message: document.getElementById('message').value
            }

            try {
                const { data, error } = await supabase.from('wtaf_submissions').insert({
                    app_id: 'luxhello_app',
                    submission_data: formData
                })
                
                if (error) throw error
                
                document.getElementById('success-message').style.display = 'block'
                document.getElementById('greeting-form').reset()
                
                setTimeout(() => {
                    document.getElementById('success-message').style.display = 'none'
                }, 3000)
            } catch (error) {
                console.error('Error:', error)
                alert('Submission failed. Please try again.')
            }
        })
    </script>
</body>
</html>

<!-- WTAF_ADMIN_PAGE_STARTS_HERE -->

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LuxHello Admin - Greeting Management</title>
    <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@300;400;500;600;700&family=Inter:wght@300;400;500;600&display=swap" rel="stylesheet">
    <style>
        /* Previous styles remain */

        .admin-table {
            width: 100%;
            margin-top: 2rem;
            border-collapse: collapse;
        }

        .admin-table th, .admin-table td {
            padding: 1rem;
            text-align: left;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .admin-table th {
            font-family: 'Space Grotesk', sans-serif;
            font-weight: 500;
            background: rgba(255, 255, 255, 0.1);
        }

        .export-btn {
            margin-top: 1rem;
            background: linear-gradient(45deg, var(--accent-silver), var(--accent-gold));
            border: none;
            padding: 0.8rem 1.5rem;
            border-radius: 6px;
            color: #1a1a1a;
            font-family: 'Space Grotesk', sans-serif;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="floating-emojis">
            <span class="emoji-1" data-value="2">ðŸ“Š</span>
            <span class="emoji-2" data-value="3">ðŸ“ˆ</span>
            <span class="emoji-3" data-value="1">ðŸ’«</span>
            <span class="emoji-4" data-value="4">âœ¨</span>
        </div>
        
        <div class="glass-card" style="width: 90%; max-width: 1200px;">
            <h1>Greeting Management</h1>
            <p>Review and export all submitted greetings.</p>
            
            <button id="export-csv" class="export-btn">Export to CSV</button>
            
            <table class="admin-table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Message</th>
                    </tr>
                </thead>
                <tbody id="submissions-table">
                    <!-- Data will be populated here -->
                </tbody>
            </table>
        </div>
    </div>

    <script src="https://unpkg.com/@supabase/supabase-js@2"></script>
    <script>
        const supabase = window.supabase.createClient('YOUR_SUPABASE_URL', 'YOUR_SUPABASE_ANON_KEY')

        // Parallax effect
        document.addEventListener('mousemove', (e) => {
            document.querySelectorAll('.floating-emojis span').forEach((elem) => {
                const speed = elem.getAttribute('data-value')
                const x = (e.clientX * speed) / 100
                const y = (e.clientY * speed) / 100
                elem.style.transform = `translateX(${x}px) translateY(${y}px)`
            })
        })

        // Fetch submissions
        async function loadSubmissions() {
            try {
                const { data, error } = await supabase.from('wtaf_submissions')
                    .select('*')
                    .eq('app_id', 'luxhello_app')
                    .order('created_at', { ascending: false })

                if (error) throw error

                const tableBody = document.getElementById('submissions-table')
                tableBody.innerHTML = data.map(row => `
                    <tr>
                        <td>${new Date(row.created_at).toLocaleDateString()}</td>
                        <td>${row.submission_data.name}</td>
                        <td>${row.submission_data.email}</td>
                        <td>${row.submission_data.message}</td>
                    </tr>
                `).join('')

                // Store data for CSV export
                window.submissionsData = data
            } catch (error) {
                console.error('Error:', error)
                alert('Failed to load submissions')
            }
        }

        // CSV Export
        document.getElementById('export-csv').addEventListener('click', () => {
            const csvContent = 'Name,Email,Message\n' + window.submissionsData.map(row => 
                `${row.submission_data.name || ''},${row.submission_data.email || ''},${row.submission_data.message || ''}`
            ).join('\n')
            
            const blob = new Blob([csvContent], { type: 'text/csv' })
            const url = URL.createObjectURL(blob)
            const a = document.createElement('a')
            a.href = url
            a.download = 'luxhello_submissions.csv'
            a.click()
        })

        // Load submissions on page load
        loadSubmissions()
    </script>
</body>
</html>
```

This implementation includes:

1. A public page with:
- Luxurious gradient background
- Glass morphism form card
- Floating emoji parallax effects
- Form for name, email, and greeting submission
- Supabase integration for data submission
- Success/error handling

2. An admin page with:
- Matching luxury design
- Table to display all submissions
- CSV export functionality
- Different floating emojis
- Supabase integration for data fetching

Both pages maintain consistent styling while serving different purposes. The public page focuses on user input, while the admin page provides data management capabilities.