I'll create a pink chat app with emoji reactions using the VAPOR theme (pink-focused) from Webtoys. Here's a complete chat app with reactions:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>✨ Pink Chat</title>
    <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=JetBrains+Mono&display=swap" rel="stylesheet">
    <style>
        :root {
            --bg: #FFE0F7;
            --border: #FF006E;
            --shadow: #3700B3;
            --text: #1a1a1a;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Space Grotesk', system-ui, sans-serif;
            background: var(--bg);
            color: var(--text);
            line-height: 1.6;
            font-size: 16px;
        }

        .screen {
            display: none;
            padding: 20px;
            min-height: 100vh;
        }

        .screen.active {
            display: block;
        }

        h1 {
            font-size: 28px;
            text-transform: uppercase;
            transform: rotate(-2deg);
            margin-bottom: 20px;
            color: var(--border);
        }

        button {
            background: var(--border);
            color: white;
            border: 3px solid var(--border);
            padding: 12px 24px;
            font-size: 16px;
            font-family: 'Space Grotesk', system-ui, sans-serif;
            font-weight: bold;
            text-transform: uppercase;
            cursor: pointer;
            min-height: 44px;
            margin: 5px 0;
            width: 100%;
            max-width: 300px;
            transform: rotate(-1deg);
            transition: all 0.2s;
        }

        button:hover {
            transform: rotate(1deg) scale(1.02);
            box-shadow: 3px 3px 0 var(--shadow);
        }

        input, select {
            width: 100%;
            padding: 12px;
            margin: 8px 0;
            border: 3px solid var(--border);
            font-size: 16px;
            font-family: 'JetBrains Mono', monospace;
            min-height: 44px;
        }

        .chat-container {
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }

        .message {
            background: white;
            border: 3px solid var(--border);
            padding: 15px;
            margin: 10px 0;
            border-radius: 8px;
            position: relative;
            transform: rotate(-1deg);
        }

        .message.own-message {
            background: #FF99D6;
            transform: rotate(1deg);
            margin-left: 20px;
        }

        .message-author {
            font-weight: bold;
            color: var(--border);
        }

        .message-text {
            margin: 5px 0;
        }

        .reactions {
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
            margin-top: 8px;
        }

        .reaction {
            background: #FFE0F7;
            border: 2px solid var(--border);
            padding: 2px 8px;
            border-radius: 12px;
            cursor: pointer;
            font-size: 14px;
        }

        .reaction-count {
            margin-left: 4px;
            font-size: 12px;
        }

        .reaction-picker {
            display: flex;
            gap: 5px;
            margin-top: 5px;
        }

        .reaction-btn {
            cursor: pointer;
            padding: 4px;
            border-radius: 4px;
            transition: transform 0.2s;
        }

        .reaction-btn:hover {
            transform: scale(1.2);
        }

        #message-input {
            width: 100%;
            margin-top: 20px;
        }

        .floating-emoji {
            position: fixed;
            bottom: 20px;
            right: 20px;
            font-size: 40px;
            cursor: pointer;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }

        @media (min-width: 768px) {
            button {
                width: auto;
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Welcome Screen -->
        <div id="welcome-screen" class="screen active">
            <h1>✨ Pink Chat</h1>
            <p>A sparkly place to chat with friends!</p>
            <button onclick="showNewUserScreen()">New User</button>
            <button onclick="showReturningUserScreen()">Returning User</button>
        </div>

        <!-- New User Screen -->
        <div id="new-user-screen" class="screen">
            <h1>New User</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Register & Enter</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <!-- Returning User Screen -->
        <div id="returning-user-screen" class="screen">
            <h1>Welcome Back!</h1>
            <select id="user-label-select"></select>
            <input type="text" id="returning-passcode" placeholder="4-digit code" maxlength="4">
            <button onclick="loginReturningUser()">Login</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <!-- Main Chat Screen -->
        <div id="main-screen" class="screen">
            <div class="chat-container">
                <h1>✨ Pink Chat</h1>
                <div id="user-status">Chatting as <span id="current-user-label"></span></div>
                <div id="messages-container"></div>
                <input type="text" id="message-input" placeholder="Type something sparkly..." onkeypress="if(event.key === 'Enter') sendMessage()">
                <button onclick="sendMessage()">Send Message ✨</button>
                <button onclick="showScreen('welcome-screen')">Leave Chat</button>
            </div>
        </div>
    </div>

    <div class="floating-emoji" onclick="triggerEmojiRain()">✨</div>

    <script>
        let currentUser = null;
        let pollingInterval;

        // Authentication Code
        async function generateNewUser() {
            const slots = await checkAvailableSlots();
            if (slots.isFull) {
                alert('Chat is full!');
                return false;
            }
            
            const user = await generateUser();
            if (user?.success) {
                currentUser = user;
                document.getElementById('new-user-info').innerHTML = 
                    `Your ID: ${user.userLabel}<br>Code: ${user.passcode}<br>Save these!`;
                return true;
            }
            return false;
        }

        async function registerNewUser() {
            if (!currentUser) return;
            
            const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
            if (result?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                enterMainScreen();
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            await generateNewUser();
        }

        async function loginReturningUser() {
            const label = document.getElementById('user-label-select').value;
            const passcode = document.getElementById('returning-passcode').value;
            
            const result = await authenticateUser(label, passcode);
            if (result?.success) {
                currentUser = { userLabel: label, passcode, participantId: result.user.participantId };
                updateZadAuth(label, result.user.participantId);
                enterMainScreen();
            } else {
                alert('Wrong code!');
            }
        }

        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const slots = await checkAvailableSlots();
            const select = document.getElementById('user-label-select');
            select.innerHTML = '<option>Select User</option>';
            slots.usedLabels.forEach(label => {
                select.innerHTML += `<option>${label}</option>`;
            });
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            if (screenId !== 'main-screen') stopPolling();
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            startPolling();
            loadLatestData();
        }

        // Chat Functions
        async function sendMessage() {
            const input = document.getElementById('message-input');
            const text = input.value.trim();
            
            if (text) {
                await save('message', {
                    text: text,
                    timestamp: new Date().toISOString()
                });
                input.value = '';
                await loadLatestData();
            }
        }

        async function toggleReaction(messageId, emoji) {
            await save('reaction', {
                messageId: messageId,
                emoji: emoji,
                action: 'toggle'
            });
            await loadLatestData();
        }

        function getReactionButtons(messageId) {
            const emojis = ['❤️', '😂', '👍', '✨', '🎉'];
            return emojis.map(emoji => 
                `<span class="reaction-btn" onclick="toggleReaction(${messageId}, '${emoji}')">${emoji}</span>`
            ).join('');
        }

        function deduplicate(items, uniqueField = 'id') {
            return items.reduce((acc, item) => {
                const existing = acc.find(i => i[uniqueField] === item[uniqueField]);
                if (!existing || new Date(item.created_at) > new Date(existing.created_at)) {
                    if (existing) {
                        const index = acc.indexOf(existing);
                        acc[index] = item;
                    } else {
                        acc.push(item);
                    }
                }
                return acc;
            }, []);
        }

        async function loadLatestData() {
            const [messages, reactions] = await Promise.all([
                load('message'),
                load('reaction')
            ]);

            const uniqueMessages = deduplicate(messages);
            
            const messagesWithReactions = uniqueMessages.map(message => {
                const messageReactions = reactions
                    .filter(r => r.messageId === message.id)
                    .reduce((acc, reaction) => {
                        if (!acc[reaction.emoji]) acc[reaction.emoji] = new Set();
                        
                        if (reaction.action === 'toggle') {
                            if (acc[reaction.emoji].has(reaction.author)) {
                                acc[reaction.emoji].delete(reaction.author);
                            } else {
                                acc[reaction.emoji].add(reaction.author);
                            }
                        }
                        
                        return acc;
                    }, {});

                return { ...message, reactions: messageReactions };
            });

            displayMessages(messagesWithReactions);
        }

        function displayMessages(messages) {
            const container = document.getElementById('messages-container');
            const currentUsername = getUsername();
            
            container.innerHTML = messages
                .sort((a, b) => new Date(a.created_at) - new Date(b.created_at))
                .map(message => {
                    const isOwnMessage = message.author === currentUsername;
                    const reactionHtml = Object.entries(message.reactions || {})
                        .filter(([_, users]) => users.size > 0)
                        .map(([emoji, users]) => 
                            `<span class="reaction">${emoji}<span class="reaction-count">${users.size}</span></span>`
                        ).join('');

                    return `
                        <div class="message ${isOwnMessage ? 'own-message' : ''}">
                            <div class="message-author">${message.author}</div>
                            <div class="message-text">${message.text}</div>
                            <div class="reactions">${reactionHtml}</div>
                            <div class="reaction-picker">${getReactionButtons(message.id)}</div>
                        </div>
                    `;
                }).join('');
            
            container.scrollTop = container.scrollHeight;
        }

        function startPolling() {
            pollingInterval = setInterval(() => loadLatestData(), 2000);
        }

        function stopPolling() {
            if (pollingInterval) clearInterval(pollingInterval);
        }

        function triggerEmojiRain() {
            const emojis = ['✨', '💖', '🎀', '💕', '💝'];
            for (let i = 0; i < 20; i++) {
                const emoji = document.createElement('div');
                emoji.style.position = 'fixed';
                emoji.style.left = `${Math.random() * 100}vw`;
                emoji.style.top = '-20px';
                emoji.style.fontSize = '24px';
                emoji.textContent = emojis[Math.floor(Math.random() * emojis.length)];
                emoji.style.zIndex = '1000';
                emoji.style.pointerEvents = 'none';
                emoji.style.animation = `fall ${Math.random() * 2 + 1}s linear forwards`;
                document.body.appendChild(emoji);
                setTimeout(() => emoji.remove(), 3000);
            }
        }

        // Add falling animation
        const style = document.createElement('style');
        style.textContent = `
            @keyframes fall {
                to {
                    transform: translateY(100vh) rotate(360deg);
                }
            }
        `;
        document.head.appendChild(style);

        // Initialize
        initAuth();
    </script>
</body>
</html>