Here's a nostalgic MacPaint-style public painting app with a gallery wall:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>WTAF PAINT</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
            background: #fefef5;
            margin: 0;
            padding: 20px;
            min-height: 100vh;
        }

        .app-container {
            max-width: 800px;
            margin: 0 auto;
        }

        h1 {
            color: #FF4B4B;
            text-align: center;
            font-size: 24px;
            margin-bottom: 20px;
        }

        .tools {
            background: white;
            border: 2px solid #FFD63D;
            border-radius: 12px;
            padding: 15px;
            margin-bottom: 20px;
            box-shadow: 3px 3px 0 #C9C2F9;
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            align-items: center;
        }

        button {
            background: #6ECBFF;
            border: none;
            border-radius: 20px;
            color: white;
            padding: 12px 20px;
            font-size: 16px;
            cursor: pointer;
            min-height: 44px;
            min-width: 44px;
        }

        button.active {
            background: #FF4B4B;
        }

        .canvas-container {
            background: white;
            border: 2px solid #FFD63D;
            border-radius: 12px;
            padding: 10px;
            margin-bottom: 20px;
            box-shadow: 3px 3px 0 #C9C2F9;
            display: flex;
            justify-content: center;
        }

        canvas {
            border: 1px solid #ccc;
            cursor: crosshair;
            touch-action: none;
        }

        .control-group {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        input[type="color"] {
            width: 44px;
            height: 44px;
            padding: 0;
            border: none;
            border-radius: 22px;
            cursor: pointer;
        }

        input[type="range"] {
            width: 100px;
            height: 44px;
        }

        .gallery {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
            margin-top: 40px;
        }

        .gallery-item {
            background: white;
            border: 2px solid #FFD63D;
            border-radius: 12px;
            padding: 10px;
            box-shadow: 3px 3px 0 #C9C2F9;
        }

        .gallery-item img {
            width: 100%;
            border-radius: 8px;
        }

        .gallery-item p {
            margin: 10px 0;
            font-size: 16px;
            color: #666;
        }

        @media (max-width: 768px) {
            .tools {
                flex-direction: column;
                align-items: stretch;
            }
            
            button {
                width: 100%;
            }

            .control-group {
                flex-wrap: wrap;
                justify-content: center;
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <h1>WTAF PAINT</h1>
        <div id="user-status">Anonymous User: <span id="current-user-label"></span></div>
        
        <div class="tools">
            <button id="pencil" class="active">‚úèÔ∏è</button>
            <button id="brush">üñåÔ∏è</button>
            <button id="mystery">üé≤</button>
            <button id="undo">‚Ü©Ô∏è</button>
            <div class="control-group">
                <input type="color" id="color" value="#000000">
                <input type="range" id="size" min="1" max="50" value="5">
            </div>
            <button id="save">SAVE</button>
        </div>

        <div class="canvas-container">
            <canvas id="canvas" width="400" height="400"></canvas>
        </div>

        <div class="gallery" id="gallery"></div>
    </div>

    <script>
        let currentUser = null;
        let isDrawing = false;
        let lastX = 0;
        let lastY = 0;
        let currentTool = 'pencil';
        let mysteryMode = 'neon';
        let hue = 0;
        
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');
        const undoStack = [];
        
        // Initialize tools
        function saveState() {
            undoStack.push(ctx.getImageData(0, 0, canvas.width, canvas.height));
        }

        function setTool(tool) {
            currentTool = tool;
            document.querySelectorAll('.tools button').forEach(btn => btn.classList.remove('active'));
            document.getElementById(tool).classList.add('active');
        }

        // Drawing functions
        function draw(e) {
            if (!isDrawing) return;
            
            const rect = canvas.getBoundingClientRect();
            const x = (e.clientX || e.touches[0].clientX) - rect.left;
            const y = (e.clientY || e.touches[0].clientY) - rect.top;
            
            ctx.lineJoin = 'round';
            ctx.lineCap = 'round';
            ctx.lineWidth = document.getElementById('size').value;
            
            if (currentTool === 'mystery') {
                if (mysteryMode === 'neon') {
                    ctx.shadowBlur = 15;
                    ctx.shadowColor = document.getElementById('color').value;
                    ctx.strokeStyle = document.getElementById('color').value;
                    for (let i = 0; i < 3; i++) {
                        ctx.beginPath();
                        ctx.moveTo(lastX + Math.random() * 10, lastY + Math.random() * 10);
                        ctx.lineTo(x + Math.random() * 10, y + Math.random() * 10);
                        ctx.stroke();
                    }
                } else {
                    ctx.shadowBlur = 0;
                    hue = (hue + 1) % 360;
                    ctx.strokeStyle = `hsl(${hue}, 100%, 50%)`;
                }
            } else {
                ctx.shadowBlur = 0;
                ctx.strokeStyle = document.getElementById('color').value;
            }
            
            ctx.beginPath();
            ctx.moveTo(lastX, lastY);
            ctx.lineTo(x, y);
            ctx.stroke();
            
            [lastX, lastY] = [x, y];
        }

        // Event listeners
        canvas.addEventListener('mousedown', startDrawing);
        canvas.addEventListener('mousemove', draw);
        canvas.addEventListener('mouseup', stopDrawing);
        canvas.addEventListener('mouseout', stopDrawing);
        canvas.addEventListener('touchstart', startDrawing);
        canvas.addEventListener('touchmove', draw);
        canvas.addEventListener('touchend', stopDrawing);

        function startDrawing(e) {
            isDrawing = true;
            const rect = canvas.getBoundingClientRect();
            [lastX, lastY] = [
                (e.clientX || e.touches[0].clientX) - rect.left,
                (e.clientY || e.touches[0].clientY) - rect.top
            ];
            saveState();
        }

        function stopDrawing() {
            isDrawing = false;
        }

        // Tool buttons
        document.getElementById('pencil').onclick = () => setTool('pencil');
        document.getElementById('brush').onclick = () => setTool('brush');
        document.getElementById('mystery').onclick = () => {
            setTool('mystery');
            mysteryMode = mysteryMode === 'neon' ? 'rainbow' : 'neon';
        };
        document.getElementById('undo').onclick = () => {
            if (undoStack.length > 0) {
                ctx.putImageData(undoStack.pop(), 0, 0);
            }
        };

        document.getElementById('save').onclick = async () => {
            const artData = canvas.toDataURL();
            await save('artwork', {
                image: artData,
                created_at: new Date().toISOString()
            });
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            undoStack.length = 0;
            loadLatestData();
        };

        // Public mode and gallery
        async function initPublicMode() {
            currentUser = await generateAnonymousUser();
            if (currentUser?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                document.getElementById('current-user-label').textContent = currentUser.userLabel;
                startPolling();
                loadLatestData();
            }
        }

        async function loadLatestData() {
            const artworks = await load('artwork');
            const gallery = document.getElementById('gallery');
            gallery.innerHTML = '';
            
            artworks.reverse().forEach(art => {
                const item = document.createElement('div');
                item.className = 'gallery-item';
                item.innerHTML = `
                    <img src="${art.image}" alt="Artwork">
                    <p>Created by: ${art.author}</p>
                `;
                gallery.appendChild(item);
            });
        }

        let pollingInterval;
        function startPolling() {
            pollingInterval = setInterval(() => loadLatestData(), 2000);
        }

        initPublicMode();
    </script>
</body>
</html>