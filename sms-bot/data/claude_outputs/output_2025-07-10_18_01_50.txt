```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Idea Board</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=Inter:wght@400;600&display=swap');

        body { 
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #FF2E93 0%, #7C3AED 50%, #3F88FF 100%);
            background-size: 400% 400%;
            animation: gradientShift 15s ease-in-out infinite;
            color: white;
            overflow-x: hidden;
            margin: 0;
            min-height: 100vh;
        }

        h1, h2, h3 {
            font-family: 'Space Grotesk', sans-serif;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: -0.02em;
        }

        @keyframes gradientShift {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }

        .app-container {
            max-width: 800px;
            margin: 0 auto;
            background: rgba(0,0,0,0.4);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            padding: 2rem;
            border: 1px solid rgba(255,255,255,0.1);
            position: relative;
            z-index: 10;
            min-height: 90vh;
        }

        .screen { display: none; }
        .screen.active { display: block; animation: fadeIn 0.3s ease; }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        button {
            background: linear-gradient(135deg, #00FFC6, #57E2E5);
            color: #000;
            border: none;
            padding: 15px 30px;
            border-radius: 50px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-size: 14px;
            margin: 10px 5px;
        }

        button:hover {
            transform: scale(1.05);
            box-shadow: 0 0 30px rgba(0, 255, 198, 0.5);
        }

        input, select {
            background: rgba(255,255,255,0.1);
            border: 2px solid rgba(255,255,255,0.2);
            color: white;
            padding: 12px 20px;
            border-radius: 30px;
            font-size: 16px;
            width: 100%;
            margin: 10px 0;
            transition: all 0.3s ease;
        }

        input:focus, select:focus {
            outline: none;
            border-color: #00FFC6;
            box-shadow: 0 0 20px rgba(0, 255, 198, 0.3);
        }

        .floating-emoji {
            position: fixed;
            font-size: 2rem;
            animation: float 6s ease-in-out infinite;
            pointer-events: none;
            z-index: 5;
            opacity: 0.8;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            50% { transform: translateY(-20px) rotate(10deg); }
        }

        h1 {
            position: relative;
            animation: glitch 3s ease-in-out infinite;
        }

        @keyframes glitch {
            0%, 100% { text-shadow: 2px 2px 0 #FF2E93, -2px -2px 0 #00FFC6; }
            25% { text-shadow: -2px 2px 0 #3F88FF, 2px -2px 0 #FF2E93; }
            50% { text-shadow: 2px -2px 0 #00FFC6, -2px 2px 0 #7C3AED; }
            75% { text-shadow: -2px -2px 0 #FF2E93, 2px 2px 0 #3F88FF; }
        }

        .idea-board {
            display: grid;
            grid-template-columns: 1fr;
            gap: 20px;
            padding: 20px 0;
        }

        .idea-card {
            background: rgba(0,0,0,0.3);
            border: 1px solid rgba(255,255,255,0.2);
            border-radius: 15px;
            padding: 20px;
            backdrop-filter: blur(10px);
            transition: all 0.3s ease;
        }

        .idea-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(123,58,237,0.3);
        }

        .message {
            background: rgba(255,255,255,0.1);
            border-radius: 20px;
            padding: 15px 20px;
            margin: 10px 0;
            animation: slideIn 0.3s ease;
            max-width: 80%;
        }

        .message.own {
            margin-left: auto;
            background: rgba(0,255,198,0.2);
        }

        @keyframes slideIn {
            from { opacity: 0; transform: translateX(-50px); }
            to { opacity: 1; transform: translateX(0); }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <div id="welcome-screen" class="screen active">
            <h1>Welcome to Idea Board</h1>
            <p>Share your ideas and get feedback!</p>
            <button onclick="showNewUserScreen()">New User</button>
            <button onclick="showReturningUserScreen()">Returning User</button>
        </div>
        
        <div id="new-user-screen" class="screen">
            <h1>New User</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Register & Enter App</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="returning-user-screen" class="screen">
            <h1>Returning User</h1>
            <select id="user-label-select">
                <option>Select User</option>
            </select>
            <input type="text" id="returning-passcode" placeholder="Enter 4-digit passcode" maxlength="4">
            <button onclick="loginReturningUser()">Login</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="main-screen" class="screen">
            <h1>Idea Board</h1>
            <div id="user-status">Welcome, <span id="current-user-label"></span>!</div>
            
            <!-- PUT YOUR APP CONTENT HERE -->
            <div id="app-content">
                <div class="form-group">
                    <input type="text" id="idea-input" class="form-input" placeholder="Share your idea..." maxlength="100">
                    <button onclick="submitIdea()">Submit Idea</button>
                </div>
                <div class="idea-board" id="idea-board">
                    <!-- Ideas will be dynamically loaded here -->
                </div>
            </div>
            <!-- END APP CONTENT -->
            
            <button onclick="showScreen('welcome-screen')">Leave App</button>
        </div>
    </div>

    <div class="floating-emoji" style="top: 5%; left: 2%;" data-value="2">✨</div>
    <div class="floating-emoji" style="top: 5%; right: 2%;" data-value="3">🌀</div>
    <div class="floating-emoji" style="bottom: 5%; left: 2%;" data-value="1">🚀</div>
    <div class="floating-emoji" style="bottom: 5%; right: 2%;" data-value="4">💥</div>

    <script>
        // API Configuration
        let API_BASE = window.location.origin;
        if (window.parent && window.parent !== window) {
            try {
                API_BASE = window.parent.location.origin;
            } catch (e) {
                if (window.location.ancestorOrigins && window.location.ancestorOrigins.length > 0) {
                    API_BASE = window.location.ancestorOrigins[0];
                } else {
                    API_BASE = 'https://www.wtaf.me';
                    if (window.location.href.includes('localhost') || window.location.href.includes('ngrok')) {
                        API_BASE = 'http://localhost:3000';
                    }
                }
            }
        }

        const APP_ID = 'test1'; // This will be replaced with the actual wtaf_content UUID

        async function callZADAPI(endpoint, method = 'GET', data = null) {
            try {
                const options = {
                    method: method,
                    headers: {
                        'Content-Type': 'application/json',
                    }
                };
                
                if (data && method !== 'GET') {
                    options.body = JSON.stringify(data);
                }
                
                let url = `${API_BASE}/api/${endpoint}`;
                if (method === 'GET' && data) {
                    const params = new URLSearchParams(data);
                    url += `?${params}`;
                }
                
                const response = await fetch(url, options);
                const result = await response.json();
                
                if (!response.ok) {
                    throw new Error(result.error || 'API request failed');
                }
                
                return result;
            } catch (error) {
                console.error('API call failed:', error);
                throw error;
            }
        }

        let currentUser = null;

        async function generateNewUser() {
            try {
                const result = await callZADAPI('zad-data', 'GET', {
                    app_id: APP_ID,
                    action_type: 'join'
                });
                
                const existingUsers = result.data || [];
                const usedLabels = existingUsers.map(u => u.participant_data?.userLabel).filter(Boolean) || [];
                
                if (usedLabels.length >= 5) {
                    alert('SQUAD\'S FULL, TRY ANOTHER DIMENSION 🚫');
                    return false;
                }
                
                const availableLabel = USER_LABELS.find(label => !usedLabels.includes(label));
                if (!availableLabel) {
                    alert('NO MORE ROOM IN THIS CHAOS REALM 🌀');
                    return false;
                }
                
                const code = Math.floor(1000 + Math.random() * 9000).toString();
                currentUser = {
                    userLabel: availableLabel,
                    passcode: code,
                    participantId: availableLabel + '_' + code
                };
                
                document.getElementById('new-user-info').innerHTML = 
                    `<strong>YOUR LABEL:</strong> ${currentUser.userLabel}<br><strong>SECRET DIGITS:</strong> ${currentUser.passcode}<br><em>SCREENSHOT THIS OR CRY LATER 📸</em>`;
                
                return true;
            } catch (error) {
                console.error('Error generating user:', error);
                alert('USER GENERATION GLITCHED, TRY AGAIN 🌀');
                return false;
            }
        }

        async function registerNewUser() {
            if (!currentUser) {
                alert('GENERATE YOUR IDENTITY FIRST, CHAOS AGENT 🎭');
                return;
            }
            
            try {
                await callZADAPI('zad-submit', 'POST', {
                    app_id: APP_ID,
                    participant_id: currentUser.participantId,
                    action_type: 'join',
                    participant_data: {
                        userLabel: currentUser.userLabel,
                        passcode: currentUser.passcode,
                        join_time: Date.now()
                    },
                    content_data: { message: 'Joined the app', timestamp: Date.now() }
                });
                
                enterMainScreen();
            } catch (error) {
                console.error('Registration error:', error);
                if (error.message.includes('already exists')) {
                    alert('IDENTITY COLLISION! TRY AGAIN 💥');
                    await generateNewUser();
                } else if (error.message.includes('maximum capacity')) {
                    alert('CHAOS REALM FULL! TRY ANOTHER DIMENSION 🚫');
                    showScreen('welcome-screen');
                } else {
                    alert('REGISTRATION EXPLODED, TRY AGAIN 💥');
                }
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            const success = await generateNewUser();
            if (!success) {
                showScreen('welcome-screen');
            }
        }

        async function loginReturningUser() {
            const selectedLabel = document.getElementById('user-label-select').value;
            const enteredPasscode = document.getElementById('returning-passcode').value.trim();
            
            if (!selectedLabel || selectedLabel === 'Select User') {
                alert('PICK YOUR IDENTITY, PHANTOM 👻');
                return;
            }
            
            if (!enteredPasscode || enteredPasscode.length !== 4) {
                alert('4 DIGITS OF CHAOS REQUIRED 🔢');
                return;
            }
            
            try {
                const result = await callZADAPI('zad-data', 'GET', {
                    app_id: APP_ID,
                    action_type: 'join'
                });
                
                const joinRecords = result.data || [];
                
                const userRecord = joinRecords.find(record => 
                    record.participant_data?.userLabel === selectedLabel && 
                    record.participant_data?.passcode === enteredPasscode
                );
                
                if (userRecord) {
                    currentUser = {
                        userLabel: selectedLabel,
                        passcode: enteredPasscode,
                        participantId: userRecord.participant_id
                    };
                    enterMainScreen();
                } else {
                    alert('NICE TRY, WRONG VIBES ❌');
                }
            } catch (error) {
                console.error('Login error:', error);
                alert('LOGIN MALFUNCTION, REALITY GLITCHING 🌀');
            }
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(screen => 
                screen.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            
            if (screenId !== 'main-screen') {
                stopPolling();
            }
        }

        function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const userSelect = document.getElementById('user-label-select');
            userSelect.innerHTML = '<option>Select User</option>';
            USER_LABELS.forEach(label => {
                const option = document.createElement('option');
                option.value = label;
                option.textContent = label;
                userSelect.appendChild(option);
            });
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            startPolling();
            loadLatestData();
        }

        const USER_LABELS = ['user1🎯', 'user2⚡', 'user3🌟', 'user4🔥', 'user5💎'];

        document.addEventListener('mousemove', (e) => {
            document.querySelectorAll('.floating-emoji').forEach((elem) => {
                const speed = elem.getAttribute('data-value') || 2;
                const x = (e.clientX * speed) / 100;
                const y = (e.clientY * speed) / 100;
                elem.style.transform = `translateX(${x}px) translateY(${y}px)`;
            });
        });

        let pollingInterval;

        function startPolling() {
            pollingInterval = setInterval(async () => {
                await loadLatestData();
            }, 2000);
        }

        function stopPolling() {
            if (pollingInterval) {
                clearInterval(pollingInterval);
                pollingInterval = null;
            }
        }

        async function loadLatestData() {
            try {
                const result = await callZADAPI('zad-data', 'GET', {
                    app_id: APP_ID,
                    action_type: 'idea'
                });
                
                const data = result.data || [];
                updateUI(data);
            } catch (error) {
                console.error('Error loading data:', error);
            }
        }

        function updateUI(data) {
            const ideaBoard = document.getElementById('idea-board');
            ideaBoard.innerHTML = '';

            data.forEach(record => {
                const ideaCard = document.createElement('div');
                ideaCard.className = 'idea-card';
                ideaCard.innerHTML = `
                    <div class="message ${record.participant_id === currentUser.participantId ? 'own' : ''}">
                        <strong>${record.participant_data.userLabel}:</strong> ${record.content_data.idea}
                        <div>${formatReactions(record.content_data.reactions)}</div>
                    </div>
                `;
                if (record.participant_id !== currentUser.participantId) {
                    const reactionButtons = ['💡', '🔥', '🤔', '👍'].map(emoji => 
                        `<button onclick="addReaction('${record.record_id}', '${emoji}')">${emoji}</button>`
                    ).join('');
                    ideaCard.innerHTML += `<div>${reactionButtons}</div>`;
                }
                ideaBoard.appendChild(ideaCard);
            });
        }

        function formatReactions(reactions) {
            if (!reactions || typeof reactions !== 'object') return '';
            return Object.entries(reactions).map(([emoji, count]) => `${emoji} ${count || 0}`).join(' ');
        }

        async function submitIdea() {
            const ideaInput = document.getElementById('idea-input');
            const ideaText = ideaInput.value.trim();
            if (!ideaText) {
                alert('NO EMPTY THOUGHTS ALLOWED 🧠');
                return;
            }

            try {
                await callZADAPI('zad-submit', 'POST', {
                    app_id: APP_ID,
                    participant_id: currentUser.participantId,
                    action_type: 'idea',
                    participant_data: {
                        userLabel: currentUser.userLabel,
                        passcode: currentUser.passcode
                    },
                    content_data: {
                        idea: ideaText,
                        timestamp: Date.now()
                    }
                });
                
                ideaInput.value = '';
                await loadLatestData();
            } catch (error) {
                console.error('Submit idea error:', error);
                alert('IDEA TRANSMISSION FAILED 📡');
            }
        }

        async function addReaction(recordId, emoji) {
            try {
                const result = await callZADAPI('zad-data', 'GET', {
                    record_id: recordId
                });
                
                const record = result.data;
                const newReactions = record.content_data.reactions || {};
                newReactions[emoji] = (newReactions[emoji] || 0) + 1;

                await callZADAPI('zad-update', 'PUT', {
                    record_id: recordId,
                    app_id: APP_ID,
                    participant_id: currentUser.participantId,
                    content_data: { ...record.content_data, reactions: newReactions }
                });

                await loadLatestData();
            } catch (error) {
                console.error('Add reaction error:', error);
                alert('REACTION MALFUNCTION 🔧');
            }
        }

        console.log('🔥 Welcome to the WTAF dimension! Type wtaf() in console for secrets...');

        window.wtaf = function() {
            document.body.style.animation = 'rainbow 1s infinite';
            setTimeout(() => {
                document.body.style.animation = '';
                alert('🎉 WTAF MASTER MODE UNLOCKED! You found the secret!');
            }, 3000);
        };
    </script>
</body>
</html>
```