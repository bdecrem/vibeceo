<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WTAF CHAOS CHAT 💬</title>
    <style>
@import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=Inter:wght@400;600&display=swap');

body { 
    font-family: 'Inter', sans-serif;
    background: linear-gradient(135deg, #FF2E93 0%, #7C3AED 50%, #3F88FF 100%);
    background-size: 400% 400%;
    animation: gradientShift 15s ease-in-out infinite;
    color: white;
    overflow-x: hidden;
    margin: 0;
    min-height: 100vh;
}

h1, h2, h3 {
    font-family: 'Space Grotesk', sans-serif;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: -0.02em;
}

@keyframes gradientShift {
    0%, 100% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
}

.app-container {
    max-width: 800px;
    margin: 0 auto;
    background: rgba(0,0,0,0.4);
    backdrop-filter: blur(20px);
    border-radius: 20px;
    padding: 2rem;
    border: 1px solid rgba(255,255,255,0.1);
    position: relative;
    z-index: 10;
    min-height: 90vh;
}

.screen { display: none; }
.screen.active { display: block; animation: fadeIn 0.3s ease; }

@keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
}

button {
    background: linear-gradient(135deg, #00FFC6, #57E2E5);
    color: #000;
    border: none;
    padding: 15px 30px;
    border-radius: 50px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    text-transform: uppercase;
    letter-spacing: 1px;
    font-size: 14px;
    margin: 10px 5px;
}

button:hover {
    transform: scale(1.05);
    box-shadow: 0 0 30px rgba(0, 255, 198, 0.5);
}

input, select {
    background: rgba(255,255,255,0.1);
    border: 2px solid rgba(255,255,255,0.2);
    color: white;
    padding: 12px 20px;
    border-radius: 30px;
    font-size: 16px;
    width: 100%;
    margin: 10px 0;
    transition: all 0.3s ease;
}

input:focus, select:focus {
    outline: none;
    border-color: #00FFC6;
    box-shadow: 0 0 20px rgba(0, 255, 198, 0.3);
}

.floating-emoji {
    position: fixed;
    font-size: 2rem;
    animation: float 6s ease-in-out infinite;
    pointer-events: none;
    z-index: 5;
    opacity: 0.8;
}

@keyframes float {
    0%, 100% { transform: translateY(0px) rotate(0deg); }
    50% { transform: translateY(-20px) rotate(10deg); }
}

h1 {
    position: relative;
    animation: glitch 3s ease-in-out infinite;
}

@keyframes glitch {
    0%, 100% { text-shadow: 2px 2px 0 #FF2E93, -2px -2px 0 #00FFC6; }
    25% { text-shadow: -2px 2px 0 #3F88FF, 2px -2px 0 #FF2E93; }
    50% { text-shadow: 2px -2px 0 #00FFC6, -2px 2px 0 #7C3AED; }
    75% { text-shadow: -2px -2px 0 #FF2E93, 2px 2px 0 #3F88FF; }
}

#chat-container {
    height: 60vh;
    overflow-y: auto;
    margin: 20px 0;
    padding: 20px;
    background: rgba(0,0,0,0.2);
    border-radius: 15px;
}

.message {
    background: rgba(255,255,255,0.1);
    border-radius: 20px;
    padding: 15px 20px;
    margin: 10px 0;
    animation: slideIn 0.3s ease;
    max-width: 80%;
}

.message.own {
    margin-left: auto;
    background: rgba(0,255,198,0.2);
}

.message-meta {
    font-size: 0.8em;
    opacity: 0.7;
    margin-bottom: 5px;
}

.message-content {
    word-break: break-word;
}

@keyframes slideIn {
    from { opacity: 0; transform: translateX(-50px); }
    to { opacity: 1; transform: translateX(0); }
}

#message-form {
    display: flex;
    gap: 10px;
    margin-top: 20px;
}

#message-input {
    flex-grow: 1;
}

#send-button {
    flex-shrink: 0;
}

.reactions {
    display: flex;
    gap: 5px;
    margin-top: 5px;
}

.reaction-button {
    background: rgba(255,255,255,0.1);
    border: none;
    border-radius: 15px;
    padding: 5px 10px;
    font-size: 12px;
    cursor: pointer;
}

.reaction-count {
    margin-left: 5px;
    font-weight: bold;
}

</style>
</head>
<body>
    <div class="floating-emoji" style="top: 5%; left: 2%;" data-value="2">💬</div>
    <div class="floating-emoji" style="top: 5%; right: 2%;" data-value="3">✨</div>
    <div class="floating-emoji" style="bottom: 5%; left: 2%;" data-value="1">🚀</div>
    <div class="floating-emoji" style="bottom: 5%; right: 2%;" data-value="4">💫</div>

    <div class="app-container">
        <div id="welcome-screen" class="screen active">
            <h1>WTAF CHAOS CHAT 💬</h1>
            <p>ENTER THE DIGITAL THUNDERDOME OF COMMUNICATION</p>
            <button onclick="showNewUserScreen()">New User</button>
            <button onclick="showReturningUserScreen()">Returning User</button>
        </div>
        
        <div id="new-user-screen" class="screen">
            <h1>New User</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Register & Enter App</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="returning-user-screen" class="screen">
            <h1>Returning User</h1>
            <select id="user-label-select">
                <option>Select User</option>
            </select>
            <input type="text" id="returning-passcode" placeholder="Enter 4-digit passcode" maxlength="4">
            <button onclick="loginReturningUser()">Login</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="main-screen" class="screen">
            <h1>CHAOS CHAT</h1>
            <div id="user-status">WELCOME TO THE VOID, <span id="current-user-label"></span>!</div>
            
            <div id="app-content">
                <div id="chat-container"></div>
                <form id="message-form" onsubmit="sendMessage(event)">
                    <input type="text" id="message-input" placeholder="DROP YOUR CHAOS HERE..." required>
                    <button type="submit" id="send-button">SEND IT 🚀</button>
                </form>
            </div>
            
            <button onclick="showScreen('welcome-screen')">ESCAPE THE VOID</button>
        </div>
    </div>

    <script>
    const APP_ID = 'test1';
    const USER_LABELS = ['ChatLord🎯', 'VoidWhisperer⚡', 'ChaosAgent🌟', 'ByteDancer🔥', 'DigitalPhantom💎'];

    let currentUser = null;
    let pollingInterval;

    async function generateNewUser() {
        try {
            const slots = await checkAvailableSlots();
            
            if (slots.isFull) {
                alert('SQUAD\'S FULL, TRY ANOTHER DIMENSION 🚫');
                return false;
            }
            
            const user = await generateUser();
            if (user && user.success) {
                currentUser = {
                    userLabel: user.userLabel,
                    passcode: user.passcode,
                    participantId: user.participantId
                };
                
                document.getElementById('new-user-info').innerHTML = 
                    `<strong>YOUR LABEL:</strong> ${currentUser.userLabel}<br><strong>SECRET DIGITS:</strong> ${currentUser.passcode}<br><em>SCREENSHOT THIS OR CRY LATER 📸</em>`;
                
                return true;
            } else {
                alert('NO MORE ROOM IN THIS CHAOS REALM 🌀');
                return false;
            }
        } catch (error) {
            console.error('User generation error:', error);
            alert('GENERATION EXPLODED, TRY AGAIN 💥');
            return false;
        }
    }

    async function registerNewUser() {
        if (!currentUser) {
            alert('GENERATE YOUR IDENTITY FIRST, CHAOS AGENT 🎭');
            return;
        }
        
        try {
            const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
            if (result && result.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                enterMainScreen();
            } else {
                alert('REGISTRATION EXPLODED, TRY AGAIN 💥');
            }
        } catch (error) {
            console.error('Registration error:', error);
            alert('REGISTRATION EXPLODED, TRY AGAIN 💥');
        }
    }

    async function showNewUserScreen() {
        showScreen('new-user-screen');
        const success = await generateNewUser();
        if (!success) {
            showScreen('welcome-screen');
        }
    }

    async function loginReturningUser() {
        const selectedLabel = document.getElementById('user-label-select').value;
        const enteredPasscode = document.getElementById('returning-passcode').value.trim();
        
        if (!selectedLabel || selectedLabel === 'Select User') {
            alert('PICK YOUR IDENTITY, PHANTOM 👻');
            return;
        }
        
        if (!enteredPasscode || enteredPasscode.length !== 4) {
            alert('4 DIGITS OF CHAOS REQUIRED 🔢');
            return;
        }
        
        try {
            const result = await authenticateUser(selectedLabel, enteredPasscode);
            if (result && result.success) {
                currentUser = {
                    userLabel: selectedLabel,
                    passcode: enteredPasscode,
                    participantId: result.user.participantId
                };
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                enterMainScreen();
            } else {
                alert('NICE TRY, WRONG VIBES ❌');
            }
        } catch (error) {
            console.error('Login error:', error);
            alert('LOGIN MALFUNCTION, REALITY GLITCHING 🌀');
        }
    }

    function showScreen(screenId) {
        document.querySelectorAll('.screen').forEach(screen => 
            screen.classList.remove('active'));
        document.getElementById(screenId).classList.add('active');
        
        if (screenId !== 'main-screen') {
            stopPolling();
        }
    }

    async function showReturningUserScreen() {
        showScreen('returning-user-screen');
        
        try {
            const slots = await checkAvailableSlots();
            const userSelect = document.getElementById('user-label-select');
            userSelect.innerHTML = '<option>Select User</option>';
            
            slots.usedLabels.forEach(label => {
                const option = document.createElement('option');
                option.value = label;
                option.textContent = label;
                userSelect.appendChild(option);
            });
            
            if (slots.usedLabels.length === 0) {
                userSelect.innerHTML = '<option>No users registered yet</option>';
            }
        } catch (error) {
            console.error('Error loading users:', error);
            const userSelect = document.getElementById('user-label-select');
            userSelect.innerHTML = '<option>Error loading users</option>';
        }
    }

    function startPolling() {
        pollingInterval = setInterval(loadLatestData, 2000);
    }

    function stopPolling() {
        if (pollingInterval) {
            clearInterval(pollingInterval);
            pollingInterval = null;
        }
    }

    function enterMainScreen() {
        showScreen('main-screen');
        document.getElementById('current-user-label').textContent = currentUser.userLabel;
        startPolling();
        loadLatestData();
    }

    async function sendMessage(event) {
        event.preventDefault();
        const input = document.getElementById('message-input');
        const content = input.value.trim();
        
        if (!content) return;
        
        try {
            await save('message', {
                content: content,
                timestamp: Date.now(),
                sender: currentUser.userLabel,
                reactions: {}
            });
            
            input.value = '';
            await loadLatestData();
        } catch (error) {
            console.error('Error sending message:', error);
            alert('MESSAGE FAILED TO PIERCE THE VOID 💥');
        }
    }

    async function addReaction(messageId, reaction) {
        try {
            const messages = await load('message');
            const message = messages.find(m => m.id === messageId);
            
            if (!message) return;
            
            const reactions = message.reactions || {};
            reactions[reaction] = (reactions[reaction] || 0) + 1;
            
            await save('update_task', {
                taskId: messageId,
                updates: { reactions: reactions }
            });
            
            await loadLatestData();
        } catch (error) {
            console.error('Error adding reaction:', error);
        }
    }

    async function loadLatestData() {
        try {
            const messages = await load('message');
            const chatContainer = document.getElementById('chat-container');
            
            let html = '';
            messages.sort((a, b) => a.timestamp - b.timestamp).forEach(message => {
                const isOwn = message.sender === currentUser?.userLabel;
                const date = new Date(message.timestamp);
                const timeString = date.toLocaleTimeString();
                
                let reactionsHtml = '';
                if (message.reactions) {
                    for (const [reaction, count] of Object.entries(message.reactions)) {
                        reactionsHtml += `
                            <button class="reaction-button" onclick="addReaction('${message.id}', '${reaction}')">
                                ${reaction}<span class="reaction-count">${count}</span>
                            </button>`;
                    }
                }
                
                html += `
                    <div class="message ${isOwn ? 'own' : ''}">
                        <div class="message-meta">${message.sender} • ${timeString}</div>
                        <div class="message-content">${message.content}</div>
                        <div class="reactions">
                            ${reactionsHtml}
                            <button class="reaction-button" onclick="addReaction('${message.id}', '🔥')">🔥</button>
                            <button class="reaction-button" onclick="addReaction('${message.id}', '💯')">💯</button>
                            <button class="reaction-button" onclick="addReaction('${message.id}', '🚀')">🚀</button>
                        </div>
                    </div>`;
            });
            
            chatContainer.innerHTML = html;
            chatContainer.scrollTop = chatContainer.scrollHeight;
        } catch (error) {
            console.error('Error loading messages:', error);
        }
    }

    document.addEventListener('mousemove', (e) => {
        document.querySelectorAll('.floating-emoji').forEach((elem) => {
            const speed = elem.getAttribute('data-value') || 2;
            const x = (e.clientX * speed) / 100;
            const y = (e.clientY * speed) / 100;
            elem.style.transform = `translateX(${x}px) translateY(${y}px)`;
        });
    });

    console.log('🔥 Welcome to the WTAF dimension! Type wtaf() in console for secrets...');

    window.wtaf = function() {
        document.body.style.animation = 'rainbow 1s infinite';
        setTimeout(() => {
            document.body.style.animation = '';
            alert('🎉 WTAF MASTER MODE UNLOCKED! You found the secret!');
        }, 3000);
    };

    initAuth();
    </script>
</body>
</html>