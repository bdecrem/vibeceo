```html
<!DOCTYPE html>
<html>
<head>
    <title>Emoji Pong üèì</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <style>
        body {
            margin: 0;
            padding: 0;
            background: linear-gradient(135deg, #1a1a2e, #16213e);
            font-family: Arial, sans-serif;
            touch-action: none;
            user-select: none;
            -webkit-user-select: none;
            overflow: hidden;
        }
        #gameCanvas {
            display: block;
            background: #0f3460;
        }
        #controls {
            position: fixed;
            bottom: 0;
            width: 100%;
            height: 120px;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: space-around;
            align-items: center;
        }
        .btn {
            width: 70px;
            height: 70px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 30px;
            color: white;
            user-select: none;
        }
        #upBtn { transform: translateY(20px); }
        #downBtn { transform: translateY(20px); }
    </style>
</head>
<body>
    <canvas id="gameCanvas"></canvas>
    <div id="controls">
        <div class="btn" id="upBtn">‚¨ÜÔ∏è</div>
        <div class="btn" id="downBtn">‚¨áÔ∏è</div>
    </div>

    <script>
        var canvas = document.getElementById('gameCanvas');
        var ctx = canvas.getContext('2d');
        var devicePixelRatio = window.devicePixelRatio || 1;
        var controlsHeight = 120;
        
        function resizeCanvas() {
            canvas.width = window.innerWidth * devicePixelRatio;
            canvas.height = (window.innerHeight - controlsHeight) * devicePixelRatio;
            canvas.style.width = window.innerWidth + 'px';
            canvas.style.height = (window.innerHeight - controlsHeight) + 'px';
        }
        
        window.addEventListener('resize', resizeCanvas);
        resizeCanvas();
        
        // Game states
        var gameState = 'title'; // title, playing, gameover
        var score = 0;
        var highScore = 0;
        
        // Paddle properties
        var paddleWidth = 20 * devicePixelRatio;
        var paddleHeight = 120 * devicePixelRatio;
        var paddleSpeed = canvas.height * 0.012;
        
        // Player paddle
        var playerPaddle = {
            x: 30 * devicePixelRatio,
            y: canvas.height / 2 - paddleHeight / 2,
            width: paddleWidth,
            height: paddleHeight,
            dy: 0
        };
        
        // AI paddle
        var aiPaddle = {
            x: canvas.width - 30 * devicePixelRatio - paddleWidth,
            y: canvas.height / 2 - paddleHeight / 2,
            width: paddleWidth,
            height: paddleHeight,
            dy: 0
        };
        
        // Ball properties
        var ball = {
            x: canvas.width / 2,
            y: canvas.height / 2,
            radius: 15 * devicePixelRatio,
            dx: canvas.width * 0.006,
            dy: canvas.height * 0.003,
            speed: canvas.width * 0.006,
            reset: function() {
                this.x = canvas.width / 2;
                this.y = canvas.height / 2;
                this.dx = (Math.random() > 0.5 ? 1 : -1) * this.speed;
                this.dy = (Math.random() * 2 - 1) * this.speed;
            }
        };
        
        // Particles array
        var particles = [];
        
        // Create particles on collision
        function createParticles(x, y, color) {
            for (var i = 0; i < 10; i++) {
                particles.push({
                    x: x,
                    y: y,
                    dx: (Math.random() - 0.5) * 10,
                    dy: (Math.random() - 0.5) * 10,
                    radius: Math.random() * 5 * devicePixelRatio,
                    color: color,
                    life: 30
                });
            }
        }
        
        // Update particles
        function updateParticles() {
            for (var i = particles.length - 1; i >= 0; i--) {
                var p = particles[i];
                p.x += p.dx;
                p.y += p.dy;
                p.life--;
                
                if (p.life <= 0) {
                    particles.splice(i, 1);
                }
            }
        }
        
        // Draw particles
        function drawParticles() {
            for (var i = 0; i < particles.length; i++) {
                var p = particles[i];
                ctx.beginPath();
                ctx.arc(p.x, p.y, p.radius, 0, Math.PI * 2);
                ctx.fillStyle = p.color;
                ctx.fill();
            }
        }
        
        // Keyboard controls
        var keys = {
            up: false,
            down: false
        };
        
        // Touch controls
        document.getElementById('upBtn').addEventListener('touchstart', function(e) {
            e.preventDefault();
            keys.up = true;
        });
        
        document.getElementById('upBtn').addEventListener('touchend', function(e) {
            e.preventDefault();
            keys.up = false;
        });
        
        document.getElementById('downBtn').addEventListener('touchstart', function(e) {
            e.preventDefault();
            keys.down = true;
        });
        
        document.getElementById('downBtn').addEventListener('touchend', function(e) {
            e.preventDefault();
            keys.down = false;
        });
        
        // Keyboard controls for desktop
        document.addEventListener('keydown', function(e) {
            if (e.key === 'ArrowUp') keys.up = true;
            if (e.key === 'ArrowDown') keys.down = true;
        });
        
        document.addEventListener('keyup', function(e) {
            if (e.key === 'ArrowUp') keys.up = false;
            if (e.key === 'ArrowDown') keys.down = false;
        });
        
        // Handle canvas interactions
        function handleCanvasInteraction() {
            if (gameState === 'title') {
                gameState = 'playing';
                score = 0;
                ball.reset();
            } else if (gameState === 'gameover') {
                gameState = 'title';
            }
        }
        
        canvas.addEventListener('click', function() {
            handleCanvasInteraction();
        });
        
        canvas.addEventListener('touchend', function(e) {
            e.preventDefault();
            handleCanvasInteraction();
        });
        
        // Draw dashed line down the middle
        function drawMiddleLine() {
            ctx.beginPath();
            ctx.setLineDash([20 * devicePixelRatio, 15 * devicePixelRatio]);
            ctx.moveTo(canvas.width / 2, 0);
            ctx.lineTo(canvas.width / 2, canvas.height);
            ctx.strokeStyle = 'rgba(255, 255, 255, 0.3)';
            ctx.lineWidth = 5 * devicePixelRatio;
            ctx.stroke();
            ctx.setLineDash([]);
        }
        
        // Draw paddles
        function drawPaddles() {
            // Player paddle
            ctx.beginPath();
            ctx.rect(playerPaddle.x, playerPaddle.y, playerPaddle.width, playerPaddle.height);
            ctx.fillStyle = '#4ecca3';
            ctx.fill();
            ctx.closePath();
            
            // AI paddle
            ctx.beginPath();
            ctx.rect(aiPaddle.x, aiPaddle.y, aiPaddle.width, aiPaddle.height);
            ctx.fillStyle = '#f95959';
            ctx.fill();
            ctx.closePath();
        }
        
        // Draw ball
        function drawBall() {
            ctx.beginPath();
            ctx.arc(ball.x, ball.y, ball.radius, 0, Math.PI * 2);
            ctx.fillStyle = '#ffd369';
            ctx.fill();
            ctx.closePath();
            
            // Draw emoji on ball
            ctx.font = (ball.radius * 1.5) + 'px Arial';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            ctx.fillStyle = '#000';
            ctx.fillText('üèì', ball.x, ball.y);
        }
        
        // Draw scores
        function drawScores() {
            ctx.font = (40 * devicePixelRatio) + 'px Arial';
            ctx.textAlign = 'center';
            ctx.fillStyle = '#fff';
            ctx.fillText(score, canvas.width / 4, 50 * devicePixelRatio);
            ctx.fillText(highScore, (3 * canvas.width) / 4, 50 * devicePixelRatio);
            
            // Draw score labels
            ctx.font = (20 * devicePixelRatio) + 'px Arial';
            ctx.fillText('YOU', canvas.width / 4, 80 * devicePixelRatio);
            ctx.fillText('AI', (3 * canvas.width) / 4, 80 * devicePixelRatio);
        }
        
        // Draw title screen
        function drawTitleScreen() {
            ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            ctx.font = (60 * devicePixelRatio) + 'px Arial';
            ctx.textAlign = 'center';
            ctx.fillStyle = '#ffd369';
            ctx.fillText('üèì EMOJI PONG üèì', canvas.width / 2, canvas.height / 3);
            
            ctx.font = (30 * devicePixelRatio) + 'px Arial';
            ctx.fillStyle = '#4ecca3';
            ctx.fillText('Tap to Start', canvas.width / 2, canvas.height / 2);
            
            ctx.font = (20 * devicePixelRatio) + 'px Arial';
            ctx.fillStyle = '#f95959';
            ctx.fillText('Use ‚Üë‚Üì buttons to move your paddle', canvas.width / 2, (2 * canvas.height) / 3);
        }
        
        // Draw game over screen
        function drawGameOverScreen() {
            ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            ctx.font = (60 * devicePixelRatio) + 'px Arial';
            ctx.textAlign = 'center';
            ctx.fillStyle = '#f95959';
            ctx.fillText('GAME OVER', canvas.width / 2, canvas.height / 3);
            
            ctx.font = (40 * devicePixelRatio) + 'px Arial';
            ctx.fillStyle = '#4ecca3';
            ctx.fillText('Score: ' + score, canvas.width / 2, canvas.height / 2);
            ctx.fillText('High Score: ' + highScore, canvas.width / 2, (2 * canvas.height) / 3);
            
            ctx.font = (30 * devicePixelRatio) + 'px Arial';
            ctx.fillStyle = '#ffd369';
            ctx.fillText('Tap to Play Again', canvas.width / 2, (5 * canvas.height) / 6);
        }
        
        // Collision detection
        function collision(b, p) {
            return b.x - b.radius < p.x + p.width &&
                   b.x + b.radius > p.x &&
                   b.y - b.radius < p.y + p.height &&
                   b.y + b.radius > p.y;
        }
        
        // Update game objects
        function update() {
            if (gameState !== 'playing') return;
            
            // Move player paddle
            if (keys.up) {
                playerPaddle.dy = -paddleSpeed;
            } else if (keys.down) {
                playerPaddle.dy = paddleSpeed;
            } else {
                playerPaddle.dy = 0;
            }
            
            playerPaddle.y += playerPaddle.dy;
            
            // Constrain player paddle to canvas
            if (playerPaddle.y < 0) {
                playerPaddle.y = 0;
            } else if (playerPaddle.y + playerPaddle.height > canvas.height) {
                playerPaddle.y = canvas.height - playerPaddle.height;
            }
            
            // Simple AI for opponent paddle
            var aiPaddleCenter = aiPaddle.y + aiPaddle.height / 2;
            var ballCenter = ball.y;
            
            if (aiPaddleCenter < ballCenter - 15 * devicePixelRatio) {
                aiPaddle.dy = paddleSpeed * 0.9; // Slightly slower than player
            } else if (aiPaddleCenter > ballCenter + 15 * devicePixelRatio) {
                aiPaddle.dy = -paddleSpeed * 0.9;
            } else {
                aiPaddle.dy = 0;
            }
            
            aiPaddle.y += aiPaddle.dy;
            
            // Constrain AI paddle to canvas
            if (aiPaddle.y < 0) {
                aiPaddle.y = 0;
            } else if (aiPaddle.y + aiPaddle.height > canvas.height) {
                aiPaddle.y = canvas.height - aiPaddle.height;
            }
            
            // Move ball
            ball.x += ball.dx;
            ball.y += ball.dy;
            
            // Ball collision with top and bottom walls
            if (ball.y - ball.radius < 0 || ball.y + ball.radius > canvas.height) {
                ball.dy = -ball.dy;
                createParticles(
                    ball.x, 
                    ball.y - ball.radius < 0 ? ball.radius : canvas.height - ball.radius,
                    '#4ecca3'
                );
            }
            
            // Ball collision with player paddle
            if (collision(ball, playerPaddle)) {
                // Calculate bounce angle based on where ball hits paddle
                var hitPosition = (ball.y - (playerPaddle.y + playerPaddle.height / 2)) / (playerPaddle.height / 2);
                ball.dx = Math.abs(ball.dx) * 1.1; // Increase speed by 10%
                ball.dy = hitPosition * ball.speed;
                createParticles(ball.x - ball.radius, ball.y, '#4ecca3');
                score++;
                if (score > highScore) highScore = score;
            }
            
            // Ball collision with AI paddle
            if (collision(ball, aiPaddle)) {
                // Calculate bounce angle based on where ball hits paddle
                var hitPosition = (ball.y - (aiPaddle.y + aiPaddle.height / 2)) / (aiPaddle.height / 2);
                ball.dx = -Math.abs(ball.dx) * 1.1; // Increase speed by 10%
                ball.dy = hitPosition * ball.speed;
                createParticles(ball.x + ball.radius, ball.y, '#f95959');
            }
            
            // Ball out of bounds - scoring
            if (ball.x < 0) {
                // AI scores
                gameState = 'gameover';
                if (score > highScore) highScore = score;
            } else if (ball.x > canvas.width) {
                // Player scores
                ball.reset();
                score++;
                if (score > highScore) highScore = score;
            }
            
            updateParticles();
        }
        
        // Draw everything
        function draw() {
            // Clear canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Draw background
            ctx.fillStyle = '#0f3460';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            if (gameState === 'playing') {
                drawMiddleLine();
                drawPaddles();
                drawBall();
                drawScores();
                drawParticles();
            } else if (gameState === 'title') {
                drawMiddleLine();
                drawPaddles();
                drawBall();
                drawScores();
                drawTitleScreen();
            } else if (gameState === 'gameover') {
                drawMiddleLine();
                drawPaddles();
                drawBall();
                drawScores();
                drawGameOverScreen();
            }
        }
        
        // Game loop
        var lastUpdateTime = 0;
        function gameLoop(currentTime) {
            var deltaTime = Math.min((currentTime - lastUpdateTime) / 16.67, 2); // Cap at 2x speed
            lastUpdateTime = currentTime;
            
            update();
            draw();
            requestAnimationFrame(gameLoop);
        }
        
        // Start the game
        ball.reset();
        requestAnimationFrame(gameLoop);
    </script>
</body>
</html>
```