I'll create a mobile-friendly Snake game with touch controls and responsive design. Here's the complete implementation:

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Snake Game</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            overflow: hidden;
            touch-action: none;
            background-color: #2c3e50;
            display: flex;
            flex-direction: column;
            height: 100vh;
            font-family: Arial, sans-serif;
        }
        
        #gameCanvas {
            background: #34495e;
            touch-action: none;
        }

        .score-container {
            color: white;
            padding: 10px;
            text-align: center;
            font-size: 24px;
            background: #2c3e50;
        }

        .game-container {
            flex: 1;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .game-over {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            display: none;
        }

        .game-over button {
            margin-top: 10px;
            padding: 10px 20px;
            font-size: 18px;
            background: #27ae60;
            border: none;
            border-radius: 5px;
            color: white;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div class="score-container">Score: <span id="score">0</span></div>
    <div class="game-container">
        <canvas id="gameCanvas"></canvas>
    </div>
    <div class="game-over" id="gameOver">
        <h2>Game Over!</h2>
        <p>Final Score: <span id="finalScore">0</span></p>
        <button onclick="restartGame()">Play Again</button>
    </div>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const scoreElement = document.getElementById('score');
        const gameOverElement = document.getElementById('gameOver');
        const finalScoreElement = document.getElementById('finalScore');

        // Game constants
        const GRID_SIZE = 20;
        let CELL_SIZE;
        let snake = [];
        let food = { x: 0, y: 0 };
        let direction = 'right';
        let nextDirection = 'right';
        let score = 0;
        let gameLoop;
        let touchStartX = 0;
        let touchStartY = 0;

        // Initialize game
        function initGame() {
            // Set canvas size based on viewport
            const smallerDimension = Math.min(window.innerWidth, window.innerHeight - 50);
            canvas.width = Math.floor(smallerDimension / GRID_SIZE) * GRID_SIZE;
            canvas.height = canvas.width;
            CELL_SIZE = canvas.width / GRID_SIZE;

            // Initialize snake
            snake = [
                { x: 5, y: 5 },
                { x: 4, y: 5 },
                { x: 3, y: 5 }
            ];
            
            score = 0;
            scoreElement.textContent = score;
            generateFood();
            direction = 'right';
            nextDirection = 'right';
        }

        function generateFood() {
            while (true) {
                food = {
                    x: Math.floor(Math.random() * GRID_SIZE),
                    y: Math.floor(Math.random() * GRID_SIZE)
                };
                // Check if food spawned on snake
                if (!snake.some(segment => segment.x === food.x && segment.y === food.y)) {
                    break;
                }
            }
        }

        function drawGame() {
            // Clear canvas
            ctx.fillStyle = '#34495e';
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            // Draw snake
            snake.forEach((segment, index) => {
                ctx.fillStyle = index === 0 ? '#e74c3c' : '#2ecc71';
                ctx.fillRect(
                    segment.x * CELL_SIZE,
                    segment.y * CELL_SIZE,
                    CELL_SIZE - 1,
                    CELL_SIZE - 1
                );
            });

            // Draw food
            ctx.fillStyle = '#f1c40f';
            ctx.beginPath();
            ctx.arc(
                food.x * CELL_SIZE + CELL_SIZE/2,
                food.y * CELL_SIZE + CELL_SIZE/2,
                CELL_SIZE/2 - 1,
                0,
                Math.PI * 2
            );
            ctx.fill();
        }

        function updateGame() {
            direction = nextDirection;
            const head = { ...snake[0] };

            switch (direction) {
                case 'up': head.y--; break;
                case 'down': head.y++; break;
                case 'left': head.x--; break;
                case 'right': head.x++; break;
            }

            // Check for collisions
            if (head.x < 0) head.x = GRID_SIZE - 1;
            if (head.x >= GRID_SIZE) head.x = 0;
            if (head.y < 0) head.y = GRID_SIZE - 1;
            if (head.y >= GRID_SIZE) head.y = 0;

            // Check for self-collision
            if (snake.some(segment => segment.x === head.x && segment.y === head.y)) {
                gameOver();
                return;
            }

            snake.unshift(head);

            // Check if food is eaten
            if (head.x === food.x && head.y === food.y) {
                score += 10;
                scoreElement.textContent = score;
                generateFood();
            } else {
                snake.pop();
            }
        }

        function gameOver() {
            clearInterval(gameLoop);
            gameOverElement.style.display = 'block';
            finalScoreElement.textContent = score;
        }

        function restartGame() {
            gameOverElement.style.display = 'none';
            initGame();
            clearInterval(gameLoop);
            gameLoop = setInterval(gameStep, 150);
        }

        function gameStep() {
            updateGame();
            drawGame();
        }

        // Touch controls
        canvas.addEventListener('touchstart', (e) => {
            e.preventDefault();
            touchStartX = e.touches[0].clientX;
            touchStartY = e.touches[0].clientY;
        }, false);

        canvas.addEventListener('touchmove', (e) => {
            e.preventDefault();
        }, false);

        canvas.addEventListener('touchend', (e) => {
            e.preventDefault();
            const touchEndX = e.changedTouches[0].clientX;
            const touchEndY = e.changedTouches[0].clientY;

            const dx = touchEndX - touchStartX;
            const dy = touchEndY - touchStartY;

            if (Math.abs(dx) > Math.abs(dy)) {
                // Horizontal swipe
                if (dx > 0 && direction !== 'left') {
                    nextDirection = 'right';
                } else if (dx < 0 && direction !== 'right') {
                    nextDirection = 'left';
                }
            } else {
                // Vertical swipe
                if (dy > 0 && direction !== 'up') {
                    nextDirection = 'down';
                } else if (dy < 0 && direction !== 'down') {
                    nextDirection = 'up';
                }
            }
        }, false);

        // Keyboard controls
        document.addEventListener('keydown', (e) => {
            switch (e.key) {
                case 'ArrowUp':
                    if (direction !== 'down') nextDirection = 'up';
                    break;
                case 'ArrowDown':
                    if (direction !== 'up') nextDirection = 'down';
                    break;
                case 'ArrowLeft':
                    if (direction !== 'right') nextDirection = 'left';
                    break;
                case 'ArrowRight':
                    if (direction !== 'left') nextDirection = 'right';
                    break;
            }
        });

        // Handle window resize
        window.addEventListener('resize', () => {
            initGame();
            drawGame();
        });

        // Start game
        initGame();
        gameLoop = setInterval(gameStep, 150);
    </script>
</body>
</html>
```

This Snake game implementation includes:

1. **Responsive Design**
   - Automatically scales to fit any screen size
   - Maintains square aspect ratio
   - Touch-friendly controls

2. **Game Features**
   - Score tracking
   - Wrap-around edges
   - Food collection
   - Collision detection
   - Game over state
   - Restart functionality

3. **Controls**
   - Swipe controls for mobile devices
   - Keyboard arrow keys for desktop
   - Prevents browser scrolling during gameplay

4. **Visual Features**
   - Clean, modern color scheme
   - Distinct head and body segments
   - Circular food
   - Score display
   - Game over overlay

5. **Optimizations**
   - Efficient canvas rendering
   - Touch event handling with preventDefault()
   - Responsive to window resizing

To play:
1. Swipe in any direction to control the snake
2. Collect the yellow food dots to grow and increase score
3. Avoid colliding with yourself
4. When game over, tap/click "Play Again" to restart

The game works well on both mobile and desktop devices, with appropriate controls for each platform.