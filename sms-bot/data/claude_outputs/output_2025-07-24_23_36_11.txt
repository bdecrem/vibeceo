<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>Quick Chat</title>
    <style>
        :root {
            --bg: #FAFAF6;
            --accent: #FF4B4B;
            --accent-secondary: #4AC2FF;
            --text: #2D2D2D;
            --border: #FFE666;
            --success: #B6FFB3;
            --muted: #D3C2F9;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: var(--bg);
            color: var(--text);
            font-size: 16px;
            height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .screen {
            display: none;
            height: 100vh;
            padding: 1rem;
        }

        .screen.active {
            display: flex;
            flex-direction: column;
        }

        .chat-container {
            flex: 1;
            overflow-y: auto;
            margin-bottom: 1rem;
            padding: 1rem;
            background: white;
            border-radius: 12px;
            border: 2px solid var(--border);
        }

        .message {
            margin-bottom: 1rem;
            padding: 0.75rem;
            border-radius: 12px;
            max-width: 80%;
        }

        .message.mine {
            background: var(--accent);
            color: white;
            margin-left: auto;
        }

        .message.others {
            background: var(--muted);
            margin-right: auto;
        }

        .message .author {
            font-size: 0.8rem;
            opacity: 0.8;
            margin-bottom: 0.25rem;
        }

        .message .time {
            font-size: 0.7rem;
            opacity: 0.6;
            margin-top: 0.25rem;
        }

        .input-area {
            display: flex;
            gap: 0.5rem;
            padding: 1rem;
            background: white;
            border-radius: 12px;
            border: 2px solid var(--border);
        }

        input, button {
            min-height: 44px;
        }

        input {
            flex: 1;
            padding: 0.75rem;
            border: 2px solid var(--accent-secondary);
            border-radius: 12px;
            font-size: 16px;
        }

        button {
            background: var(--accent);
            color: white;
            border: none;
            border-radius: 12px;
            padding: 0.75rem 1.5rem;
            font-weight: bold;
            cursor: pointer;
        }

        #welcome-screen, #new-user-screen, #returning-user-screen {
            justify-content: center;
            align-items: center;
            text-align: center;
        }

        h1 {
            color: var(--accent);
            margin-bottom: 2rem;
        }

        select {
            min-height: 44px;
            font-size: 16px;
            padding: 0.5rem;
            width: 100%;
            max-width: 300px;
            margin: 1rem 0;
            border-radius: 12px;
            border: 2px solid var(--accent-secondary);
        }

        #new-user-info {
            background: var(--success);
            padding: 1rem;
            border-radius: 12px;
            margin: 1rem 0;
        }

        .welcome-buttons {
            display: flex;
            gap: 1rem;
            margin-top: 1rem;
        }

        #user-status {
            text-align: center;
            margin-bottom: 1rem;
            font-weight: bold;
            color: var(--accent);
        }
    </style>
</head>
<body>
    <div class="app-container">
        <div id="welcome-screen" class="screen active">
            <h1>Quick Chat</h1>
            <p>Chat with up to 5 friends!</p>
            <div class="welcome-buttons">
                <button onclick="showNewUserScreen()">New User</button>
                <button onclick="showReturningUserScreen()">Returning User</button>
            </div>
        </div>

        <div id="new-user-screen" class="screen">
            <h1>New User</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Register & Enter</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <div id="returning-user-screen" class="screen">
            <h1>Welcome Back</h1>
            <select id="user-label-select"></select>
            <input type="text" id="returning-passcode" placeholder="4-digit code" maxlength="4">
            <button onclick="loginReturningUser()">Login</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>

        <div id="main-screen" class="screen">
            <div id="user-status">Chatting as <span id="current-user-label"></span></div>
            
            <div class="chat-container" id="messages">
                <!-- Messages will appear here -->
            </div>

            <div class="input-area">
                <input type="text" id="message-input" placeholder="Type a message..." maxlength="280">
                <button onclick="sendMessage()">Send</button>
            </div>
        </div>
    </div>

    <script>
        let currentUser = null;
        let pollingInterval;

        async function generateNewUser() {
            const slots = await checkAvailableSlots();
            if (slots.isFull) {
                alert('Chat is full! Maximum 5 users.');
                return false;
            }
            
            const user = await generateUser();
            if (user?.success) {
                currentUser = user;
                document.getElementById('new-user-info').innerHTML = 
                    `Your ID: ${user.userLabel}<br>Code: ${user.passcode}<br>Save these!`;
                return true;
            }
            return false;
        }

        async function registerNewUser() {
            if (!currentUser) return;
            
            const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
            if (result?.success) {
                updateZadAuth(currentUser.userLabel, currentUser.participantId);
                enterMainScreen();
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            await generateNewUser();
        }

        async function loginReturningUser() {
            const label = document.getElementById('user-label-select').value;
            const passcode = document.getElementById('returning-passcode').value;
            
            const result = await authenticateUser(label, passcode);
            if (result?.success) {
                currentUser = { userLabel: label, passcode, participantId: result.user.participantId };
                updateZadAuth(label, result.user.participantId);
                enterMainScreen();
            } else {
                alert('Wrong code!');
            }
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            if (screenId !== 'main-screen') stopPolling();
        }

        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const slots = await checkAvailableSlots();
            const select = document.getElementById('user-label-select');
            select.innerHTML = '<option value="">Select Your ID</option>';
            slots.usedLabels.forEach(label => {
                select.innerHTML += `<option>${label}</option>`;
            });
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            startPolling();
            loadLatestData();
            
            // Focus input and handle enter key
            const input = document.getElementById('message-input');
            input.focus();
            input.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') sendMessage();
            });
        }

        function startPolling() {
            loadLatestData();
            pollingInterval = setInterval(loadLatestData, 2000);
        }

        function stopPolling() {
            if (pollingInterval) clearInterval(pollingInterval);
        }

        async function loadLatestData() {
            const messages = await load('message');
            updateUI(messages);
        }

        function formatTime(dateString) {
            const date = new Date(dateString);
            return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        }

        function updateUI(messages) {
            const container = document.getElementById('messages');
            container.innerHTML = messages
                .sort((a, b) => new Date(a.created_at) - new Date(b.created_at))
                .map(msg => `
                    <div class="message ${msg.author === currentUser.userLabel ? 'mine' : 'others'}">
                        <div class="author">${msg.author}</div>
                        <div class="text">${msg.text}</div>
                        <div class="time">${formatTime(msg.created_at)}</div>
                    </div>
                `).join('');
            
            // Auto-scroll to bottom
            container.scrollTop = container.scrollHeight;
        }

        async function sendMessage() {
            const input = document.getElementById('message-input');
            const text = input.value.trim();
            
            if (text) {
                await save('message', { text });
                input.value = '';
                await loadLatestData();
            }
        }

        initAuth();
    </script>
</body>
</html>