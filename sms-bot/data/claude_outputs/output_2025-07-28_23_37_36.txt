```html
<!DOCTYPE html>
<html>
<head>
    <title>WTAF Tetris</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <style>
        body {
            margin: 0;
            padding: 0;
            background: linear-gradient(to bottom, #1a1a2e, #16213e);
            font-family: sans-serif;
            touch-action: none;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            overflow: hidden;
            color: white;
        }
        #gameCanvas {
            display: block;
            background: #0f3460;
        }
        #controls {
            position: fixed;
            bottom: 0;
            width: 100%;
            height: 120px;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        .btn {
            width: 60px;
            height: 60px;
            margin: 5px;
            background: rgba(255, 255, 255, 0.2);
            border: 2px solid white;
            border-radius: 10px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 24px;
            color: white;
            user-select: none;
        }
        #screen {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background: rgba(15, 52, 96, 0.9);
            z-index: 2000;
        }
        #screen h1 {
            font-size: 40px;
            margin: 0;
            text-align: center;
        }
        #screen p {
            font-size: 20px;
            text-align: center;
            max-width: 80%;
        }
        #screen button {
            background: #e94560;
            color: white;
            border: none;
            padding: 15px 30px;
            font-size: 20px;
            border-radius: 10px;
            margin-top: 20px;
            cursor: pointer;
        }
        #scoreDisplay {
            position: absolute;
            top: 20px;
            left: 20px;
            font-size: 24px;
            z-index: 100;
        }
    </style>
</head>
<body>
    <div id="scoreDisplay">Score: 0</div>
    <canvas id="gameCanvas"></canvas>
    <div id="controls">
        <div class="btn" id="leftBtn">‚Üê</div>
        <div class="btn" id="rotateBtn">‚Üª</div>
        <div class="btn" id="rightBtn">‚Üí</div>
        <div class="btn" id="downBtn">‚Üì</div>
    </div>
    <div id="screen">
        <h1>üß± WTAF Tetris</h1>
        <p>Stack the blocks! Rotate and move to clear lines.</p>
        <button id="startBtn">Start Game</button>
    </div>

    <script>
        var canvas = document.getElementById('gameCanvas');
        var ctx = canvas.getContext('2d');
        var scoreDisplay = document.getElementById('scoreDisplay');
        var screen = document.getElementById('screen');
        var startBtn = document.getElementById('startBtn');
        
        var controlsHeight = 120;
        var dpr = window.devicePixelRatio || 1;
        
        function resizeCanvas() {
            var width = window.innerWidth;
            var height = window.innerHeight - controlsHeight;
            canvas.width = width * dpr;
            canvas.height = height * dpr;
            canvas.style.width = width + 'px';
            canvas.style.height = height + 'px';
            ctx.scale(dpr, dpr);
        }
        
        window.addEventListener('resize', resizeCanvas);
        resizeCanvas();
        
        var COLS = 10;
        var ROWS = 20;
        var blockSize = Math.min(canvas.width, canvas.height) / Math.max(COLS, ROWS);
        blockSize = Math.floor(blockSize / dpr);
        
        var grid = [];
        for (var i = 0; i < ROWS; i++) {
            grid[i] = [];
            for (var j = 0; j < COLS; j++) {
                grid[i][j] = 0;
            }
        }
        
        var colors = [
            null,
            '#FF0D72', // I
            '#0DC2FF', // J
            '#0DFF72', // L
            '#F538FF', // O
            '#FF8E0D', // S
            '#FFE138', // T
            '#3877FF'  // Z
        ];
        
        var tetrominoes = [
            { shape: [[1, 1, 1, 1]], color: 1 }, // I
            { shape: [[2, 0], [2, 0], [2, 2]], color: 2 }, // J
            { shape: [[0, 3], [0, 3], [3, 3]], color: 3 }, // L
            { shape: [[4, 4], [4, 4]], color: 4 }, // O
            { shape: [[0, 5, 5], [5, 5, 0]], color: 5 }, // S
            { shape: [[0, 6, 0], [6, 6, 6]], color: 6 }, // T
            { shape: [[7, 7, 0], [0, 7, 7]], color: 7 }  // Z
        ];
        
        var currentPiece = null;
        var score = 0;
        var gameOver = false;
        var gameStarted = false;
        var lastTime = 0;
        var dropInterval = 1000;
        var dropCounter = 0;
        
        function createPiece() {
            var rand = Math.floor(Math.random() * tetrominoes.length);
            return {
                shape: tetrominoes[rand].shape,
                color: tetrominoes[rand].color,
                x: Math.floor(COLS / 2) - Math.floor(tetrominoes[rand].shape[0].length / 2),
                y: 0
            };
        }
        
        function drawBlock(x, y, color) {
            ctx.fillStyle = colors[color];
            ctx.fillRect(x * blockSize, y * blockSize, blockSize, blockSize);
            ctx.strokeStyle = '#000';
            ctx.strokeRect(x * blockSize, y * blockSize, blockSize, blockSize);
        }
        
        function draw() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Draw grid
            for (var y = 0; y < ROWS; y++) {
                for (var x = 0; x < COLS; x++) {
                    if (grid[y][x]) {
                        drawBlock(x, y, grid[y][x]);
                    }
                }
            }
            
            // Draw current piece
            if (currentPiece) {
                for (var y = 0; y < currentPiece.shape.length; y++) {
                    for (var x = 0; x < currentPiece.shape[y].length; x++) {
                        if (currentPiece.shape[y][x]) {
                            drawBlock(currentPiece.x + x, currentPiece.y + y, currentPiece.color);
                        }
                    }
                }
            }
        }
        
        function collide(piece, grid) {
            for (var y = 0; y < piece.shape.length; y++) {
                for (var x = 0; x < piece.shape[y].length; x++) {
                    if (piece.shape[y][x] !== 0) {
                        var newX = piece.x + x;
                        var newY = piece.y + y;
                        if (
                            newX < 0 ||
                            newX >= COLS ||
                            newY >= ROWS ||
                            (newY >= 0 && grid[newY][newX] !== 0)
                        ) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        function merge(piece, grid) {
            for (var y = 0; y < piece.shape.length; y++) {
                for (var x = 0; x < piece.shape[y].length; x++) {
                    if (piece.shape[y][x] !== 0) {
                        var newY = piece.y + y;
                        if (newY >= 0) {
                            grid[newY][piece.x + x] = piece.color;
                        }
                    }
                }
            }
        }
        
        function rotate(piece) {
            var newShape = [];
            for (var x = 0; x < piece.shape[0].length; x++) {
                newShape.push([]);
                for (var y = piece.shape.length - 1; y >= 0; y--) {
                    newShape[x].push(piece.shape[y][x]);
                }
            }
            return newShape;
        }
        
        function clearLines() {
            var linesCleared = 0;
            for (var y = ROWS - 1; y >= 0; y--) {
                var isLine = true;
                for (var x = 0; x < COLS; x++) {
                    if (grid[y][x] === 0) {
                        isLine = false;
                        break;
                    }
                }
                if (isLine) {
                    linesCleared++;
                    for (var yy = y; yy > 0; yy--) {
                        for (var x = 0; x < COLS; x++) {
                            grid[yy][x] = grid[yy-1][x];
                        }
                    }
                    y++; // Recheck same row index
                }
            }
            if (linesCleared > 0) {
                score += linesCleared * 100;
                scoreDisplay.textContent = 'Score: ' + score;
                dropInterval = Math.max(100, 1000 - Math.floor(score / 500) * 100);
            }
        }
        
        function update(time) {
            if (!gameStarted || gameOver) return;
            
            var deltaTime = time - lastTime;
            lastTime = time;
            
            dropCounter += deltaTime;
            if (dropCounter > dropInterval) {
                drop();
                dropCounter = 0;
            }
            
            draw();
            requestAnimationFrame(update);
        }
        
        function drop() {
            currentPiece.y++;
            if (collide(currentPiece, grid)) {
                currentPiece.y--;
                merge(currentPiece, grid);
                clearLines();
                currentPiece = createPiece();
                if (collide(currentPiece, grid)) {
                    gameOver = true;
                    showScreen('Game Over! Score: ' + score, 'Restart');
                }
            }
        }
        
        function showScreen(title, btnText) {
            screen.querySelector('h1').textContent = title;
            startBtn.textContent = btnText;
            screen.style.display = 'flex';
        }
        
        function startGame() {
            screen.style.display = 'none';
            gameStarted = true;
            gameOver = false;
            score = 0;
            scoreDisplay.textContent = 'Score: 0';
            dropInterval = 1000;
            
            // Reset grid
            for (var y = 0; y < ROWS; y++) {
                for (var x = 0; x < COLS; x++) {
                    grid[y][x] = 0;
                }
            }
            
            currentPiece = createPiece();
            lastTime = 0;
            dropCounter = 0;
            requestAnimationFrame(update);
        }
        
        startBtn.addEventListener('click', startGame);
        
        document.getElementById('leftBtn').addEventListener('click', function() {
            if (!gameStarted || gameOver) return;
            currentPiece.x--;
            if (collide(currentPiece, grid)) {
                currentPiece.x++;
            }
        });
        
        document.getElementById('rightBtn').addEventListener('click', function() {
            if (!gameStarted || gameOver) return;
            currentPiece.x++;
            if (collide(currentPiece, grid)) {
                currentPiece.x--;
            }
        });
        
        document.getElementById('rotateBtn').addEventListener('click', function() {
            if (!gameStarted || gameOver) return;
            var originalShape = currentPiece.shape;
            currentPiece.shape = rotate(currentPiece);
            if (collide(currentPiece, grid)) {
                currentPiece.shape = originalShape;
            }
        });
        
        document.getElementById('downBtn').addEventListener('click', function() {
            if (!gameStarted || gameOver) return;
            drop();
        });
        
        // Keyboard controls
        document.addEventListener('keydown', function(e) {
            if (!gameStarted || gameOver) return;
            if (e.keyCode === 37) { // left
                currentPiece.x--;
                if (collide(currentPiece, grid)) {
                    currentPiece.x++;
                }
            } else if (e.keyCode === 39) { // right
                currentPiece.x++;
                if (collide(currentPiece, grid)) {
                    currentPiece.x--;
                }
            } else if (e.keyCode === 40) { // down
                drop();
            } else if (e.keyCode === 38) { // up
                var originalShape = currentPiece.shape;
                currentPiece.shape = rotate(currentPiece);
                if (collide(currentPiece, grid)) {
                    currentPiece.shape = originalShape;
                }
            }
        });
    </script>
</body>
</html>
```