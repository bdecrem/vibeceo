# WTAF Zero-Admin System - Enhanced Prompt v3.0

You are building a collaborative web app using our zero-admin database system. Follow these requirements exactly.

## What to Build
Build: **[USER REQUEST]**

## ‚ö†Ô∏è CRITICAL AUTHENTICATION RULES ‚ö†Ô∏è
1. **DO NOT MODIFY** any authentication functions - copy them EXACTLY
2. **DO NOT CREATE** your own login logic 
3. **DO NOT CHANGE** how user data is stored
4. **COPY** authentication code EXACTLY as provided
5. **Authentication WILL FAIL** if you modify the provided code

## Technical Requirements

### 1. Single HTML File Structure
Create ONE complete HTML file with this EXACT structure:
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>[Your App Name]</title>
    <style>
        /* COPY THE PROVIDED CSS EXACTLY */
    </style>
</head>
<body>
    <div class="app-container">
        <!-- COPY ALL 4 SCREENS EXACTLY AS PROVIDED -->
    </div>
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js"></script>
    <script>
        // COPY ALL PROVIDED JAVASCRIPT EXACTLY
    </script>
</body>
</html>
```

### 2. Database Integration (COPY EXACTLY)
```javascript
const supabase = window.supabase.createClient(
  'https://tqniseocczttrfwtpbdr.supabase.co', 
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRxbmlzZW9jY3p0dHJmd3RwYmRyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg4ODI5MjIsImV4cCI6MjA2NDQ1ODkyMn0.mwb33p0xIEXy5F7ZoLc1j9-4ZNk3FuT4zrR0aTdm350'
);
```

**Table**: `wtaf_zero_admin_collaborative`
**Required fields for every insert**:
```javascript
{
  app_id: APP_ID,              // Your unique app identifier  
  participant_id: userId,      // User's unique ID
  action_type: 'join'|'message'|'vote'|'update'|etc,
  participant_data: {...},     // User info (userLabel, passcode, etc)
  content_data: {...}          // Action-specific data
}
```

### 3. Required Variables (CUSTOMIZE ONLY USER_LABELS)
```javascript
// IMPORTANT: This will be replaced with sequential test1, test2, test3...
const APP_ID = 'test1'; // This will be replaced by the script with test1, test2, test3, etc.
const USER_LABELS = ['user1üéØ', 'user2‚ö°', 'user3üåü', 'user4üî•', 'user5üíé']; // ‚Üê CUSTOMIZE THESE FOR YOUR APP
let currentUser = null;
```

### 4. HTML Screens (COPY THIS ENTIRE BLOCK EXACTLY)
```html
<div class="app-container">
    <div id="welcome-screen" class="screen active">
        <h1>Welcome to [Your App Name]</h1>
        <p>[Brief app description]</p>
        <button onclick="showNewUserScreen()">New User</button>
        <button onclick="showReturningUserScreen()">Returning User</button>
    </div>
    
    <div id="new-user-screen" class="screen">
        <h1>New User</h1>
        <div id="new-user-info"></div>
        <button onclick="registerNewUser()">Register & Enter App</button>
        <button onclick="showScreen('welcome-screen')">Back</button>
    </div>
    
    <div id="returning-user-screen" class="screen">
        <h1>Returning User</h1>
        <select id="user-label-select">
            <option>Select User</option>
        </select>
        <input type="text" id="returning-passcode" placeholder="Enter 4-digit passcode" maxlength="4">
        <button onclick="loginReturningUser()">Login</button>
        <button onclick="showScreen('welcome-screen')">Back</button>
    </div>
    
    <div id="main-screen" class="screen">
        <h1>[Your App Title]</h1>
        <div id="user-status">Welcome, <span id="current-user-label"></span>!</div>
        
        <!-- PUT YOUR APP CONTENT HERE -->
        <div id="app-content">
            <!-- Your app's main functionality goes here -->
        </div>
        <!-- END APP CONTENT -->
        
        <button onclick="showScreen('welcome-screen')">Leave App</button>
    </div>
</div>
```

### 5. Authentication Functions (COPY THIS ENTIRE BLOCK - DO NOT MODIFY)
```javascript
// Check capacity and generate new user
async function generateNewUser() {
  // First check existing users
  const { data: existingUsers } = await supabase
    .from('wtaf_zero_admin_collaborative')
    .select('participant_data')
    .eq('app_id', APP_ID)
    .eq('action_type', 'join');
  
  const usedLabels = existingUsers?.map(u => u.participant_data?.userLabel).filter(Boolean) || [];
  
  if (usedLabels.length >= 5) {
    alert('App is full (max 5 users)');
    return false;
  }
  
  const availableLabel = USER_LABELS.find(label => !usedLabels.includes(label));
  if (!availableLabel) {
    alert('No available user slots');
    return false;
  }
  
  const code = Math.floor(1000 + Math.random() * 9000).toString();
  currentUser = {
    userLabel: availableLabel,
    passcode: code,
    participantId: availableLabel + '_' + code
  };
  
  // Display credentials to user
  document.getElementById('new-user-info').innerHTML = 
    `<strong>Your Label:</strong> ${currentUser.userLabel}<br><strong>Your Passcode:</strong> ${currentUser.passcode}<br><em>Save these to login later!</em>`;
  
  return true;
}

// Register new user in database
async function registerNewUser() {
  if (!currentUser) {
    alert('Please generate user first');
    return;
  }
  
  try {
    await supabase.from('wtaf_zero_admin_collaborative').insert({
      app_id: APP_ID,
      participant_id: currentUser.participantId,
      action_type: 'join',
      participant_data: {
        userLabel: currentUser.userLabel,
        passcode: currentUser.passcode,
        join_time: Date.now()
      },
      content_data: { message: 'Joined the app', timestamp: Date.now() }
    });
    
    enterMainScreen();
  } catch (error) {
    console.error('Registration error:', error);
    alert('Failed to register user');
  }
}

// IMPORTANT: Make showNewUserScreen async to handle user generation
async function showNewUserScreen() {
    showScreen('new-user-screen');
    const success = await generateNewUser();
    if (!success) {
        showScreen('welcome-screen');
    }
}

// Login returning user
async function loginReturningUser() {
  const selectedLabel = document.getElementById('user-label-select').value;
  const enteredPasscode = document.getElementById('returning-passcode').value.trim();
  
  if (!selectedLabel || selectedLabel === 'Select User') {
    alert('Please select a user label');
    return;
  }
  
  if (!enteredPasscode || enteredPasscode.length !== 4) {
    alert('Please enter a 4-digit passcode');
    return;
  }
  
  try {
    // Get all join records for this app
    const { data: joinRecords } = await supabase
      .from('wtaf_zero_admin_collaborative')
      .select('*')
      .eq('app_id', APP_ID)
      .eq('action_type', 'join');
    
    // Find matching user in JavaScript (more reliable than JSON queries)
    const userRecord = joinRecords?.find(record => 
      record.participant_data?.userLabel === selectedLabel && 
      record.participant_data?.passcode === enteredPasscode
    );
    
    if (userRecord) {
      currentUser = {
        userLabel: selectedLabel,
        passcode: enteredPasscode,
        participantId: userRecord.participant_id
      };
      enterMainScreen();
    } else {
      alert('Invalid user label or passcode');
    }
  } catch (error) {
    console.error('Login error:', error);
    alert('Login failed');
  }
}

// Screen navigation with polling control
function showScreen(screenId) {
  document.querySelectorAll('.screen').forEach(screen => 
    screen.classList.remove('active'));
  document.getElementById(screenId).classList.add('active');
  
  // Stop polling if leaving main screen
  if (screenId !== 'main-screen') {
    stopPolling();
  }
}

function showReturningUserScreen() {
  showScreen('returning-user-screen');
  // Populate user select dropdown
  const userSelect = document.getElementById('user-label-select');
  userSelect.innerHTML = '<option>Select User</option>';
  USER_LABELS.forEach(label => {
    const option = document.createElement('option');
    option.value = label;
    option.textContent = label;
    userSelect.appendChild(option);
  });
}

function enterMainScreen() {
  showScreen('main-screen');
  document.getElementById('current-user-label').textContent = currentUser.userLabel;
  startPolling(); // Start real-time updates
  loadLatestData(); // Load initial data
}
```

### 6. Real-Time Updates (REQUIRED)

Your app MUST update dynamically when other users make changes. Implement polling to check for updates:

**Add this polling function:**
```javascript
let pollingInterval;

function startPolling() {
  // Poll every 2 seconds for updates
  pollingInterval = setInterval(async () => {
    await loadLatestData(); // Your function to reload data
  }, 2000);
}

function stopPolling() {
  if (pollingInterval) {
    clearInterval(pollingInterval);
    pollingInterval = null;
  }
}

// Your app MUST implement loadLatestData() to fetch and display updates
async function loadLatestData() {
  // Example for a chat app:
  const { data } = await supabase
    .from('wtaf_zero_admin_collaborative')
    .select('*')
    .eq('app_id', APP_ID)
    .eq('action_type', 'message') // or whatever your app uses
    .order('created_at', { ascending: true });
    
  // Update your UI with the latest data
  updateUI(data); // You must implement this function
}
```

### 7. CSS Styles (COPY EXACTLY)
```css
body { 
  font-family: 'Inter', sans-serif;
  background: linear-gradient(135deg, #FF2E93 0%, #7C3AED 50%, #3F88FF 100%);
  color: white;
  margin: 0;
  padding: 20px;
}
.app-container {
  max-width: 800px;
  margin: 0 auto;
  background: rgba(0,0,0,0.4);
  backdrop-filter: blur(20px);
  border-radius: 20px;
  padding: 2rem;
  border: 1px solid rgba(255,255,255,0.1);
}
.screen { display: none; }
.screen.active { display: block; }
button {
  background: linear-gradient(135deg, #00FFC6, #57E2E5);
  color: #000;
  border: none;
  padding: 15px 30px;
  border-radius: 50px;
  font-weight: 600;
  cursor: pointer;
  margin: 10px 5px;
}
button:hover {
  transform: translateY(-2px);
  box-shadow: 0 5px 15px rgba(0,255,198,0.3);
}
input, select {
  background: rgba(255,255,255,0.1);
  border: 1px solid rgba(255,255,255,0.3);
  color: white;
  padding: 12px;
  border-radius: 10px;
  margin: 10px 5px;
}
input::placeholder {
  color: rgba(255,255,255,0.7);
}
```

## ‚ùå COMMON MISTAKES TO AVOID
- **NEVER** query userLabel directly: `.eq('userLabel', selectedLabel)` ‚ùå
- **NEVER** modify the authentication functions
- **NEVER** create alternative login methods  
- **NEVER** store user data outside participant_data
- **NEVER** skip the capacity check (max 5 users)
- **NEVER** use random APP_ID generation - use the provided fixed one
- **NEVER** modify screen navigation logic
- **NEVER** forget to make showNewUserScreen async

## ‚úÖ CORRECT DATA PATTERNS

**Store user actions:**
```javascript
await supabase.from('wtaf_zero_admin_collaborative').insert({
  app_id: APP_ID,
  participant_id: currentUser.participantId,
  action_type: 'your_action_type',
  participant_data: {
    userLabel: currentUser.userLabel,
    passcode: currentUser.passcode
  },
  content_data: {
    // Your action-specific data here
    timestamp: Date.now()
  }
});
```

**Load data:**
```javascript
const { data } = await supabase
  .from('wtaf_zero_admin_collaborative')
  .select('*')
  .eq('app_id', APP_ID)
  .eq('action_type', 'your_action_type')
  .order('created_at', { ascending: true });
```

## User Capacity Rules
- **Minimum**: 1 user (app works with just one person)
- **Maximum**: 5 users (enforce this limit strictly)
- **Unique users**: One user per userLabel (prevent duplicates)
- **Capacity check**: Always check before allowing new users

## Your App Functionality
Place all your app-specific code in the `<div id="app-content">` section. Your app should:
- Use the `currentUser` object for user identity
- Store all data with the patterns shown above
- Load data when entering the main screen
- Handle errors gracefully
- Implement real-time updates via polling
- Work seamlessly with 1-5 concurrent users

## Success Criteria
Your app must:
1. ‚úÖ Have working authentication (4 screens, user generation, login)
2. ‚úÖ Support 1-5 users with capacity checking
3. ‚úÖ Save and load data from the database correctly
4. ‚úÖ Implement the core functionality requested
5. ‚úÖ Use the required visual styling
6. ‚úÖ Be contained in a single HTML file
7. ‚úÖ **Update dynamically when other users make changes (real-time updates via polling)**
8. ‚úÖ Handle all edge cases (full capacity, invalid login, etc.)
9. ‚úÖ Use the exact authentication code provided
10. ‚úÖ Store data in correct participant_data structure

## FINAL VALIDATION CHECKLIST
Before finishing, verify ALL of these:
- ‚òê HTML file starts with `<!DOCTYPE html>`
- ‚òê Supabase client uses window.supabase.createClient
- ‚òê Database table is 'wtaf_zero_admin_collaborative'
- ‚òê All 4 screens are present (welcome, new-user, returning-user, main)
- ‚òê Authentication functions copied EXACTLY as provided
- ‚òê User capacity checking (max 5 users) implemented
- ‚òê Data stored with app_id and participant_id fields
- ‚òê showNewUserScreen is async function
- ‚òê Screen navigation uses showScreen() function
- ‚òê CSS includes .screen and .screen.active rules
- ‚òê APP_ID uses the provided sequential value
- ‚òê User data accessed via participant_data object
- ‚òê Real-time polling implemented (startPolling/stopPolling)
- ‚òê Your app functionality is in #app-content div
- ‚òê Error handling for all database operations

## Testing Instructions
To test your app:
1. Open the HTML file in multiple browser windows/tabs
2. Create new users in each window (different USER_LABELS)
3. Verify users can see each other's actions in real-time
4. Test returning user login with saved credentials
5. Verify capacity limit (5 users maximum)
6. Test app functionality with multiple concurrent users

---

**Now build**: [USER REQUEST]