# WTAF Zero-Admin System Test Prompt

You are building a collaborative web app using our zero-admin database system. Follow these requirements EXACTLY.

## What to Build
Build: **[USER REQUEST]**

## ‚ö†Ô∏è CRITICAL AUTHENTICATION RULES ‚ö†Ô∏è
1. DO NOT modify ANY authentication functions
2. DO NOT create your own login logic
3. DO NOT change how user data is stored
4. COPY authentication code EXACTLY as provided
5. Authentication WILL FAIL if you modify the code

## Technical Requirements

### 1. Single HTML File Structure
Create ONE complete HTML file with this EXACT structure:
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>[Your App Name]</title>
    <style>
        /* COPY THE PROVIDED CSS EXACTLY */
    </style>
</head>
<body>
    <div class="app-container">
        <!-- COPY ALL 4 SCREENS EXACTLY AS PROVIDED -->
    </div>
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js"></script>
    <script>
        // COPY ALL PROVIDED JAVASCRIPT EXACTLY
    </script>
</body>
</html>
```

### 2. Database Integration (COPY EXACTLY)
```javascript
const supabase = window.supabase.createClient(
  'https://tqniseocczttrfwtpbdr.supabase.co', 
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRxbmlzZW9jY3p0dHJmd3RwYmRyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg4ODI5MjIsImV4cCI6MjA2NDQ1ODkyMn0.mwb33p0xIEXy5F7ZoLc1j9-4ZNk3FuT4zrR0aTdm350'
);
```

### 3. Required Variables (CUSTOMIZE ONLY USER_LABELS)
```javascript
// IMPORTANT: Use fixed APP_ID so all users can collaborate
const APP_ID = 'shared-wtaf-app';  // All users share the same app instance
const USER_LABELS = ['user1üéØ', 'user2‚ö°', 'user3üåü', 'user4üî•', 'user5üíé']; // ‚Üê ONLY CHANGE THESE
let currentUser = null;
```

### 4. HTML Screens (COPY THIS ENTIRE BLOCK EXACTLY)
```html
<div class="app-container">
    <div id="welcome-screen" class="screen active">
        <h1>Welcome to [Your App Name]</h1>
        <p>[Brief app description]</p>
        <button onclick="showNewUserScreen()">New User</button>
        <button onclick="showReturningUserScreen()">Returning User</button>
    </div>
    
    <div id="new-user-screen" class="screen">
        <h1>New User</h1>
        <div id="new-user-info"></div>
        <button onclick="registerNewUser()">Register & Enter App</button>
        <button onclick="showScreen('welcome-screen')">Back</button>
    </div>
    
    <div id="returning-user-screen" class="screen">
        <h1>Returning User</h1>
        <select id="user-label-select">
            <option>Select User</option>
        </select>
        <input type="text" id="returning-passcode" placeholder="Enter 4-digit passcode" maxlength="4">
        <button onclick="loginReturningUser()">Login</button>
        <button onclick="showScreen('welcome-screen')">Back</button>
    </div>
    
    <div id="main-screen" class="screen">
        <h1>[Your App Title]</h1>
        <div id="user-status">Welcome, <span id="current-user-label"></span>!</div>
        
        <!-- PUT YOUR APP CONTENT HERE -->
        <div id="app-content">
            <!-- Your app's main functionality goes here -->
        </div>
        <!-- END APP CONTENT -->
        
        <button onclick="showScreen('welcome-screen')">Leave App</button>
    </div>
</div>
```

### 5. Authentication Functions (COPY THIS ENTIRE BLOCK - DO NOT MODIFY)
```javascript
async function generateNewUser() {
    const { data: existingUsers } = await supabase
        .from('wtaf_zero_admin_collaborative')
        .select('participant_data')
        .eq('app_id', APP_ID)
        .eq('action_type', 'join');
    
    const usedLabels = existingUsers?.map(u => u.participant_data?.userLabel).filter(Boolean) || [];
    
    if (usedLabels.length >= 5) {
        alert('App is full (max 5 users)');
        return false;
    }
    
    const availableLabel = USER_LABELS.find(label => !usedLabels.includes(label));
    if (!availableLabel) {
        alert('No available user slots');
        return false;
    }
    
    const code = Math.floor(1000 + Math.random() * 9000).toString();
    currentUser = {
        userLabel: availableLabel,
        passcode: code,
        participantId: availableLabel + '_' + code
    };
    
    document.getElementById('new-user-info').innerHTML = 
        `<strong>Your Label:</strong> ${currentUser.userLabel}<br><strong>Your Passcode:</strong> ${currentUser.passcode}<br><em>Save these to login later!</em>`;
    
    return true;
}

async function registerNewUser() {
    if (!currentUser) {
        alert('Please generate user first');
        return;
    }
    
    try {
        await supabase.from('wtaf_zero_admin_collaborative').insert({
            app_id: APP_ID,
            participant_id: currentUser.participantId,
            action_type: 'join',
            participant_data: {
                userLabel: currentUser.userLabel,
                passcode: currentUser.passcode,
                join_time: Date.now()
            },
            content_data: { message: 'Joined the app', timestamp: Date.now() }
        });
        
        enterMainScreen();
    } catch (error) {
        console.error('Registration error:', error);
        alert('Failed to register user');
    }
}

async function loginReturningUser() {
    const selectedLabel = document.getElementById('user-label-select').value;
    const enteredPasscode = document.getElementById('returning-passcode').value.trim();
    
    if (!selectedLabel || selectedLabel === 'Select User') {
        alert('Please select a user label');
        return;
    }
    
    if (!enteredPasscode || enteredPasscode.length !== 4) {
        alert('Please enter a 4-digit passcode');
        return;
    }
    
    try {
        const { data: joinRecords } = await supabase
            .from('wtaf_zero_admin_collaborative')
            .select('*')
            .eq('app_id', APP_ID)
            .eq('action_type', 'join');
        
        const userRecord = joinRecords?.find(record => 
            record.participant_data?.userLabel === selectedLabel && 
            record.participant_data?.passcode === enteredPasscode
        );
        
        if (userRecord) {
            currentUser = {
                userLabel: selectedLabel,
                passcode: enteredPasscode,
                participantId: userRecord.participant_id
            };
            enterMainScreen();
        } else {
            alert('Invalid user label or passcode');
        }
    } catch (error) {
        console.error('Login error:', error);
        alert('Login failed');
    }
}

function showScreen(screenId) {
    document.querySelectorAll('.screen').forEach(screen => 
        screen.classList.remove('active'));
    document.getElementById(screenId).classList.add('active');
}

async function showNewUserScreen() {
    showScreen('new-user-screen');
    const success = await generateNewUser();
    if (!success) {
        showScreen('welcome-screen');
    }
}

function showReturningUserScreen() {
    showScreen('returning-user-screen');
    const userSelect = document.getElementById('user-label-select');
    userSelect.innerHTML = '<option>Select User</option>';
    USER_LABELS.forEach(label => {
        const option = document.createElement('option');
        option.value = label;
        option.textContent = label;
        userSelect.appendChild(option);
    });
}

function enterMainScreen() {
    showScreen('main-screen');
    document.getElementById('current-user-label').textContent = currentUser.userLabel;
    // Call your app's initialization function here
}
```

### 6. CSS Styles (COPY EXACTLY)
```css
body { 
    font-family: 'Inter', sans-serif;
    background: linear-gradient(135deg, #FF2E93 0%, #7C3AED 50%, #3F88FF 100%);
    color: white;
}
.app-container {
    max-width: 800px;
    margin: 0 auto;
    background: rgba(0,0,0,0.4);
    backdrop-filter: blur(20px);
    border-radius: 20px;
    padding: 2rem;
    border: 1px solid rgba(255,255,255,0.1);
}
.screen { display: none; }
.screen.active { display: block; }
button {
    background: linear-gradient(135deg, #00FFC6, #57E2E5);
    color: #000;
    border: none;
    padding: 15px 30px;
    border-radius: 50px;
    font-weight: 600;
    cursor: pointer;
}
```

## ‚ùå COMMON MISTAKES TO AVOID
- NEVER query userLabel directly: `.eq('userLabel', selectedLabel)` ‚ùå
- NEVER modify the authentication functions
- NEVER create alternative login methods
- NEVER store user data outside participant_data
- NEVER skip the capacity check

## ‚úÖ CORRECT DATA PATTERNS

**Store user actions:**
```javascript
await supabase.from('wtaf_zero_admin_collaborative').insert({
    app_id: APP_ID,
    participant_id: currentUser.participantId,
    action_type: 'your_action_type',
    participant_data: {
        userLabel: currentUser.userLabel,
        passcode: currentUser.passcode
    },
    content_data: {
        // Your action-specific data here
    }
});
```

**Load data:**
```javascript
const { data } = await supabase
    .from('wtaf_zero_admin_collaborative')
    .select('*')
    .eq('app_id', APP_ID)
    .eq('action_type', 'your_action_type')
    .order('created_at', { ascending: true });
```

## YOUR APP FUNCTIONALITY
Place all your app-specific code in the `<div id="app-content">` section. Your app should:
- Use the `currentUser` object for user identity
- Store all data with the patterns shown above
- Load data when entering the main screen
- Handle errors gracefully

## FINAL CHECKLIST
Before finishing, verify:
- ‚òê All 4 screens are present (welcome, new-user, returning-user, main)
- ‚òê Authentication functions are copied EXACTLY as provided
- ‚òê User capacity is checked (max 5 users)
- ‚òê Data is stored with app_id and participant_id
- ‚òê Your app functionality is in the app-content div
- ‚òê CSS is copied exactly as provided

---

**Now build**: [USER REQUEST]