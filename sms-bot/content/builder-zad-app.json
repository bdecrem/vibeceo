{
  "role": "system",
  "content": "Return this EXACT ZAD chat HTML template:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>ZAD Chat</title>\n    <script src=\"https://unpkg.com/@supabase/supabase-js@2\"></script>\n    <style>\n        @import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@300;400;500;600;700&family=Inter:wght@300;400;500;600&display=swap');\n        * { box-sizing: border-box; }\n        body { \n            font-family: 'Inter', sans-serif; \n            margin: 0; \n            padding: 20px; \n            background: linear-gradient(135deg, #FF2E93 0%, #7C3AED 50%, #3F88FF 100%);\n            background-size: 400% 400%;\n            animation: gradientShift 15s ease-in-out infinite;\n            min-height: 100vh;\n            color: white;\n            overflow-x: hidden;\n        }\n        @keyframes gradientShift {\n            0% { background-position: 0% 50%; }\n            50% { background-position: 100% 50%; }\n            100% { background-position: 0% 50%; }\n        }\n        h1 { font-family: 'Space Grotesk', sans-serif; font-weight: 700; font-size: 3rem; text-align: center; margin: 0 0 2rem 0; text-shadow: 0 0 20px rgba(255,255,255,0.5); }\n        h2, h3 { font-family: 'Space Grotesk', sans-serif; font-weight: 600; }\n        .app-container { max-width: 800px; margin: 0 auto; background: rgba(0,0,0,0.2); backdrop-filter: blur(20px); border-radius: 20px; padding: 2rem; border: 1px solid rgba(255,255,255,0.1); }\n        .screen { display: none; }\n        .screen.active { display: block; }\n        .emoji-picker { display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 15px; margin: 20px 0; }\n        .emoji-option { font-size: 16px; font-weight: 600; cursor: pointer; padding: 15px; border: 2px solid rgba(255,255,255,0.2); background: rgba(255,255,255,0.1); border-radius: 15px; transition: all 0.3s ease; text-align: center; }\n        .emoji-option:hover, .emoji-option.selected { border-color: #00FFC6; background: rgba(0,255,198,0.2); transform: translateY(-3px); }\n        .user-info { background: linear-gradient(135deg, rgba(0,255,198,0.2), rgba(87,226,229,0.2)); padding: 20px; border-radius: 15px; margin: 20px 0; border: 1px solid rgba(0,255,198,0.3); }\n        button { font-family: 'Space Grotesk', sans-serif; font-weight: 600; padding: 15px 30px; margin: 10px 5px; cursor: pointer; border: none; border-radius: 50px; background: linear-gradient(135deg, #00FFC6, #57E2E5); color: #000; font-size: 16px; }\n        input, textarea { font-family: 'Inter', sans-serif; padding: 15px; margin: 10px 0; width: 100%; border: 2px solid rgba(255,255,255,0.2); border-radius: 15px; background: rgba(255,255,255,0.1); color: white; }\n        .floating-emoji { position: fixed; font-size: 2rem; pointer-events: none; z-index: 1000; animation: float 6s ease-in-out infinite; }\n        @keyframes float { 0%, 100% { transform: translateY(0px) rotate(0deg); } 25% { transform: translateY(-20px) rotate(5deg); } }\n    </style>\n</head>\n<body>\n    <div class=\"floating-emoji\" style=\"top: 10%; left: 10%;\">âš¡</div>\n    <div class=\"floating-emoji\" style=\"top: 20%; right: 15%;\">ðŸš€</div>\n    <div class=\"floating-emoji\" style=\"top: 60%; left: 5%;\">ðŸ’Ž</div>\n    \n    <div class=\"app-container\">\n        <h1>ZAD Chat</h1>\n        \n        <div id=\"welcomeScreen\" class=\"screen active\">\n            <h2>Welcome to the Brain Trust!</h2>\n            <p>Zero Admin Data chat for up to 5 rebels. No signup. No bullshit. Pure collaborative chaos.</p>\n            <button onclick=\"showNewUserScreen()\">I'm ready to riot</button>\n            <button onclick=\"showReturningUserScreen()\">I'm already initiated</button>\n        </div>\n        \n        <div id=\"newUserScreen\" class=\"screen\">\n            <h2>Welcome to the rebellion!</h2>\n            <div class=\"user-info\">\n                <h3>Your Identity: <span id=\"newUserLabel\"></span></h3>\n                <h3>Your Secret Passcode: <span id=\"newUserCode\"></span></h3>\n                <p><strong>Save these credentials!</strong> No email. No password reset. Pure anarchist auth.</p>\n            </div>\n            <button onclick=\"joinAsNewUser()\">Enter the Chaos</button>\n            <button onclick=\"showWelcomeScreen()\">Actually, I'm scared</button>\n        </div>\n        \n        <div id=\"returningUserScreen\" class=\"screen\">\n            <h2>The prodigal rebel returns!</h2>\n            <h3>Choose your fighter:</h3>\n            <div class=\"emoji-picker\">\n                <div class=\"emoji-option\" data-user=\"User 1\">User 1</div>\n                <div class=\"emoji-option\" data-user=\"User 2\">User 2</div>\n                <div class=\"emoji-option\" data-user=\"User 3\">User 3</div>\n                <div class=\"emoji-option\" data-user=\"User 4\">User 4</div>\n                <div class=\"emoji-option\" data-user=\"User 5\">User 5</div>\n            </div>\n            <input type=\"text\" id=\"returningCode\" placeholder=\"Your 4-digit rebellion key\">\n            <button onclick=\"signInReturningUser()\">Hack The Planet</button>\n            <button onclick=\"showWelcomeScreen()\">Retreat to Safety</button>\n        </div>\n        \n        <div id=\"chatScreen\" class=\"screen\">\n            <div id=\"userStatus\"></div>\n            <hr style=\"border: 1px solid rgba(255,255,255,0.2); margin: 20px 0;\">\n            <div id=\"messages\">Loading transmissions...</div>\n            <hr style=\"border: 1px solid rgba(255,255,255,0.2); margin: 20px 0;\">\n            <form id=\"messageForm\">\n                <textarea id=\"messageInput\" rows=\"2\" placeholder=\"Transmit your message...\"></textarea>\n                <button type=\"submit\">Broadcast</button>\n            </form>\n            <button onclick=\"leaveChat()\">Escape the Matrix</button>\n        </div>\n    </div>\n    \n    <script>\n        const supabase = window.supabase.createClient('YOUR_SUPABASE_URL', 'YOUR_SUPABASE_ANON_KEY');\n        let currentUser = null;\n        const APP_ID = 'APP_TABLE_ID';\n        const USER_LABELS = ['User 1', 'User 2', 'User 3', 'User 4', 'User 5'];\n        \n        function showScreen(screenId) {\n            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));\n            document.getElementById(screenId).classList.add('active');\n        }\n        \n        function showWelcomeScreen() { showScreen('welcomeScreen'); }\n        async function showNewUserScreen() { await generateNewUser(); showScreen('newUserScreen'); }\n        function showReturningUserScreen() { setupEmojiPicker(); showScreen('returningUserScreen'); }\n        function showChatScreen() { updateUserStatus(); loadMessages(); showScreen('chatScreen'); }\n        \n        async function generateNewUser() {\n            const code = Math.floor(1000 + Math.random() * 9000).toString();\n            const availableLabel = 'User 1';\n            document.getElementById('newUserLabel').textContent = availableLabel;\n            document.getElementById('newUserCode').textContent = code;\n            currentUser = { userLabel: availableLabel, passcode: code, participantId: availableLabel + '_' + code };\n        }\n        \n        function setupEmojiPicker() {\n            document.querySelectorAll('.emoji-option').forEach(option => {\n                option.addEventListener('click', function() {\n                    document.querySelectorAll('.emoji-option').forEach(o => o.classList.remove('selected'));\n                    this.classList.add('selected');\n                });\n            });\n        }\n        \n        async function joinAsNewUser() { await joinChat(); showChatScreen(); }\n        \n        async function signInReturningUser() {\n            const selectedUser = document.querySelector('.emoji-option.selected');\n            const code = document.getElementById('returningCode').value.trim();\n            if (!selectedUser || !code) { alert('Please select user and enter code'); return; }\n            currentUser = { userLabel: selectedUser.dataset.user, passcode: code, participantId: selectedUser.dataset.user + '_' + code };\n            showChatScreen();\n        }\n        \n        async function joinChat() {\n            await supabase.from('wtaf_zero_admin_collaborative').insert({\n                app_id: APP_ID, participant_id: currentUser.participantId, action_type: 'join',\n                participant_data: { userLabel: currentUser.userLabel, passcode: currentUser.passcode, join_time: Date.now() },\n                content_data: { message: 'Joined the brain trust', timestamp: Date.now() }\n            });\n        }\n        \n        function updateUserStatus() {\n            document.getElementById('userStatus').innerHTML = \`<strong>Rebel Identity: \${currentUser.userLabel} | Passcode: \${currentUser.passcode}</strong>\`;\n        }\n        \n        document.getElementById('messageForm').addEventListener('submit', async function(e) {\n            e.preventDefault();\n            const messageInput = document.getElementById('messageInput');\n            const message = messageInput.value.trim();\n            if (!message) return;\n            \n            await supabase.from('wtaf_zero_admin_collaborative').insert({\n                app_id: APP_ID, participant_id: currentUser.participantId, action_type: 'message',\n                content_data: { message: message, timestamp: Date.now(), userLabel: currentUser.userLabel }\n            });\n            \n            messageInput.value = '';\n            loadMessages();\n        });\n        \n        async function loadMessages() {\n            try {\n                const { data, error } = await supabase.from('wtaf_zero_admin_collaborative')\n                    .select('*').eq('app_id', APP_ID).in('action_type', ['join', 'message'])\n                    .order('created_at', { ascending: true });\n                \n                const messagesDiv = document.getElementById('messages');\n                if (data && data.length > 0) {\n                    messagesDiv.innerHTML = data.map(row => {\n                        const userLabel = row.content_data?.userLabel || 'Unknown';\n                        const message = row.content_data?.message || '';\n                        const time = new Date(row.created_at).toLocaleTimeString();\n                        return \`<div style=\"margin: 10px 0; padding: 10px; background: rgba(255,255,255,0.1); border-radius: 10px;\"><strong>\${userLabel} (\${time}):</strong> \${message}</div>\`;\n                    }).join('');\n                } else {\n                    messagesDiv.innerHTML = '<p>The underground is silent. Send the first transmission!</p>';\n                }\n            } catch (error) {\n                document.getElementById('messages').innerHTML = '<p>Error loading messages</p>';\n            }\n        }\n        \n        function leaveChat() { currentUser = null; showWelcomeScreen(); }\n        \n        setInterval(() => {\n            if (currentUser && document.getElementById('chatScreen').classList.contains('active')) {\n                loadMessages();\n            }\n        }, 3000);\n        \n        console.log('ðŸš€ WTAF ZAD Chat Ready!');\n    </script>\n</body>\n</html>\n```"
}
