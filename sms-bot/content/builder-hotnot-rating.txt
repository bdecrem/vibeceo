# Hot or Not Rating Builder - Nostalgic Rating Interface

You are creating a "Hot or Not" style rating web app with nostalgic early 2000s design aesthetics for rating AI startups and unicorns.

## Core Requirements

### 1. Nostalgic Hot or Not Design
- Early 2000s web design aesthetic
- Bold, centered layouts
- Bright colors (hot pink, electric blue, lime green)
- Large fonts with web-safe typography (Arial, Verdana)
- Simple button styling with beveled edges
- Gradients and drop shadows
- Clean, uncluttered interface focused on the rating action

### 2. Rating Interface Structure
```html
<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>Startup Hot or Not - Rate AI Startups</title>
    <style>
        /* Early 2000s nostalgic styling */
        body {
            font-family: Arial, Verdana, sans-serif;
            background: linear-gradient(45deg, #ff1493, #00bfff);
            margin: 0;
            padding: 20px;
            text-align: center;
        }
        
        .main-container {
            background: white;
            border-radius: 15px;
            box-shadow: 0 8px 16px rgba(0,0,0,0.3);
            max-width: 500px;
            margin: 0 auto;
            padding: 30px;
        }
        
        .startup-card {
            background: #f0f8ff;
            border: 3px solid #1e90ff;
            border-radius: 12px;
            padding: 25px;
            margin: 20px 0;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        
        .startup-name {
            font-size: 28px;
            font-weight: bold;
            color: #ff1493;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
        }
        
        .startup-info {
            font-size: 16px;
            color: #333;
            line-height: 1.4;
            margin-bottom: 15px;
        }
        
        .rating-buttons {
            margin: 25px 0;
        }
        
        .hot-btn, .not-btn {
            font-size: 24px;
            font-weight: bold;
            padding: 15px 40px;
            margin: 0 15px;
            border: 3px solid;
            border-radius: 25px;
            cursor: pointer;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.3);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
            transition: all 0.3s;
        }
        
        .hot-btn {
            background: linear-gradient(45deg, #ff4500, #ff1493);
            color: white;
            border-color: #ff1493;
        }
        
        .not-btn {
            background: linear-gradient(45deg, #4169e1, #00bfff);
            color: white;
            border-color: #4169e1;
        }
        
        .hot-btn:hover, .not-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(0,0,0,0.3);
        }
        
        .stats {
            background: #fffacd;
            border: 2px solid #ffd700;
            border-radius: 10px;
            padding: 15px;
            margin: 20px 0;
        }
        
        .logo {
            font-size: 36px;
            font-weight: bold;
            color: #ff1493;
            text-shadow: 3px 3px 6px rgba(0,0,0,0.3);
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <div class="main-container">
        <div class="logo">üî• Startup Hot or Not üî•</div>
        
        <div id="startup-display">
            <div class="startup-card">
                <div class="startup-name" id="startup-name">Loading...</div>
                <div class="startup-info" id="startup-info">Getting next startup...</div>
                <div class="startup-valuation" id="startup-valuation"></div>
            </div>
            
            <div class="rating-buttons">
                <button class="hot-btn" onclick="rateStartup('hot')" id="hot-btn">
                    üî• HOT! üî•
                </button>
                <button class="not-btn" onclick="rateStartup('not')" id="not-btn">
                    ‚ùÑÔ∏è NOT ‚ùÑÔ∏è
                </button>
            </div>
        </div>
        
        <div class="stats">
            <div><strong>Your Rating Progress:</strong></div>
            <div>Hot: <span id="hot-count">0</span> | Not: <span id="not-count">0</span></div>
            <div>Total Rated: <span id="total-count">0</span></div>
        </div>
        
        <div style="margin-top: 20px; color: #666; font-size: 14px;">
            Rate AI startups and unicorns! Swipe through and decide: Hot investment or Not?
        </div>
    </div>

    <script>
        // App configuration
        window.APP_ID = 'PLACEHOLDER_APP_ID';
        
        let currentStartupIndex = 0;
        let userRatings = {
            hot: 0,
            not: 0,
            total: 0
        };
        
        // Dynamic startup data (will be populated by generator)
        let startupData = [
            {
                id: 'demo_1',
                startup_name: 'NeuralFlow AI',
                description: 'AI-powered customer service automation platform that reduces response time by 90%',
                valuation: '$2.5 billion',
                stage: 'Series C',
                founders: 'Sarah Chen & Mike Rodriguez',
                tagline: 'The future of intelligent automation',
                rating: 0,
                votes: 0
            }
        ];
        
        // Initialize the app
        function initHotNotApp() {
            displayCurrentStartup();
            updateStats();
            
            // Load existing ratings from ZAD if available
            loadExistingRatings();
        }
        
        // Display current startup
        function displayCurrentStartup() {
            if (currentStartupIndex >= startupData.length) {
                showCompleteMessage();
                return;
            }
            
            const startup = startupData[currentStartupIndex];
            document.getElementById('startup-name').textContent = startup.startup_name;
            document.getElementById('startup-info').innerHTML = `
                <div style="margin-bottom: 10px;"><strong>${startup.tagline}</strong></div>
                <div style="margin-bottom: 8px;">${startup.description}</div>
                <div style="color: #ff1493; font-weight: bold; font-size: 18px;">${startup.valuation}</div>
                <div style="color: #666; font-size: 14px; margin-top: 8px;">
                    ${startup.stage} ‚Ä¢ Founded by ${startup.founders}
                </div>
            `;
        }
        
        // Rate a startup
        async function rateStartup(rating) {
            const startup = startupData[currentStartupIndex];
            
            // Update local stats
            userRatings[rating]++;
            userRatings.total++;
            
            // Save rating to ZAD database
            const ratingData = {
                startup_id: startup.id,
                startup_name: startup.startup_name,
                rating: rating,
                valuation: startup.valuation,
                user_session: getCurrentUser().username || 'anonymous'
            };
            
            try {
                await save('startup_rating', ratingData);
                console.log('Rating saved:', ratingData);
            } catch (error) {
                console.error('Error saving rating:', error);
            }
            
            // Move to next startup
            currentStartupIndex++;
            
            // Update display
            updateStats();
            
            // Small delay for better UX
            setTimeout(() => {
                displayCurrentStartup();
            }, 300);
        }
        
        // Update statistics display
        function updateStats() {
            document.getElementById('hot-count').textContent = userRatings.hot;
            document.getElementById('not-count').textContent = userRatings.not;
            document.getElementById('total-count').textContent = userRatings.total;
        }
        
        // Show completion message
        function showCompleteMessage() {
            document.getElementById('startup-display').innerHTML = `
                <div class="startup-card" style="background: linear-gradient(45deg, #ffd700, #ffed4e);">
                    <div class="startup-name">üéâ All Done! üéâ</div>
                    <div class="startup-info">
                        You've rated all the startups!<br>
                        <strong>Hot:</strong> ${userRatings.hot} | <strong>Not:</strong> ${userRatings.not}
                    </div>
                    <button onclick="restartRating()" style="
                        background: linear-gradient(45deg, #32cd32, #00ff00);
                        color: white;
                        border: 3px solid #32cd32;
                        border-radius: 20px;
                        padding: 12px 30px;
                        font-size: 18px;
                        font-weight: bold;
                        cursor: pointer;
                        margin-top: 15px;
                        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
                    ">Rate Again</button>
                </div>
            `;
        }
        
        // Restart rating process
        function restartRating() {
            currentStartupIndex = 0;
            userRatings = { hot: 0, not: 0, total: 0 };
            
            // Shuffle startup data for variety
            shuffleArray(startupData);
            
            document.getElementById('startup-display').innerHTML = `
                <div class="startup-card">
                    <div class="startup-name" id="startup-name">Loading...</div>
                    <div class="startup-info" id="startup-info">Getting next startup...</div>
                    <div class="startup-valuation" id="startup-valuation"></div>
                </div>
                
                <div class="rating-buttons">
                    <button class="hot-btn" onclick="rateStartup('hot')" id="hot-btn">
                        üî• HOT! üî•
                    </button>
                    <button class="not-btn" onclick="rateStartup('not')" id="not-btn">
                        ‚ùÑÔ∏è NOT ‚ùÑÔ∏è
                    </button>
                </div>
            `;
            
            displayCurrentStartup();
            updateStats();
        }
        
        // Shuffle array helper
        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
        }
        
        // Load existing ratings (placeholder for ZAD integration)
        async function loadExistingRatings() {
            try {
                const existingRatings = await load('startup_rating');
                console.log('Loaded existing ratings:', existingRatings);
            } catch (error) {
                console.error('Could not load existing ratings:', error);
            }
        }
        
        // ZAD Helper Functions (would be injected by ZAD system)
        async function save(type, data) {
            // This would be replaced by actual ZAD save function
            console.log('Saving to ZAD:', type, data);
            return { success: true };
        }
        
        async function load(type) {
            // This would be replaced by actual ZAD load function
            console.log('Loading from ZAD:', type);
            return [];
        }
        
        function getCurrentUser() {
            // This would be replaced by actual ZAD getCurrentUser function
            return { username: 'Demo User' };
        }
        
        // Initialize when page loads
        document.addEventListener('DOMContentLoaded', initHotNotApp);
    </script>
</body>
</html>
```

### 3. ZAD Integration Requirements

**MANDATORY: Must use ZAD functions for data persistence:**
- `await save('startup_rating', ratingData)` - Save each rating
- `await load('startup_rating')` - Load existing ratings
- `getCurrentUser()` - Get current user info
- Auto-refresh ratings every 2 seconds with `loadLatestData()`

**Data Structure for Ratings:**
```javascript
{
    startup_id: 'startup_1',
    startup_name: 'NeuralFlow AI',
    rating: 'hot' | 'not',
    valuation: '$2.5 billion',
    user_session: 'username',
    timestamp: '2025-01-13T...'
}
```

### 4. Dynamic Startup Data Integration

The app MUST use the dynamic startup data generated by the startup-generator helper:

```javascript
// This will be replaced with actual generated data
const STARTUP_DATA = [
    {
        id: 'startup_1',
        startup_name: 'NeuralFlow AI',
        description: 'AI-powered customer service automation platform',
        valuation: '$2.5 billion',
        stage: 'Series C',
        founders: 'Sarah Chen & Mike Rodriguez',
        tagline: 'The future of intelligent automation',
        rating: 0,
        votes: 0
    }
    // ... more startups generated dynamically
];
```

### 5. Mobile Responsiveness

**CRITICAL: Mobile-first design:**
- Large touch targets (minimum 44px)
- Readable fonts (minimum 16px)
- Full-width buttons on mobile
- Swipe gestures for rating (optional enhancement)
- Viewport meta tag for proper mobile scaling

### 6. Nostalgic Design Elements

**Visual Requirements:**
- Bright gradient backgrounds
- Bold, shadowed text
- Button hover effects with transforms
- Early 2000s color palette (hot pink, electric blue, lime green)
- Comic Sans MS or Arial/Verdana fonts
- Drop shadows and beveled borders
- Centered layout with contained width

### 7. User Experience Flow

1. **Landing**: User sees logo and first startup
2. **Rating**: Click "HOT" or "NOT" buttons
3. **Transition**: Brief animation, next startup appears
4. **Stats**: Running count of ratings displayed
5. **Completion**: Celebration screen when all rated
6. **Restart**: Option to shuffle and rate again

### 8. Error Handling

- Graceful fallbacks if ZAD functions fail
- Loading states during data operations
- Clear feedback for user actions
- Retry mechanisms for failed saves

## Build Instructions

1. **Single HTML file** with embedded CSS and JavaScript
2. **Use provided startup data structure** (will be populated with real data)
3. **Integrate ZAD save/load functions** for persistence
4. **Implement nostalgic Hot or Not design** with early 2000s aesthetics  
5. **Ensure mobile responsiveness** with touch-friendly interface
6. **Add rating statistics** and completion handling
7. **Test on mobile devices** to ensure proper scaling and touch interactions

The final app should feel like a fun, nostalgic trip back to early 2000s web design while providing modern functionality for rating AI startups and unicorns!