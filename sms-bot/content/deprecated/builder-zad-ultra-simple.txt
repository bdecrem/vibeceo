WTAF Ultra-Simple Collaborative App Builder

Build a collaborative web app with zero setup complexity. Just focus on the user experience!

## What to Build

Build: [USER REQUEST]

## CRITICAL: Helper Library Already Included

The following functions are PROVIDED by an included library. You don't need to implement them - just call them:

```javascript
// PROVIDED FUNCTIONS (DO NOT IMPLEMENT - JUST USE):
initAuth()                      // Creates 4-screen auth flow automatically
getCurrentUser()                // Returns {username: "CHAOS_AGENT", id: "..."} or null
await save(type, data)          // Saves any data to backend
await load(type)                // Loads all data of that type
enableLiveUpdates(type, callback) // Real-time sync when data changes
```

## âœ… VALIDATION CHECKLIST (Your response MUST include ALL of these)

- [ ] HTML starts with `<!DOCTYPE html>`
- [ ] Contains `<div id="app-content">` wrapper for all app content
- [ ] Calls `initAuth()` immediately after opening `<script>` tag
- [ ] Uses `startApp()` pattern to wait for authentication
- [ ] Uses `await save()` for storing data
- [ ] Uses `await load()` for retrieving data
- [ ] Calls `enableLiveUpdates()` for real-time sync
- [ ] NO implementation of these functions (they're already provided)

## Core Functions Documentation

### Authentication (Zero Setup Required)

```javascript
// REQUIRED: Call once at page load - creates 4-screen auth flow automatically
initAuth()  // <-- This function is PROVIDED, just call it

// Get current logged-in user (or null if not logged in)
const user = getCurrentUser() // Returns: {username: "CHAOS_AGENT", id: "CHAOS_AGENT_1234"}
```

### Data Persistence (Save Anything)

```javascript
// Save any data - automatically handles all backend complexity
await save('messages', {text: "Hello world!", timestamp: Date.now()})
await save('votes', {choice: 'option_a', user: getCurrentUser().username})

// Load any data - gets everything of that type
const messages = await load('messages')  // Returns array of all messages
const votes = await load('votes')        // Returns array of all votes
```

### Real-Time Updates (Automatic)

```javascript
// Enable live updates - automatically syncs when other users make changes
enableLiveUpdates('messages', refreshMessages)  // Calls refreshMessages() when data changes
```

## REQUIRED App Structure

CRITICAL: Your HTML MUST follow this exact structure:

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Your App Name</title>
    <style>
        /* Styles here */
    </style>
</head>
<body>
    <!-- CRITICAL: ALL app content MUST be inside this div -->
    <div id="app-content">
        <!-- Your entire app interface goes here -->
    </div>
    
    <script>
        // CRITICAL: These three lines MUST appear first
        initAuth()  // Initialize authentication system
        
        // CRITICAL: Use this pattern to wait for auth
        async function startApp() {
            if (!getCurrentUser()) {
                setTimeout(startApp, 100)
                return
            }
            // Your app initialization code here
            setupApp()
            loadInitialData()
            enableLiveUpdates('your-data-type', refreshData)
        }
        
        // Your app functions here
        
        // CRITICAL: Start the app
        startApp()
    </script>
</body>
</html>
```

## Complete Working Example - Chat App

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WTAF Chat</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=Inter:wght@400;600&display=swap');
        
        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #FF2E93 0%, #7C3AED 50%, #3F88FF 100%);
            background-size: 400% 400%;
            animation: gradientShift 15s ease-in-out infinite;
            color: white;
            margin: 0;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        @keyframes gradientShift {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }
        
        .app-container {
            max-width: 800px;
            width: 90%;
            background: rgba(0,0,0,0.4);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            padding: 2rem;
            border: 1px solid rgba(255,255,255,0.1);
        }
        
        h1 {
            font-family: 'Space Grotesk', sans-serif;
            font-size: 2.5rem;
            text-align: center;
            margin-bottom: 2rem;
            text-shadow: 2px 2px 0 #FF2E93, -2px -2px 0 #00FFC6;
        }
        
        button {
            background: linear-gradient(135deg, #00FFC6, #57E2E5);
            color: #000;
            border: none;
            padding: 15px 30px;
            border-radius: 50px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        
        button:hover {
            transform: scale(1.05);
            box-shadow: 0 0 30px rgba(0, 255, 198, 0.5);
        }
        
        input {
            background: rgba(255,255,255,0.1);
            border: 2px solid rgba(255,255,255,0.2);
            color: white;
            padding: 12px 20px;
            border-radius: 30px;
            font-size: 16px;
            width: calc(100% - 150px);
            box-sizing: border-box;
        }
        
        input:focus {
            outline: none;
            border-color: #00FFC6;
            box-shadow: 0 0 20px rgba(0, 255, 198, 0.3);
        }
        
        #messages {
            height: 400px;
            overflow-y: auto;
            margin: 20px 0;
            padding: 20px;
            background: rgba(0,0,0,0.2);
            border-radius: 15px;
        }
        
        .message {
            margin: 10px 0;
            padding: 10px 15px;
            background: rgba(255,255,255,0.1);
            border-radius: 20px;
            max-width: 70%;
        }
        
        .message.own {
            margin-left: auto;
            background: rgba(0,255,198,0.2);
        }
        
        .message-user {
            font-size: 0.8rem;
            opacity: 0.7;
            margin-bottom: 5px;
        }
        
        .input-container {
            display: flex;
            gap: 10px;
        }
        
        .floating-emoji {
            position: fixed;
            font-size: 2rem;
            animation: float 6s ease-in-out infinite;
            pointer-events: none;
            opacity: 0.8;
        }
        
        @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            50% { transform: translateY(-20px) rotate(10deg); }
        }
    </style>
</head>
<body>
    <div class="floating-emoji" style="top: 10%; left: 5%;">ðŸ’¬</div>
    <div class="floating-emoji" style="top: 20%; right: 5%;">âœ¨</div>
    <div class="floating-emoji" style="bottom: 10%; left: 5%;">ðŸš€</div>
    <div class="floating-emoji" style="bottom: 20%; right: 5%;">ðŸŒŸ</div>
    
    <!-- CRITICAL: ALL app content MUST be inside this div -->
    <div id="app-content">
        <div class="app-container">
            <h1>WTAF Chat</h1>
            <div id="messages"></div>
            <div class="input-container">
                <input type="text" id="messageInput" placeholder="Type your message..." onkeypress="if(event.key==='Enter')sendMessage()">
                <button onclick="sendMessage()">Send</button>
            </div>
        </div>
    </div>
    
    <script>
        // CRITICAL: Initialize authentication FIRST
        initAuth()
        
        // CRITICAL: Wait for authentication before starting
        async function startApp() {
            if (!getCurrentUser()) {
                setTimeout(startApp, 100)
                return
            }
            
            // User is authenticated - initialize app
            document.querySelector('h1').textContent = `WTAF Chat - ${getCurrentUser().username}`
            await loadMessages()
            enableLiveUpdates('messages', loadMessages)
        }
        
        async function sendMessage() {
            const input = document.getElementById('messageInput')
            const text = input.value.trim()
            
            if (!text) return
            
            try {
                await save('messages', {
                    text: text,
                    user: getCurrentUser().username,
                    timestamp: Date.now()
                })
                input.value = ''
            } catch (error) {
                console.error('Error sending message:', error)
            }
        }
        
        async function loadMessages() {
            try {
                const messages = await load('messages')
                const messagesDiv = document.getElementById('messages')
                const currentUser = getCurrentUser().username
                
                messagesDiv.innerHTML = messages
                    .sort((a, b) => a.timestamp - b.timestamp)
                    .map(msg => `
                        <div class="message ${msg.user === currentUser ? 'own' : ''}">
                            <div class="message-user">${msg.user}</div>
                            <div class="message-text">${msg.text}</div>
                        </div>
                    `).join('')
                
                messagesDiv.scrollTop = messagesDiv.scrollHeight
                
            } catch (error) {
                console.error('Error loading messages:', error)
            }
        }
        
        // CRITICAL: Start the app
        startApp()
    </script>
</body>
</html>
```

## Common App Patterns

### Voting App Functions

```javascript
async function vote(option) {
    await save('votes', {
        choice: option,
        user: getCurrentUser().username,
        timestamp: Date.now()
    })
}

async function showResults() {
    const votes = await load('votes')
    const results = {}
    votes.forEach(vote => {
        results[vote.choice] = (results[vote.choice] || 0) + 1
    })
    // Update UI with results
}
```

### Collaborative Drawing Functions

```javascript
async function saveLine(points, color) {
    await save('drawings', {
        points: points,
        color: color,
        user: getCurrentUser().username,
        timestamp: Date.now()
    })
}

async function loadDrawings() {
    const drawings = await load('drawings')
    // Render all drawings on canvas
}
```

## Output Requirements

1. **Single HTML file** with everything embedded
2. **Must pass ALL validation checklist items**
3. **Use provided functions** - don't implement them
4. **WTAF chaotic-chic styling** with animations
5. **Raw HTML output** - no code blocks, no markdown
6. **Start with <!DOCTYPE html>**

Now build: [USER REQUEST]
