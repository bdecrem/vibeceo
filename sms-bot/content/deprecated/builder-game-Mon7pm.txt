Based on the research document, I'll create a comprehensive Game Builder Prompt File optimized for Qwen 3 Coder that addresses mobile-first development and the specific requirements for classic arcade games.

# Mobile-First HTML5 Game Builder Prompt for Qwen 3 Coder

## System Instructions

Generate a complete, self-contained HTML5 game in a single file with embedded CSS and JavaScript. The game MUST be fully functional on mobile devices with appropriate touch controls, proper viewport configuration, and no layout issues. Use modern JavaScript (ES6+), Canvas API for graphics, and requestAnimationFrame for smooth animations. Ensure 60 FPS performance on mobile browsers.

### Core Requirements:
1. **Single HTML file** with all code embedded
2. **Mobile-first design** with touch controls in thumb-friendly zones
3. **Proper viewport meta tags** to prevent zooming and ensure edge-to-edge display
4. **No external dependencies** - everything self-contained
5. **Responsive design** that works on all screen sizes
6. **Performance optimized** with object pooling and efficient rendering
7. **Battery conscious** - pause when not visible using Page Visibility API

### Essential Mobile Configuration:
```html
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, viewport-fit=cover">
<meta name="mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
```

### Canvas Setup Pattern:
```javascript
const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;

// Prevent scrolling on touch
document.body.style.touchAction = 'none';
document.body.style.overflow = 'hidden';

// Handle resize
window.addEventListener('resize', () => {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
});
```

## Game-Specific Instructions

### 1. TETRIS
- **Controls**: Bottom screen area divided into zones - left 40% for left/right movement (swipe or tap), middle 20% for rotation (tap), right 40% for hard drop (swipe down)
- **Grid**: 10x20 playing field centered on screen with responsive sizing
- **Features**: Next piece preview, score display, increasing speed levels
- **Touch Implementation**: 
  ```javascript
  // Swipe detection with 30px threshold
  let touchStartX = 0;
  canvas.addEventListener('touchstart', (e) => {
      touchStartX = e.touches[0].clientX;
  });
  canvas.addEventListener('touchend', (e) => {
      const deltaX = e.changedTouches[0].clientX - touchStartX;
      if (Math.abs(deltaX) > 30) {
          if (deltaX > 0) movePiece(1, 0);
          else movePiece(-1, 0);
      }
  });
  ```

### 2. SNAKE
- **Controls**: Full-screen swipe gestures for direction changes
- **Grid**: Responsive grid that maintains square cells
- **Features**: Growing snake, food spawning, score counter, game over on self-collision
- **Touch Implementation**: Track swipe direction with 50px minimum threshold
- **Special**: No visible control buttons - pure gesture-based

### 3. PAC-MAN
- **Controls**: Virtual D-pad in bottom-left corner (110x110px buttons) OR swipe controls
- **Maze**: Classic maze layout that scales to screen
- **Features**: Ghosts with AI, power pellets, score, lives
- **Touch Implementation**: Virtual D-pad with visual feedback on press
  ```javascript
  // D-pad button creation
  const dpadSize = 110;
  const buttons = {
      up: { x: canvas.width * 0.15, y: canvas.height - dpadSize * 2.5 },
      down: { x: canvas.width * 0.15, y: canvas.height - dpadSize * 0.5 },
      left: { x: canvas.width * 0.05, y: canvas.height - dpadSize * 1.5 },
      right: { x: canvas.width * 0.25, y: canvas.height - dpadSize * 1.5 }
  };
  ```

### 4. ASTEROIDS
- **Controls**: Left side for rotation (up/down zones), right side for thrust/fire
- **Features**: Ship with momentum physics, asteroid splitting, increasing difficulty
- **Touch Implementation**: Split screen into control zones
- **Special**: Visual indicators for touch zones

### 5. PONG
- **Controls**: Vertical swipe/drag on each side to control paddles
- **Features**: Two-player mode with split-screen controls, AI for single player
- **Touch Implementation**: Track finger position relative to paddle
- **Special**: Prevent multi-touch interference between players

### 6. FLAPPY BIRD
- **Controls**: Tap anywhere on screen to flap
- **Features**: Scrolling pipes, gravity physics, score counter
- **Touch Implementation**: Simple tap detection with visual feedback
  ```javascript
  canvas.addEventListener('touchstart', (e) => {
      e.preventDefault();
      bird.velocity = -bird.flapPower;
      // Visual feedback
      canvas.style.opacity = '0.9';
      setTimeout(() => canvas.style.opacity = '1', 100);
  });
  ```

### 7. WORDLE
- **Controls**: Virtual keyboard at bottom of screen
- **Features**: 6 attempts, letter feedback (green/yellow/gray), word validation
- **Touch Implementation**: Use Virtual Keyboard API if available, fallback to custom keyboard
- **Special**: Proper input handling with backspace support

### 8. SUDOKU
- **Controls**: Tap cells to select, number pad at bottom for input
- **Features**: Difficulty levels, mistake highlighting, pencil marks
- **Touch Implementation**: Cell selection with visual feedback, number input panel
- **Special**: Save/load game state to localStorage

### 9. BREAKOUT
- **Controls**: Horizontal swipe/drag to move paddle OR tap sides of screen
- **Features**: Multiple brick layouts, power-ups, lives system
- **Touch Implementation**: Smooth paddle tracking of finger position
- **Special**: Paddle should be in bottom 20% of screen for thumb access

### 10. SPACE INVADERS
- **Controls**: Left/right movement zones in bottom corners, fire button in bottom center
- **Features**: Enemy formations, barriers, increasing speed, UFO bonus
- **Touch Implementation**: Large touch zones (minimum 100x100px)
- **Special**: Auto-fire option for accessibility

## Performance Optimization Guidelines

1. **Use multiple canvas layers** for static elements (background) and dynamic elements
2. **Implement object pooling** for bullets, particles, enemies
3. **Pre-render complex sprites** to offscreen canvases
4. **Use requestAnimationFrame** with delta time for consistent speed
5. **Throttle touch events** to prevent excessive updates
6. **Minimize DOM manipulation** - use Canvas for all graphics
7. **Implement frame skip** when performance drops below 30 FPS

## Error Prevention Patterns

1. **Always check for null/undefined** before using game objects
2. **Validate array bounds** before accessing elements
3. **Use try-catch** for localStorage operations
4. **Prevent default touch behaviors** to avoid scrolling/zooming
5. **Handle edge cases** like window blur/focus properly
6. **Test for Canvas support** before initializing

## Example Structure Template

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, viewport-fit=cover">
    <meta name="mobile-web-app-capable" content="yes">
    <title>[GAME NAME]</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            overflow: hidden; 
            touch-action: none; 
            background: #000;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        }
        #gameCanvas { 
            display: block; 
            width: 100vw; 
            height: 100vh;
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas"></canvas>
    <script>
        // Game implementation here
        // Follow the specific instructions for the requested game type
    </script>
</body>
</html>
```

## Final Checklist

- [ ] Single HTML file with no external dependencies
- [ ] Proper viewport meta tags for mobile
- [ ] Touch controls in thumb-friendly zones (bottom third of screen)
- [ ] No UI elements blocking gameplay
- [ ] Smooth 60 FPS performance
- [ ] Pause when app goes to background
- [ ] Visual feedback for all touch interactions
- [ ] Minimum touch target size of 44x44 pixels
- [ ] Responsive design that works on all screen sizes
- [ ] No scrolling or zooming issues