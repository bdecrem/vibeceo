# WTAF Public ZAD Builder - Zero Authentication Prompt V2

üö® CRITICAL: You MUST build a PUBLIC collaborative web app using our zero-admin database system. This is NOT a demo or prototype - it MUST use real ZAD database functions for persistent data storage. This is a PUBLIC ZAD app with unlimited anonymous users - NO authentication required!

‚ö†Ô∏è MANDATORY: You MUST use save() and load() functions for ALL data operations. Do NOT create demo apps or use local storage only. ALL data must persist in the ZAD database and be shared across all users in real-time.

## Quick Start (This is all most apps need!)
```javascript
// Save data (anonymous users auto-generated)
await save('type', { name: 'John', contacted: true });

// Get data back (IT'S FLATTENED - no content_data wrapper!)
const items = await load('type');
// Returns: [{ 
//   id: 123, 
//   name: 'John', 
//   contacted: true, 
//   author: 'Anon47',       // ‚Üê WHO created this record (auto-generated)
//   created_at: '...',      // ‚Üê WHEN it was created
//   participant_id: '...'   // ‚Üê Internal ID (auto-generated)
// }]

// Who's logged in (always returns anonymous user)
const user = getCurrentUser();

// That's it! Data auto-refreshes every 2 seconds
```

## ‚ö†Ô∏è CRITICAL: Field Names in Load Results

**ALWAYS use `author` for username, NEVER `userLabel` or `username`:**

```javascript
// ‚ùå WRONG - These fields DON'T EXIST in load() results:
${comment.userLabel}: ${comment.text}    // Shows "undefined: comment text"
Posted by ${idea.username}               // Shows "Posted by undefined"

// ‚úÖ CORRECT - Use 'author' field:
${comment.author}: ${comment.text}       // Shows "Anon47: comment text"  
Posted by ${idea.author}                 // Shows "Posted by Anon47"

// Complete correct field usage:
${item.id}           // Record ID (number)
${item.author}       // Anonymous username who created it  
${item.created_at}   // When it was created
${item.yourData}     // Your custom fields
```

## What to Build
Build: **[USER REQUEST]**

## Core Requirements

### 1. Single HTML File
- Everything in one file (HTML, CSS, JavaScript)
- No external dependencies
- Start with `<!DOCTYPE html>`
- **MUST include viewport meta tag for mobile**

### 2. Mobile-First Design (REQUIRED)
```html
<!-- This meta tag is MANDATORY -->
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
```
- Minimum 16px fonts everywhere (prevents iOS zoom)
- Buttons/inputs minimum 44px tall (touch-friendly)
- Full-width buttons on mobile screens
- Test layout works at 375px width
- No hover-only interactions

### 3. Essential Functions Only

**For saving/loading data:**
```javascript
await save('type', data)   // Save anything
await load('type')         // Get everything back (FLATTENED!)
```

**For current user:**
```javascript
getCurrentUser()           // Returns anonymous user object
initPublicMode()          // Initialize public mode (call this once)
```

**That's all you need for 90% of public apps!**

üö® CRITICAL REQUIREMENT: Your app MUST use these ZAD functions:
- MUST call `initPublicMode()` on page load
- MUST use `await save('dataType', yourData)` to store data
- MUST use `await load('dataType')` to retrieve data
- MUST implement auto-refresh with `loadLatestData()` every 2 seconds
- Data MUST persist across page reloads and be visible to all users
- DO NOT use localStorage, sessionStorage, or any local-only storage

### 4. NO Authentication Required - Public Mode Only

**Simple Public App Structure:**
```html
<div class="app-container">
    <div id="main-screen" class="screen active">
        <h1>[Your Public App Name]</h1>
        <div id="user-status">Anonymous User: <span id="current-user-label"></span></div>
        
        <!-- YOUR APP GOES HERE -->
        <div id="app-content">
            <!-- Build your features here -->
        </div>
    </div>
</div>
```

**Required Public Mode JavaScript:**
```javascript
let currentUser = null;

// Auto-generate anonymous user on page load
async function initPublicMode() {
    currentUser = await generateAnonymousUser();
    if (currentUser?.success) {
        updateZadAuth(currentUser.userLabel, currentUser.participantId);
        document.getElementById('current-user-label').textContent = currentUser.userLabel;
        startPolling();
        loadLatestData();
    }
}

// Anonymous user labels (auto-rotating)
const ANON_LABELS = [
    'Anon1üéØ', 'Anon2‚ö°', 'Anon3üåü', 'Anon4üî•', 'Anon5üíé', 'Anon6üöÄ', 'Anon7üé®', 'Anon8üåô',
    'Guest1üé≠', 'Guest2üé™', 'Guest3üé®', 'Guest4üéµ', 'Visitor1üåä', 'Visitor2üåà', 'Visitor3‚≠ê',
    'User1üé≤', 'User2üéØ', 'User3üéÆ', 'User4üé™', 'Someone1üåü', 'Someone2üí´', 'Someone3üîÆ'
];

// Public mode helper functions are automatically injected by the ZAD system
// The following functions are available globally:
// - generateAnonymousUser() - Auto-generates anonymous credentials
// - updateZadAuth(userLabel, participantId) - Sets up auth state

// üö® MANDATORY: Initialize public mode on page load
initPublicMode();

// üö® MANDATORY: Implement data loading function
async function loadLatestData() {
    // YOU MUST IMPLEMENT THIS - Load your app's data using load() function
    // Example: const items = await load('your_data_type');
    // Then update your UI with the loaded data
}

// üö® MANDATORY: Start auto-refresh immediately
startPolling();
```

### 5. Auto-Refresh (Just Add This)

```javascript
let pollingInterval;

function startPolling() {
  pollingInterval = setInterval(() => loadLatestData(), 2000);
}

function stopPolling() {
  if (pollingInterval) clearInterval(pollingInterval);
}

// You implement this one function:
async function loadLatestData() {
  const data = await load('your_data_type');
  updateUI(data); // You write this
}

function updateUI(data) {
  // Update your interface with the latest data
  // Remember: data is FLATTENED!
}
```

### 6. Design System: **WEBTOYS v1.0**
All apps must follow the playful and accessible Webtoys visual language:

* **Color Palette**
  * Background: `#fefef5`
  * Border: `#FFD63D`
  * Shadow: `#C9C2F9`
  * Heading Text: `#FF4B4B`
  * Button BG: `#6ECBFF`
  * Input Border: `#6ECBFF`
  * Chat Bubble 1: `#FFEB63`
  * Chat Bubble 2: `#89ECFF`
  * Todo Item: `#B6FFB3`

* **Typography**
  * Use system fonts (Apple/Segoe/Roboto)
  * 16px+ everywhere
  * ALL CAPS headings in red
  * Emoji and ASCII art allowed

* **Component Styles**
  * Cards: white, rounded (12px), yellow border, purple shadow
  * Buttons: pill-shaped, sky blue, white text
  * Inputs: rounded, 2px blue border
  * Message Bubbles: rounded yellow or blue blocks
  * Todos: rounded mint green blocks

* **Layout Rules**
  * **Mobile (< 768px)**: 
    - Full-width containers with 20px padding
    - Single column layout
    - Touch-friendly 44px minimum tap targets
  * **Desktop (‚â• 768px)**:
    - Max container width: 800px (instead of 320px)
    - Cards can be 600-700px wide for better content display
    - Side-by-side layouts allowed where appropriate
    - Buttons can be inline instead of full-width
  * Centered layout on all screen sizes
  * Responsive scaling between breakpoints

* **Responsive Approach**
  ```css
  .app-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
  }
  
  .card {
    width: 100%;
    max-width: 700px;
    margin: 0 auto;
  }
  
  @media (min-width: 768px) {
    button {
      width: auto;
      display: inline-block;
      margin-right: 10px;
    }
  }

* **Tone/Personality**

  * Friendly, silly, slightly chaotic
  * Encouraging copy: "Want a toy?", "Let‚Äôs make something weird."
  * ASCII critters or emojis encouraged

* **Principles**

  1. Everything is a toy
  2. One-shot delight
  3. Play > polish
  4. Same box, different toys
```


## Common Patterns

### ‚ö†Ô∏è IMPORTANT: ZAD is Append-Only
ZAD always creates NEW records - it never updates existing ones!

```javascript
// ‚ùå WRONG: This creates duplicate records
const people = await load('person');
const person = people.find(p => p.name === 'John');
person.contacted = true;
await save('person', person); // Creates NEW record!

// ‚úÖ CORRECT: Handle "updates" by getting latest record
const people = await load('person');
const latestJohn = people
  .filter(p => p.name === 'John')
  .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))[0];

// For "toggling" status, save a new record with opposite value
if (latestJohn) {
  await save('person', {
    name: 'John',
    contacted: !latestJohn.contacted,
    created_at: new Date().toISOString()
  });
}

// ‚úÖ BETTER: Use server-side update helper (prevents duplicates entirely)
await save('update_task', {
    taskId: person.id,
    updates: { contacted: true }
});

// ‚úÖ BEST: For reactions, counters, and other updates
async function addReaction(ideaId, emoji) {
    const ideas = await load('idea');
    const idea = ideas.find(i => i.id === parseInt(ideaId));
    if (idea) {
        const reactions = idea.reactions || {};
        reactions[emoji] = (reactions[emoji] || 0) + 1;
        
        // Use update helper instead of save() to prevent duplicates
        await save('update_task', {
            taskId: parseInt(ideaId),
            updates: { reactions }
        });
        
        await loadLatestData(); // Refresh UI
    }
}
```

### ‚ö†Ô∏è CRITICAL: Avoid Type Mismatch Bugs
JavaScript type coercion causes subtle bugs! Always use consistent data types:

```javascript
// ‚ùå WRONG: Type mismatch in onclick handlers
<button onclick="processItem('${item.id}')">Process</button>  // String ID
const matches = data.filter(d => d.itemId === item.id);      // Number comparison
// Result: "123" !== 123, so matches always empty!

// ‚úÖ CORRECT: Convert types consistently  
<button onclick="processItem(${item.id})">Process</button>    // Number ID
// OR convert when filtering:
const matches = data.filter(d => d.itemId === String(item.id));
// OR convert when saving:
await save('data', { itemId: parseInt(idParam) });
```

### Filter Pattern
```javascript
// Get all items
const all = await load('contact');

// Filter in JavaScript
const contacted = all.filter(p => p.contacted);
const notContacted = all.filter(p => !p.contacted);

// Get latest version of each person (removes duplicates)
const uniquePeople = all.reduce((acc, person) => {
  const existing = acc.find(p => p.name === person.name);
  if (!existing || new Date(person.created_at) > new Date(existing.created_at)) {
    if (existing) {
      const index = acc.indexOf(existing);
      acc[index] = person;
    } else {
      acc.push(person);
    }
  }
  return acc;
}, []);
```

## Important Notes

1. **Data is FLATTENED** - Access fields directly: `item.name` not `item.content_data.name`
2. **Use `author` field** - Username is in `item.author`, NOT `item.userLabel` or `item.username`
3. **Auto-refresh** - Just implement `loadLatestData()` and UI updates every 2 seconds
4. **Unlimited users** - No user limit, all anonymous
5. **One HTML file** - Everything goes in one file
6. **Mobile-first** - Must work on phones (375px width minimum)
7. **No authentication** - Users are automatically assigned anonymous identities

## Complete Function Reference (All 34 Functions)

### Core Data Functions
```javascript
await save('type', data)           // Save data to database
await load('type')                 // Load all data (returns FLATTENED array)
await query('type', options)       // Advanced queries with filtering/sorting
await loadAll()                    // Load all data across all types
```

### Authentication & User Functions (Public Mode)
```javascript
initPublicMode()                   // Initialize public mode (call once)
getCurrentUser()                   // Get anonymous user object
getAppId()                         // Get current app's UUID
getParticipantId()                 // Get current user's participant ID
getUsername()                      // Get current user's anonymous username
updateZadAuth(userLabel, participantId) // Update authentication state
```

### Backend Helper Functions
```javascript
await generateAnonymousUser()      // Generate anonymous user credentials
await greet(name)                  // Backend greeting function
await generateImage(prompt, style) // Generate AI images from text descriptions
```

### Real-time Features
```javascript
enableLiveUpdates('type', callback) // Enable live data updates for specific type
startRealtime(callback, interval)   // Start custom polling (beyond basic 2s)
stopRealtime()                      // Stop live updates
```

### Advanced Authentication (Public Mode)
```javascript
isAuthenticated()                  // Always returns true in public mode
requireAuth()                      // No-op in public mode
onUserLogin(callback)              // Fires immediately in public mode
```

### Convenience Aliases (all work identically to save/load)
```javascript
await saveEntry('type', data)      // Same as save('type', data)
await loadEntries('type')          // Same as load('type')
await saveData('type', data)       // Same as save('type', data)
await loadData('type')             // Same as load('type')
await saveItem('type', data)       // Same as save('type', data)
await loadItems('type')            // Same as load('type')
await saveNote('type', data)       // Same as save('type', data)
await loadNotes('type')            // Same as load('type')
await saveMessage('type', data)    // Same as save('type', data)
await loadMessages('type')         // Same as load('type')
```

### Legacy Functions (no auth screens needed in public mode)
```javascript
generateNewUser()                  // No-op in public mode
registerNewUser()                  // No-op in public mode
showNewUserScreen()                // No-op in public mode
loginReturningUser()               // No-op in public mode
showScreen(screenId)               // Generic screen navigation
showReturningUserScreen()          // No-op in public mode
enterMainScreen()                  // No-op in public mode
leaveApp()                         // Reloads page in public mode
```

### Usage Examples

**Query with filters:**
```javascript
// Get high-priority tasks
const urgent = await query('task', {
  where: { priority: 'high' },
  orderBy: 'created_at',
  limit: 10
});

// Get recent anonymous contributions
const recent = await query('contribution', {
  orderBy: 'created_at',
  limit: 20
});
```

**Anonymous user info:**
```javascript
const username = getUsername();          // "Anon47"
const userId = getParticipantId();       // "participant_123"
const user = getCurrentUser();           // Full user object
```

**Real-time updates:**
```javascript
// Enable automatic updates
enableLiveUpdates('messages', () => {
  loadLatestData();
});

// Custom polling interval
startRealtime(updateWidget, 5000);      // Every 5 seconds
```

**Generate AI images:**
```javascript
// Generate an image for your app
const imageUrl = await generateImage('cute golden retriever puppy');
document.getElementById('pet-photo').src = imageUrl;

// Generate with specific style
const logoUrl = await generateImage('minimalist coffee shop logo', 'artistic');
document.getElementById('logo').src = logoUrl;

// Generate hero image
const heroUrl = await generateImage('cyberpunk cityscape at sunset');
document.body.style.backgroundImage = `url(${heroUrl})`;
```


## Testing Your App

Before returning code, verify:
- [ ] Viewport meta tag included
- [ ] All fonts 16px or larger
- [ ] All buttons/inputs 44px tall minimum
- [ ] Works at 375px screen width
- [ ] Data loads and saves correctly
- [ ] Updates refresh every 2 seconds
- [ ] Public mode initializes correctly
- [ ] Anonymous users are auto-generated

## Output Format
- One complete HTML file
- NO markdown, NO code blocks
- Start with `<!DOCTYPE html>`
- Raw HTML only

## üö® FINAL CHECKLIST - VERIFY BEFORE RETURNING CODE:
- [ ] initPublicMode() is called on page load
- [ ] save() function is used to store user data
- [ ] load() function is used to retrieve data from database
- [ ] loadLatestData() function is implemented and loads real data
- [ ] startPolling() is called to enable auto-refresh
- [ ] Data persists across page reloads (not just local DOM manipulation)
- [ ] Multiple users can see each other's contributions in real-time
- [ ] NO use of localStorage, sessionStorage, or local-only storage

‚ùå IF ANY OF THESE ARE MISSING, THE APP WILL NOT WORK. Do not submit code that fails this checklist.

---

**Now build**: [USER REQUEST]