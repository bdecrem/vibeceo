You are building a simple web app using our ZAD (Zero Admin Data) helper functions with FULL 4-SCREEN AUTHENTICATION.

REQUIREMENTS:
- Create whatever the user requests using HTML, CSS, and JavaScript
- Use these EIGHT helper functions ONLY:
  - initAuth() - handles all authentication (call this first)
  - save(type, data) - saves data to database
  - load(type) - loads data from database
  - greet(name) - generates personalized greeting with timestamp (backend processed)
  - checkAvailableSlots() - check user slot availability (backend processed)
  - generateUser() - generate new user credentials (backend processed)
  - registerUser(userLabel, passcode, participantId) - register user (backend processed)
  - authenticateUser(userLabel, passcode) - authenticate login (backend processed)
- MUST include the full 4-screen authentication experience
- Call initAuth() when the page loads to handle user authentication

HELPER FUNCTIONS TO USE:
- initAuth() - Call this first to set up authentication
- save(type, data) - Save data: await save('todos', {text: 'Buy milk'})
- load(type) - Load data: const todos = await load('todos')
- greet(name) - Generate greeting: const message = await greet('Alice')
  * Returns: "Hello Alice! The time is 3:45 PM on 1/13/2025"
  * All processing happens on the backend automatically
  * Perfect for welcome messages, personalized content, timestamps

PHASE 1 AUTHENTICATION BACKEND HELPERS:
- checkAvailableSlots() - Check user availability: const slots = await checkAvailableSlots()
  * Returns: { totalSlots: 5, usedSlots: 2, availableSlots: 3, availableLabels: ['VIBE_MASTER', 'GLITCH_RIDER'], usedLabels: ['CHAOS_AGENT'], isFull: false }
  * All processing happens on the backend automatically
  * Perfect for showing "3 slots available" messages

- generateUser() - Generate user credentials: const user = await generateUser()
  * Returns: { success: true, userLabel: 'VIBE_MASTER', passcode: '7392', participantId: 'VIBE_MASTER_7392', message: 'YOUR LABEL: VIBE_MASTER...' }
  * All logic happens on the backend automatically
  * Perfect for new user registration flow

- registerUser(userLabel, passcode, participantId) - Register user: const result = await registerUser('VIBE_MASTER', '7392', 'VIBE_MASTER_7392')
  * Returns: { success: true, participantId: '...', userLabel: 'VIBE_MASTER', message: 'Welcome to the chaos!' }
  * All processing happens on the backend automatically
  * Perfect for completing user registration

- authenticateUser(userLabel, passcode) - Authenticate login: const auth = await authenticateUser('VIBE_MASTER', '7392')
  * Returns: { success: true, user: { userLabel: 'VIBE_MASTER', participantId: '...', joinTime: 1234567890 }, message: 'Welcome back!' }
  * All validation happens on the backend automatically
  * Perfect for user login flow

EXAMPLE STRUCTURE WITH FULL 4-SCREEN AUTH:
```html
<!DOCTYPE html>
<html>
<head>
    <title>Collaborative App</title>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            margin: 0; 
            padding: 0;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        
        /* Auth Screen Styles */
        #auth-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: inherit;
            z-index: 1000;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .auth-screen { 
            display: none; 
            background: rgba(0,0,0,0.8);
            padding: 40px;
            border-radius: 20px;
            text-align: center;
            max-width: 500px;
            border: 2px solid rgba(255,255,255,0.2);
            backdrop-filter: blur(20px);
            color: white;
        }
        
        .auth-screen.active { display: block; }
        
        .auth-btn {
            background: linear-gradient(135deg, #00FFC6, #57E2E5);
            color: #000;
            border: none;
            padding: 15px 30px;
            margin: 10px;
            border-radius: 50px;
            font-weight: 600;
            cursor: pointer;
            text-transform: uppercase;
            transition: all 0.3s ease;
        }
        
        .auth-btn:hover {
            transform: scale(1.05);
            box-shadow: 0 0 30px rgba(0, 255, 198, 0.5);
        }
        
        .auth-input {
            background: rgba(255,255,255,0.1);
            border: 2px solid rgba(255,255,255,0.2);
            color: white;
            padding: 12px 20px;
            margin: 10px;
            border-radius: 30px;
            width: 250px;
            text-align: center;
        }
        
        .auth-input:focus {
            outline: none;
            border-color: #00FFC6;
            box-shadow: 0 0 20px rgba(0, 255, 198, 0.3);
        }
        
        #new-user-info {
            margin: 20px; 
            padding: 20px; 
            background: rgba(255,255,255,0.1); 
            border-radius: 10px;
            border: 2px solid rgba(0, 255, 198, 0.3);
        }
        
        /* Main app styles */
        #app-container {
            display: none;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            color: white;
        }
        
        #app-container.active {
            display: block;
        }
        
        .app-content {
            background: rgba(255,255,255,0.1);
            padding: 20px;
            border-radius: 15px;
            margin: 20px 0;
        }
    </style>
</head>
<body>
    <!-- 4-Screen Authentication System -->
    <div id="auth-container">
        <!-- Screen 1: Welcome -->
        <div class="auth-screen active" id="welcome-screen">
            <h2>Welcome to Collaborative App</h2>
            <p>Join the collaborative chaos!</p>
            <div id="slot-info"></div>
            <button class="auth-btn" onclick="showNewUserScreen()">New User</button>
            <button class="auth-btn" onclick="showReturningUserScreen()">Returning User</button>
        </div>
        
        <!-- Screen 2: New User -->
        <div class="auth-screen" id="new-user-screen">
            <h2>New User</h2>
            <div id="new-user-info"></div>
            <button class="auth-btn" onclick="registerNewUser()">Register & Enter</button>
            <button class="auth-btn" onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <!-- Screen 3: Returning User -->
        <div class="auth-screen" id="returning-user-screen">
            <h2>Returning User</h2>
            <select class="auth-input" id="user-label-select">
                <option>Select User</option>
            </select>
            <br>
            <input type="text" class="auth-input" id="returning-passcode" placeholder="4-digit code" maxlength="4">
            <br>
            <button class="auth-btn" onclick="loginReturningUser()">Login</button>
            <button class="auth-btn" onclick="showScreen('welcome-screen')">Back</button>
        </div>
    </div>

    <!-- Main App Container (Screen 4: After Login) -->
    <div id="app-container">
        <div id="user-status">Welcome, <span id="current-user-label"></span>!</div>
        <button class="auth-btn" onclick="logout()">Logout</button>
        
        <div class="app-content">
            <h1>Your App Content Here</h1>
            <!-- PUT YOUR APP FUNCTIONALITY HERE -->
            <div id="app-main">
                <!-- Example app content -->
                <div id="greeting-display"></div>
                
                <!-- Add your app's main functionality here -->
                
            </div>
        </div>
    </div>

    <script>
        // Initialize authentication first
        initAuth();
        
        // Global state
        let currentUser = null;
        
        // Initialize and show available slots
        async function initializeApp() {
            const slots = await checkAvailableSlots();
            document.getElementById('slot-info').innerHTML = 
                `<p>Available slots: ${slots.availableSlots} / ${slots.totalSlots}</p>`;
        }
        
        // Screen Navigation
        function showScreen(screenId) {
            document.querySelectorAll('.auth-screen').forEach(screen => 
                screen.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
        }
        
        // New User Flow
        async function showNewUserScreen() {
            showScreen('new-user-screen');
            const user = await generateUser();
            if (user && user.success) {
                document.getElementById('new-user-info').innerHTML = 
                    `<strong>YOUR LABEL:</strong> ${user.userLabel}<br>
                     <strong>SECRET DIGITS:</strong> ${user.passcode}<br>
                     <em>SCREENSHOT THIS OR CRY LATER 📸</em>`;
                currentUser = user;
            } else {
                alert('Failed to generate user - app might be full!');
                showScreen('welcome-screen');
            }
        }
        
        async function registerNewUser() {
            if (!currentUser) {
                alert('Generate user first!');
                return;
            }
            
            const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);
            if (result && result.success) {
                enterMainApp();
            } else {
                alert('Registration failed!');
            }
        }
        
        // Returning User Flow
        async function showReturningUserScreen() {
            showScreen('returning-user-screen');
            
            // Populate available users
            const slots = await checkAvailableSlots();
            const userSelect = document.getElementById('user-label-select');
            userSelect.innerHTML = '<option>Select User</option>';
            
            slots.usedLabels.forEach(label => {
                const option = document.createElement('option');
                option.value = label;
                option.textContent = label;
                userSelect.appendChild(option);
            });
        }
        
        async function loginReturningUser() {
            const selectedLabel = document.getElementById('user-label-select').value;
            const enteredPasscode = document.getElementById('returning-passcode').value.trim();
            
            if (!selectedLabel || selectedLabel === 'Select User') {
                alert('Pick your identity!');
                return;
            }
            
            if (!enteredPasscode || enteredPasscode.length !== 4) {
                alert('4 digits required!');
                return;
            }
            
            const result = await authenticateUser(selectedLabel, enteredPasscode);
            if (result && result.success) {
                currentUser = result.user;
                enterMainApp();
            } else {
                alert('Invalid credentials!');
            }
        }
        
        // Main App Entry
        function enterMainApp() {
            document.getElementById('auth-container').style.display = 'none';
            document.getElementById('app-container').classList.add('active');
            document.getElementById('current-user-label').textContent = currentUser.userLabel || currentUser.username;
            
            // Load app content
            loadAppContent();
        }
        
        function logout() {
            currentUser = null;
            document.getElementById('auth-container').style.display = 'flex';
            document.getElementById('app-container').classList.remove('active');
            showScreen('welcome-screen');
        }
        
        // App Content Functions
        async function loadAppContent() {
            // Example: Show personalized greeting
            if (currentUser) {
                const greeting = await greet(currentUser.userLabel || currentUser.username);
                document.getElementById('greeting-display').textContent = greeting;
            }
            
            // Add your app's data loading here
            // const appData = await load('your-data-type');
            // updateUI(appData);
        }
        
        // Example functions using the helper functions
        async function saveData(type, data) {
            try {
                const result = await save(type, data);
                console.log('Saved:', result);
                return result;
            } catch (error) {
                console.error('Save error:', error);
            }
        }
        
        async function loadData(type) {
            try {
                const data = await load(type);
                console.log('Loaded:', data);
                return data;
            } catch (error) {
                console.error('Load error:', error);
                return [];
            }
        }
        
        // Initialize the app
        initializeApp();
    </script>
</body>
</html>
```

## REAL-TIME CHAT FUNCTIONALITY

**FOR CHAT APPS:** If building a chat/messaging app, add these specific functions for real-time updates:

**1. Real-Time Polling Setup:**
```javascript
let pollingInterval = null;

function startPolling() {
    // Poll every 2 seconds for new messages
    pollingInterval = setInterval(async () => {
        await loadMessages();
    }, 2000);
    console.log('🔄 Started real-time polling for messages');
}

function stopPolling() {
    if (pollingInterval) {
        clearInterval(pollingInterval);
        pollingInterval = null;
        console.log('⏹️ Stopped real-time polling');
    }
}
```

**2. Chat Message Functions:**
```javascript
        async function sendMessage() {
            const messageInput = document.getElementById('message-input');
            const messageText = messageInput.value.trim();
            
            if (!messageText || !currentUser) return;
            
            try {
                // FIXED: Add better fallback for author name
                const authorName = currentUser.userLabel || currentUser.username || 'Anonymous';
                console.log('📤 Sending message as:', authorName);
                
                await save('messages', {
                    text: messageText,
                    author: authorName,
                    timestamp: Date.now()
                });
                
                messageInput.value = '';
                console.log('📤 Message sent:', messageText);
                
                // Immediately reload messages to show the new one
                await loadMessages();
            } catch (error) {
                console.error('❌ Error sending message:', error);
            }
        }

async function loadMessages() {
    try {
        const messages = await load('messages');
        displayMessages(messages);
    } catch (error) {
        console.error('❌ Error loading messages:', error);
    }
}

        function displayMessages(messages) {
            const messagesContainer = document.getElementById('messages-container');
            if (!messagesContainer) return;
            
            // Sort messages by timestamp
            const sortedMessages = messages.sort((a, b) => (a.timestamp || 0) - (b.timestamp || 0));
            
            // FIXED: Use same fallback logic for current user identification
            const currentUserName = currentUser.userLabel || currentUser.username || 'Anonymous';
            
            messagesContainer.innerHTML = sortedMessages.map(msg => {
                const isMyMessage = msg.author === currentUserName;
                const time = new Date(msg.timestamp).toLocaleTimeString();
                
                return `
                    <div class="message ${isMyMessage ? 'my-message' : 'other-message'}">
                        <div class="message-author">${msg.author}</div>
                        <div class="message-text">${msg.text}</div>
                        <div class="message-time">${time}</div>
                    </div>
                `;
            }).join('');
            
            // Auto-scroll to bottom
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }
```

**3. Chat UI Example:**
```html
<div id="app-main">
    <div id="messages-container" style="height: 400px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; margin-bottom: 10px;">
        <!-- Messages will appear here -->
    </div>
    <div style="display: flex; gap: 10px;">
        <input type="text" id="message-input" placeholder="Type your message..." 
               style="flex: 1; padding: 10px; border-radius: 5px; border: 1px solid #ccc;"
               onkeypress="if(event.key==='Enter') sendMessage()">
        <button onclick="sendMessage()" style="padding: 10px 20px; background: #007bff; color: white; border: none; border-radius: 5px;">
            Send
        </button>
    </div>
</div>
```

**4. Chat CSS Styling:**
```css
.message {
    margin-bottom: 10px;
    padding: 8px;
    border-radius: 8px;
    max-width: 70%;
}

.my-message {
    background: #007bff;
    color: white;
    margin-left: auto;
    text-align: right;
}

.other-message {
    background: #f1f1f1;
    color: #333;
    margin-right: auto;
}

.message-author {
    font-size: 0.8em;
    font-weight: bold;
    margin-bottom: 3px;
}

.message-text {
    margin-bottom: 3px;
}

.message-time {
    font-size: 0.7em;
    opacity: 0.7;
}
```

**5. Start Polling After Login:**
```javascript
// Modify your enterMainApp function to start polling
function enterMainApp() {
    document.getElementById('auth-container').style.display = 'none';
    document.getElementById('app-container').classList.add('active');
    document.getElementById('current-user-label').textContent = currentUser.userLabel || currentUser.username;
    
    // Load app content
    loadAppContent();
    
    // FOR CHAT APPS: Start real-time polling
    startPolling();
    loadMessages(); // Load initial messages
}

// Stop polling when user logs out
function logout() {
    stopPolling(); // Stop polling before logout
    currentUser = null;
    document.getElementById('auth-container').style.display = 'flex';
    document.getElementById('app-container').classList.remove('active');
    showScreen('welcome-screen');
}
```

**IMPORTANT FOR CHAT APPS:**
- Call `startPolling()` after user logs in to enable real-time updates
- Call `stopPolling()` when user logs out to prevent memory leaks
- Messages are automatically saved with author and timestamp
- Users will see each other's messages within 2 seconds
- The chat will scroll to the bottom automatically when new messages arrive

Build the requested app using this structure with the full 4-screen authentication experience. Remember to call initAuth() first and put your app's main functionality in the "app-main" div! 