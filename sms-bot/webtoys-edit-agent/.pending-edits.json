[
  {
    "id": "b4004762-70ae-4f30-9a4c-9f5f7a42b656",
    "content_id": "a4e76fbc-c31b-4af6-abbc-4ef3376ffad1",
    "revision_id": null,
    "edit_request": "instead of the chart just show a little list with all the entries. Instead of a long ai diatribe just give max 15 words of encouraging feedback",
    "html_content": null,
    "status": "pending",
    "user_phone": "+16508989508",
    "created_at": "2025-08-17T19:58:33.267633+00:00",
    "processed_at": null,
    "completed_at": null,
    "error_message": null,
    "ai_summary": null,
    "wtaf_content": {
      "app_slug": "kinetic-pike-mastering",
      "user_slug": "bart",
      "html_content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <title>WTAF ‚Äì Delusional App Generator</title>\n    <meta property=\"og:title\" content=\"WTAF by AF\" />\n    <meta property=\"og:description\" content=\"Vibecoded chaos, shipped via SMS.\" />\n    <meta property=\"og:image\" content=\"https://theaf.us/og-types/og-type-app-1.png\" />\n    <meta property=\"og:image:width\" content=\"1200\" />\n    <meta property=\"og:image:height\" content=\"630\" />\n    <meta property=\"og:url\" content=\"https://www.wtaf.me/bart/kinetic-pike-mastering\" />\n    <meta name=\"twitter:card\" content=\"summary_large_image\" />\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\n    <title>CALORIE REBEL üî•</title>\n    <link href=\"https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=JetBrains+Mono&display=swap\" rel=\"stylesheet\">\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n    <style>\n        /* THEME: MIDNIGHT */\n        :root {\n            --bg: #0A0A0A;\n            --border: #00FF88;\n            --shadow: #FF00FF;\n            --text: #FFFFFF;\n            --card: #111111;\n        }\n\n        * {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        body {\n            font-family: 'Space Grotesk', system-ui, sans-serif;\n            background: var(--bg);\n            color: var(--text);\n            line-height: 1.6;\n            font-size: 16px;\n        }\n\n        .screen {\n            display: none;\n            padding: 20px;\n            max-width: 800px;\n            margin: 0 auto;\n        }\n\n        .screen.active {\n            display: block;\n        }\n\n        h1, h2 {\n            text-transform: uppercase;\n            font-weight: bold;\n            transform: rotate(-1deg);\n            color: var(--border);\n            margin: 20px 0;\n        }\n\n        .card {\n            background: var(--card);\n            border: 4px solid var(--border);\n            box-shadow: 8px 8px 0 var(--shadow);\n            padding: 20px;\n            margin: 20px 0;\n            transform: rotate(1deg);\n            transition: all 0.3s ease;\n        }\n\n        .card:hover {\n            transform: rotate(-1deg) scale(1.01);\n        }\n\n        button {\n            background: var(--border);\n            border: none;\n            color: var(--bg);\n            padding: 15px 30px;\n            font-size: 18px;\n            font-family: 'Space Grotesk', system-ui, sans-serif;\n            text-transform: uppercase;\n            font-weight: bold;\n            cursor: pointer;\n            min-height: 44px;\n            width: 100%;\n            margin: 10px 0;\n            transform: rotate(-1deg);\n            transition: all 0.2s ease;\n        }\n\n        button:hover {\n            transform: rotate(1deg) scale(1.05);\n            background: var(--shadow);\n        }\n\n        input {\n            width: 100%;\n            padding: 12px;\n            margin: 10px 0;\n            font-size: 16px;\n            border: 3px solid var(--border);\n            background: var(--card);\n            color: var(--text);\n            min-height: 44px;\n            font-family: 'JetBrains Mono', monospace;\n        }\n\n        input:focus {\n            outline: none;\n            transform: scale(1.02);\n            border-color: var(--shadow);\n        }\n\n        .ai-feedback {\n            font-family: 'JetBrains Mono', monospace;\n            padding: 15px;\n            border-left: 4px solid var(--shadow);\n            margin: 20px 0;\n            background: var(--card);\n        }\n\n        #calorieChart {\n            background: var(--card);\n            padding: 20px;\n            border-radius: 4px;\n            margin: 20px 0;\n        }\n\n        .floating-emoji {\n            position: fixed;\n            bottom: 20px;\n            right: 20px;\n            font-size: 40px;\n            cursor: pointer;\n            animation: pulse 2s infinite;\n        }\n\n        @keyframes pulse {\n            0% { transform: scale(1); }\n            50% { transform: scale(1.2); }\n            100% { transform: scale(1); }\n        }\n\n        @media (min-width: 768px) {\n            button {\n                width: auto;\n            }\n        }\n    </style>\n<script>\n// ZAD Helper Functions - Inline version for test apps\n\n// SIMPLIFIED UUID INJECTION: Set window.APP_ID for backup\nwindow.APP_ID = 'a4e76fbc-c31b-4af6-abbc-4ef3376ffad1';\nconsole.log('üÜî SIMPLIFIED UUID INJECTION: window.APP_ID set to:', 'a4e76fbc-c31b-4af6-abbc-4ef3376ffad1');\n\nconsole.log('üöÄ Loading ZAD Helper Functions (inline)...');\n\n// Auth state - Use existing global currentUser or create zadCurrentUser\nlet zadCurrentUser = (typeof currentUser !== 'undefined') ? currentUser : null;\nlet authInitialized = false;\n\n// Get app ID from window.APP_ID (set by system) - ENHANCED DEBUG VERSION\nfunction getAppId() {\n    console.log('üÜî SIMPLIFIED UUID INJECTION: window.APP_ID set to:', 'a4e76fbc-c31b-4af6-abbc-4ef3376ffad1');\n    return 'a4e76fbc-c31b-4af6-abbc-4ef3376ffad1';\n}\n\n                // Get participant ID - return stored ID or generate temporary one\n                function getParticipantId() {\n                    let participantId = localStorage.getItem('zad_participant_id');\n                    if (!participantId) {\n                        // Check if demo mode is enabled (multiple detection methods for iframe compatibility)\n                        const isDemoMode = \n                            window.location.search.includes('demo=true') ||\n                            window.parent?.location?.search?.includes('demo=true') ||\n                            window.top?.location?.search?.includes('demo=true') ||\n                            document.referrer.includes('demo=true');\n                        \n                        // Clear demo mode if not detected in current session\n                        if (!isDemoMode) {\n                            localStorage.removeItem('demo_mode');\n                            // Also clear participant_id if it was a demo ID, so user gets fresh normal ID\n                            const existingId = localStorage.getItem('zad_participant_id');\n                            if (existingId && existingId.startsWith('demo_')) {\n                                localStorage.removeItem('zad_participant_id');\n                                localStorage.removeItem('zad_username');\n                            }\n                        }\n                        \n                        if (isDemoMode) {\n                            // Generate demo ID that will trigger backend demo table routing\n                            participantId = 'demo_user_' + Math.random().toString(36).substr(2, 8);\n                            localStorage.setItem('demo_mode', 'true');\n                            localStorage.setItem('zad_username', 'Demo User');\n                            console.log('üé≠ Demo mode detected - generated demo participant ID:', participantId);\n                        } else {\n                            // Generate temporary ID - app's authentication system will set the real one\n                            participantId = 'temp_' + Math.random().toString(36).substr(2, 12);\n                            localStorage.setItem('zad_username', 'Anonymous');\n                        }\n                        \n                        localStorage.setItem('zad_participant_id', participantId);\n                    }\n                    return participantId;\n                }\n\n                // Get username from current session\n                function getUsername() {\n                    // Ensure participant ID is initialized first (which sets up localStorage)\n                    getParticipantId();\n                    return localStorage.getItem('zad_username') || 'Anonymous';\n                }\n\n                // Update ZAD helper functions with app's authentication state\n                function updateZadAuth(userLabel, participantId) {\n                    localStorage.setItem('zad_participant_id', participantId);\n                    localStorage.setItem('zad_username', userLabel);\n                    zadCurrentUser = {\n                        username: userLabel,\n                        participantId: participantId\n                    };\n                    console.log('üîÑ Updated ZAD auth state:', zadCurrentUser);\n                }\n\n                // Initialize authentication (simplified)\n                function initAuth() {\n                    console.log('üîê Initializing authentication...');\n                    if (authInitialized) return;\n                    authInitialized = true;\n                    \n                    // Don't clear localStorage or prompt during initialization\n                    // Let the app's authentication system handle user setup\n                    zadCurrentUser = {\n                        username: getUsername(),\n                        participantId: localStorage.getItem('zad_participant_id') || null\n                    };\n                    \n                    console.log('‚úÖ Authentication ready:', zadCurrentUser);\n                }\n\n                // Get current user (compatible with zad-helpers.ts)\n                function getCurrentUser() {\n                    if (!zadCurrentUser) return null;\n                    \n                    return {\n                        username: zadCurrentUser.username || getUsername(),\n                        id: zadCurrentUser.participantId || getParticipantId(),\n                        userLabel: zadCurrentUser.username || getUsername(),\n                        participantId: zadCurrentUser.participantId || getParticipantId(),\n                        passcode: zadCurrentUser.passcode || null\n                    };\n                }\n\n// Save data to ZAD API\nasync function save(type, data) {\n    try {\n        const app_id = getAppId();\n        const participant_id = getParticipantId();\n        const username = getUsername();\n        \n        const zadData = {\n            app_id: app_id,\n            participant_id: participant_id,\n            participant_data: {\n                userLabel: username,\n                username: username\n            },\n            action_type: type,\n            content_data: {\n                ...data,\n                timestamp: data.timestamp || Date.now(),\n                author: data.author || username\n            }\n        };\n        \n        console.log('üîÑ Saving to ZAD API:', { type, data: zadData });\n        \n        const response = await fetch('/api/zad/save', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(zadData)\n        });\n        \n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(`Save failed: ${errorData.error || response.statusText}`);\n        }\n        \n        const result = await response.json();\n        console.log('‚úÖ Saved successfully:', result);\n        return result;\n        \n    } catch (error) {\n        console.error('‚ùå Save error:', error);\n        alert(`Failed to save: ${error.message}`);\n        throw error;\n    }\n}\n\n// Phase 1 Authentication Backend Helper Functions\n// These call the backend API with specific action types\n\n// Backend Helper 1: Check Available Slots\nasync function checkAvailableSlots() {\n    try {\n        const app_id = getAppId();\n        \n        console.log('üîç Calling backend checkAvailableSlots for app:', app_id);\n        \n        const response = await fetch('/api/zad/save', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                app_id: app_id,\n                action_type: 'check_slots',\n                content_data: {}\n            })\n        });\n        \n        if (!response.ok) {\n            throw new Error(`Check slots failed: ${response.statusText}`);\n        }\n        \n        const result = await response.json();\n        console.log('‚úÖ Backend checkAvailableSlots result:', result.slots);\n        \n        return result.slots;\n        \n    } catch (error) {\n        console.error('‚ùå Check slots error:', error);\n        alert(`Failed to check available slots: ${error.message}`);\n        return { totalSlots: 5, usedSlots: 0, availableSlots: 5, availableLabels: [], usedLabels: [], isFull: false };\n    }\n}\n\n// Backend Helper 2: Generate User Credentials\nasync function generateUser() {\n    try {\n        const app_id = getAppId();\n        \n        console.log('üé≤ Calling backend generateUser for app:', app_id);\n        \n        const response = await fetch('/api/zad/save', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                app_id: app_id,\n                action_type: 'generate_user',\n                content_data: {}\n            })\n        });\n        \n        if (!response.ok) {\n            throw new Error(`Generate user failed: ${response.statusText}`);\n        }\n        \n        const result = await response.json();\n        console.log('‚úÖ Backend generateUser result:', result);\n        \n        if (!result.success) {\n            alert(result.error || 'Failed to generate user');\n            return null;\n        }\n        \n        return result.user;\n        \n    } catch (error) {\n        console.error('‚ùå Generate user error:', error);\n        alert(`Failed to generate user: ${error.message}`);\n        return null;\n    }\n}\n\n// Backend Helper 3: Register User\nasync function registerUser(userLabel, passcode, participantId) {\n    try {\n        const app_id = getAppId();\n        \n        console.log('üìù Calling backend registerUser for app:', app_id, 'user:', userLabel);\n        \n        const response = await fetch('/api/zad/save', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                app_id: app_id,\n                action_type: 'register_user',\n                content_data: {\n                    userLabel: userLabel,\n                    passcode: passcode,\n                    participantId: participantId\n                }\n            })\n        });\n        \n        if (!response.ok) {\n            throw new Error(`Register user failed: ${response.statusText}`);\n        }\n        \n        const result = await response.json();\n        console.log('‚úÖ Backend registerUser result:', result);\n        \n        if (!result.success) {\n            alert(result.result?.error || 'Registration failed');\n            return { success: false, error: result.result?.error };\n        }\n        \n        return result.result;\n        \n    } catch (error) {\n        console.error('‚ùå Register user error:', error);\n        alert(`Registration failed: ${error.message}`);\n        return { success: false, error: error.message };\n    }\n}\n\n// Backend Helper 4: Authenticate User\nasync function authenticateUser(userLabel, passcode) {\n    try {\n        const app_id = getAppId();\n        \n        console.log('üîê Calling backend authenticateUser for app:', app_id, 'user:', userLabel);\n        \n        const response = await fetch('/api/zad/save', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                app_id: app_id,\n                action_type: 'authenticate_user',\n                content_data: {\n                    userLabel: userLabel,\n                    passcode: passcode\n                }\n            })\n        });\n        \n        if (!response.ok) {\n            throw new Error(`Authentication failed: ${response.statusText}`);\n        }\n        \n        const result = await response.json();\n        console.log('‚úÖ Backend authenticateUser result:', result);\n        \n        if (!result.success) {\n            alert(result.result?.error || 'Authentication failed');\n            return { success: false, error: result.result?.error };\n        }\n        \n        return result.result;\n        \n    } catch (error) {\n        console.error('‚ùå Authentication error:', error);\n        alert(`Authentication failed: ${error.message}`);\n        return { success: false, error: error.message };\n    }\n}\n\n// Backend Helper Function Test: greet(name)\n// This demonstrates how backend helper functions work - all logic happens on server\nasync function greet(name) {\n    try {\n        const app_id = getAppId();\n        const participant_id = getParticipantId();\n        const username = getUsername();\n        \n        console.log('ü§ñ Calling backend greet function for:', name);\n        \n        // Simple client call - all logic happens on backend\n        const response = await fetch('/api/zad/save', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                app_id: app_id,\n                participant_id: participant_id,\n                participant_data: { userLabel: username, username: username },\n                action_type: 'greet',\n                content_data: { name: name }\n            })\n        });\n        \n        if (!response.ok) {\n            throw new Error(`Greet failed: ${response.statusText}`);\n        }\n        \n        const result = await response.json();\n        console.log('‚úÖ Backend greet function result:', result);\n        \n        // Return the backend-generated greeting\n        return result.greeting;\n        \n    } catch (error) {\n        console.error('‚ùå Greet error:', error);\n        alert(`Greet failed: ${error.message}`);\n        return 'Error generating greeting';\n    }\n}\n\n// Backend Helper Function: generateImage(prompt, style)\n// Generate AI images from text descriptions\nasync function generateImage(prompt, style) {\n    try {\n        const app_id = getAppId();\n        const participant_id = getParticipantId();\n        const username = getUsername();\n        \n        console.log('üé® Calling backend generateImage function for:', prompt);\n        \n        const response = await fetch('/api/zad/save', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                app_id: app_id,\n                participant_id: participant_id,\n                participant_data: { userLabel: username, username: username },\n                action_type: 'generate_image',\n                content_data: { \n                    prompt: prompt,\n                    style: style || 'realistic'\n                }\n            })\n        });\n        \n        if (!response.ok) {\n            throw new Error(`Image generation failed: ${response.statusText}`);\n        }\n        \n        const result = await response.json();\n        console.log('‚úÖ Backend generateImage function result:', result);\n        \n        return result.imageUrl;\n        \n    } catch (error) {\n        console.error('‚ùå GenerateImage error:', error);\n        alert(`Image generation failed: ${error.message}`);\n        return '';\n    }\n}\n\n// Backend Helper Function: generateText(prompt, options)\n// Generate AI text responses\nasync function generateText(prompt, options = {}) {\n    try {\n        const app_id = getAppId();\n        const participant_id = getParticipantId();\n        const username = getUsername();\n        \n        console.log('ü§ñ Calling backend generateText function for:', prompt);\n        \n        const response = await fetch('/api/zad/save', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                app_id: app_id,\n                participant_id: participant_id,\n                participant_data: { userLabel: username, username: username },\n                action_type: 'generate_text',\n                content_data: { \n                    prompt: prompt,\n                    maxTokens: options.maxTokens,\n                    temperature: options.temperature,\n                    systemPrompt: options.systemPrompt,\n                    username: username\n                }\n            })\n        });\n        \n        if (!response.ok) {\n            throw new Error(`Text generation failed: ${response.statusText}`);\n        }\n        \n        const result = await response.json();\n        console.log('‚úÖ Backend generateText function result:', result);\n        \n        return result.text;\n        \n    } catch (error) {\n        console.error('‚ùå GenerateText error:', error);\n        alert(`Text generation failed: ${error.message}`);\n        throw error;\n    }\n}\n\n// Load data from ZAD API\nasync function load(type) {\n    try {\n        const app_id = getAppId();\n        const participant_id = getParticipantId();\n        \n        console.log('üîÑ Loading from ZAD API:', { app_id, type, participant_id });\n        \n        const url = `/api/zad/load?app_id=${encodeURIComponent(app_id)}&action_type=${encodeURIComponent(type)}&participant_id=${encodeURIComponent(participant_id)}`;\n        console.log('üîç ZAD load URL:', url);\n        const response = await fetch(url);\n        \n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(`Load failed: ${errorData.error || response.statusText}`);\n        }\n        \n        const data = await response.json();\n        console.log('‚úÖ Loaded successfully:', data);\n        \n        // Transform ZAD data back to simple format\n        return data.map(item => ({\n            id: item.id,\n            ...item.content_data,\n            author: item.content_data.author || item.participant_data?.username || 'Unknown',\n            created_at: item.created_at\n        }));\n        \n    } catch (error) {\n        console.error('‚ùå Load error:', error);\n        alert(`Failed to load: ${error.message}`);\n        return [];\n    }\n}\n\n// Query data from ZAD API with flexible filtering\nasync function query(type, options = {}) {\n    try {\n        const app_id = getAppId();\n        \n        console.log('üîç Querying ZAD API:', { app_id, type, options });\n        \n        const queryData = {\n            app_id: app_id,\n            action_type: 'query',\n            content_data: {\n                type: type,\n                ...options\n            }\n        };\n        \n        const response = await fetch('/api/zad/save', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(queryData)\n        });\n        \n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(`Query failed: ${errorData.error || response.statusText}`);\n        }\n        \n        const result = await response.json();\n        console.log('‚úÖ Query completed successfully:', result);\n        \n        // Transform ZAD data back to simple format\n        return result.data.map(item => ({\n            id: item.id,\n            ...item.content_data,\n            author: item.content_data.author || item.participant_data?.username || 'Unknown',\n            created_at: item.created_at\n        }));\n        \n    } catch (error) {\n        console.error('‚ùå Query error:', error);\n        alert(`Failed to query: ${error.message}`);\n        return [];\n    }\n}\n\n                // Make functions globally available\n                window.initAuth = initAuth;\n                window.save = save;\n                window.load = load;\n                window.query = query;\n                window.getAppId = getAppId;\n                window.getParticipantId = getParticipantId;\n                window.getUsername = getUsername;\n                window.getCurrentUser = getCurrentUser;\n                window.updateZadAuth = updateZadAuth;\n                window.greet = greet; // Add greet function to window object\n                window.generateImage = generateImage; // Add generateImage function to window object\n                window.generateText = generateText; // Add generateText function to window object\n                window.checkAvailableSlots = checkAvailableSlots;\n                window.generateUser = generateUser;\n                window.registerUser = registerUser;\n                window.authenticateUser = authenticateUser;\n\nconsole.log('üöÄ ZAD Helper Functions loaded successfully');\n                console.log('Available functions: initAuth(), save(type, data), load(type), query(type, options), updateZadAuth(userLabel, participantId), greet(name), generateImage(prompt, style), generateText(prompt, options)');\nconsole.log('üîë Phase 1 Auth functions: checkAvailableSlots(), generateUser(), registerUser(label, code, id), authenticateUser(label, code)');\n\n// DEMO MODE: Complete demo mode implementation with localStorage isolation\nif (window.location.search.includes('demo=true')) {\n    console.log('üé≠ DEMO MODE - Activating complete demo mode');\n    \n    // Create fake demo user credentials\n    let demoUser = {\n        userLabel: 'Demo User',\n        participantId: 'demo-user-' + Math.random().toString(36).substr(2, 8),\n        username: 'Demo User'\n    };\n    \n    // Override ZAD helper functions to use localStorage instead of backend\n    const originalSave = window.save;\n    window.save = async function(type, data) {\n        try {\n            const demoKey = `demo_${type}_${demoUser.participantId}`;\n            const existing = JSON.parse(localStorage.getItem(demoKey) || '[]');\n            \n            const newItem = {\n                id: Date.now(),\n                created_at: new Date().toISOString(),\n                author: data.author || demoUser.userLabel,\n                ...data\n            };\n            \n            existing.push(newItem);\n            localStorage.setItem(demoKey, JSON.stringify(existing));\n            \n            console.log('üé≠ Demo save:', { type, data: newItem });\n            return { success: true, data: newItem };\n            \n        } catch (error) {\n            console.error('‚ùå Demo save error:', error);\n            return { success: false, error: error.message };\n        }\n    };\n    \n    const originalLoad = window.load;\n    window.load = async function(type) {\n        try {\n            const demoKey = `demo_${type}_${demoUser.participantId}`;\n            const data = JSON.parse(localStorage.getItem(demoKey) || '[]');\n            \n            // Transform demo data to match real ZAD API structure\n            const transformedData = data.map(item => {\n                // Extract metadata fields\n                const { id, created_at, author, ...contentData } = item;\n                \n                // Return in same format as real ZAD API: content_data contains the actual data\n                return {\n                    id: id,\n                    created_at: created_at,\n                    content_data: contentData,\n                    author: author || demoUser.userLabel\n                };\n            });\n            \n            console.log('üé≠ Demo load:', { type, count: transformedData.length });\n            return transformedData;\n            \n        } catch (error) {\n            console.error('‚ùå Demo load error:', error);\n            return [];\n        }\n    };\n    \n    // Override authentication functions to work with demo user\n    window.getCurrentUser = function() {\n        return demoUser;\n    };\n    \n    window.getUsername = function() {\n        return demoUser.userLabel;\n    };\n    \n    window.getParticipantId = function() {\n        return demoUser.participantId;\n    };\n    \n    // Set global currentUser for apps that expect it\n    if (typeof window.currentUser === 'undefined') {\n        window.currentUser = demoUser;\n    }\n    \n    document.addEventListener('DOMContentLoaded', () => {\n        // Hide welcome/auth screens and show main screen\n        const welcomeScreen = document.getElementById('welcome-screen');\n        const mainScreen = document.getElementById('main-screen');\n        \n        if (welcomeScreen && mainScreen) {\n            welcomeScreen.style.display = 'none';\n            mainScreen.style.display = 'block';\n            console.log('üé≠ Auth screens bypassed for demo mode');\n        }\n        \n        // Add demo banner if user status exists\n        const userStatus = document.getElementById('user-status');\n        if (userStatus) {\n            userStatus.innerHTML = 'üé≠ DEMO MODE - Try it out! Data saved locally.';\n        }\n        \n        // Update user display elements\n        const userLabelElements = document.querySelectorAll('#current-user-label, .current-user-label');\n        userLabelElements.forEach(elem => {\n            elem.textContent = demoUser.userLabel;\n        });\n        \n        // Auto-initialize demo user authentication state\n        if (typeof window.updateZadAuth === 'function') {\n            window.updateZadAuth(demoUser.userLabel, demoUser.participantId);\n        }\n        \n        console.log('üé≠ Demo mode fully activated:', demoUser);\n    });\n}\n\n</script>\n</head>\n<body>\n    <div class=\"app-container\">\n        <!-- Auth Screens -->\n        <div id=\"welcome-screen\" class=\"screen active\">\n            <h1>CALORIE REBEL üî•</h1>\n            <p>Track calories with attitude & AI insights</p>\n            <button onclick=\"showNewUserScreen()\">New User</button>\n            <button onclick=\"showReturningUserScreen()\">Returning User</button>\n        </div>\n\n        <div id=\"new-user-screen\" class=\"screen\">\n            <h1>New Rebel</h1>\n            <div id=\"new-user-info\"></div>\n            <button onclick=\"registerNewUser()\">Start Breaking Rules</button>\n            <button onclick=\"showScreen('welcome-screen')\">Back</button>\n        </div>\n\n        <div id=\"returning-user-screen\" class=\"screen\">\n            <h1>Welcome Back Rebel</h1>\n            <select id=\"user-label-select\"></select>\n            <input type=\"text\" id=\"returning-passcode\" placeholder=\"4-digit code\" maxlength=\"4\">\n            <button onclick=\"loginReturningUser()\">Enter The Chaos</button>\n            <button onclick=\"showScreen('welcome-screen')\">Back</button>\n        </div>\n\n        <!-- Main App Screen -->\n        <div id=\"main-screen\" class=\"screen\">\n            <div id=\"user-status\">REBEL: <span id=\"current-user-label\"></span></div>\n            \n            <div class=\"card\">\n                <h2>Log Today's Calories</h2>\n                <input type=\"number\" id=\"calorie-input\" placeholder=\"How many calories?\" min=\"0\">\n                <input type=\"text\" id=\"meal-description\" placeholder=\"What did you eat?\">\n                <button onclick=\"logCalories()\">LOG IT üî•</button>\n            </div>\n\n            <div class=\"card\">\n                <h2>Your Calorie Trend</h2>\n                <canvas id=\"calorieChart\"></canvas>\n            </div>\n\n            <div class=\"card\">\n                <h2>AI Insights</h2>\n                <div id=\"ai-feedback\" class=\"ai-feedback\">\n                    Log your first meal to get AI feedback!\n                </div>\n            </div>\n\n            <button onclick=\"showScreen('welcome-screen')\">Exit</button>\n        </div>\n    </div>\n\n    <div class=\"floating-emoji\" onclick=\"triggerEmojiRain()\">üî•</div>\n\n    <script>\n        let currentUser = null;\n        let calorieChart = null;\n\n        // Initialize authentication\n        initAuth();\n\n        // Standard auth functions (copied from template)\n        async function generateNewUser() {\n            const slots = await checkAvailableSlots();\n            if (slots.isFull) {\n                alert('App is full!');\n                return false;\n            }\n            const user = await generateUser();\n            if (user?.success) {\n                currentUser = user;\n                document.getElementById('new-user-info').innerHTML = \n                    `Your ID: ${user.userLabel}<br>Code: ${user.passcode}<br>Save these!`;\n                return true;\n            }\n            return false;\n        }\n\n        async function registerNewUser() {\n            if (!currentUser) return;\n            const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);\n            if (result?.success) {\n                updateZadAuth(currentUser.userLabel, currentUser.participantId);\n                enterMainScreen();\n            }\n        }\n\n        async function showNewUserScreen() {\n            showScreen('new-user-screen');\n            await generateNewUser();\n        }\n\n        async function loginReturningUser() {\n            const label = document.getElementById('user-label-select').value;\n            const passcode = document.getElementById('returning-passcode').value;\n            const result = await authenticateUser(label, passcode);\n            if (result?.success) {\n                currentUser = { userLabel: label, passcode, participantId: result.user.participantId };\n                updateZadAuth(label, result.user.participantId);\n                enterMainScreen();\n            } else {\n                alert('Wrong code!');\n            }\n        }\n\n        function showScreen(screenId) {\n            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));\n            document.getElementById(screenId).classList.add('active');\n            if (screenId !== 'main-screen') stopPolling();\n        }\n\n        async function showReturningUserScreen() {\n            showScreen('returning-user-screen');\n            const slots = await checkAvailableSlots();\n            const select = document.getElementById('user-label-select');\n            select.innerHTML = '<option>Select User</option>';\n            slots.usedLabels.forEach(label => {\n                select.innerHTML += `<option>${label}</option>`;\n            });\n        }\n\n        // App-specific functions\n        async function logCalories() {\n            const calories = parseInt(document.getElementById('calorie-input').value);\n            const description = document.getElementById('meal-description').value;\n\n            if (!calories || !description) {\n                alert('Please enter both calories and description!');\n                return;\n            }\n\n            await save('calorie_entry', {\n                calories,\n                description,\n                date: new Date().toISOString().split('T')[0]\n            });\n\n            document.getElementById('calorie-input').value = '';\n            document.getElementById('meal-description').value = '';\n\n            await loadLatestData();\n            await generateAIFeedback();\n        }\n\n        async function generateAIFeedback() {\n            const entries = await loadCalorieEntries();\n            const totalToday = entries\n                .filter(e => e.date === new Date().toISOString().split('T')[0])\n                .reduce((sum, entry) => sum + entry.calories, 0);\n\n            const prompt = `\n                As a nutrition coach, analyze this data:\n                - Today's total calories: ${totalToday}\n                - Recent meals: ${entries.slice(-3).map(e => e.description).join(', ')}\n                \n                Provide brief feedback and one actionable tip for improvement.\n                Keep response under 3 sentences and be motivating but direct.\n            `;\n\n            const feedback = await generateText(prompt, {\n                maxTokens: 150,\n                temperature: 0.7\n            });\n\n            document.getElementById('ai-feedback').innerHTML = feedback;\n        }\n\n        async function loadCalorieEntries() {\n            const allEntries = await load('calorie_entry');\n            const myEntries = allEntries.filter(e => e.author === getUsername());\n            return deduplicate(myEntries, 'date');\n        }\n\n        function updateChart(entries) {\n            const ctx = document.getElementById('calorieChart').getContext('2d');\n            \n            // Group entries by date\n            const dailyTotals = entries.reduce((acc, entry) => {\n                if (!acc[entry.date]) acc[entry.date] = 0;\n                acc[entry.date] += entry.calories;\n                return acc;\n            }, {});\n\n            // Sort dates and get last 7 days\n            const dates = Object.keys(dailyTotals).sort();\n            const last7Days = dates.slice(-7);\n            const calorieData = last7Days.map(date => dailyTotals[date]);\n\n            if (calorieChart) calorieChart.destroy();\n\n            calorieChart = new Chart(ctx, {\n                type: 'line',\n                data: {\n                    labels: last7Days,\n                    datasets: [{\n                        label: 'Daily Calories',\n                        data: calorieData,\n                        borderColor: '#00FF88',\n                        backgroundColor: '#FF00FF33',\n                        tension: 0.4\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    scales: {\n                        y: {\n                            beginAtZero: true,\n                            grid: {\n                                color: '#333333'\n                            },\n                            ticks: {\n                                color: '#FFFFFF'\n                            }\n                        },\n                        x: {\n                            grid: {\n                                color: '#333333'\n                            },\n                            ticks: {\n                                color: '#FFFFFF'\n                            }\n                        }\n                    },\n                    plugins: {\n                        legend: {\n                            labels: {\n                                color: '#FFFFFF'\n                            }\n                        }\n                    }\n                }\n            });\n        }\n\n        async function loadLatestData() {\n            const entries = await loadCalorieEntries();\n            updateChart(entries);\n        }\n\n        function enterMainScreen() {\n            showScreen('main-screen');\n            document.getElementById('current-user-label').textContent = currentUser.userLabel;\n            startPolling();\n            loadLatestData();\n        }\n\n        // Polling setup\n        let pollingInterval;\n\n        function startPolling() {\n            loadLatestData();\n            pollingInterval = setInterval(loadLatestData, 2000);\n        }\n\n        function stopPolling() {\n            if (pollingInterval) clearInterval(pollingInterval);\n        }\n\n        // Emoji rain easter egg\n        function triggerEmojiRain() {\n            const emojis = ['üî•', 'ü•ó', 'ü•ë', 'ü•©', 'üçé'];\n            for (let i = 0; i < 20; i++) {\n                const emoji = document.createElement('div');\n                emoji.style.position = 'fixed';\n                emoji.style.left = `${Math.random() * 100}vw`;\n                emoji.style.top = '-20px';\n                emoji.style.fontSize = '24px';\n                emoji.innerHTML = emojis[Math.floor(Math.random() * emojis.length)];\n                emoji.style.zIndex = '1000';\n                emoji.style.pointerEvents = 'none';\n                document.body.appendChild(emoji);\n\n                const animation = emoji.animate([\n                    { transform: 'translateY(0)', opacity: 1 },\n                    { transform: `translateY(${window.innerHeight + 20}px)`, opacity: 0 }\n                ], {\n                    duration: 1000 + Math.random() * 1000,\n                    easing: 'linear'\n                });\n\n                animation.onfinish = () => emoji.remove();\n            }\n        }\n\n        // Helper function for deduplication\n        function deduplicate(items, uniqueField = 'id') {\n            return items.reduce((acc, item) => {\n                const existing = acc.find(i => i[uniqueField] === item[uniqueField]);\n                if (!existing || new Date(item.created_at) > new Date(existing.created_at)) {\n                    if (existing) {\n                        const index = acc.indexOf(existing);\n                        acc[index] = item;\n                    } else {\n                        acc.push(item);\n                    }\n                }\n                return acc;\n            }, []);\n        }\n    </script>\n</body>\n</html>"
    },
    "content": {
      "id": "a4e76fbc-c31b-4af6-abbc-4ef3376ffad1",
      "html_content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <title>WTAF ‚Äì Delusional App Generator</title>\n    <meta property=\"og:title\" content=\"WTAF by AF\" />\n    <meta property=\"og:description\" content=\"Vibecoded chaos, shipped via SMS.\" />\n    <meta property=\"og:image\" content=\"https://theaf.us/og-types/og-type-app-1.png\" />\n    <meta property=\"og:image:width\" content=\"1200\" />\n    <meta property=\"og:image:height\" content=\"630\" />\n    <meta property=\"og:url\" content=\"https://www.wtaf.me/bart/kinetic-pike-mastering\" />\n    <meta name=\"twitter:card\" content=\"summary_large_image\" />\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\n    <title>CALORIE REBEL üî•</title>\n    <link href=\"https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=JetBrains+Mono&display=swap\" rel=\"stylesheet\">\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n    <style>\n        /* THEME: MIDNIGHT */\n        :root {\n            --bg: #0A0A0A;\n            --border: #00FF88;\n            --shadow: #FF00FF;\n            --text: #FFFFFF;\n            --card: #111111;\n        }\n\n        * {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        body {\n            font-family: 'Space Grotesk', system-ui, sans-serif;\n            background: var(--bg);\n            color: var(--text);\n            line-height: 1.6;\n            font-size: 16px;\n        }\n\n        .screen {\n            display: none;\n            padding: 20px;\n            max-width: 800px;\n            margin: 0 auto;\n        }\n\n        .screen.active {\n            display: block;\n        }\n\n        h1, h2 {\n            text-transform: uppercase;\n            font-weight: bold;\n            transform: rotate(-1deg);\n            color: var(--border);\n            margin: 20px 0;\n        }\n\n        .card {\n            background: var(--card);\n            border: 4px solid var(--border);\n            box-shadow: 8px 8px 0 var(--shadow);\n            padding: 20px;\n            margin: 20px 0;\n            transform: rotate(1deg);\n            transition: all 0.3s ease;\n        }\n\n        .card:hover {\n            transform: rotate(-1deg) scale(1.01);\n        }\n\n        button {\n            background: var(--border);\n            border: none;\n            color: var(--bg);\n            padding: 15px 30px;\n            font-size: 18px;\n            font-family: 'Space Grotesk', system-ui, sans-serif;\n            text-transform: uppercase;\n            font-weight: bold;\n            cursor: pointer;\n            min-height: 44px;\n            width: 100%;\n            margin: 10px 0;\n            transform: rotate(-1deg);\n            transition: all 0.2s ease;\n        }\n\n        button:hover {\n            transform: rotate(1deg) scale(1.05);\n            background: var(--shadow);\n        }\n\n        input {\n            width: 100%;\n            padding: 12px;\n            margin: 10px 0;\n            font-size: 16px;\n            border: 3px solid var(--border);\n            background: var(--card);\n            color: var(--text);\n            min-height: 44px;\n            font-family: 'JetBrains Mono', monospace;\n        }\n\n        input:focus {\n            outline: none;\n            transform: scale(1.02);\n            border-color: var(--shadow);\n        }\n\n        .ai-feedback {\n            font-family: 'JetBrains Mono', monospace;\n            padding: 15px;\n            border-left: 4px solid var(--shadow);\n            margin: 20px 0;\n            background: var(--card);\n        }\n\n        #calorieChart {\n            background: var(--card);\n            padding: 20px;\n            border-radius: 4px;\n            margin: 20px 0;\n        }\n\n        .floating-emoji {\n            position: fixed;\n            bottom: 20px;\n            right: 20px;\n            font-size: 40px;\n            cursor: pointer;\n            animation: pulse 2s infinite;\n        }\n\n        @keyframes pulse {\n            0% { transform: scale(1); }\n            50% { transform: scale(1.2); }\n            100% { transform: scale(1); }\n        }\n\n        @media (min-width: 768px) {\n            button {\n                width: auto;\n            }\n        }\n    </style>\n<script>\n// ZAD Helper Functions - Inline version for test apps\n\n// SIMPLIFIED UUID INJECTION: Set window.APP_ID for backup\nwindow.APP_ID = 'a4e76fbc-c31b-4af6-abbc-4ef3376ffad1';\nconsole.log('üÜî SIMPLIFIED UUID INJECTION: window.APP_ID set to:', 'a4e76fbc-c31b-4af6-abbc-4ef3376ffad1');\n\nconsole.log('üöÄ Loading ZAD Helper Functions (inline)...');\n\n// Auth state - Use existing global currentUser or create zadCurrentUser\nlet zadCurrentUser = (typeof currentUser !== 'undefined') ? currentUser : null;\nlet authInitialized = false;\n\n// Get app ID from window.APP_ID (set by system) - ENHANCED DEBUG VERSION\nfunction getAppId() {\n    console.log('üÜî SIMPLIFIED UUID INJECTION: window.APP_ID set to:', 'a4e76fbc-c31b-4af6-abbc-4ef3376ffad1');\n    return 'a4e76fbc-c31b-4af6-abbc-4ef3376ffad1';\n}\n\n                // Get participant ID - return stored ID or generate temporary one\n                function getParticipantId() {\n                    let participantId = localStorage.getItem('zad_participant_id');\n                    if (!participantId) {\n                        // Check if demo mode is enabled (multiple detection methods for iframe compatibility)\n                        const isDemoMode = \n                            window.location.search.includes('demo=true') ||\n                            window.parent?.location?.search?.includes('demo=true') ||\n                            window.top?.location?.search?.includes('demo=true') ||\n                            document.referrer.includes('demo=true');\n                        \n                        // Clear demo mode if not detected in current session\n                        if (!isDemoMode) {\n                            localStorage.removeItem('demo_mode');\n                            // Also clear participant_id if it was a demo ID, so user gets fresh normal ID\n                            const existingId = localStorage.getItem('zad_participant_id');\n                            if (existingId && existingId.startsWith('demo_')) {\n                                localStorage.removeItem('zad_participant_id');\n                                localStorage.removeItem('zad_username');\n                            }\n                        }\n                        \n                        if (isDemoMode) {\n                            // Generate demo ID that will trigger backend demo table routing\n                            participantId = 'demo_user_' + Math.random().toString(36).substr(2, 8);\n                            localStorage.setItem('demo_mode', 'true');\n                            localStorage.setItem('zad_username', 'Demo User');\n                            console.log('üé≠ Demo mode detected - generated demo participant ID:', participantId);\n                        } else {\n                            // Generate temporary ID - app's authentication system will set the real one\n                            participantId = 'temp_' + Math.random().toString(36).substr(2, 12);\n                            localStorage.setItem('zad_username', 'Anonymous');\n                        }\n                        \n                        localStorage.setItem('zad_participant_id', participantId);\n                    }\n                    return participantId;\n                }\n\n                // Get username from current session\n                function getUsername() {\n                    // Ensure participant ID is initialized first (which sets up localStorage)\n                    getParticipantId();\n                    return localStorage.getItem('zad_username') || 'Anonymous';\n                }\n\n                // Update ZAD helper functions with app's authentication state\n                function updateZadAuth(userLabel, participantId) {\n                    localStorage.setItem('zad_participant_id', participantId);\n                    localStorage.setItem('zad_username', userLabel);\n                    zadCurrentUser = {\n                        username: userLabel,\n                        participantId: participantId\n                    };\n                    console.log('üîÑ Updated ZAD auth state:', zadCurrentUser);\n                }\n\n                // Initialize authentication (simplified)\n                function initAuth() {\n                    console.log('üîê Initializing authentication...');\n                    if (authInitialized) return;\n                    authInitialized = true;\n                    \n                    // Don't clear localStorage or prompt during initialization\n                    // Let the app's authentication system handle user setup\n                    zadCurrentUser = {\n                        username: getUsername(),\n                        participantId: localStorage.getItem('zad_participant_id') || null\n                    };\n                    \n                    console.log('‚úÖ Authentication ready:', zadCurrentUser);\n                }\n\n                // Get current user (compatible with zad-helpers.ts)\n                function getCurrentUser() {\n                    if (!zadCurrentUser) return null;\n                    \n                    return {\n                        username: zadCurrentUser.username || getUsername(),\n                        id: zadCurrentUser.participantId || getParticipantId(),\n                        userLabel: zadCurrentUser.username || getUsername(),\n                        participantId: zadCurrentUser.participantId || getParticipantId(),\n                        passcode: zadCurrentUser.passcode || null\n                    };\n                }\n\n// Save data to ZAD API\nasync function save(type, data) {\n    try {\n        const app_id = getAppId();\n        const participant_id = getParticipantId();\n        const username = getUsername();\n        \n        const zadData = {\n            app_id: app_id,\n            participant_id: participant_id,\n            participant_data: {\n                userLabel: username,\n                username: username\n            },\n            action_type: type,\n            content_data: {\n                ...data,\n                timestamp: data.timestamp || Date.now(),\n                author: data.author || username\n            }\n        };\n        \n        console.log('üîÑ Saving to ZAD API:', { type, data: zadData });\n        \n        const response = await fetch('/api/zad/save', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(zadData)\n        });\n        \n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(`Save failed: ${errorData.error || response.statusText}`);\n        }\n        \n        const result = await response.json();\n        console.log('‚úÖ Saved successfully:', result);\n        return result;\n        \n    } catch (error) {\n        console.error('‚ùå Save error:', error);\n        alert(`Failed to save: ${error.message}`);\n        throw error;\n    }\n}\n\n// Phase 1 Authentication Backend Helper Functions\n// These call the backend API with specific action types\n\n// Backend Helper 1: Check Available Slots\nasync function checkAvailableSlots() {\n    try {\n        const app_id = getAppId();\n        \n        console.log('üîç Calling backend checkAvailableSlots for app:', app_id);\n        \n        const response = await fetch('/api/zad/save', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                app_id: app_id,\n                action_type: 'check_slots',\n                content_data: {}\n            })\n        });\n        \n        if (!response.ok) {\n            throw new Error(`Check slots failed: ${response.statusText}`);\n        }\n        \n        const result = await response.json();\n        console.log('‚úÖ Backend checkAvailableSlots result:', result.slots);\n        \n        return result.slots;\n        \n    } catch (error) {\n        console.error('‚ùå Check slots error:', error);\n        alert(`Failed to check available slots: ${error.message}`);\n        return { totalSlots: 5, usedSlots: 0, availableSlots: 5, availableLabels: [], usedLabels: [], isFull: false };\n    }\n}\n\n// Backend Helper 2: Generate User Credentials\nasync function generateUser() {\n    try {\n        const app_id = getAppId();\n        \n        console.log('üé≤ Calling backend generateUser for app:', app_id);\n        \n        const response = await fetch('/api/zad/save', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                app_id: app_id,\n                action_type: 'generate_user',\n                content_data: {}\n            })\n        });\n        \n        if (!response.ok) {\n            throw new Error(`Generate user failed: ${response.statusText}`);\n        }\n        \n        const result = await response.json();\n        console.log('‚úÖ Backend generateUser result:', result);\n        \n        if (!result.success) {\n            alert(result.error || 'Failed to generate user');\n            return null;\n        }\n        \n        return result.user;\n        \n    } catch (error) {\n        console.error('‚ùå Generate user error:', error);\n        alert(`Failed to generate user: ${error.message}`);\n        return null;\n    }\n}\n\n// Backend Helper 3: Register User\nasync function registerUser(userLabel, passcode, participantId) {\n    try {\n        const app_id = getAppId();\n        \n        console.log('üìù Calling backend registerUser for app:', app_id, 'user:', userLabel);\n        \n        const response = await fetch('/api/zad/save', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                app_id: app_id,\n                action_type: 'register_user',\n                content_data: {\n                    userLabel: userLabel,\n                    passcode: passcode,\n                    participantId: participantId\n                }\n            })\n        });\n        \n        if (!response.ok) {\n            throw new Error(`Register user failed: ${response.statusText}`);\n        }\n        \n        const result = await response.json();\n        console.log('‚úÖ Backend registerUser result:', result);\n        \n        if (!result.success) {\n            alert(result.result?.error || 'Registration failed');\n            return { success: false, error: result.result?.error };\n        }\n        \n        return result.result;\n        \n    } catch (error) {\n        console.error('‚ùå Register user error:', error);\n        alert(`Registration failed: ${error.message}`);\n        return { success: false, error: error.message };\n    }\n}\n\n// Backend Helper 4: Authenticate User\nasync function authenticateUser(userLabel, passcode) {\n    try {\n        const app_id = getAppId();\n        \n        console.log('üîê Calling backend authenticateUser for app:', app_id, 'user:', userLabel);\n        \n        const response = await fetch('/api/zad/save', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                app_id: app_id,\n                action_type: 'authenticate_user',\n                content_data: {\n                    userLabel: userLabel,\n                    passcode: passcode\n                }\n            })\n        });\n        \n        if (!response.ok) {\n            throw new Error(`Authentication failed: ${response.statusText}`);\n        }\n        \n        const result = await response.json();\n        console.log('‚úÖ Backend authenticateUser result:', result);\n        \n        if (!result.success) {\n            alert(result.result?.error || 'Authentication failed');\n            return { success: false, error: result.result?.error };\n        }\n        \n        return result.result;\n        \n    } catch (error) {\n        console.error('‚ùå Authentication error:', error);\n        alert(`Authentication failed: ${error.message}`);\n        return { success: false, error: error.message };\n    }\n}\n\n// Backend Helper Function Test: greet(name)\n// This demonstrates how backend helper functions work - all logic happens on server\nasync function greet(name) {\n    try {\n        const app_id = getAppId();\n        const participant_id = getParticipantId();\n        const username = getUsername();\n        \n        console.log('ü§ñ Calling backend greet function for:', name);\n        \n        // Simple client call - all logic happens on backend\n        const response = await fetch('/api/zad/save', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                app_id: app_id,\n                participant_id: participant_id,\n                participant_data: { userLabel: username, username: username },\n                action_type: 'greet',\n                content_data: { name: name }\n            })\n        });\n        \n        if (!response.ok) {\n            throw new Error(`Greet failed: ${response.statusText}`);\n        }\n        \n        const result = await response.json();\n        console.log('‚úÖ Backend greet function result:', result);\n        \n        // Return the backend-generated greeting\n        return result.greeting;\n        \n    } catch (error) {\n        console.error('‚ùå Greet error:', error);\n        alert(`Greet failed: ${error.message}`);\n        return 'Error generating greeting';\n    }\n}\n\n// Backend Helper Function: generateImage(prompt, style)\n// Generate AI images from text descriptions\nasync function generateImage(prompt, style) {\n    try {\n        const app_id = getAppId();\n        const participant_id = getParticipantId();\n        const username = getUsername();\n        \n        console.log('üé® Calling backend generateImage function for:', prompt);\n        \n        const response = await fetch('/api/zad/save', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                app_id: app_id,\n                participant_id: participant_id,\n                participant_data: { userLabel: username, username: username },\n                action_type: 'generate_image',\n                content_data: { \n                    prompt: prompt,\n                    style: style || 'realistic'\n                }\n            })\n        });\n        \n        if (!response.ok) {\n            throw new Error(`Image generation failed: ${response.statusText}`);\n        }\n        \n        const result = await response.json();\n        console.log('‚úÖ Backend generateImage function result:', result);\n        \n        return result.imageUrl;\n        \n    } catch (error) {\n        console.error('‚ùå GenerateImage error:', error);\n        alert(`Image generation failed: ${error.message}`);\n        return '';\n    }\n}\n\n// Backend Helper Function: generateText(prompt, options)\n// Generate AI text responses\nasync function generateText(prompt, options = {}) {\n    try {\n        const app_id = getAppId();\n        const participant_id = getParticipantId();\n        const username = getUsername();\n        \n        console.log('ü§ñ Calling backend generateText function for:', prompt);\n        \n        const response = await fetch('/api/zad/save', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                app_id: app_id,\n                participant_id: participant_id,\n                participant_data: { userLabel: username, username: username },\n                action_type: 'generate_text',\n                content_data: { \n                    prompt: prompt,\n                    maxTokens: options.maxTokens,\n                    temperature: options.temperature,\n                    systemPrompt: options.systemPrompt,\n                    username: username\n                }\n            })\n        });\n        \n        if (!response.ok) {\n            throw new Error(`Text generation failed: ${response.statusText}`);\n        }\n        \n        const result = await response.json();\n        console.log('‚úÖ Backend generateText function result:', result);\n        \n        return result.text;\n        \n    } catch (error) {\n        console.error('‚ùå GenerateText error:', error);\n        alert(`Text generation failed: ${error.message}`);\n        throw error;\n    }\n}\n\n// Load data from ZAD API\nasync function load(type) {\n    try {\n        const app_id = getAppId();\n        const participant_id = getParticipantId();\n        \n        console.log('üîÑ Loading from ZAD API:', { app_id, type, participant_id });\n        \n        const url = `/api/zad/load?app_id=${encodeURIComponent(app_id)}&action_type=${encodeURIComponent(type)}&participant_id=${encodeURIComponent(participant_id)}`;\n        console.log('üîç ZAD load URL:', url);\n        const response = await fetch(url);\n        \n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(`Load failed: ${errorData.error || response.statusText}`);\n        }\n        \n        const data = await response.json();\n        console.log('‚úÖ Loaded successfully:', data);\n        \n        // Transform ZAD data back to simple format\n        return data.map(item => ({\n            id: item.id,\n            ...item.content_data,\n            author: item.content_data.author || item.participant_data?.username || 'Unknown',\n            created_at: item.created_at\n        }));\n        \n    } catch (error) {\n        console.error('‚ùå Load error:', error);\n        alert(`Failed to load: ${error.message}`);\n        return [];\n    }\n}\n\n// Query data from ZAD API with flexible filtering\nasync function query(type, options = {}) {\n    try {\n        const app_id = getAppId();\n        \n        console.log('üîç Querying ZAD API:', { app_id, type, options });\n        \n        const queryData = {\n            app_id: app_id,\n            action_type: 'query',\n            content_data: {\n                type: type,\n                ...options\n            }\n        };\n        \n        const response = await fetch('/api/zad/save', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(queryData)\n        });\n        \n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(`Query failed: ${errorData.error || response.statusText}`);\n        }\n        \n        const result = await response.json();\n        console.log('‚úÖ Query completed successfully:', result);\n        \n        // Transform ZAD data back to simple format\n        return result.data.map(item => ({\n            id: item.id,\n            ...item.content_data,\n            author: item.content_data.author || item.participant_data?.username || 'Unknown',\n            created_at: item.created_at\n        }));\n        \n    } catch (error) {\n        console.error('‚ùå Query error:', error);\n        alert(`Failed to query: ${error.message}`);\n        return [];\n    }\n}\n\n                // Make functions globally available\n                window.initAuth = initAuth;\n                window.save = save;\n                window.load = load;\n                window.query = query;\n                window.getAppId = getAppId;\n                window.getParticipantId = getParticipantId;\n                window.getUsername = getUsername;\n                window.getCurrentUser = getCurrentUser;\n                window.updateZadAuth = updateZadAuth;\n                window.greet = greet; // Add greet function to window object\n                window.generateImage = generateImage; // Add generateImage function to window object\n                window.generateText = generateText; // Add generateText function to window object\n                window.checkAvailableSlots = checkAvailableSlots;\n                window.generateUser = generateUser;\n                window.registerUser = registerUser;\n                window.authenticateUser = authenticateUser;\n\nconsole.log('üöÄ ZAD Helper Functions loaded successfully');\n                console.log('Available functions: initAuth(), save(type, data), load(type), query(type, options), updateZadAuth(userLabel, participantId), greet(name), generateImage(prompt, style), generateText(prompt, options)');\nconsole.log('üîë Phase 1 Auth functions: checkAvailableSlots(), generateUser(), registerUser(label, code, id), authenticateUser(label, code)');\n\n// DEMO MODE: Complete demo mode implementation with localStorage isolation\nif (window.location.search.includes('demo=true')) {\n    console.log('üé≠ DEMO MODE - Activating complete demo mode');\n    \n    // Create fake demo user credentials\n    let demoUser = {\n        userLabel: 'Demo User',\n        participantId: 'demo-user-' + Math.random().toString(36).substr(2, 8),\n        username: 'Demo User'\n    };\n    \n    // Override ZAD helper functions to use localStorage instead of backend\n    const originalSave = window.save;\n    window.save = async function(type, data) {\n        try {\n            const demoKey = `demo_${type}_${demoUser.participantId}`;\n            const existing = JSON.parse(localStorage.getItem(demoKey) || '[]');\n            \n            const newItem = {\n                id: Date.now(),\n                created_at: new Date().toISOString(),\n                author: data.author || demoUser.userLabel,\n                ...data\n            };\n            \n            existing.push(newItem);\n            localStorage.setItem(demoKey, JSON.stringify(existing));\n            \n            console.log('üé≠ Demo save:', { type, data: newItem });\n            return { success: true, data: newItem };\n            \n        } catch (error) {\n            console.error('‚ùå Demo save error:', error);\n            return { success: false, error: error.message };\n        }\n    };\n    \n    const originalLoad = window.load;\n    window.load = async function(type) {\n        try {\n            const demoKey = `demo_${type}_${demoUser.participantId}`;\n            const data = JSON.parse(localStorage.getItem(demoKey) || '[]');\n            \n            // Transform demo data to match real ZAD API structure\n            const transformedData = data.map(item => {\n                // Extract metadata fields\n                const { id, created_at, author, ...contentData } = item;\n                \n                // Return in same format as real ZAD API: content_data contains the actual data\n                return {\n                    id: id,\n                    created_at: created_at,\n                    content_data: contentData,\n                    author: author || demoUser.userLabel\n                };\n            });\n            \n            console.log('üé≠ Demo load:', { type, count: transformedData.length });\n            return transformedData;\n            \n        } catch (error) {\n            console.error('‚ùå Demo load error:', error);\n            return [];\n        }\n    };\n    \n    // Override authentication functions to work with demo user\n    window.getCurrentUser = function() {\n        return demoUser;\n    };\n    \n    window.getUsername = function() {\n        return demoUser.userLabel;\n    };\n    \n    window.getParticipantId = function() {\n        return demoUser.participantId;\n    };\n    \n    // Set global currentUser for apps that expect it\n    if (typeof window.currentUser === 'undefined') {\n        window.currentUser = demoUser;\n    }\n    \n    document.addEventListener('DOMContentLoaded', () => {\n        // Hide welcome/auth screens and show main screen\n        const welcomeScreen = document.getElementById('welcome-screen');\n        const mainScreen = document.getElementById('main-screen');\n        \n        if (welcomeScreen && mainScreen) {\n            welcomeScreen.style.display = 'none';\n            mainScreen.style.display = 'block';\n            console.log('üé≠ Auth screens bypassed for demo mode');\n        }\n        \n        // Add demo banner if user status exists\n        const userStatus = document.getElementById('user-status');\n        if (userStatus) {\n            userStatus.innerHTML = 'üé≠ DEMO MODE - Try it out! Data saved locally.';\n        }\n        \n        // Update user display elements\n        const userLabelElements = document.querySelectorAll('#current-user-label, .current-user-label');\n        userLabelElements.forEach(elem => {\n            elem.textContent = demoUser.userLabel;\n        });\n        \n        // Auto-initialize demo user authentication state\n        if (typeof window.updateZadAuth === 'function') {\n            window.updateZadAuth(demoUser.userLabel, demoUser.participantId);\n        }\n        \n        console.log('üé≠ Demo mode fully activated:', demoUser);\n    });\n}\n\n</script>\n</head>\n<body>\n    <div class=\"app-container\">\n        <!-- Auth Screens -->\n        <div id=\"welcome-screen\" class=\"screen active\">\n            <h1>CALORIE REBEL üî•</h1>\n            <p>Track calories with attitude & AI insights</p>\n            <button onclick=\"showNewUserScreen()\">New User</button>\n            <button onclick=\"showReturningUserScreen()\">Returning User</button>\n        </div>\n\n        <div id=\"new-user-screen\" class=\"screen\">\n            <h1>New Rebel</h1>\n            <div id=\"new-user-info\"></div>\n            <button onclick=\"registerNewUser()\">Start Breaking Rules</button>\n            <button onclick=\"showScreen('welcome-screen')\">Back</button>\n        </div>\n\n        <div id=\"returning-user-screen\" class=\"screen\">\n            <h1>Welcome Back Rebel</h1>\n            <select id=\"user-label-select\"></select>\n            <input type=\"text\" id=\"returning-passcode\" placeholder=\"4-digit code\" maxlength=\"4\">\n            <button onclick=\"loginReturningUser()\">Enter The Chaos</button>\n            <button onclick=\"showScreen('welcome-screen')\">Back</button>\n        </div>\n\n        <!-- Main App Screen -->\n        <div id=\"main-screen\" class=\"screen\">\n            <div id=\"user-status\">REBEL: <span id=\"current-user-label\"></span></div>\n            \n            <div class=\"card\">\n                <h2>Log Today's Calories</h2>\n                <input type=\"number\" id=\"calorie-input\" placeholder=\"How many calories?\" min=\"0\">\n                <input type=\"text\" id=\"meal-description\" placeholder=\"What did you eat?\">\n                <button onclick=\"logCalories()\">LOG IT üî•</button>\n            </div>\n\n            <div class=\"card\">\n                <h2>Your Calorie Trend</h2>\n                <canvas id=\"calorieChart\"></canvas>\n            </div>\n\n            <div class=\"card\">\n                <h2>AI Insights</h2>\n                <div id=\"ai-feedback\" class=\"ai-feedback\">\n                    Log your first meal to get AI feedback!\n                </div>\n            </div>\n\n            <button onclick=\"showScreen('welcome-screen')\">Exit</button>\n        </div>\n    </div>\n\n    <div class=\"floating-emoji\" onclick=\"triggerEmojiRain()\">üî•</div>\n\n    <script>\n        let currentUser = null;\n        let calorieChart = null;\n\n        // Initialize authentication\n        initAuth();\n\n        // Standard auth functions (copied from template)\n        async function generateNewUser() {\n            const slots = await checkAvailableSlots();\n            if (slots.isFull) {\n                alert('App is full!');\n                return false;\n            }\n            const user = await generateUser();\n            if (user?.success) {\n                currentUser = user;\n                document.getElementById('new-user-info').innerHTML = \n                    `Your ID: ${user.userLabel}<br>Code: ${user.passcode}<br>Save these!`;\n                return true;\n            }\n            return false;\n        }\n\n        async function registerNewUser() {\n            if (!currentUser) return;\n            const result = await registerUser(currentUser.userLabel, currentUser.passcode, currentUser.participantId);\n            if (result?.success) {\n                updateZadAuth(currentUser.userLabel, currentUser.participantId);\n                enterMainScreen();\n            }\n        }\n\n        async function showNewUserScreen() {\n            showScreen('new-user-screen');\n            await generateNewUser();\n        }\n\n        async function loginReturningUser() {\n            const label = document.getElementById('user-label-select').value;\n            const passcode = document.getElementById('returning-passcode').value;\n            const result = await authenticateUser(label, passcode);\n            if (result?.success) {\n                currentUser = { userLabel: label, passcode, participantId: result.user.participantId };\n                updateZadAuth(label, result.user.participantId);\n                enterMainScreen();\n            } else {\n                alert('Wrong code!');\n            }\n        }\n\n        function showScreen(screenId) {\n            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));\n            document.getElementById(screenId).classList.add('active');\n            if (screenId !== 'main-screen') stopPolling();\n        }\n\n        async function showReturningUserScreen() {\n            showScreen('returning-user-screen');\n            const slots = await checkAvailableSlots();\n            const select = document.getElementById('user-label-select');\n            select.innerHTML = '<option>Select User</option>';\n            slots.usedLabels.forEach(label => {\n                select.innerHTML += `<option>${label}</option>`;\n            });\n        }\n\n        // App-specific functions\n        async function logCalories() {\n            const calories = parseInt(document.getElementById('calorie-input').value);\n            const description = document.getElementById('meal-description').value;\n\n            if (!calories || !description) {\n                alert('Please enter both calories and description!');\n                return;\n            }\n\n            await save('calorie_entry', {\n                calories,\n                description,\n                date: new Date().toISOString().split('T')[0]\n            });\n\n            document.getElementById('calorie-input').value = '';\n            document.getElementById('meal-description').value = '';\n\n            await loadLatestData();\n            await generateAIFeedback();\n        }\n\n        async function generateAIFeedback() {\n            const entries = await loadCalorieEntries();\n            const totalToday = entries\n                .filter(e => e.date === new Date().toISOString().split('T')[0])\n                .reduce((sum, entry) => sum + entry.calories, 0);\n\n            const prompt = `\n                As a nutrition coach, analyze this data:\n                - Today's total calories: ${totalToday}\n                - Recent meals: ${entries.slice(-3).map(e => e.description).join(', ')}\n                \n                Provide brief feedback and one actionable tip for improvement.\n                Keep response under 3 sentences and be motivating but direct.\n            `;\n\n            const feedback = await generateText(prompt, {\n                maxTokens: 150,\n                temperature: 0.7\n            });\n\n            document.getElementById('ai-feedback').innerHTML = feedback;\n        }\n\n        async function loadCalorieEntries() {\n            const allEntries = await load('calorie_entry');\n            const myEntries = allEntries.filter(e => e.author === getUsername());\n            return deduplicate(myEntries, 'date');\n        }\n\n        function updateChart(entries) {\n            const ctx = document.getElementById('calorieChart').getContext('2d');\n            \n            // Group entries by date\n            const dailyTotals = entries.reduce((acc, entry) => {\n                if (!acc[entry.date]) acc[entry.date] = 0;\n                acc[entry.date] += entry.calories;\n                return acc;\n            }, {});\n\n            // Sort dates and get last 7 days\n            const dates = Object.keys(dailyTotals).sort();\n            const last7Days = dates.slice(-7);\n            const calorieData = last7Days.map(date => dailyTotals[date]);\n\n            if (calorieChart) calorieChart.destroy();\n\n            calorieChart = new Chart(ctx, {\n                type: 'line',\n                data: {\n                    labels: last7Days,\n                    datasets: [{\n                        label: 'Daily Calories',\n                        data: calorieData,\n                        borderColor: '#00FF88',\n                        backgroundColor: '#FF00FF33',\n                        tension: 0.4\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    scales: {\n                        y: {\n                            beginAtZero: true,\n                            grid: {\n                                color: '#333333'\n                            },\n                            ticks: {\n                                color: '#FFFFFF'\n                            }\n                        },\n                        x: {\n                            grid: {\n                                color: '#333333'\n                            },\n                            ticks: {\n                                color: '#FFFFFF'\n                            }\n                        }\n                    },\n                    plugins: {\n                        legend: {\n                            labels: {\n                                color: '#FFFFFF'\n                            }\n                        }\n                    }\n                }\n            });\n        }\n\n        async function loadLatestData() {\n            const entries = await loadCalorieEntries();\n            updateChart(entries);\n        }\n\n        function enterMainScreen() {\n            showScreen('main-screen');\n            document.getElementById('current-user-label').textContent = currentUser.userLabel;\n            startPolling();\n            loadLatestData();\n        }\n\n        // Polling setup\n        let pollingInterval;\n\n        function startPolling() {\n            loadLatestData();\n            pollingInterval = setInterval(loadLatestData, 2000);\n        }\n\n        function stopPolling() {\n            if (pollingInterval) clearInterval(pollingInterval);\n        }\n\n        // Emoji rain easter egg\n        function triggerEmojiRain() {\n            const emojis = ['üî•', 'ü•ó', 'ü•ë', 'ü•©', 'üçé'];\n            for (let i = 0; i < 20; i++) {\n                const emoji = document.createElement('div');\n                emoji.style.position = 'fixed';\n                emoji.style.left = `${Math.random() * 100}vw`;\n                emoji.style.top = '-20px';\n                emoji.style.fontSize = '24px';\n                emoji.innerHTML = emojis[Math.floor(Math.random() * emojis.length)];\n                emoji.style.zIndex = '1000';\n                emoji.style.pointerEvents = 'none';\n                document.body.appendChild(emoji);\n\n                const animation = emoji.animate([\n                    { transform: 'translateY(0)', opacity: 1 },\n                    { transform: `translateY(${window.innerHeight + 20}px)`, opacity: 0 }\n                ], {\n                    duration: 1000 + Math.random() * 1000,\n                    easing: 'linear'\n                });\n\n                animation.onfinish = () => emoji.remove();\n            }\n        }\n\n        // Helper function for deduplication\n        function deduplicate(items, uniqueField = 'id') {\n            return items.reduce((acc, item) => {\n                const existing = acc.find(i => i[uniqueField] === item[uniqueField]);\n                if (!existing || new Date(item.created_at) > new Date(existing.created_at)) {\n                    if (existing) {\n                        const index = acc.indexOf(existing);\n                        acc[index] = item;\n                    } else {\n                        acc.push(item);\n                    }\n                }\n                return acc;\n            }, []);\n        }\n    </script>\n</body>\n</html>",
      "type": "ZAD",
      "current_revision": null,
      "detectedType": "zad"
    }
  }
]