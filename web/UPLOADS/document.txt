<!DOCTYPE html>
<html lang="en">
<head>
    <title>WTAF – Delusional App Generator</title>
    <meta property="og:title" content="WTAF by AF" />
    <meta property="og:description" content="Vibecoded chaos, shipped via SMS." />
    <meta property="og:image" content="https://tqniseocczttrfwtpbdr.supabase.co/storage/v1/object/public/og-images/bart-turquoise-rabbit-exploring.png" />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:url" content="https://wtaf.me/bart/turquoise-rabbit-exploring" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <script src="https://unpkg.com/@supabase/supabase-js@2"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;700&family=Inter:wght@400;600&display=swap');

        body { 
            font-family: 'Inter', sans-serif;
            background-color: #07110D;
            color: #CFFFCE;
            overflow-x: hidden;
            margin: 0;
            min-height: 100vh;
        }

        h1, h2, h3 {
            font-family: 'Space Grotesk', sans-serif;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: -0.02em;
            color: #CFFFCE;
        }



        .app-container {
            max-width: 800px;
            margin: 0 auto;
            background-color: #101C17;
            backdrop-filter: blur(20px);
            border-radius: 20px;
            padding: 2rem;
            border: 1px solid rgba(207,255,206,0.2);
            position: relative;
            z-index: 10;
            min-height: 90vh;
        }

        .screen { display: none; }
        .screen.active { display: block; animation: fadeIn 0.3s ease; }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        button {
            background: linear-gradient(135deg, #A3FFAE, #C4F0C2);
            color: #000;
            border: none;
            padding: 15px 30px;
            border-radius: 50px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-size: 14px;
            margin: 10px 5px;
        }

        /* Launch Idea button - special submit styling */
        button[onclick="postIdea()"] {
            background: linear-gradient(135deg, #4CAF50, #45a049);
            color: white;
            font-weight: 700;
            box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
        }

        button[onclick="postIdea()"]:hover {
            background: linear-gradient(135deg, #45a049, #3d8b40);
            transform: scale(1.05);
            box-shadow: 0 6px 20px rgba(76, 175, 80, 0.5);
        }

        /* Sort buttons (Latest/Hot) - brighter than filter buttons */
        .sort-options button {
            background: linear-gradient(135deg, #FFFFFF, #F0F0F0);
            color: #000;
            opacity: 1;
            font-weight: 700;
        }

        /* Filter buttons - dimmer than sort buttons */
        .category-filter button {
            background: linear-gradient(135deg, #A3FFAE, #C4F0C2);
            color: #000;
            opacity: 0.7;
            font-weight: 500;
        }

        .category-filter button:hover {
            opacity: 0.9;
        }

        button:hover {
            transform: scale(1.05);
            box-shadow: 0 0 30px rgba(255, 122, 122, 0.5);
        }

        input, select, textarea {
            background-color: #1a2f20;
            border: 2px solid rgba(207,255,206,0.3);
            color: #CFFFCE;
            padding: 12px 20px;
            border-radius: 30px;
            font-size: 16px;
            width: calc(100% - 44px);
            margin: 10px 0;
            transition: all 0.3s ease;
        }

        input:focus, select:focus, textarea:focus {
            outline: none;
            border-color: #00FFC6;
            box-shadow: 0 0 20px rgba(0, 255, 198, 0.3);
        }

        .floating-emoji {
            position: fixed;
            font-size: 2rem;
            animation: float 6s ease-in-out infinite;
            pointer-events: none;
            z-index: 5;
            opacity: 0.8;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            50% { transform: translateY(-20px) rotate(10deg); }
        }

        .idea-card {
            background-color: #1a2f20;
            border-radius: 15px;
            padding: 20px;
            margin: 15px 0;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(207,255,206,0.2);
            transition: all 0.3s ease;
        }

        .idea-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(123,58,237,0.3);
        }

        .category-tag {
            background: rgba(0,255,198,0.2);
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 12px;
            display: inline-block;
            margin: 5px 0;
            cursor: pointer;
        }

        .reactions {
            margin-top: 10px;
            display: flex;
            gap: 10px;
            align-items: center;
        }

        .fire-button {
            background: none;
            border: none;
            font-size: 20px;
            padding: 5px;
            cursor: pointer;
            transition: transform 0.2s;
            color: #A3FFAE;
        }

        .fire-button:hover {
            transform: scale(1.2);
        }

        .comments {
            margin-top: 10px;
            font-size: 14px;
            background-color: #0f1f15;
            padding: 10px;
            border-radius: 10px;
        }

        .category-filter {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            margin: 20px 0;
        }

        .sort-options {
            margin: 20px 0;
        }

        #idea-input {
            width: calc(100% - 44px);
            resize: none;
            font-family: 'Inter', sans-serif;
        }
    </style>
</head>
<body>
    <div class="floating-emoji" style="top: 5%; left: 2%;" data-value="2">✨</div>
    <div class="floating-emoji" style="top: 5%; right: 2%;" data-value="3">🌀</div>
    <div class="floating-emoji" style="bottom: 5%; left: 2%;" data-value="1">🚀</div>
    <div class="floating-emoji" style="bottom: 5%; right: 2%;" data-value="4">💥</div>

    <div class="app-container">
        <div id="welcome-screen" class="screen active">
            <h1>WTAF IDEA VORTEX 🌀</h1>
            <p>DROP YOUR GALAXY BRAIN IDEAS INTO THE CHAOS STREAM</p>
            <button onclick="showNewUserScreen()">New User</button>
            <button onclick="showReturningUserScreen()">Returning User</button>
        </div>
        
        <div id="new-user-screen" class="screen">
            <h1>New User</h1>
            <div id="new-user-info"></div>
            <button onclick="registerNewUser()">Register & Enter App</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="returning-user-screen" class="screen">
            <h1>Returning User</h1>
            <select id="user-label-select">
                <option>Select User</option>
            </select>
            <input type="text" id="returning-passcode" placeholder="Enter 4-digit passcode" maxlength="4">
            <button onclick="loginReturningUser()">Login</button>
            <button onclick="showScreen('welcome-screen')">Back</button>
        </div>
        
        <div id="main-screen" class="screen">
            <h1>WTAF IDEA VORTEX 🌀</h1>
            <div id="user-status">Welcome, <span id="current-user-label"></span>!</div>
            
            <div id="app-content">
                <div class="idea-input-section">
                    <textarea id="idea-input" placeholder="DROP YOUR GENIUS HERE 🧠" maxlength="200" rows="2"></textarea>
                    <select id="category-select">
                        <option value="triage">🧩 Triage</option>
			<option value="high">🔥 Critical</option>
			<option value="medium">⚡ High</option>
			<option value="low">💤 Medium</option>
			<option value="done">✅ Done</option>
			<option value="wontfix">🚫 Nope</option>
                    </select>
                    <button onclick="postIdea()">LAUNCH IDEA 🚀</button>
                </div>

                <div class="sort-options">
                    <button onclick="setSortMethod('latest')">Latest</button>
                    <button onclick="setSortMethod('hot')">🔥 Hot</button>
                </div>

                <div class="category-filter">
                    <button onclick="filterByCategory('all')">All</button>
                    <button onclick="filterByCategory('triage')">🧩 Triage</button>
                    <button onclick="filterByCategory('high')">🔥 Critical</button>
                    <button onclick="filterByCategory('medium')">⚡ High</button>
                    <button onclick="filterByCategory('low')">💤 Medium</button>
                    <button onclick="filterByCategory('done')">✅ Done</button>
                    <button onclick="filterByCategory('wontfix')">🚫 Nope</button>
                </div>

                <div id="ideas-container"></div>
            </div>
            
            <button onclick="showScreen('welcome-screen')">Leave App</button>
        </div>
    </div>

    <script>
        const APP_ID = 'test50';
        const USER_LABELS = ['bartbrain🧠', 'ianjam⚡', 'lukeloop🦄', 'markmint💎', 'bijanburn🔥'];
        
        const supabase = window.supabase.createClient(
            'https://tqniseocczttrfwtpbdr.supabase.co',
            'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRxbmlzZW9jY3p0dHJmd3RwYmRyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg4ODI5MjIsImV4cCI6MjA2NDQ1ODkyMn0.mwb33p0xIEXy5F7ZoLc1j9-4ZNk3FuT4zrR0aTdm350'
        );

        let currentUser = null;
        let currentFilter = 'all';
        let currentSort = 'latest';

        // Authentication Functions
        async function generateNewUser() {
            const { data: existingUsers } = await supabase
                .from('wtaf_zero_admin_collaborative')
                .select('participant_data')
                .eq('app_id', APP_ID)
                .eq('action_type', 'join');
            
            const usedLabels = existingUsers?.map(u => u.participant_data?.userLabel).filter(Boolean) || [];
            
            if (usedLabels.length >= 5) {
                alert('SQUAD\'S FULL, TRY ANOTHER DIMENSION 🚫');
                return false;
            }
            
            const availableLabel = USER_LABELS.find(label => !usedLabels.includes(label));
            if (!availableLabel) {
                alert('NO MORE ROOM IN THIS CHAOS REALM 🌀');
                return false;
            }
            
            const code = Math.floor(1000 + Math.random() * 9000).toString();
            currentUser = {
                userLabel: availableLabel,
                passcode: code,
                participantId: availableLabel + '_' + code
            };
            
            document.getElementById('new-user-info').innerHTML = 
                `<strong>YOUR LABEL:</strong> ${currentUser.userLabel}<br><strong>SECRET DIGITS:</strong> ${currentUser.passcode}<br><em>SCREENSHOT THIS OR CRY LATER 📸</em>`;
            
            return true;
        }

        async function registerNewUser() {
            if (!currentUser) {
                alert('GENERATE YOUR IDENTITY FIRST, CHAOS AGENT 🎭');
                return;
            }
            
            try {
                await supabase.from('wtaf_zero_admin_collaborative').insert({
                    app_id: APP_ID,
                    participant_id: currentUser.participantId,
                    action_type: 'join',
                    participant_data: {
                        userLabel: currentUser.userLabel,
                        passcode: currentUser.passcode,
                        join_time: Date.now()
                    },
                    content_data: { message: 'Joined the app', timestamp: Date.now() }
                });
                
                enterMainScreen();
            } catch (error) {
                console.error('Registration error:', error);
                alert('REGISTRATION EXPLODED, TRY AGAIN 💥');
            }
        }

        async function showNewUserScreen() {
            showScreen('new-user-screen');
            const success = await generateNewUser();
            if (!success) {
                showScreen('welcome-screen');
            }
        }

        async function loginReturningUser() {
            const selectedLabel = document.getElementById('user-label-select').value;
            const enteredPasscode = document.getElementById('returning-passcode').value.trim();
            
            if (!selectedLabel || selectedLabel === 'Select User') {
                alert('PICK YOUR IDENTITY, PHANTOM 👻');
                return;
            }
            
            if (!enteredPasscode || enteredPasscode.length !== 4) {
                alert('4 DIGITS OF CHAOS REQUIRED 🔢');
                return;
            }
            
            try {
                const { data: joinRecords } = await supabase
                    .from('wtaf_zero_admin_collaborative')
                    .select('*')
                    .eq('app_id', APP_ID)
                    .eq('action_type', 'join');
                
                const userRecord = joinRecords?.find(record => 
                    record.participant_data?.userLabel === selectedLabel && 
                    record.participant_data?.passcode === enteredPasscode
                );
                
                if (userRecord) {
                    currentUser = {
                        userLabel: selectedLabel,
                        passcode: enteredPasscode,
                        participantId: userRecord.participant_id
                    };
                    enterMainScreen();
                } else {
                    alert('NICE TRY, WRONG VIBES ❌');
                }
            } catch (error) {
                console.error('Login error:', error);
                alert('LOGIN MALFUNCTION, REALITY GLITCHING 🌀');
            }
        }

        function showReturningUserScreen() {
            showScreen('returning-user-screen');
            const userSelect = document.getElementById('user-label-select');
            userSelect.innerHTML = '<option>Select User</option>';
            USER_LABELS.forEach(label => {
                const option = document.createElement('option');
                option.value = label;
                option.textContent = label;
                userSelect.appendChild(option);
            });
        }

        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(screen => 
                screen.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            
            if (screenId !== 'main-screen') {
                stopPolling();
            }
        }

        function enterMainScreen() {
            showScreen('main-screen');
            document.getElementById('current-user-label').textContent = currentUser.userLabel;
            startPolling();
            loadLatestData();
        }

        // Polling Functions
        let pollingInterval;

        function startPolling() {
            pollingInterval = setInterval(async () => {
                await loadLatestData();
            }, 2000);
        }

        function stopPolling() {
            if (pollingInterval) {
                clearInterval(pollingInterval);
                pollingInterval = null;
            }
        }

        // App-specific Functions
        async function postIdea() {
            const ideaText = document.getElementById('idea-input').value.trim();
            const category = document.getElementById('category-select').value;
            
            if (!ideaText) {
                alert('YOUR IDEA IS TOO QUIET 🤫');
                return;
            }

            try {
                await supabase.from('wtaf_zero_admin_collaborative').insert({
                    app_id: APP_ID,
                    participant_id: currentUser.participantId,
                    action_type: 'idea',
                    participant_data: {
                        userLabel: currentUser.userLabel
                    },
                    content_data: {
                        idea: ideaText,
                        category: category,
                        timestamp: Date.now(),
                        reactions: { "🔥": 0 },
                        comments: []
                    }
                });

                document.getElementById('idea-input').value = '';
                await loadLatestData();
            } catch (error) {
                console.error('Error posting idea:', error);
                alert('IDEA LAUNCH FAILED, RETRY! 💥');
            }
        }

        async function addReaction(ideaId) {
            try {
                const { data: idea } = await supabase
                    .from('wtaf_zero_admin_collaborative')
                    .select('*')
                    .eq('id', ideaId)
                    .single();

                const reactions = idea.content_data.reactions || { "🔥": 0 };
                reactions["🔥"] = (reactions["🔥"] || 0) + 1;

                await supabase
                    .from('wtaf_zero_admin_collaborative')
                    .update({
                        content_data: {
                            ...idea.content_data,
                            reactions: reactions
                        }
                    })
                    .eq('id', ideaId);

                await loadLatestData();
            } catch (error) {
                console.error('Error adding reaction:', error);
                alert('REACTION FAILED TO IGNITE 🧊');
            }
        }

        async function addComment(ideaId) {
            const commentText = prompt('DROP YOUR THOUGHTS 💭');
            if (!commentText) return;

            try {
                const { data: idea } = await supabase
                    .from('wtaf_zero_admin_collaborative')
                    .select('*')
                    .eq('id', ideaId)
                    .single();

                const comments = idea.content_data.comments || [];
                comments.push({
                    user: currentUser.userLabel,
                    text: commentText,
                    timestamp: Date.now()
                });

                await supabase
                    .from('wtaf_zero_admin_collaborative')
                    .update({
                        content_data: {
                            ...idea.content_data,
                            comments: comments
                        }
                    })
                    .eq('id', ideaId);

                await loadLatestData();
            } catch (error) {
                console.error('Error adding comment:', error);
                alert('COMMENT VANISHED INTO THE VOID 👻');
            }
        }

        async function updateCategory(ideaId) {
            const newCategory = prompt('NEW CATEGORY (triage/high/medium/low/done/wontfix):');
            if (!newCategory || !['triage', 'high', 'medium', 'low', 'done', 'wontfix'].includes(newCategory)) {
                alert('INVALID CATEGORY DIMENSION 🌀');
                return;
            }

            try {
                const { data: idea } = await supabase
                    .from('wtaf_zero_admin_collaborative')
                    .select('*')
                    .eq('id', ideaId)
                    .single();

                await supabase
                    .from('wtaf_zero_admin_collaborative')
                    .update({
                        content_data: {
                            ...idea.content_data,
                            category: newCategory
                        }
                    })
                    .eq('id', ideaId);

                await loadLatestData();
            } catch (error) {
                console.error('Error updating category:', error);
                alert('CATEGORY SHIFT FAILED 💥');
            }
        }

        function filterByCategory(category) {
            currentFilter = category;
            loadLatestData();
        }

        function setSortMethod(method) {
            currentSort = method;
            loadLatestData();
        }

        async function loadLatestData() {
            try {
                const { data: ideas } = await supabase
                    .from('wtaf_zero_admin_collaborative')
                    .select('*')
                    .eq('app_id', APP_ID)
                    .eq('action_type', 'idea');

                if (!ideas) return;

                let filteredIdeas = ideas;
                if (currentFilter !== 'all') {
                    filteredIdeas = ideas.filter(idea => idea.content_data.category === currentFilter);
                }

                if (currentSort === 'hot') {
                    filteredIdeas.sort((a, b) => 
                        (b.content_data.reactions?.["🔥"] || 0) - (a.content_data.reactions?.["🔥"] || 0)
                    );
                } else {
                    filteredIdeas.sort((a, b) => b.content_data.timestamp - a.content_data.timestamp);
                }

                const container = document.getElementById('ideas-container');
                container.innerHTML = filteredIdeas.map(idea => `
                    <div class="idea-card">
                        <div class="category-tag" onclick="updateCategory(${idea.id})">
                            ${getCategoryEmoji(idea.content_data.category)} ${getCategoryLabel(idea.content_data.category)}
                        </div>
                        <p><strong>${idea.participant_data.userLabel}</strong> • ${new Date(idea.content_data.timestamp).toLocaleString()}</p>
                        <p>${idea.content_data.idea}</p>
                        <div class="reactions">
                            <button class="fire-button" onclick="addReaction(${idea.id})">🔥 ${idea.content_data.reactions?.["🔥"] || 0}</button>
                            <button onclick="addComment(${idea.id})">💭 Comment</button>
                        </div>
                        ${renderComments(idea.content_data.comments)}
                    </div>
                `).join('');
            } catch (error) {
                console.error('Error loading data:', error);
            }
        }

        function getCategoryEmoji(category) {
            const emojis = {
                triage: '🧩',
                high: '🔥',
                medium: '⚡',
                low: '💤',
                done: '✅',
                wontfix: '🚫'
            };
            return emojis[category] || '✨';
        }

        function getCategoryLabel(category) {
            const labels = {
                triage: 'Triage',
                high: 'Critical',
                medium: 'High',
                low: 'Medium',
                done: 'Done',
                wontfix: 'Nope'
            };
            return labels[category] || category;
        }

        function renderComments(comments = []) {
            if (!comments.length) return '';
            return `
                <div class="comments">
                    ${comments.map(comment => `
                        <p><strong>${comment.user}</strong>: ${comment.text}</p>
                    `).join('')}
                </div>
            `;
        }

        // Mouse Parallax
        document.addEventListener('mousemove', (e) => {
            document.querySelectorAll('.floating-emoji').forEach((elem) => {
                const speed = elem.getAttribute('data-value') || 2;
                const x = (e.clientX * speed) / 100;
                const y = (e.clientY * speed) / 100;
                elem.style.transform = `translateX(${x}px) translateY(${y}px)`;
            });
        });

        // Easter Egg
        console.log('🔥 Welcome to the WTAF dimension! Type wtaf() in console for secrets...');
        window.wtaf = function() {
            document.body.style.animation = 'rainbow 1s infinite';
            setTimeout(() => {
                document.body.style.animation = '';
                alert('🎉 WTAF MASTER MODE UNLOCKED! You found the secret!');
            }, 3000);
        };
    </script>
</body>
</html> 